,crawl_date,domain,url,mime_type_web_server,mime_type_tika,language,content
20393,20200515,github.com,https://github.com/adobe-accessibility/Accessible-Mega-Menu,text/html,text/html,en,"GitHub - adobe-accessibility/Accessible-Mega-Menu: A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. Skip to content Why GitHub? Features → Code review Project management Integrations Actions Packages Security Team management Hosting Customer stories → Security → Team Enterprise Explore Explore GitHub → Learn & contribute Topics Collections Trending Learning Lab Open source guides Connect with others Events Community forum GitHub Education Marketplace Pricing Plans → Compare plans Contact Sales Nonprofit → Education → In this repository All GitHub ↵ Jump to ↵ No suggested jump to results In this repository All GitHub ↵ Jump to ↵ In this repository All GitHub ↵ Jump to ↵ Sign in Sign up adobe-accessibility / Accessible-Mega-Menu Watch 48 Star 557 Fork 183 Code Issues 27 Pull requests 11 Actions Projects 0 Security Insights Dismiss Join GitHub today GitHub is home to over 50 million developers working together to host and review code, manage projects, and build software together. Sign up A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. 36 commits 2 branches 0 packages 0 releases Fetching contributors Apache-2.0 HTML CSS JavaScript HTML 70.8% CSS 27.3% JavaScript 1.9% Branch: master New pull request Find file Clone or download Clone with HTTPS Use Git or checkout with SVN using the web URL. Open in Desktop Download ZIP Downloading Want to be notified of new releases in adobe-accessibility/Accessible-Mega-Menu? Sign in Sign up Launching GitHub Desktop If nothing happens, download GitHub Desktop and try again. Go back Launching GitHub Desktop If nothing happens, download GitHub Desktop and try again. Go back Launching Xcode If nothing happens, download Xcode and try again. Go back Launching Visual Studio If nothing happens, download the GitHub extension for Visual Studio and try again. Go back Latest commit majornista Add openOnMouseover setting, and toggleButtonClass for responsive layout … To normalize behavior of top navigation links on desktop and mobile, the default behavior will be for the menu to remain closed on hover. Click should toggle the menu regardless of whether the link has a valid `href`. With `openOnMouseover: true`, hover will open the menu as before and with the menu open, clicking a top-level navigation item with a valid `href` should open the url. Add toggleButtonClass to specify a button that should toggle the menu in a responsive layout on mobile devices. Incorporate media queries for responsive layout breakpoints. 1 Latest commit d445afc May 11, 2018 Files Permalink Type Name Latest commit message Commit time Failed to load latest commit information. css Add openOnMouseover setting, and toggleButtonClass for responsive layout May 11, 2018 js Add openOnMouseover setting, and toggleButtonClass for responsive layout May 11, 2018 third-party/jquery initial commit Aug 26, 2013 LICENSE initial commit Aug 26, 2013 NOTICE initial commit Aug 26, 2013 README.md index.html Add openOnMouseover setting, and toggleButtonClass for responsive layout May 11, 2018 package.json Updating repo references Jul 8, 2016 README.md Accessible Mega Menu ========================= A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. It is modeled after the mega menu on adobe.com but has been simplified for use by others. An brief explanation of our interaction design choices can be found in a blog post at Mega menu accessibility on adobe.com. Content for the links and text within the mega menu comes from the Web Content Accessibility Guidelines (WCAG) 2.0. Keyboard Accessibility The accessible mega menu supports keyboard interaction modeled after the behavior described in the WAI-ARIA Menu or Menu bar (widget) design pattern, however we also try to respect users' general expectations for the behavior of links in a global navigation. To this end, the accessible mega menu implementation permits tab focus on each of the six top-level menu items. When one of the menu items has focus, pressing the Enter key, Spacebar or Down arrow will open the submenu panel, and pressing the Left or Right arrow key will shift focus to the adjacent menu item. Links within the submenu panels are included in the tab order when the panel is open. They can also be navigated with the arrow keys or by typing the first character in the link name, which speeds up keyboard navigation considerably. Pressing the Escape key closes the submenu and restores focus to the parent menu item. Screen Reader Accessibility The accessible mega menu models its use of WAI-ARIA Roles, States, and Properties after those described in the WAI-ARIA Menu or Menu bar (widget) design pattern with some notable exceptions, so that it behaves better with screen reader user expectations for global navigation. We don't use role=""menu"" for the menu container and role=""menuitem"" for each of the links therein, because if we do, assistive technology will no longer interpret the links as links, but instead, as menu items, and the links in our global navigation will no longer show up when a screen reader user executes a shortcut command to bring up a list of links in the page. We also want to maintain the semantic structure of the submenu panels in our mega menu; our links are organized into lists and separated by headings. Omitting role=""menu"" and role=""menuitem"" for the global navigation seems the safer way to go. Usage HTML The HTML structure for the mega menu is a nav element, or any other container element, containing a list. Each list item contains a link which is followed by a div or any other container element which will serve as the pop up panel. The panel can contain any html content; in the following example, each panel contains three lists of links. You can explicitly define groups within the panel, between which a user can navigate quickly using the left and right arrow keys; in the following example, the CSS class .sub-nav-group identifies a navigable group.     <nav>         <ul class=""nav-menu"">             <li class=""nav-item"">                 <a href=""?movie"">Movies</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=0"">Action &amp; Adventure</a></li>                         <li><a href=""?movie&genre=2"">Children &amp; Family</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=7"">Dramas</a></li>                         <li><a href=""?movie&genre=9"">Foreign</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=14"">Musicals</a></li>                         <li><a href=""?movie&genre=15"">Romance</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>             <li class=""nav-item"">                 <a href=""?tv"">TV Shows</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=20"">Classic TV</a></li>                         <li><a href=""?tv&genre=21"">Crime TV</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=27"">Reality TV</a></li>                         <li><a href=""?tv&genre=30"">TV Action</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=33"">TV Dramas</a></li>                         <li><a href=""?tv&genre=34"">TV Horror</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>         </ul>     </nav> By default, accessibleMegaMenu uses the the following CSS classes to define the top-level navigation items, panels, groups within the panels, and the hover, focus, and open states. It also defines a prefix for unique id strings, which are required to indicate the relationship of a top-level navigation item to the panel it controls.     defaults = {         /* unique ID's are required to indicate aria-owns, aria-controls and aria-labelledby */         uuidPrefix: ""accessible-megamenu"",                  /* default css class used to define the megamenu styling */         menuClass: ""accessible-megamenu"",                  /* default css class for a top-level navigation item in the megamenu */         topNavItemClass: ""accessible-megamenu-top-nav-item"",                  /* default css class for a megamenu panel */         panelClass: ""accessible-megamenu-panel"",                  /* default css class for a group of items within a megamenu panel */         panelGroupClass: ""accessible-megamenu-panel-group"",                  /* default css class for the hover state */         hoverClass: ""hover"",                  /* default css class for the focus state */         focusClass: ""focus"",                  /* default css class for the open state */         openClass: ""open""      } You can optionally override the defaults to use the CSS classes you may have already defined for your mega menu. JavaScript Be sure to include jQuery and the jquery-accessibleMegaMenu.js plugin script.     <script src=""//code.jquery.com/jquery-1.10.1.min.js""></script>     <script src=""js/jquery-accessibleMegaMenu.js""></script> The following initializes the first nav element in the document as an accessibleMegaMenu, with optional CSS class overrides.     $(""nav:first"").accessibleMegaMenu({         /* prefix for generated unique id attributes, which are required             to indicate aria-owns, aria-controls and aria-labelledby */         uuidPrefix: ""accessible-megamenu"",                  /* css class used to define the megamenu styling */         menuClass: ""nav-menu"",                  /* css class for a top-level navigation item in the megamenu */         topNavItemClass: ""nav-item"",                  /* css class for a megamenu panel */         panelClass: ""sub-nav"",                  /* css class for a group of items within a megamenu panel */         panelGroupClass: ""sub-nav-group"",                  /* css class for the hover state */         hoverClass: ""hover"",                  /* css class for the focus state */         focusClass: ""focus"",                  /* css class for the open state */         openClass: ""open""     }); CSS AccessibleMegaMenu handles the showing and hiding of panels by adding or removing a CSS class. No inline styles are added to hide elements or create animation between states. Following is some rudimentary CSS for our example which enables the showing/hiding of and the layout of lists panels in the mega menu.     /* mega menu list */     .nav-menu {         display: block;         position: relative;         list-style: none;         margin: 0;         padding: 0;         z-index: 15;     }     /* a top level navigation item in the mega menu */     .nav-item {         list-style: none;         display: inline-block;         padding: 0;         margin: 0;     }     /* first descendant link within a top level navigation item */     .nav-item > a {         position: relative;         display: inline-block;         padding: 0.5em 1em;         margin: 0 0 -1px 0;         border: 1px solid transparent;     }     /* focus/open states of first descendant link within a top level         navigation item */     .nav-item > a:focus,     .nav-item > a.open {         border: 1px solid #dedede;     }     /* open state of first descendant link within a top level         navigation item */     .nav-item > a.open {         background-color: #fff;         border-bottom: none;         z-index: 1;     }     /* sub-navigation panel */     .sub-nav {         position: absolute;         display: none;         top: 2.2em;         margin-top: -1px;         padding: 0.5em 1em;         border: 1px solid #dedede;         background-color: #fff;     }     /* sub-navigation panel open state */     .sub-nav.open {         display: block;     }     /* list of items within sub-navigation panel */     .sub-nav ul {         display: inline-block;         vertical-align: top;         margin: 0 1em 0 0;         padding: 0;     }     /* list item within sub-navigation panel */     .sub-nav li {         display: block;         list-style-type: none;         margin: 0;         padding: 0;     }   Putting it all together, here is the completed example:     <!doctype html>     <html lang=""en"">     <head>     <meta charset=""UTF-8"">     <title>Simple Accessible Mega Menu Example</title>     <style>         /* Rudimentary mega menu CSS for demonstration */             /* mega menu list */         .nav-menu {             display: block;             position: relative;             list-style: none;             margin: 0;             padding: 0;             z-index: 15;         }         /* a top level navigation item in the mega menu */         .nav-item {             list-style: none;             display: inline-block;             padding: 0;             margin: 0;         }         /* first descendant link within a top level navigation item */         .nav-item > a {             position: relative;             display: inline-block;             padding: 0.5em 1em;             margin: 0 0 -1px 0;             border: 1px solid transparent;         }         /* focus/open states of first descendant link within a top level             navigation item */         .nav-item > a:focus,         .nav-item > a.open {             border: 1px solid #dedede;         }         /* open state of first descendant link within a top level             navigation item */         .nav-item > a.open {             background-color: #fff;             border-bottom: none;             z-index: 1;         }         /* sub-navigation panel */         .sub-nav {             position: absolute;             display: none;             top: 2.2em;             margin-top: -1px;             padding: 0.5em 1em;             border: 1px solid #dedede;             background-color: #fff;         }         /* sub-navigation panel open state */         .sub-nav.open {             display: block;         }         /* list of items within sub-navigation panel */         .sub-nav ul {             display: inline-block;             vertical-align: top;             margin: 0 1em 0 0;             padding: 0;         }         /* list item within sub-navigation panel */         .sub-nav li {             display: block;             list-style-type: none;             margin: 0;             padding: 0;         }          </style>     </head>     <body>     <nav>         <ul class=""nav-menu"">             <li class=""nav-item"">                 <a href=""?movie"">Movies</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=0"">Action &amp; Adventure</a></li>                         <li><a href=""?movie&genre=2"">Children &amp; Family</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=7"">Dramas</a></li>                         <li><a href=""?movie&genre=9"">Foreign</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=14"">Musicals</a></li>                         <li><a href=""?movie&genre=15"">Romance</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>             <li class=""nav-item"">                 <a href=""?tv"">TV Shows</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=20"">Classic TV</a></li>                         <li><a href=""?tv&genre=21"">Crime TV</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=27"">Reality TV</a></li>                         <li><a href=""?tv&genre=30"">TV Action</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=33"">TV Dramas</a></li>                         <li><a href=""?tv&genre=34"">TV Horror</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>         </ul>     </nav>          <!-- include jquery -->     <script src=""//code.jquery.com/jquery-1.10.1.min.js""></script>     <!-- include the jquery-accessibleMegaMenu plugin script -->     <script src=""js/jquery-accessibleMegaMenu.js""></script>     <!-- initialize a selector as an accessibleMegaMenu -->     <script>         $(""nav:first"").accessibleMegaMenu({             /* prefix for generated unique id attributes, which are required                 to indicate aria-owns, aria-controls and aria-labelledby */             uuidPrefix: ""accessible-megamenu"",                          /* css class used to define the megamenu styling */             menuClass: ""nav-menu"",                          /* css class for a top-level navigation item in the megamenu */             topNavItemClass: ""nav-item"",                          /* css class for a megamenu panel */             panelClass: ""sub-nav"",                          /* css class for a group of items within a megamenu panel */             panelGroupClass: ""sub-nav-group"",                          /* css class for the hover state */             hoverClass: ""hover"",                          /* css class for the focus state */             focusClass: ""focus"",                          /* css class for the open state */             openClass: ""open""         });     </script>     </body>     </html> © 2020 GitHub, Inc. Terms Privacy Security Status Help Contact GitHub Pricing API Training Blog About You can’t perform that action at this time. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."
23375,20200515,github.com,https://github.com/bugsnag/bugsnag-js,text/html,text/html,en,"GitHub - bugsnag/bugsnag-js: Javascript error handling tool for Bugsnag. Monitor and report JavaScript bugs & errors. Skip to content Why GitHub? Features → Code review Project management Integrations Actions Packages Security Team management Hosting Customer stories → Security → Team Enterprise Explore Explore GitHub → Learn & contribute Topics Collections Trending Learning Lab Open source guides Connect with others Events Community forum GitHub Education Marketplace Pricing Plans → Compare plans Contact Sales Nonprofit → Education → In this repository All GitHub ↵ Jump to ↵ No suggested jump to results In this repository All GitHub ↵ Jump to ↵ In this repository All GitHub ↵ Jump to ↵ Sign in Sign up bugsnag / bugsnag-js Watch 31 Star 554 Fork 168 Code Issues 21 Pull requests 6 Actions Projects 0 Security Insights Dismiss Join GitHub today GitHub is home to over 50 million developers working together to host and review code, manage projects, and build software together. Sign up Javascript error handling tool for Bugsnag. Monitor and report JavaScript bugs & errors. https://docs.bugsnag.com/platforms/br… bugsnag javascript monitoring error-reporting debug error-handling exceptions debugging-tool bug crash-reporting error-monitoring bugs bugsnag-notifier bugsnag-js exception-reporting exception-handling crash-reporting-tool error-stack-trace javascript-errors application-monitoring-software 1,198 commits 65 branches 0 packages 172 releases Fetching contributors JavaScript TypeScript Gherkin HTML Ruby Dockerfile Other JavaScript 66.8% TypeScript 12.9% Gherkin 12.3% HTML 5.9% Ruby 1.3% Dockerfile 0.4% Other 0.4% Branch: next New pull request Find file Clone or download Clone with HTTPS Use Git or checkout with SVN using the web URL. Open in Desktop Download ZIP Downloading Want to be notified of new releases in bugsnag/bugsnag-js? Sign in Sign up Launching GitHub Desktop If nothing happens, download GitHub Desktop and try again. Go back Launching GitHub Desktop If nothing happens, download GitHub Desktop and try again. Go back Launching Xcode If nothing happens, download Xcode and try again. Go back Launching Visual Studio If nothing happens, download the GitHub extension for Visual Studio and try again. Go back Latest commit bengourley Merge pull request #839 from bugsnag/bengourley/plugin-lazy-framework… … …-ref plugins: Support obtaining React/Vue reference after Bugsnag.start() Latest commit 5410160 May 14, 2020 Files Permalink Type Name Latest commit message Commit time Failed to load latest commit information. .buildkite ci(docker): update docker compose plugin and add verbose logging Apr 1, 2020 bin refactor: Stop vendoring @bugsnag/core types May 12, 2020 dockerfiles examples Update examples/ts/plain-node/README.md Apr 28, 2020 packages Merge branch 'next' into bengourley/plugin-lazy-framework-ref May 14, 2020 test Merge branch 'next' into v7 Apr 9, 2020 .dockerignore Switch CI to buildkite (#476) Feb 7, 2019 .editorconfig test(plugin-server-session): convert to jest/TypeScript Feb 13, 2020 .eslintignore test(lint): Migrate lint tooling to eslint Nov 12, 2019 .eslintrc.js test(plugin-react): convert to jest/TypeScript Mar 24, 2020 .gitignore Merge branch 'next' into quick-local-tests Aug 2, 2019 .travis.yml Lerna-improvements: Ensure travis runs use same concurrency limits as… Jan 2, 2020 CHANGELOG.md chore: Document plugin/type changes May 13, 2020 CONTRIBUTING.md docs: Add more detail to release instructions Dec 17, 2019 README.md Updated README.md title for clarity Jun 19, 2019 TESTING.md test(lint): Migrate lint tooling to eslint Nov 12, 2019 UPGRADING.md chore: Typos and tweaks May 13, 2020 babel.config.js test(plugin-react): convert to jest/TypeScript Mar 24, 2020 dangerfile.js ci: Tweak travis steps for danger/bundle size Jul 12, 2019 docker-compose.yml Retry on failure Mar 30, 2020 jest.config.js Merge branch 'next' into jest-plugin-vue May 5, 2020 lerna.json v7.0.2 May 12, 2020 package-lock.json feat: Upgrade TypeScript to 3.9 May 13, 2020 package.json feat: Upgrade TypeScript to 3.9 May 13, 2020 tsconfig.json README.md Bugsnag error monitoring & reporting for JavaScript Automatically detect JavaScript errors in the browser, Node.js and Expo, with plugins for React, Vue, Angular, Express, Restify and Koa. Get cross-platform error detection for handled and unhandled errors with real-time error alerts and detailed diagnostic reports. Learn more about JavaScript error reporting from Bugsnag. This is a monorepo (managed with Lerna) containing our universal error reporting client @bugsnag/js and our Expo client @bugsnag/expo, along with: the core Bugsnag libraries for reporting errors (@bugsnag/core) plugins for supporting various frameworks (e.g. @bugsnag/plugin-react) plugins for internal functionality (e.g. @bugsnag/plugin-simple-throttle) Etc. See packages for a full list of contents. Getting started Create a Bugsnag account Complete the instructions in the integration guide Report handled exceptions using bugsnagClient.notify() Customize your integration using the configuration options Integrating with frameworks Use the following plugins and guides to integrate Bugsnag with various frameworks. Browser Framework Bugsnag plugin Documentation Vue @bugsnag/plugin-vue Vue docs React @bugsnag/plugin-react React docs Angular @bugsnag/plugin-angular Angular docs Server Framework Bugsnag plugin Documentation Koa @bugsnag/plugin-koa Koa docs Express @bugsnag/plugin-express Express docs Restify @bugsnag/plugin-restify Restify docs Mobile Framework Bugsnag notifier Documentation Expo @bugsnag/expo Expo docs React Native bugsnag-react-native (lives in a separate repo) React Native docs Support Check out the FAQ and configuration options Search open and closed issues for similar problems Report a bug or request a feature Contributing Most updates to this repo will be made by Bugsnag employees. We are unable to accommodate significant external PRs such as features additions or any large refactoring, however minor fixes are welcome. See contributing for more information. Development quick start # Clone the repository git clone git@github.com:bugsnag/bugsnag-js.git cd bugsnag-js # Install top-level dependencies npm i # Bootstrap all of the packages npm run bootstrap # Build the standalone notifiers and plugins npm run build # Run the unit tests npm run test:unit # Run the linter npm run test:lint # Run the typescript compatibility tests npm run test:types See contributing for more information. License All packages in this repository are released under the MIT License. © 2020 GitHub, Inc. Terms Privacy Security Status Help Contact GitHub Pricing API Training Blog About You can’t perform that action at this time. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."
23757,20200515,github.com,https://github.com/,text/html,text/html,en,"The world’s leading software development platform · GitHub Skip to content GitHub no longer supports this web browser. Learn more about the browsers we support. Sign up Why GitHub? Features → Code review Project management Integrations Actions Packages Security Team management Hosting Customer stories → Security → Team Enterprise Explore Explore GitHub → Learn & contribute Topics Collections Trending Learning Lab Open source guides Connect with others Events Community forum GitHub Education Marketplace Pricing Plans → Compare plans Contact Sales Nonprofit → Education → Search All GitHub ↵ Jump to ↵ No suggested jump to results Search All GitHub ↵ Jump to ↵ Search All GitHub ↵ Jump to ↵ Sign in Sign up Built for developers GitHub is a development platform inspired by the way you work. From open source to business, you can host and review code, manage projects, and build software alongside 50 million developers. Username Email Password Make sure it's at least 15 characters OR at least 8 characters including a number and a lowercase letter. Learn more. Sign up for GitHub By clicking “Sign up for GitHub”, you agree to our Terms of Service and Privacy Statement. We’ll occasionally send you account related emails. Sign up for GitHub Get started with GitHub Enterprise Take collaboration to the next level with security and administrative features built for teams. Enterprise Deploy to your environment or the cloud. Start a free trial Talk to us Need help? Contact Sales → NEW GitHub is now free for teams GitHub Free gives teams private repositories with unlimited collaborators at no cost. GitHub Team is now reduced to $4 per user/month. Try GitHub Free More than 2.9 million businesses and organizations use GitHub GitHub for teams A better way to work together GitHub brings teams together to work through problems, move ideas forward, and learn from each other along the way. Sign up your team → Write better code Collaboration makes perfect. The conversations and code reviews that happen in pull requests help your team share the weight of your work and improve the software you build. Learn about code review. Manage your chaos Take a deep breath. On GitHub, project management happens in issues and project boards, right alongside your code. All you have to do is mention a teammate to get them involved. Learn about project management. Find the right tools Browse and buy apps from GitHub Marketplace with your GitHub account. Find the tools you like or discover new favorites—then start using them in minutes. Learn about integrations. See how the world's leading companies use GitHub Enterprise. ↗ MGM Resorts International Hospitality Read more → ↗ Nationwide Insurance Read more → ↗ SAP Business Software Read more → ↗ Spotify Technology / Streaming Read more → Security and administration Your business needs, met From flexible hosting to granular access controls, we’ve got your security requirements covered. How GitHub Enterprise works → Learn how GitHub Enterprise works → Code security Prevent problems before they happen. Protected branches, signed commits, and required status checks protect your work and help you maintain a high standard for your code. Access controlled Encourage teams to work together while limiting access to those who need it with granular permissions and authentication through SAML/SSO and LDAP. Hosted where you need it Securely and reliably host your work on GitHub using GitHub Enterprise Cloud. Or deploy GitHub Enterprise Server in your own data centers or in a private cloud using Amazon Web Services, Azure, or Google Cloud Platform. Compare plans → Contact Sales for more information → Integrations Build on GitHub Customize your process with GitHub apps and an intuitive API. Integrate the tools you already use or discover new favorites to create a happier, more efficient way of working. Learn about integrations → Sometimes, there’s more than one tool for the job. Why not try something new? Browse GitHub Marketplace → Community Welcome home, developers GitHub is home to the world’s largest community of developers and their projects... ↗ Russell Keith-Magee Russell Keith-Magee created BeeWare to fill a gap in his own process. Today, BeeWare is the go-to project for supporting Python on every platform. Read more → ↗ Kris Nova Kris Nova quickly developed a passion for open source software. Now she gets to work on open source tooling at her day job, which includes maintaining Kubernetes Operations (kops). Read more → ↗ Evan You In 2013, Evan You founded Vue, a Javascript framework funded by the community on Patreon. In 2016, Vue reached 2,000,000 downloads. Read more → ↗ Jess Frazelle Jess Frazelle works on Kubernetes full-time. Previously she maintained Docker, a software containerization platform used by thousands of teams. Read more → ...whether you’re making your first commit or sending a Rover to Mars, there’s room for you here, too. 100M* repositories worldwide GitHub’s users create and maintain influential technologies alongside the world’s largest open source community. 50M* developers worldwide Developers use GitHub for personal projects, from experimenting with new programming languages to hosting their life’s work. 2.9M* businesses & organizations worldwide Businesses of all sizes use GitHub to support their development process and to securely build software. * As of August 2019 Get started for free — join the millions of developers already using GitHub to share their code, work together, and build amazing things. Username Email Password Sign up for GitHub By clicking “Sign up for GitHub”, you agree to our terms of service and privacy statement. We’ll occasionally send you account related emails. Product Features Security Team Enterprise Customer stories Pricing Resources Platform Developer API Partners Atom Electron GitHub Desktop Support Help Community Forum Professional Services Learning Lab Status Contact GitHub Company About Blog Careers Press Social Impact Shop © 2020 GitHub, Inc. Terms Privacy You can’t perform that action at this time. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."
48853,20200522,github.com,https://github.com/adobe-accessibility/Accessible-Mega-Menu,text/html,text/html,en,"GitHub - adobe-accessibility/Accessible-Mega-Menu: A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. Skip to content Why GitHub? Features → Code review Project management Integrations Actions Packages Security Team management Hosting Customer stories → Security → Team Enterprise Explore Explore GitHub → Learn & contribute Topics Collections Trending Learning Lab Open source guides Connect with others Events Community forum GitHub Education Marketplace Pricing Plans → Compare plans Contact Sales Nonprofit → Education → In this repository All GitHub ↵ Jump to ↵ No suggested jump to results In this repository All GitHub ↵ Jump to ↵ In this repository All GitHub ↵ Jump to ↵ Sign in Sign up adobe-accessibility / Accessible-Mega-Menu Watch 48 Star 555 Fork 183 Code Issues 27 Pull requests 11 Actions Projects 0 Security Insights Dismiss Join GitHub today GitHub is home to over 50 million developers working together to host and review code, manage projects, and build software together. Sign up A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. 36 commits 2 branches 0 packages 0 releases Fetching contributors Apache-2.0 HTML CSS JavaScript HTML 70.8% CSS 27.3% JavaScript 1.9% Branch: master New pull request Find file Clone or download Clone with HTTPS Use Git or checkout with SVN using the web URL. Open in Desktop Download ZIP Downloading Want to be notified of new releases in adobe-accessibility/Accessible-Mega-Menu? Sign in Sign up Launching GitHub Desktop If nothing happens, download GitHub Desktop and try again. Go back Launching GitHub Desktop If nothing happens, download GitHub Desktop and try again. Go back Launching Xcode If nothing happens, download Xcode and try again. Go back Launching Visual Studio If nothing happens, download the GitHub extension for Visual Studio and try again. Go back Latest commit majornista Add openOnMouseover setting, and toggleButtonClass for responsive layout … To normalize behavior of top navigation links on desktop and mobile, the default behavior will be for the menu to remain closed on hover. Click should toggle the menu regardless of whether the link has a valid `href`. With `openOnMouseover: true`, hover will open the menu as before and with the menu open, clicking a top-level navigation item with a valid `href` should open the url. Add toggleButtonClass to specify a button that should toggle the menu in a responsive layout on mobile devices. Incorporate media queries for responsive layout breakpoints. 1 Latest commit d445afc May 11, 2018 Files Permalink Type Name Latest commit message Commit time Failed to load latest commit information. css Add openOnMouseover setting, and toggleButtonClass for responsive layout May 11, 2018 js Add openOnMouseover setting, and toggleButtonClass for responsive layout May 11, 2018 third-party/jquery initial commit Aug 26, 2013 LICENSE initial commit Aug 26, 2013 NOTICE initial commit Aug 26, 2013 README.md initial commit Aug 26, 2013 index.html Add openOnMouseover setting, and toggleButtonClass for responsive layout May 11, 2018 package.json Updating repo references Jul 8, 2016 README.md Accessible Mega Menu ========================= A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. It is modeled after the mega menu on adobe.com but has been simplified for use by others. An brief explanation of our interaction design choices can be found in a blog post at Mega menu accessibility on adobe.com. Content for the links and text within the mega menu comes from the Web Content Accessibility Guidelines (WCAG) 2.0. Keyboard Accessibility The accessible mega menu supports keyboard interaction modeled after the behavior described in the WAI-ARIA Menu or Menu bar (widget) design pattern, however we also try to respect users' general expectations for the behavior of links in a global navigation. To this end, the accessible mega menu implementation permits tab focus on each of the six top-level menu items. When one of the menu items has focus, pressing the Enter key, Spacebar or Down arrow will open the submenu panel, and pressing the Left or Right arrow key will shift focus to the adjacent menu item. Links within the submenu panels are included in the tab order when the panel is open. They can also be navigated with the arrow keys or by typing the first character in the link name, which speeds up keyboard navigation considerably. Pressing the Escape key closes the submenu and restores focus to the parent menu item. Screen Reader Accessibility The accessible mega menu models its use of WAI-ARIA Roles, States, and Properties after those described in the WAI-ARIA Menu or Menu bar (widget) design pattern with some notable exceptions, so that it behaves better with screen reader user expectations for global navigation. We don't use role=""menu"" for the menu container and role=""menuitem"" for each of the links therein, because if we do, assistive technology will no longer interpret the links as links, but instead, as menu items, and the links in our global navigation will no longer show up when a screen reader user executes a shortcut command to bring up a list of links in the page. We also want to maintain the semantic structure of the submenu panels in our mega menu; our links are organized into lists and separated by headings. Omitting role=""menu"" and role=""menuitem"" for the global navigation seems the safer way to go. Usage HTML The HTML structure for the mega menu is a nav element, or any other container element, containing a list. Each list item contains a link which is followed by a div or any other container element which will serve as the pop up panel. The panel can contain any html content; in the following example, each panel contains three lists of links. You can explicitly define groups within the panel, between which a user can navigate quickly using the left and right arrow keys; in the following example, the CSS class .sub-nav-group identifies a navigable group.     <nav>         <ul class=""nav-menu"">             <li class=""nav-item"">                 <a href=""?movie"">Movies</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=0"">Action &amp; Adventure</a></li>                         <li><a href=""?movie&genre=2"">Children &amp; Family</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=7"">Dramas</a></li>                         <li><a href=""?movie&genre=9"">Foreign</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=14"">Musicals</a></li>                         <li><a href=""?movie&genre=15"">Romance</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>             <li class=""nav-item"">                 <a href=""?tv"">TV Shows</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=20"">Classic TV</a></li>                         <li><a href=""?tv&genre=21"">Crime TV</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=27"">Reality TV</a></li>                         <li><a href=""?tv&genre=30"">TV Action</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=33"">TV Dramas</a></li>                         <li><a href=""?tv&genre=34"">TV Horror</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>         </ul>     </nav> By default, accessibleMegaMenu uses the the following CSS classes to define the top-level navigation items, panels, groups within the panels, and the hover, focus, and open states. It also defines a prefix for unique id strings, which are required to indicate the relationship of a top-level navigation item to the panel it controls.     defaults = {         /* unique ID's are required to indicate aria-owns, aria-controls and aria-labelledby */         uuidPrefix: ""accessible-megamenu"",                  /* default css class used to define the megamenu styling */         menuClass: ""accessible-megamenu"",                  /* default css class for a top-level navigation item in the megamenu */         topNavItemClass: ""accessible-megamenu-top-nav-item"",                  /* default css class for a megamenu panel */         panelClass: ""accessible-megamenu-panel"",                  /* default css class for a group of items within a megamenu panel */         panelGroupClass: ""accessible-megamenu-panel-group"",                  /* default css class for the hover state */         hoverClass: ""hover"",                  /* default css class for the focus state */         focusClass: ""focus"",                  /* default css class for the open state */         openClass: ""open""      } You can optionally override the defaults to use the CSS classes you may have already defined for your mega menu. JavaScript Be sure to include jQuery and the jquery-accessibleMegaMenu.js plugin script.     <script src=""//code.jquery.com/jquery-1.10.1.min.js""></script>     <script src=""js/jquery-accessibleMegaMenu.js""></script> The following initializes the first nav element in the document as an accessibleMegaMenu, with optional CSS class overrides.     $(""nav:first"").accessibleMegaMenu({         /* prefix for generated unique id attributes, which are required             to indicate aria-owns, aria-controls and aria-labelledby */         uuidPrefix: ""accessible-megamenu"",                  /* css class used to define the megamenu styling */         menuClass: ""nav-menu"",                  /* css class for a top-level navigation item in the megamenu */         topNavItemClass: ""nav-item"",                  /* css class for a megamenu panel */         panelClass: ""sub-nav"",                  /* css class for a group of items within a megamenu panel */         panelGroupClass: ""sub-nav-group"",                  /* css class for the hover state */         hoverClass: ""hover"",                  /* css class for the focus state */         focusClass: ""focus"",                  /* css class for the open state */         openClass: ""open""     }); CSS AccessibleMegaMenu handles the showing and hiding of panels by adding or removing a CSS class. No inline styles are added to hide elements or create animation between states. Following is some rudimentary CSS for our example which enables the showing/hiding of and the layout of lists panels in the mega menu.     /* mega menu list */     .nav-menu {         display: block;         position: relative;         list-style: none;         margin: 0;         padding: 0;         z-index: 15;     }     /* a top level navigation item in the mega menu */     .nav-item {         list-style: none;         display: inline-block;         padding: 0;         margin: 0;     }     /* first descendant link within a top level navigation item */     .nav-item > a {         position: relative;         display: inline-block;         padding: 0.5em 1em;         margin: 0 0 -1px 0;         border: 1px solid transparent;     }     /* focus/open states of first descendant link within a top level         navigation item */     .nav-item > a:focus,     .nav-item > a.open {         border: 1px solid #dedede;     }     /* open state of first descendant link within a top level         navigation item */     .nav-item > a.open {         background-color: #fff;         border-bottom: none;         z-index: 1;     }     /* sub-navigation panel */     .sub-nav {         position: absolute;         display: none;         top: 2.2em;         margin-top: -1px;         padding: 0.5em 1em;         border: 1px solid #dedede;         background-color: #fff;     }     /* sub-navigation panel open state */     .sub-nav.open {         display: block;     }     /* list of items within sub-navigation panel */     .sub-nav ul {         display: inline-block;         vertical-align: top;         margin: 0 1em 0 0;         padding: 0;     }     /* list item within sub-navigation panel */     .sub-nav li {         display: block;         list-style-type: none;         margin: 0;         padding: 0;     }   Putting it all together, here is the completed example:     <!doctype html>     <html lang=""en"">     <head>     <meta charset=""UTF-8"">     <title>Simple Accessible Mega Menu Example</title>     <style>         /* Rudimentary mega menu CSS for demonstration */             /* mega menu list */         .nav-menu {             display: block;             position: relative;             list-style: none;             margin: 0;             padding: 0;             z-index: 15;         }         /* a top level navigation item in the mega menu */         .nav-item {             list-style: none;             display: inline-block;             padding: 0;             margin: 0;         }         /* first descendant link within a top level navigation item */         .nav-item > a {             position: relative;             display: inline-block;             padding: 0.5em 1em;             margin: 0 0 -1px 0;             border: 1px solid transparent;         }         /* focus/open states of first descendant link within a top level             navigation item */         .nav-item > a:focus,         .nav-item > a.open {             border: 1px solid #dedede;         }         /* open state of first descendant link within a top level             navigation item */         .nav-item > a.open {             background-color: #fff;             border-bottom: none;             z-index: 1;         }         /* sub-navigation panel */         .sub-nav {             position: absolute;             display: none;             top: 2.2em;             margin-top: -1px;             padding: 0.5em 1em;             border: 1px solid #dedede;             background-color: #fff;         }         /* sub-navigation panel open state */         .sub-nav.open {             display: block;         }         /* list of items within sub-navigation panel */         .sub-nav ul {             display: inline-block;             vertical-align: top;             margin: 0 1em 0 0;             padding: 0;         }         /* list item within sub-navigation panel */         .sub-nav li {             display: block;             list-style-type: none;             margin: 0;             padding: 0;         }          </style>     </head>     <body>     <nav>         <ul class=""nav-menu"">             <li class=""nav-item"">                 <a href=""?movie"">Movies</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=0"">Action &amp; Adventure</a></li>                         <li><a href=""?movie&genre=2"">Children &amp; Family</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=7"">Dramas</a></li>                         <li><a href=""?movie&genre=9"">Foreign</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=14"">Musicals</a></li>                         <li><a href=""?movie&genre=15"">Romance</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>             <li class=""nav-item"">                 <a href=""?tv"">TV Shows</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=20"">Classic TV</a></li>                         <li><a href=""?tv&genre=21"">Crime TV</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=27"">Reality TV</a></li>                         <li><a href=""?tv&genre=30"">TV Action</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=33"">TV Dramas</a></li>                         <li><a href=""?tv&genre=34"">TV Horror</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>         </ul>     </nav>          <!-- include jquery -->     <script src=""//code.jquery.com/jquery-1.10.1.min.js""></script>     <!-- include the jquery-accessibleMegaMenu plugin script -->     <script src=""js/jquery-accessibleMegaMenu.js""></script>     <!-- initialize a selector as an accessibleMegaMenu -->     <script>         $(""nav:first"").accessibleMegaMenu({             /* prefix for generated unique id attributes, which are required                 to indicate aria-owns, aria-controls and aria-labelledby */             uuidPrefix: ""accessible-megamenu"",                          /* css class used to define the megamenu styling */             menuClass: ""nav-menu"",                          /* css class for a top-level navigation item in the megamenu */             topNavItemClass: ""nav-item"",                          /* css class for a megamenu panel */             panelClass: ""sub-nav"",                          /* css class for a group of items within a megamenu panel */             panelGroupClass: ""sub-nav-group"",                          /* css class for the hover state */             hoverClass: ""hover"",                          /* css class for the focus state */             focusClass: ""focus"",                          /* css class for the open state */             openClass: ""open""         });     </script>     </body>     </html> © 2020 GitHub, Inc. Terms Privacy Security Status Help Contact GitHub Pricing API Training Blog About You can’t perform that action at this time. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."
52370,20200529,github.com,https://github.com/adobe-accessibility/Accessible-Mega-Menu,text/html,text/html,en,"GitHub - adobe-accessibility/Accessible-Mega-Menu: A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. Skip to content Why GitHub? Features → Code review Project management Integrations Actions Packages Security Team management Hosting Customer stories → Security → Team Enterprise Explore Explore GitHub → Learn & contribute Topics Collections Trending Learning Lab Open source guides Connect with others Events Community forum GitHub Education Marketplace Pricing Plans → Compare plans Contact Sales Nonprofit → Education → In this repository All GitHub ↵ Jump to ↵ No suggested jump to results In this repository All GitHub ↵ Jump to ↵ In this repository All GitHub ↵ Jump to ↵ Sign in Sign up adobe-accessibility / Accessible-Mega-Menu Watch 48 Star 556 Fork 183 Code Issues 27 Pull requests 11 Actions Projects 0 Security Insights Dismiss Join GitHub today GitHub is home to over 50 million developers working together to host and review code, manage projects, and build software together. Sign up A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. 36 commits 2 branches 0 packages 0 releases Fetching contributors Apache-2.0 HTML CSS JavaScript HTML 70.8% CSS 27.3% JavaScript 1.9% Branch: master New pull request Find file Clone or download Clone with HTTPS Use Git or checkout with SVN using the web URL. Open in Desktop Download ZIP Downloading Want to be notified of new releases in adobe-accessibility/Accessible-Mega-Menu? Sign in Sign up Launching GitHub Desktop If nothing happens, download GitHub Desktop and try again. Go back Launching GitHub Desktop If nothing happens, download GitHub Desktop and try again. Go back Launching Xcode If nothing happens, download Xcode and try again. Go back Launching Visual Studio If nothing happens, download the GitHub extension for Visual Studio and try again. Go back Latest commit majornista Add openOnMouseover setting, and toggleButtonClass for responsive layout … To normalize behavior of top navigation links on desktop and mobile, the default behavior will be for the menu to remain closed on hover. Click should toggle the menu regardless of whether the link has a valid `href`. With `openOnMouseover: true`, hover will open the menu as before and with the menu open, clicking a top-level navigation item with a valid `href` should open the url. Add toggleButtonClass to specify a button that should toggle the menu in a responsive layout on mobile devices. Incorporate media queries for responsive layout breakpoints. 1 Latest commit d445afc May 11, 2018 Files Permalink Type Name Latest commit message Commit time Failed to load latest commit information. css Add openOnMouseover setting, and toggleButtonClass for responsive layout May 11, 2018 js Add openOnMouseover setting, and toggleButtonClass for responsive layout May 11, 2018 third-party/jquery initial commit Aug 26, 2013 LICENSE initial commit Aug 26, 2013 NOTICE initial commit Aug 26, 2013 README.md initial commit Aug 26, 2013 index.html Add openOnMouseover setting, and toggleButtonClass for responsive layout May 11, 2018 package.json Updating repo references Jul 8, 2016 README.md Accessible Mega Menu ========================= A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. It is modeled after the mega menu on adobe.com but has been simplified for use by others. An brief explanation of our interaction design choices can be found in a blog post at Mega menu accessibility on adobe.com. Content for the links and text within the mega menu comes from the Web Content Accessibility Guidelines (WCAG) 2.0. Keyboard Accessibility The accessible mega menu supports keyboard interaction modeled after the behavior described in the WAI-ARIA Menu or Menu bar (widget) design pattern, however we also try to respect users' general expectations for the behavior of links in a global navigation. To this end, the accessible mega menu implementation permits tab focus on each of the six top-level menu items. When one of the menu items has focus, pressing the Enter key, Spacebar or Down arrow will open the submenu panel, and pressing the Left or Right arrow key will shift focus to the adjacent menu item. Links within the submenu panels are included in the tab order when the panel is open. They can also be navigated with the arrow keys or by typing the first character in the link name, which speeds up keyboard navigation considerably. Pressing the Escape key closes the submenu and restores focus to the parent menu item. Screen Reader Accessibility The accessible mega menu models its use of WAI-ARIA Roles, States, and Properties after those described in the WAI-ARIA Menu or Menu bar (widget) design pattern with some notable exceptions, so that it behaves better with screen reader user expectations for global navigation. We don't use role=""menu"" for the menu container and role=""menuitem"" for each of the links therein, because if we do, assistive technology will no longer interpret the links as links, but instead, as menu items, and the links in our global navigation will no longer show up when a screen reader user executes a shortcut command to bring up a list of links in the page. We also want to maintain the semantic structure of the submenu panels in our mega menu; our links are organized into lists and separated by headings. Omitting role=""menu"" and role=""menuitem"" for the global navigation seems the safer way to go. Usage HTML The HTML structure for the mega menu is a nav element, or any other container element, containing a list. Each list item contains a link which is followed by a div or any other container element which will serve as the pop up panel. The panel can contain any html content; in the following example, each panel contains three lists of links. You can explicitly define groups within the panel, between which a user can navigate quickly using the left and right arrow keys; in the following example, the CSS class .sub-nav-group identifies a navigable group.     <nav>         <ul class=""nav-menu"">             <li class=""nav-item"">                 <a href=""?movie"">Movies</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=0"">Action &amp; Adventure</a></li>                         <li><a href=""?movie&genre=2"">Children &amp; Family</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=7"">Dramas</a></li>                         <li><a href=""?movie&genre=9"">Foreign</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=14"">Musicals</a></li>                         <li><a href=""?movie&genre=15"">Romance</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>             <li class=""nav-item"">                 <a href=""?tv"">TV Shows</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=20"">Classic TV</a></li>                         <li><a href=""?tv&genre=21"">Crime TV</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=27"">Reality TV</a></li>                         <li><a href=""?tv&genre=30"">TV Action</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=33"">TV Dramas</a></li>                         <li><a href=""?tv&genre=34"">TV Horror</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>         </ul>     </nav> By default, accessibleMegaMenu uses the the following CSS classes to define the top-level navigation items, panels, groups within the panels, and the hover, focus, and open states. It also defines a prefix for unique id strings, which are required to indicate the relationship of a top-level navigation item to the panel it controls.     defaults = {         /* unique ID's are required to indicate aria-owns, aria-controls and aria-labelledby */         uuidPrefix: ""accessible-megamenu"",                  /* default css class used to define the megamenu styling */         menuClass: ""accessible-megamenu"",                  /* default css class for a top-level navigation item in the megamenu */         topNavItemClass: ""accessible-megamenu-top-nav-item"",                  /* default css class for a megamenu panel */         panelClass: ""accessible-megamenu-panel"",                  /* default css class for a group of items within a megamenu panel */         panelGroupClass: ""accessible-megamenu-panel-group"",                  /* default css class for the hover state */         hoverClass: ""hover"",                  /* default css class for the focus state */         focusClass: ""focus"",                  /* default css class for the open state */         openClass: ""open""      } You can optionally override the defaults to use the CSS classes you may have already defined for your mega menu. JavaScript Be sure to include jQuery and the jquery-accessibleMegaMenu.js plugin script.     <script src=""//code.jquery.com/jquery-1.10.1.min.js""></script>     <script src=""js/jquery-accessibleMegaMenu.js""></script> The following initializes the first nav element in the document as an accessibleMegaMenu, with optional CSS class overrides.     $(""nav:first"").accessibleMegaMenu({         /* prefix for generated unique id attributes, which are required             to indicate aria-owns, aria-controls and aria-labelledby */         uuidPrefix: ""accessible-megamenu"",                  /* css class used to define the megamenu styling */         menuClass: ""nav-menu"",                  /* css class for a top-level navigation item in the megamenu */         topNavItemClass: ""nav-item"",                  /* css class for a megamenu panel */         panelClass: ""sub-nav"",                  /* css class for a group of items within a megamenu panel */         panelGroupClass: ""sub-nav-group"",                  /* css class for the hover state */         hoverClass: ""hover"",                  /* css class for the focus state */         focusClass: ""focus"",                  /* css class for the open state */         openClass: ""open""     }); CSS AccessibleMegaMenu handles the showing and hiding of panels by adding or removing a CSS class. No inline styles are added to hide elements or create animation between states. Following is some rudimentary CSS for our example which enables the showing/hiding of and the layout of lists panels in the mega menu.     /* mega menu list */     .nav-menu {         display: block;         position: relative;         list-style: none;         margin: 0;         padding: 0;         z-index: 15;     }     /* a top level navigation item in the mega menu */     .nav-item {         list-style: none;         display: inline-block;         padding: 0;         margin: 0;     }     /* first descendant link within a top level navigation item */     .nav-item > a {         position: relative;         display: inline-block;         padding: 0.5em 1em;         margin: 0 0 -1px 0;         border: 1px solid transparent;     }     /* focus/open states of first descendant link within a top level         navigation item */     .nav-item > a:focus,     .nav-item > a.open {         border: 1px solid #dedede;     }     /* open state of first descendant link within a top level         navigation item */     .nav-item > a.open {         background-color: #fff;         border-bottom: none;         z-index: 1;     }     /* sub-navigation panel */     .sub-nav {         position: absolute;         display: none;         top: 2.2em;         margin-top: -1px;         padding: 0.5em 1em;         border: 1px solid #dedede;         background-color: #fff;     }     /* sub-navigation panel open state */     .sub-nav.open {         display: block;     }     /* list of items within sub-navigation panel */     .sub-nav ul {         display: inline-block;         vertical-align: top;         margin: 0 1em 0 0;         padding: 0;     }     /* list item within sub-navigation panel */     .sub-nav li {         display: block;         list-style-type: none;         margin: 0;         padding: 0;     }   Putting it all together, here is the completed example:     <!doctype html>     <html lang=""en"">     <head>     <meta charset=""UTF-8"">     <title>Simple Accessible Mega Menu Example</title>     <style>         /* Rudimentary mega menu CSS for demonstration */             /* mega menu list */         .nav-menu {             display: block;             position: relative;             list-style: none;             margin: 0;             padding: 0;             z-index: 15;         }         /* a top level navigation item in the mega menu */         .nav-item {             list-style: none;             display: inline-block;             padding: 0;             margin: 0;         }         /* first descendant link within a top level navigation item */         .nav-item > a {             position: relative;             display: inline-block;             padding: 0.5em 1em;             margin: 0 0 -1px 0;             border: 1px solid transparent;         }         /* focus/open states of first descendant link within a top level             navigation item */         .nav-item > a:focus,         .nav-item > a.open {             border: 1px solid #dedede;         }         /* open state of first descendant link within a top level             navigation item */         .nav-item > a.open {             background-color: #fff;             border-bottom: none;             z-index: 1;         }         /* sub-navigation panel */         .sub-nav {             position: absolute;             display: none;             top: 2.2em;             margin-top: -1px;             padding: 0.5em 1em;             border: 1px solid #dedede;             background-color: #fff;         }         /* sub-navigation panel open state */         .sub-nav.open {             display: block;         }         /* list of items within sub-navigation panel */         .sub-nav ul {             display: inline-block;             vertical-align: top;             margin: 0 1em 0 0;             padding: 0;         }         /* list item within sub-navigation panel */         .sub-nav li {             display: block;             list-style-type: none;             margin: 0;             padding: 0;         }          </style>     </head>     <body>     <nav>         <ul class=""nav-menu"">             <li class=""nav-item"">                 <a href=""?movie"">Movies</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=0"">Action &amp; Adventure</a></li>                         <li><a href=""?movie&genre=2"">Children &amp; Family</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=7"">Dramas</a></li>                         <li><a href=""?movie&genre=9"">Foreign</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=14"">Musicals</a></li>                         <li><a href=""?movie&genre=15"">Romance</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>             <li class=""nav-item"">                 <a href=""?tv"">TV Shows</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=20"">Classic TV</a></li>                         <li><a href=""?tv&genre=21"">Crime TV</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=27"">Reality TV</a></li>                         <li><a href=""?tv&genre=30"">TV Action</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=33"">TV Dramas</a></li>                         <li><a href=""?tv&genre=34"">TV Horror</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>         </ul>     </nav>          <!-- include jquery -->     <script src=""//code.jquery.com/jquery-1.10.1.min.js""></script>     <!-- include the jquery-accessibleMegaMenu plugin script -->     <script src=""js/jquery-accessibleMegaMenu.js""></script>     <!-- initialize a selector as an accessibleMegaMenu -->     <script>         $(""nav:first"").accessibleMegaMenu({             /* prefix for generated unique id attributes, which are required                 to indicate aria-owns, aria-controls and aria-labelledby */             uuidPrefix: ""accessible-megamenu"",                          /* css class used to define the megamenu styling */             menuClass: ""nav-menu"",                          /* css class for a top-level navigation item in the megamenu */             topNavItemClass: ""nav-item"",                          /* css class for a megamenu panel */             panelClass: ""sub-nav"",                          /* css class for a group of items within a megamenu panel */             panelGroupClass: ""sub-nav-group"",                          /* css class for the hover state */             hoverClass: ""hover"",                          /* css class for the focus state */             focusClass: ""focus"",                          /* css class for the open state */             openClass: ""open""         });     </script>     </body>     </html> © 2020 GitHub, Inc. Terms Privacy Security Status Help Contact GitHub Pricing API Training Blog About You can’t perform that action at this time. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."
67100,20200529,github.com,https://github.com/adobe-accessibility/Accessible-Mega-Menu,text/html,text/html,en,"GitHub - adobe-accessibility/Accessible-Mega-Menu: A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. Skip to content Why GitHub? Features → Code review Project management Integrations Actions Packages Security Team management Hosting Customer stories → Security → Team Enterprise Explore Explore GitHub → Learn & contribute Topics Collections Trending Learning Lab Open source guides Connect with others Events Community forum GitHub Education Marketplace Pricing Plans → Compare plans Contact Sales Nonprofit → Education → In this repository All GitHub ↵ Jump to ↵ No suggested jump to results In this repository All GitHub ↵ Jump to ↵ In this repository All GitHub ↵ Jump to ↵ Sign in Sign up adobe-accessibility / Accessible-Mega-Menu Watch 48 Star 556 Fork 183 Code Issues 27 Pull requests 11 Actions Projects 0 Security Insights Dismiss Join GitHub today GitHub is home to over 50 million developers working together to host and review code, manage projects, and build software together. Sign up A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. 36 commits 2 branches 0 packages 0 releases Fetching contributors Apache-2.0 HTML CSS JavaScript HTML 70.8% CSS 27.3% JavaScript 1.9% Branch: master New pull request Find file Clone or download Clone with HTTPS Use Git or checkout with SVN using the web URL. Open in Desktop Download ZIP Downloading Want to be notified of new releases in adobe-accessibility/Accessible-Mega-Menu? Sign in Sign up Launching GitHub Desktop If nothing happens, download GitHub Desktop and try again. Go back Launching GitHub Desktop If nothing happens, download GitHub Desktop and try again. Go back Launching Xcode If nothing happens, download Xcode and try again. Go back Launching Visual Studio If nothing happens, download the GitHub extension for Visual Studio and try again. Go back Latest commit majornista Add openOnMouseover setting, and toggleButtonClass for responsive layout … To normalize behavior of top navigation links on desktop and mobile, the default behavior will be for the menu to remain closed on hover. Click should toggle the menu regardless of whether the link has a valid `href`. With `openOnMouseover: true`, hover will open the menu as before and with the menu open, clicking a top-level navigation item with a valid `href` should open the url. Add toggleButtonClass to specify a button that should toggle the menu in a responsive layout on mobile devices. Incorporate media queries for responsive layout breakpoints. 1 Latest commit d445afc May 11, 2018 Files Permalink Type Name Latest commit message Commit time Failed to load latest commit information. css Add openOnMouseover setting, and toggleButtonClass for responsive layout May 11, 2018 js Add openOnMouseover setting, and toggleButtonClass for responsive layout May 11, 2018 third-party/jquery initial commit Aug 26, 2013 LICENSE initial commit Aug 26, 2013 NOTICE initial commit Aug 26, 2013 README.md initial commit Aug 26, 2013 index.html Add openOnMouseover setting, and toggleButtonClass for responsive layout May 11, 2018 package.json Updating repo references Jul 8, 2016 README.md Accessible Mega Menu ========================= A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. It is modeled after the mega menu on adobe.com but has been simplified for use by others. An brief explanation of our interaction design choices can be found in a blog post at Mega menu accessibility on adobe.com. Content for the links and text within the mega menu comes from the Web Content Accessibility Guidelines (WCAG) 2.0. Keyboard Accessibility The accessible mega menu supports keyboard interaction modeled after the behavior described in the WAI-ARIA Menu or Menu bar (widget) design pattern, however we also try to respect users' general expectations for the behavior of links in a global navigation. To this end, the accessible mega menu implementation permits tab focus on each of the six top-level menu items. When one of the menu items has focus, pressing the Enter key, Spacebar or Down arrow will open the submenu panel, and pressing the Left or Right arrow key will shift focus to the adjacent menu item. Links within the submenu panels are included in the tab order when the panel is open. They can also be navigated with the arrow keys or by typing the first character in the link name, which speeds up keyboard navigation considerably. Pressing the Escape key closes the submenu and restores focus to the parent menu item. Screen Reader Accessibility The accessible mega menu models its use of WAI-ARIA Roles, States, and Properties after those described in the WAI-ARIA Menu or Menu bar (widget) design pattern with some notable exceptions, so that it behaves better with screen reader user expectations for global navigation. We don't use role=""menu"" for the menu container and role=""menuitem"" for each of the links therein, because if we do, assistive technology will no longer interpret the links as links, but instead, as menu items, and the links in our global navigation will no longer show up when a screen reader user executes a shortcut command to bring up a list of links in the page. We also want to maintain the semantic structure of the submenu panels in our mega menu; our links are organized into lists and separated by headings. Omitting role=""menu"" and role=""menuitem"" for the global navigation seems the safer way to go. Usage HTML The HTML structure for the mega menu is a nav element, or any other container element, containing a list. Each list item contains a link which is followed by a div or any other container element which will serve as the pop up panel. The panel can contain any html content; in the following example, each panel contains three lists of links. You can explicitly define groups within the panel, between which a user can navigate quickly using the left and right arrow keys; in the following example, the CSS class .sub-nav-group identifies a navigable group.     <nav>         <ul class=""nav-menu"">             <li class=""nav-item"">                 <a href=""?movie"">Movies</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=0"">Action &amp; Adventure</a></li>                         <li><a href=""?movie&genre=2"">Children &amp; Family</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=7"">Dramas</a></li>                         <li><a href=""?movie&genre=9"">Foreign</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=14"">Musicals</a></li>                         <li><a href=""?movie&genre=15"">Romance</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>             <li class=""nav-item"">                 <a href=""?tv"">TV Shows</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=20"">Classic TV</a></li>                         <li><a href=""?tv&genre=21"">Crime TV</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=27"">Reality TV</a></li>                         <li><a href=""?tv&genre=30"">TV Action</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=33"">TV Dramas</a></li>                         <li><a href=""?tv&genre=34"">TV Horror</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>         </ul>     </nav> By default, accessibleMegaMenu uses the the following CSS classes to define the top-level navigation items, panels, groups within the panels, and the hover, focus, and open states. It also defines a prefix for unique id strings, which are required to indicate the relationship of a top-level navigation item to the panel it controls.     defaults = {         /* unique ID's are required to indicate aria-owns, aria-controls and aria-labelledby */         uuidPrefix: ""accessible-megamenu"",                  /* default css class used to define the megamenu styling */         menuClass: ""accessible-megamenu"",                  /* default css class for a top-level navigation item in the megamenu */         topNavItemClass: ""accessible-megamenu-top-nav-item"",                  /* default css class for a megamenu panel */         panelClass: ""accessible-megamenu-panel"",                  /* default css class for a group of items within a megamenu panel */         panelGroupClass: ""accessible-megamenu-panel-group"",                  /* default css class for the hover state */         hoverClass: ""hover"",                  /* default css class for the focus state */         focusClass: ""focus"",                  /* default css class for the open state */         openClass: ""open""      } You can optionally override the defaults to use the CSS classes you may have already defined for your mega menu. JavaScript Be sure to include jQuery and the jquery-accessibleMegaMenu.js plugin script.     <script src=""//code.jquery.com/jquery-1.10.1.min.js""></script>     <script src=""js/jquery-accessibleMegaMenu.js""></script> The following initializes the first nav element in the document as an accessibleMegaMenu, with optional CSS class overrides.     $(""nav:first"").accessibleMegaMenu({         /* prefix for generated unique id attributes, which are required             to indicate aria-owns, aria-controls and aria-labelledby */         uuidPrefix: ""accessible-megamenu"",                  /* css class used to define the megamenu styling */         menuClass: ""nav-menu"",                  /* css class for a top-level navigation item in the megamenu */         topNavItemClass: ""nav-item"",                  /* css class for a megamenu panel */         panelClass: ""sub-nav"",                  /* css class for a group of items within a megamenu panel */         panelGroupClass: ""sub-nav-group"",                  /* css class for the hover state */         hoverClass: ""hover"",                  /* css class for the focus state */         focusClass: ""focus"",                  /* css class for the open state */         openClass: ""open""     }); CSS AccessibleMegaMenu handles the showing and hiding of panels by adding or removing a CSS class. No inline styles are added to hide elements or create animation between states. Following is some rudimentary CSS for our example which enables the showing/hiding of and the layout of lists panels in the mega menu.     /* mega menu list */     .nav-menu {         display: block;         position: relative;         list-style: none;         margin: 0;         padding: 0;         z-index: 15;     }     /* a top level navigation item in the mega menu */     .nav-item {         list-style: none;         display: inline-block;         padding: 0;         margin: 0;     }     /* first descendant link within a top level navigation item */     .nav-item > a {         position: relative;         display: inline-block;         padding: 0.5em 1em;         margin: 0 0 -1px 0;         border: 1px solid transparent;     }     /* focus/open states of first descendant link within a top level         navigation item */     .nav-item > a:focus,     .nav-item > a.open {         border: 1px solid #dedede;     }     /* open state of first descendant link within a top level         navigation item */     .nav-item > a.open {         background-color: #fff;         border-bottom: none;         z-index: 1;     }     /* sub-navigation panel */     .sub-nav {         position: absolute;         display: none;         top: 2.2em;         margin-top: -1px;         padding: 0.5em 1em;         border: 1px solid #dedede;         background-color: #fff;     }     /* sub-navigation panel open state */     .sub-nav.open {         display: block;     }     /* list of items within sub-navigation panel */     .sub-nav ul {         display: inline-block;         vertical-align: top;         margin: 0 1em 0 0;         padding: 0;     }     /* list item within sub-navigation panel */     .sub-nav li {         display: block;         list-style-type: none;         margin: 0;         padding: 0;     }   Putting it all together, here is the completed example:     <!doctype html>     <html lang=""en"">     <head>     <meta charset=""UTF-8"">     <title>Simple Accessible Mega Menu Example</title>     <style>         /* Rudimentary mega menu CSS for demonstration */             /* mega menu list */         .nav-menu {             display: block;             position: relative;             list-style: none;             margin: 0;             padding: 0;             z-index: 15;         }         /* a top level navigation item in the mega menu */         .nav-item {             list-style: none;             display: inline-block;             padding: 0;             margin: 0;         }         /* first descendant link within a top level navigation item */         .nav-item > a {             position: relative;             display: inline-block;             padding: 0.5em 1em;             margin: 0 0 -1px 0;             border: 1px solid transparent;         }         /* focus/open states of first descendant link within a top level             navigation item */         .nav-item > a:focus,         .nav-item > a.open {             border: 1px solid #dedede;         }         /* open state of first descendant link within a top level             navigation item */         .nav-item > a.open {             background-color: #fff;             border-bottom: none;             z-index: 1;         }         /* sub-navigation panel */         .sub-nav {             position: absolute;             display: none;             top: 2.2em;             margin-top: -1px;             padding: 0.5em 1em;             border: 1px solid #dedede;             background-color: #fff;         }         /* sub-navigation panel open state */         .sub-nav.open {             display: block;         }         /* list of items within sub-navigation panel */         .sub-nav ul {             display: inline-block;             vertical-align: top;             margin: 0 1em 0 0;             padding: 0;         }         /* list item within sub-navigation panel */         .sub-nav li {             display: block;             list-style-type: none;             margin: 0;             padding: 0;         }          </style>     </head>     <body>     <nav>         <ul class=""nav-menu"">             <li class=""nav-item"">                 <a href=""?movie"">Movies</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=0"">Action &amp; Adventure</a></li>                         <li><a href=""?movie&genre=2"">Children &amp; Family</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=7"">Dramas</a></li>                         <li><a href=""?movie&genre=9"">Foreign</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=14"">Musicals</a></li>                         <li><a href=""?movie&genre=15"">Romance</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>             <li class=""nav-item"">                 <a href=""?tv"">TV Shows</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=20"">Classic TV</a></li>                         <li><a href=""?tv&genre=21"">Crime TV</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=27"">Reality TV</a></li>                         <li><a href=""?tv&genre=30"">TV Action</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=33"">TV Dramas</a></li>                         <li><a href=""?tv&genre=34"">TV Horror</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>         </ul>     </nav>          <!-- include jquery -->     <script src=""//code.jquery.com/jquery-1.10.1.min.js""></script>     <!-- include the jquery-accessibleMegaMenu plugin script -->     <script src=""js/jquery-accessibleMegaMenu.js""></script>     <!-- initialize a selector as an accessibleMegaMenu -->     <script>         $(""nav:first"").accessibleMegaMenu({             /* prefix for generated unique id attributes, which are required                 to indicate aria-owns, aria-controls and aria-labelledby */             uuidPrefix: ""accessible-megamenu"",                          /* css class used to define the megamenu styling */             menuClass: ""nav-menu"",                          /* css class for a top-level navigation item in the megamenu */             topNavItemClass: ""nav-item"",                          /* css class for a megamenu panel */             panelClass: ""sub-nav"",                          /* css class for a group of items within a megamenu panel */             panelGroupClass: ""sub-nav-group"",                          /* css class for the hover state */             hoverClass: ""hover"",                          /* css class for the focus state */             focusClass: ""focus"",                          /* css class for the open state */             openClass: ""open""         });     </script>     </body>     </html> © 2020 GitHub, Inc. Terms Privacy Security Status Help Contact GitHub Pricing API Training Blog About You can’t perform that action at this time. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."
74468,20200605,github.com,https://github.com/adobe-accessibility/Accessible-Mega-Menu,text/html,text/html,en,"GitHub - adobe-accessibility/Accessible-Mega-Menu: A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. Skip to content Why GitHub? Features → Code review Project management Integrations Actions Packages Security Team management Hosting Customer stories → Security → Team Enterprise Explore Explore GitHub → Learn & contribute Topics Collections Trending Learning Lab Open source guides Connect with others Events Community forum GitHub Education Marketplace Pricing Plans → Compare plans Contact Sales Nonprofit → Education → In this repository All GitHub ↵ Jump to ↵ No suggested jump to results In this repository All GitHub ↵ Jump to ↵ In this repository All GitHub ↵ Jump to ↵ Sign in Sign up adobe-accessibility / Accessible-Mega-Menu Watch 48 Star 558 Fork 183 Code Issues 27 Pull requests 11 Actions Projects 0 Security Insights Dismiss Join GitHub today GitHub is home to over 50 million developers working together to host and review code, manage projects, and build software together. Sign up A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. 36 commits 2 branches 0 packages 0 releases Fetching contributors Apache-2.0 HTML CSS JavaScript HTML 70.8% CSS 27.3% JavaScript 1.9% Branch: master New pull request Find file Clone or download Clone with HTTPS Use Git or checkout with SVN using the web URL. Open in Desktop Download ZIP Downloading Want to be notified of new releases in adobe-accessibility/Accessible-Mega-Menu? Sign in Sign up Launching GitHub Desktop If nothing happens, download GitHub Desktop and try again. Go back Launching GitHub Desktop If nothing happens, download GitHub Desktop and try again. Go back Launching Xcode If nothing happens, download Xcode and try again. Go back Launching Visual Studio If nothing happens, download the GitHub extension for Visual Studio and try again. Go back Latest commit majornista Add openOnMouseover setting, and toggleButtonClass for responsive layout … To normalize behavior of top navigation links on desktop and mobile, the default behavior will be for the menu to remain closed on hover. Click should toggle the menu regardless of whether the link has a valid `href`. With `openOnMouseover: true`, hover will open the menu as before and with the menu open, clicking a top-level navigation item with a valid `href` should open the url. Add toggleButtonClass to specify a button that should toggle the menu in a responsive layout on mobile devices. Incorporate media queries for responsive layout breakpoints. 1 Latest commit d445afc May 11, 2018 Files Permalink Type Name Latest commit message Commit time Failed to load latest commit information. css Add openOnMouseover setting, and toggleButtonClass for responsive layout May 11, 2018 js Add openOnMouseover setting, and toggleButtonClass for responsive layout May 11, 2018 third-party/jquery initial commit Aug 26, 2013 LICENSE initial commit Aug 26, 2013 NOTICE initial commit Aug 26, 2013 README.md initial commit Aug 26, 2013 index.html Add openOnMouseover setting, and toggleButtonClass for responsive layout May 11, 2018 package.json Updating repo references Jul 8, 2016 README.md Accessible Mega Menu ========================= A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. It is modeled after the mega menu on adobe.com but has been simplified for use by others. An brief explanation of our interaction design choices can be found in a blog post at Mega menu accessibility on adobe.com. Content for the links and text within the mega menu comes from the Web Content Accessibility Guidelines (WCAG) 2.0. Keyboard Accessibility The accessible mega menu supports keyboard interaction modeled after the behavior described in the WAI-ARIA Menu or Menu bar (widget) design pattern, however we also try to respect users' general expectations for the behavior of links in a global navigation. To this end, the accessible mega menu implementation permits tab focus on each of the six top-level menu items. When one of the menu items has focus, pressing the Enter key, Spacebar or Down arrow will open the submenu panel, and pressing the Left or Right arrow key will shift focus to the adjacent menu item. Links within the submenu panels are included in the tab order when the panel is open. They can also be navigated with the arrow keys or by typing the first character in the link name, which speeds up keyboard navigation considerably. Pressing the Escape key closes the submenu and restores focus to the parent menu item. Screen Reader Accessibility The accessible mega menu models its use of WAI-ARIA Roles, States, and Properties after those described in the WAI-ARIA Menu or Menu bar (widget) design pattern with some notable exceptions, so that it behaves better with screen reader user expectations for global navigation. We don't use role=""menu"" for the menu container and role=""menuitem"" for each of the links therein, because if we do, assistive technology will no longer interpret the links as links, but instead, as menu items, and the links in our global navigation will no longer show up when a screen reader user executes a shortcut command to bring up a list of links in the page. We also want to maintain the semantic structure of the submenu panels in our mega menu; our links are organized into lists and separated by headings. Omitting role=""menu"" and role=""menuitem"" for the global navigation seems the safer way to go. Usage HTML The HTML structure for the mega menu is a nav element, or any other container element, containing a list. Each list item contains a link which is followed by a div or any other container element which will serve as the pop up panel. The panel can contain any html content; in the following example, each panel contains three lists of links. You can explicitly define groups within the panel, between which a user can navigate quickly using the left and right arrow keys; in the following example, the CSS class .sub-nav-group identifies a navigable group.     <nav>         <ul class=""nav-menu"">             <li class=""nav-item"">                 <a href=""?movie"">Movies</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=0"">Action &amp; Adventure</a></li>                         <li><a href=""?movie&genre=2"">Children &amp; Family</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=7"">Dramas</a></li>                         <li><a href=""?movie&genre=9"">Foreign</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=14"">Musicals</a></li>                         <li><a href=""?movie&genre=15"">Romance</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>             <li class=""nav-item"">                 <a href=""?tv"">TV Shows</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=20"">Classic TV</a></li>                         <li><a href=""?tv&genre=21"">Crime TV</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=27"">Reality TV</a></li>                         <li><a href=""?tv&genre=30"">TV Action</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=33"">TV Dramas</a></li>                         <li><a href=""?tv&genre=34"">TV Horror</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>         </ul>     </nav> By default, accessibleMegaMenu uses the the following CSS classes to define the top-level navigation items, panels, groups within the panels, and the hover, focus, and open states. It also defines a prefix for unique id strings, which are required to indicate the relationship of a top-level navigation item to the panel it controls.     defaults = {         /* unique ID's are required to indicate aria-owns, aria-controls and aria-labelledby */         uuidPrefix: ""accessible-megamenu"",                  /* default css class used to define the megamenu styling */         menuClass: ""accessible-megamenu"",                  /* default css class for a top-level navigation item in the megamenu */         topNavItemClass: ""accessible-megamenu-top-nav-item"",                  /* default css class for a megamenu panel */         panelClass: ""accessible-megamenu-panel"",                  /* default css class for a group of items within a megamenu panel */         panelGroupClass: ""accessible-megamenu-panel-group"",                  /* default css class for the hover state */         hoverClass: ""hover"",                  /* default css class for the focus state */         focusClass: ""focus"",                  /* default css class for the open state */         openClass: ""open""      } You can optionally override the defaults to use the CSS classes you may have already defined for your mega menu. JavaScript Be sure to include jQuery and the jquery-accessibleMegaMenu.js plugin script.     <script src=""//code.jquery.com/jquery-1.10.1.min.js""></script>     <script src=""js/jquery-accessibleMegaMenu.js""></script> The following initializes the first nav element in the document as an accessibleMegaMenu, with optional CSS class overrides.     $(""nav:first"").accessibleMegaMenu({         /* prefix for generated unique id attributes, which are required             to indicate aria-owns, aria-controls and aria-labelledby */         uuidPrefix: ""accessible-megamenu"",                  /* css class used to define the megamenu styling */         menuClass: ""nav-menu"",                  /* css class for a top-level navigation item in the megamenu */         topNavItemClass: ""nav-item"",                  /* css class for a megamenu panel */         panelClass: ""sub-nav"",                  /* css class for a group of items within a megamenu panel */         panelGroupClass: ""sub-nav-group"",                  /* css class for the hover state */         hoverClass: ""hover"",                  /* css class for the focus state */         focusClass: ""focus"",                  /* css class for the open state */         openClass: ""open""     }); CSS AccessibleMegaMenu handles the showing and hiding of panels by adding or removing a CSS class. No inline styles are added to hide elements or create animation between states. Following is some rudimentary CSS for our example which enables the showing/hiding of and the layout of lists panels in the mega menu.     /* mega menu list */     .nav-menu {         display: block;         position: relative;         list-style: none;         margin: 0;         padding: 0;         z-index: 15;     }     /* a top level navigation item in the mega menu */     .nav-item {         list-style: none;         display: inline-block;         padding: 0;         margin: 0;     }     /* first descendant link within a top level navigation item */     .nav-item > a {         position: relative;         display: inline-block;         padding: 0.5em 1em;         margin: 0 0 -1px 0;         border: 1px solid transparent;     }     /* focus/open states of first descendant link within a top level         navigation item */     .nav-item > a:focus,     .nav-item > a.open {         border: 1px solid #dedede;     }     /* open state of first descendant link within a top level         navigation item */     .nav-item > a.open {         background-color: #fff;         border-bottom: none;         z-index: 1;     }     /* sub-navigation panel */     .sub-nav {         position: absolute;         display: none;         top: 2.2em;         margin-top: -1px;         padding: 0.5em 1em;         border: 1px solid #dedede;         background-color: #fff;     }     /* sub-navigation panel open state */     .sub-nav.open {         display: block;     }     /* list of items within sub-navigation panel */     .sub-nav ul {         display: inline-block;         vertical-align: top;         margin: 0 1em 0 0;         padding: 0;     }     /* list item within sub-navigation panel */     .sub-nav li {         display: block;         list-style-type: none;         margin: 0;         padding: 0;     }   Putting it all together, here is the completed example:     <!doctype html>     <html lang=""en"">     <head>     <meta charset=""UTF-8"">     <title>Simple Accessible Mega Menu Example</title>     <style>         /* Rudimentary mega menu CSS for demonstration */             /* mega menu list */         .nav-menu {             display: block;             position: relative;             list-style: none;             margin: 0;             padding: 0;             z-index: 15;         }         /* a top level navigation item in the mega menu */         .nav-item {             list-style: none;             display: inline-block;             padding: 0;             margin: 0;         }         /* first descendant link within a top level navigation item */         .nav-item > a {             position: relative;             display: inline-block;             padding: 0.5em 1em;             margin: 0 0 -1px 0;             border: 1px solid transparent;         }         /* focus/open states of first descendant link within a top level             navigation item */         .nav-item > a:focus,         .nav-item > a.open {             border: 1px solid #dedede;         }         /* open state of first descendant link within a top level             navigation item */         .nav-item > a.open {             background-color: #fff;             border-bottom: none;             z-index: 1;         }         /* sub-navigation panel */         .sub-nav {             position: absolute;             display: none;             top: 2.2em;             margin-top: -1px;             padding: 0.5em 1em;             border: 1px solid #dedede;             background-color: #fff;         }         /* sub-navigation panel open state */         .sub-nav.open {             display: block;         }         /* list of items within sub-navigation panel */         .sub-nav ul {             display: inline-block;             vertical-align: top;             margin: 0 1em 0 0;             padding: 0;         }         /* list item within sub-navigation panel */         .sub-nav li {             display: block;             list-style-type: none;             margin: 0;             padding: 0;         }          </style>     </head>     <body>     <nav>         <ul class=""nav-menu"">             <li class=""nav-item"">                 <a href=""?movie"">Movies</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=0"">Action &amp; Adventure</a></li>                         <li><a href=""?movie&genre=2"">Children &amp; Family</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=7"">Dramas</a></li>                         <li><a href=""?movie&genre=9"">Foreign</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=14"">Musicals</a></li>                         <li><a href=""?movie&genre=15"">Romance</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>             <li class=""nav-item"">                 <a href=""?tv"">TV Shows</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=20"">Classic TV</a></li>                         <li><a href=""?tv&genre=21"">Crime TV</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=27"">Reality TV</a></li>                         <li><a href=""?tv&genre=30"">TV Action</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=33"">TV Dramas</a></li>                         <li><a href=""?tv&genre=34"">TV Horror</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>         </ul>     </nav>          <!-- include jquery -->     <script src=""//code.jquery.com/jquery-1.10.1.min.js""></script>     <!-- include the jquery-accessibleMegaMenu plugin script -->     <script src=""js/jquery-accessibleMegaMenu.js""></script>     <!-- initialize a selector as an accessibleMegaMenu -->     <script>         $(""nav:first"").accessibleMegaMenu({             /* prefix for generated unique id attributes, which are required                 to indicate aria-owns, aria-controls and aria-labelledby */             uuidPrefix: ""accessible-megamenu"",                          /* css class used to define the megamenu styling */             menuClass: ""nav-menu"",                          /* css class for a top-level navigation item in the megamenu */             topNavItemClass: ""nav-item"",                          /* css class for a megamenu panel */             panelClass: ""sub-nav"",                          /* css class for a group of items within a megamenu panel */             panelGroupClass: ""sub-nav-group"",                          /* css class for the hover state */             hoverClass: ""hover"",                          /* css class for the focus state */             focusClass: ""focus"",                          /* css class for the open state */             openClass: ""open""         });     </script>     </body>     </html> © 2020 GitHub, Inc. Terms Privacy Security Status Help Contact GitHub Pricing API Training Blog About You can’t perform that action at this time. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."
83879,20200612,github.com,https://github.com/adobe-accessibility/Accessible-Mega-Menu,text/html,text/html,en,"GitHub - adobe-accessibility/Accessible-Mega-Menu: A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. Skip to content Why GitHub? Features → Code review Project management Integrations Actions Packages Security Team management Hosting Customer stories → Security → Team Enterprise Explore Explore GitHub → Learn & contribute Topics Collections Trending Learning Lab Open source guides Connect with others Events Community forum GitHub Education Marketplace Pricing Plans → Compare plans Contact Sales Nonprofit → Education → In this repository All GitHub ↵ Jump to ↵ No suggested jump to results In this repository All GitHub ↵ Jump to ↵ In this repository All GitHub ↵ Jump to ↵ Sign in Sign up adobe-accessibility / Accessible-Mega-Menu Watch 48 Star 559 Fork 184 Code Issues 27 Pull requests 11 Actions Projects 0 Security Insights Dismiss Join GitHub today GitHub is home to over 50 million developers working together to host and review code, manage projects, and build software together. Sign up A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. 36 commits 2 branches 0 packages 0 releases Fetching contributors Apache-2.0 HTML CSS JavaScript HTML 70.8% CSS 27.3% JavaScript 1.9% Branch: master New pull request Find file Clone or download Clone with HTTPS Use Git or checkout with SVN using the web URL. Open in Desktop Download ZIP Downloading Want to be notified of new releases in adobe-accessibility/Accessible-Mega-Menu? Sign in Sign up Launching GitHub Desktop If nothing happens, download GitHub Desktop and try again. Go back Launching GitHub Desktop If nothing happens, download GitHub Desktop and try again. Go back Launching Xcode If nothing happens, download Xcode and try again. Go back Launching Visual Studio If nothing happens, download the GitHub extension for Visual Studio and try again. Go back Latest commit majornista Add openOnMouseover setting, and toggleButtonClass for responsive layout … To normalize behavior of top navigation links on desktop and mobile, the default behavior will be for the menu to remain closed on hover. Click should toggle the menu regardless of whether the link has a valid `href`. With `openOnMouseover: true`, hover will open the menu as before and with the menu open, clicking a top-level navigation item with a valid `href` should open the url. Add toggleButtonClass to specify a button that should toggle the menu in a responsive layout on mobile devices. Incorporate media queries for responsive layout breakpoints. 1 Latest commit d445afc May 11, 2018 Files Permalink Type Name Latest commit message Commit time Failed to load latest commit information. css Add openOnMouseover setting, and toggleButtonClass for responsive layout May 11, 2018 js Add openOnMouseover setting, and toggleButtonClass for responsive layout May 11, 2018 third-party/jquery initial commit Aug 26, 2013 LICENSE initial commit Aug 26, 2013 NOTICE initial commit Aug 26, 2013 README.md initial commit Aug 26, 2013 index.html Add openOnMouseover setting, and toggleButtonClass for responsive layout May 11, 2018 package.json Updating repo references Jul 8, 2016 README.md Accessible Mega Menu ========================= A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. It is modeled after the mega menu on adobe.com but has been simplified for use by others. An brief explanation of our interaction design choices can be found in a blog post at Mega menu accessibility on adobe.com. Content for the links and text within the mega menu comes from the Web Content Accessibility Guidelines (WCAG) 2.0. Keyboard Accessibility The accessible mega menu supports keyboard interaction modeled after the behavior described in the WAI-ARIA Menu or Menu bar (widget) design pattern, however we also try to respect users' general expectations for the behavior of links in a global navigation. To this end, the accessible mega menu implementation permits tab focus on each of the six top-level menu items. When one of the menu items has focus, pressing the Enter key, Spacebar or Down arrow will open the submenu panel, and pressing the Left or Right arrow key will shift focus to the adjacent menu item. Links within the submenu panels are included in the tab order when the panel is open. They can also be navigated with the arrow keys or by typing the first character in the link name, which speeds up keyboard navigation considerably. Pressing the Escape key closes the submenu and restores focus to the parent menu item. Screen Reader Accessibility The accessible mega menu models its use of WAI-ARIA Roles, States, and Properties after those described in the WAI-ARIA Menu or Menu bar (widget) design pattern with some notable exceptions, so that it behaves better with screen reader user expectations for global navigation. We don't use role=""menu"" for the menu container and role=""menuitem"" for each of the links therein, because if we do, assistive technology will no longer interpret the links as links, but instead, as menu items, and the links in our global navigation will no longer show up when a screen reader user executes a shortcut command to bring up a list of links in the page. We also want to maintain the semantic structure of the submenu panels in our mega menu; our links are organized into lists and separated by headings. Omitting role=""menu"" and role=""menuitem"" for the global navigation seems the safer way to go. Usage HTML The HTML structure for the mega menu is a nav element, or any other container element, containing a list. Each list item contains a link which is followed by a div or any other container element which will serve as the pop up panel. The panel can contain any html content; in the following example, each panel contains three lists of links. You can explicitly define groups within the panel, between which a user can navigate quickly using the left and right arrow keys; in the following example, the CSS class .sub-nav-group identifies a navigable group.     <nav>         <ul class=""nav-menu"">             <li class=""nav-item"">                 <a href=""?movie"">Movies</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=0"">Action &amp; Adventure</a></li>                         <li><a href=""?movie&genre=2"">Children &amp; Family</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=7"">Dramas</a></li>                         <li><a href=""?movie&genre=9"">Foreign</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=14"">Musicals</a></li>                         <li><a href=""?movie&genre=15"">Romance</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>             <li class=""nav-item"">                 <a href=""?tv"">TV Shows</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=20"">Classic TV</a></li>                         <li><a href=""?tv&genre=21"">Crime TV</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=27"">Reality TV</a></li>                         <li><a href=""?tv&genre=30"">TV Action</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=33"">TV Dramas</a></li>                         <li><a href=""?tv&genre=34"">TV Horror</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>         </ul>     </nav> By default, accessibleMegaMenu uses the the following CSS classes to define the top-level navigation items, panels, groups within the panels, and the hover, focus, and open states. It also defines a prefix for unique id strings, which are required to indicate the relationship of a top-level navigation item to the panel it controls.     defaults = {         /* unique ID's are required to indicate aria-owns, aria-controls and aria-labelledby */         uuidPrefix: ""accessible-megamenu"",                  /* default css class used to define the megamenu styling */         menuClass: ""accessible-megamenu"",                  /* default css class for a top-level navigation item in the megamenu */         topNavItemClass: ""accessible-megamenu-top-nav-item"",                  /* default css class for a megamenu panel */         panelClass: ""accessible-megamenu-panel"",                  /* default css class for a group of items within a megamenu panel */         panelGroupClass: ""accessible-megamenu-panel-group"",                  /* default css class for the hover state */         hoverClass: ""hover"",                  /* default css class for the focus state */         focusClass: ""focus"",                  /* default css class for the open state */         openClass: ""open""      } You can optionally override the defaults to use the CSS classes you may have already defined for your mega menu. JavaScript Be sure to include jQuery and the jquery-accessibleMegaMenu.js plugin script.     <script src=""//code.jquery.com/jquery-1.10.1.min.js""></script>     <script src=""js/jquery-accessibleMegaMenu.js""></script> The following initializes the first nav element in the document as an accessibleMegaMenu, with optional CSS class overrides.     $(""nav:first"").accessibleMegaMenu({         /* prefix for generated unique id attributes, which are required             to indicate aria-owns, aria-controls and aria-labelledby */         uuidPrefix: ""accessible-megamenu"",                  /* css class used to define the megamenu styling */         menuClass: ""nav-menu"",                  /* css class for a top-level navigation item in the megamenu */         topNavItemClass: ""nav-item"",                  /* css class for a megamenu panel */         panelClass: ""sub-nav"",                  /* css class for a group of items within a megamenu panel */         panelGroupClass: ""sub-nav-group"",                  /* css class for the hover state */         hoverClass: ""hover"",                  /* css class for the focus state */         focusClass: ""focus"",                  /* css class for the open state */         openClass: ""open""     }); CSS AccessibleMegaMenu handles the showing and hiding of panels by adding or removing a CSS class. No inline styles are added to hide elements or create animation between states. Following is some rudimentary CSS for our example which enables the showing/hiding of and the layout of lists panels in the mega menu.     /* mega menu list */     .nav-menu {         display: block;         position: relative;         list-style: none;         margin: 0;         padding: 0;         z-index: 15;     }     /* a top level navigation item in the mega menu */     .nav-item {         list-style: none;         display: inline-block;         padding: 0;         margin: 0;     }     /* first descendant link within a top level navigation item */     .nav-item > a {         position: relative;         display: inline-block;         padding: 0.5em 1em;         margin: 0 0 -1px 0;         border: 1px solid transparent;     }     /* focus/open states of first descendant link within a top level         navigation item */     .nav-item > a:focus,     .nav-item > a.open {         border: 1px solid #dedede;     }     /* open state of first descendant link within a top level         navigation item */     .nav-item > a.open {         background-color: #fff;         border-bottom: none;         z-index: 1;     }     /* sub-navigation panel */     .sub-nav {         position: absolute;         display: none;         top: 2.2em;         margin-top: -1px;         padding: 0.5em 1em;         border: 1px solid #dedede;         background-color: #fff;     }     /* sub-navigation panel open state */     .sub-nav.open {         display: block;     }     /* list of items within sub-navigation panel */     .sub-nav ul {         display: inline-block;         vertical-align: top;         margin: 0 1em 0 0;         padding: 0;     }     /* list item within sub-navigation panel */     .sub-nav li {         display: block;         list-style-type: none;         margin: 0;         padding: 0;     }   Putting it all together, here is the completed example:     <!doctype html>     <html lang=""en"">     <head>     <meta charset=""UTF-8"">     <title>Simple Accessible Mega Menu Example</title>     <style>         /* Rudimentary mega menu CSS for demonstration */             /* mega menu list */         .nav-menu {             display: block;             position: relative;             list-style: none;             margin: 0;             padding: 0;             z-index: 15;         }         /* a top level navigation item in the mega menu */         .nav-item {             list-style: none;             display: inline-block;             padding: 0;             margin: 0;         }         /* first descendant link within a top level navigation item */         .nav-item > a {             position: relative;             display: inline-block;             padding: 0.5em 1em;             margin: 0 0 -1px 0;             border: 1px solid transparent;         }         /* focus/open states of first descendant link within a top level             navigation item */         .nav-item > a:focus,         .nav-item > a.open {             border: 1px solid #dedede;         }         /* open state of first descendant link within a top level             navigation item */         .nav-item > a.open {             background-color: #fff;             border-bottom: none;             z-index: 1;         }         /* sub-navigation panel */         .sub-nav {             position: absolute;             display: none;             top: 2.2em;             margin-top: -1px;             padding: 0.5em 1em;             border: 1px solid #dedede;             background-color: #fff;         }         /* sub-navigation panel open state */         .sub-nav.open {             display: block;         }         /* list of items within sub-navigation panel */         .sub-nav ul {             display: inline-block;             vertical-align: top;             margin: 0 1em 0 0;             padding: 0;         }         /* list item within sub-navigation panel */         .sub-nav li {             display: block;             list-style-type: none;             margin: 0;             padding: 0;         }          </style>     </head>     <body>     <nav>         <ul class=""nav-menu"">             <li class=""nav-item"">                 <a href=""?movie"">Movies</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=0"">Action &amp; Adventure</a></li>                         <li><a href=""?movie&genre=2"">Children &amp; Family</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=7"">Dramas</a></li>                         <li><a href=""?movie&genre=9"">Foreign</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=14"">Musicals</a></li>                         <li><a href=""?movie&genre=15"">Romance</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>             <li class=""nav-item"">                 <a href=""?tv"">TV Shows</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=20"">Classic TV</a></li>                         <li><a href=""?tv&genre=21"">Crime TV</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=27"">Reality TV</a></li>                         <li><a href=""?tv&genre=30"">TV Action</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=33"">TV Dramas</a></li>                         <li><a href=""?tv&genre=34"">TV Horror</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>         </ul>     </nav>          <!-- include jquery -->     <script src=""//code.jquery.com/jquery-1.10.1.min.js""></script>     <!-- include the jquery-accessibleMegaMenu plugin script -->     <script src=""js/jquery-accessibleMegaMenu.js""></script>     <!-- initialize a selector as an accessibleMegaMenu -->     <script>         $(""nav:first"").accessibleMegaMenu({             /* prefix for generated unique id attributes, which are required                 to indicate aria-owns, aria-controls and aria-labelledby */             uuidPrefix: ""accessible-megamenu"",                          /* css class used to define the megamenu styling */             menuClass: ""nav-menu"",                          /* css class for a top-level navigation item in the megamenu */             topNavItemClass: ""nav-item"",                          /* css class for a megamenu panel */             panelClass: ""sub-nav"",                          /* css class for a group of items within a megamenu panel */             panelGroupClass: ""sub-nav-group"",                          /* css class for the hover state */             hoverClass: ""hover"",                          /* css class for the focus state */             focusClass: ""focus"",                          /* css class for the open state */             openClass: ""open""         });     </script>     </body>     </html> © 2020 GitHub, Inc. Terms Privacy Security Status Help Contact GitHub Pricing API Training Blog About You can’t perform that action at this time. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."
94302,20200619,github.com,https://github.com/adobe-accessibility/Accessible-Mega-Menu,text/html,text/html,en,"GitHub - adobe-accessibility/Accessible-Mega-Menu: A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. Skip to content Why GitHub? Features → Code review Project management Integrations Actions Packages Security Team management Hosting Customer stories → Security → Team Enterprise Explore Explore GitHub → Learn & contribute Topics Collections Trending Learning Lab Open source guides Connect with others Events Community forum GitHub Education Marketplace Pricing Plans → Compare plans Contact Sales Nonprofit → Education → In this repository All GitHub ↵ Jump to ↵ No suggested jump to results In this repository All GitHub ↵ Jump to ↵ In this repository All GitHub ↵ Jump to ↵ Sign in Sign up adobe-accessibility / Accessible-Mega-Menu Watch 48 Star 561 Fork 184 Code Issues 27 Pull requests 11 Actions Projects 0 Security Insights Dismiss Join GitHub today GitHub is home to over 50 million developers working together to host and review code, manage projects, and build software together. Sign up A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. 36 commits 2 branches 0 packages 0 releases Fetching contributors Apache-2.0 HTML CSS JavaScript HTML 70.8% CSS 27.3% JavaScript 1.9% Branch: master New pull request Find file Clone or download Clone with HTTPS Use Git or checkout with SVN using the web URL. Open in Desktop Download ZIP Downloading Want to be notified of new releases in adobe-accessibility/Accessible-Mega-Menu? Sign in Sign up Launching GitHub Desktop If nothing happens, download GitHub Desktop and try again. Go back Launching GitHub Desktop If nothing happens, download GitHub Desktop and try again. Go back Launching Xcode If nothing happens, download Xcode and try again. Go back Launching Visual Studio If nothing happens, download the GitHub extension for Visual Studio and try again. Go back Latest commit majornista Add openOnMouseover setting, and toggleButtonClass for responsive layout … To normalize behavior of top navigation links on desktop and mobile, the default behavior will be for the menu to remain closed on hover. Click should toggle the menu regardless of whether the link has a valid `href`. With `openOnMouseover: true`, hover will open the menu as before and with the menu open, clicking a top-level navigation item with a valid `href` should open the url. Add toggleButtonClass to specify a button that should toggle the menu in a responsive layout on mobile devices. Incorporate media queries for responsive layout breakpoints. 1 Latest commit d445afc May 11, 2018 Files Permalink Type Name Latest commit message Commit time Failed to load latest commit information. css Add openOnMouseover setting, and toggleButtonClass for responsive layout May 11, 2018 js Add openOnMouseover setting, and toggleButtonClass for responsive layout May 11, 2018 third-party/jquery initial commit Aug 26, 2013 LICENSE initial commit Aug 26, 2013 NOTICE initial commit Aug 26, 2013 README.md initial commit Aug 26, 2013 index.html Add openOnMouseover setting, and toggleButtonClass for responsive layout May 11, 2018 package.json Updating repo references Jul 8, 2016 README.md Accessible Mega Menu ========================= A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. It is modeled after the mega menu on adobe.com but has been simplified for use by others. An brief explanation of our interaction design choices can be found in a blog post at Mega menu accessibility on adobe.com. Content for the links and text within the mega menu comes from the Web Content Accessibility Guidelines (WCAG) 2.0. Keyboard Accessibility The accessible mega menu supports keyboard interaction modeled after the behavior described in the WAI-ARIA Menu or Menu bar (widget) design pattern, however we also try to respect users' general expectations for the behavior of links in a global navigation. To this end, the accessible mega menu implementation permits tab focus on each of the six top-level menu items. When one of the menu items has focus, pressing the Enter key, Spacebar or Down arrow will open the submenu panel, and pressing the Left or Right arrow key will shift focus to the adjacent menu item. Links within the submenu panels are included in the tab order when the panel is open. They can also be navigated with the arrow keys or by typing the first character in the link name, which speeds up keyboard navigation considerably. Pressing the Escape key closes the submenu and restores focus to the parent menu item. Screen Reader Accessibility The accessible mega menu models its use of WAI-ARIA Roles, States, and Properties after those described in the WAI-ARIA Menu or Menu bar (widget) design pattern with some notable exceptions, so that it behaves better with screen reader user expectations for global navigation. We don't use role=""menu"" for the menu container and role=""menuitem"" for each of the links therein, because if we do, assistive technology will no longer interpret the links as links, but instead, as menu items, and the links in our global navigation will no longer show up when a screen reader user executes a shortcut command to bring up a list of links in the page. We also want to maintain the semantic structure of the submenu panels in our mega menu; our links are organized into lists and separated by headings. Omitting role=""menu"" and role=""menuitem"" for the global navigation seems the safer way to go. Usage HTML The HTML structure for the mega menu is a nav element, or any other container element, containing a list. Each list item contains a link which is followed by a div or any other container element which will serve as the pop up panel. The panel can contain any html content; in the following example, each panel contains three lists of links. You can explicitly define groups within the panel, between which a user can navigate quickly using the left and right arrow keys; in the following example, the CSS class .sub-nav-group identifies a navigable group.     <nav>         <ul class=""nav-menu"">             <li class=""nav-item"">                 <a href=""?movie"">Movies</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=0"">Action &amp; Adventure</a></li>                         <li><a href=""?movie&genre=2"">Children &amp; Family</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=7"">Dramas</a></li>                         <li><a href=""?movie&genre=9"">Foreign</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=14"">Musicals</a></li>                         <li><a href=""?movie&genre=15"">Romance</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>             <li class=""nav-item"">                 <a href=""?tv"">TV Shows</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=20"">Classic TV</a></li>                         <li><a href=""?tv&genre=21"">Crime TV</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=27"">Reality TV</a></li>                         <li><a href=""?tv&genre=30"">TV Action</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=33"">TV Dramas</a></li>                         <li><a href=""?tv&genre=34"">TV Horror</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>         </ul>     </nav> By default, accessibleMegaMenu uses the the following CSS classes to define the top-level navigation items, panels, groups within the panels, and the hover, focus, and open states. It also defines a prefix for unique id strings, which are required to indicate the relationship of a top-level navigation item to the panel it controls.     defaults = {         /* unique ID's are required to indicate aria-owns, aria-controls and aria-labelledby */         uuidPrefix: ""accessible-megamenu"",                  /* default css class used to define the megamenu styling */         menuClass: ""accessible-megamenu"",                  /* default css class for a top-level navigation item in the megamenu */         topNavItemClass: ""accessible-megamenu-top-nav-item"",                  /* default css class for a megamenu panel */         panelClass: ""accessible-megamenu-panel"",                  /* default css class for a group of items within a megamenu panel */         panelGroupClass: ""accessible-megamenu-panel-group"",                  /* default css class for the hover state */         hoverClass: ""hover"",                  /* default css class for the focus state */         focusClass: ""focus"",                  /* default css class for the open state */         openClass: ""open""      } You can optionally override the defaults to use the CSS classes you may have already defined for your mega menu. JavaScript Be sure to include jQuery and the jquery-accessibleMegaMenu.js plugin script.     <script src=""//code.jquery.com/jquery-1.10.1.min.js""></script>     <script src=""js/jquery-accessibleMegaMenu.js""></script> The following initializes the first nav element in the document as an accessibleMegaMenu, with optional CSS class overrides.     $(""nav:first"").accessibleMegaMenu({         /* prefix for generated unique id attributes, which are required             to indicate aria-owns, aria-controls and aria-labelledby */         uuidPrefix: ""accessible-megamenu"",                  /* css class used to define the megamenu styling */         menuClass: ""nav-menu"",                  /* css class for a top-level navigation item in the megamenu */         topNavItemClass: ""nav-item"",                  /* css class for a megamenu panel */         panelClass: ""sub-nav"",                  /* css class for a group of items within a megamenu panel */         panelGroupClass: ""sub-nav-group"",                  /* css class for the hover state */         hoverClass: ""hover"",                  /* css class for the focus state */         focusClass: ""focus"",                  /* css class for the open state */         openClass: ""open""     }); CSS AccessibleMegaMenu handles the showing and hiding of panels by adding or removing a CSS class. No inline styles are added to hide elements or create animation between states. Following is some rudimentary CSS for our example which enables the showing/hiding of and the layout of lists panels in the mega menu.     /* mega menu list */     .nav-menu {         display: block;         position: relative;         list-style: none;         margin: 0;         padding: 0;         z-index: 15;     }     /* a top level navigation item in the mega menu */     .nav-item {         list-style: none;         display: inline-block;         padding: 0;         margin: 0;     }     /* first descendant link within a top level navigation item */     .nav-item > a {         position: relative;         display: inline-block;         padding: 0.5em 1em;         margin: 0 0 -1px 0;         border: 1px solid transparent;     }     /* focus/open states of first descendant link within a top level         navigation item */     .nav-item > a:focus,     .nav-item > a.open {         border: 1px solid #dedede;     }     /* open state of first descendant link within a top level         navigation item */     .nav-item > a.open {         background-color: #fff;         border-bottom: none;         z-index: 1;     }     /* sub-navigation panel */     .sub-nav {         position: absolute;         display: none;         top: 2.2em;         margin-top: -1px;         padding: 0.5em 1em;         border: 1px solid #dedede;         background-color: #fff;     }     /* sub-navigation panel open state */     .sub-nav.open {         display: block;     }     /* list of items within sub-navigation panel */     .sub-nav ul {         display: inline-block;         vertical-align: top;         margin: 0 1em 0 0;         padding: 0;     }     /* list item within sub-navigation panel */     .sub-nav li {         display: block;         list-style-type: none;         margin: 0;         padding: 0;     }   Putting it all together, here is the completed example:     <!doctype html>     <html lang=""en"">     <head>     <meta charset=""UTF-8"">     <title>Simple Accessible Mega Menu Example</title>     <style>         /* Rudimentary mega menu CSS for demonstration */             /* mega menu list */         .nav-menu {             display: block;             position: relative;             list-style: none;             margin: 0;             padding: 0;             z-index: 15;         }         /* a top level navigation item in the mega menu */         .nav-item {             list-style: none;             display: inline-block;             padding: 0;             margin: 0;         }         /* first descendant link within a top level navigation item */         .nav-item > a {             position: relative;             display: inline-block;             padding: 0.5em 1em;             margin: 0 0 -1px 0;             border: 1px solid transparent;         }         /* focus/open states of first descendant link within a top level             navigation item */         .nav-item > a:focus,         .nav-item > a.open {             border: 1px solid #dedede;         }         /* open state of first descendant link within a top level             navigation item */         .nav-item > a.open {             background-color: #fff;             border-bottom: none;             z-index: 1;         }         /* sub-navigation panel */         .sub-nav {             position: absolute;             display: none;             top: 2.2em;             margin-top: -1px;             padding: 0.5em 1em;             border: 1px solid #dedede;             background-color: #fff;         }         /* sub-navigation panel open state */         .sub-nav.open {             display: block;         }         /* list of items within sub-navigation panel */         .sub-nav ul {             display: inline-block;             vertical-align: top;             margin: 0 1em 0 0;             padding: 0;         }         /* list item within sub-navigation panel */         .sub-nav li {             display: block;             list-style-type: none;             margin: 0;             padding: 0;         }          </style>     </head>     <body>     <nav>         <ul class=""nav-menu"">             <li class=""nav-item"">                 <a href=""?movie"">Movies</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=0"">Action &amp; Adventure</a></li>                         <li><a href=""?movie&genre=2"">Children &amp; Family</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=7"">Dramas</a></li>                         <li><a href=""?movie&genre=9"">Foreign</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=14"">Musicals</a></li>                         <li><a href=""?movie&genre=15"">Romance</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>             <li class=""nav-item"">                 <a href=""?tv"">TV Shows</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=20"">Classic TV</a></li>                         <li><a href=""?tv&genre=21"">Crime TV</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=27"">Reality TV</a></li>                         <li><a href=""?tv&genre=30"">TV Action</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=33"">TV Dramas</a></li>                         <li><a href=""?tv&genre=34"">TV Horror</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>         </ul>     </nav>          <!-- include jquery -->     <script src=""//code.jquery.com/jquery-1.10.1.min.js""></script>     <!-- include the jquery-accessibleMegaMenu plugin script -->     <script src=""js/jquery-accessibleMegaMenu.js""></script>     <!-- initialize a selector as an accessibleMegaMenu -->     <script>         $(""nav:first"").accessibleMegaMenu({             /* prefix for generated unique id attributes, which are required                 to indicate aria-owns, aria-controls and aria-labelledby */             uuidPrefix: ""accessible-megamenu"",                          /* css class used to define the megamenu styling */             menuClass: ""nav-menu"",                          /* css class for a top-level navigation item in the megamenu */             topNavItemClass: ""nav-item"",                          /* css class for a megamenu panel */             panelClass: ""sub-nav"",                          /* css class for a group of items within a megamenu panel */             panelGroupClass: ""sub-nav-group"",                          /* css class for the hover state */             hoverClass: ""hover"",                          /* css class for the focus state */             focusClass: ""focus"",                          /* css class for the open state */             openClass: ""open""         });     </script>     </body>     </html> © 2020 GitHub, Inc. Terms Privacy Security Status Help Contact GitHub Pricing API Training Blog About You can’t perform that action at this time. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."
105539,20200626,github.com,https://github.com/adobe-accessibility/Accessible-Mega-Menu,text/html,text/html,en,"GitHub - adobe-accessibility/Accessible-Mega-Menu: A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. Skip to content Sign up Why GitHub? Features → Code review Project management Integrations Actions Packages Security Team management Hosting Customer stories → Security → Team Enterprise Explore Explore GitHub → Learn & contribute Topics Collections Trending Learning Lab Open source guides Connect with others Events Community forum GitHub Education Marketplace Pricing Plans → Compare plans Contact Sales Nonprofit → Education → In this repository All GitHub ↵ Jump to ↵ No suggested jump to results In this repository All GitHub ↵ Jump to ↵ In this repository All GitHub ↵ Jump to ↵ Sign in Sign up adobe-accessibility / Accessible-Mega-Menu Watch 48 Star 562 Fork 184 A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. Apache-2.0 License 562 stars 184 forks Star Watch Code Issues 27 Pull requests 11 Actions Projects Security 1 Insights More Code Issues Pull requests Actions Projects Security Insights Dismiss Join GitHub today GitHub is home to over 50 million developers working together to host and review code, manage projects, and build software together. Sign up Branch: master Go to file Clone Clone with HTTPS Use Git or checkout with SVN using the web URL. Open in Desktop Download ZIP Downloading Want to be notified of new releases in adobe-accessibility/Accessible-Mega-Menu? Sign in Sign up Launching GitHub Desktop If nothing happens, download GitHub Desktop and try again. Go back Launching GitHub Desktop If nothing happens, download GitHub Desktop and try again. Go back Launching Xcode If nothing happens, download Xcode and try again. Go back Launching Visual Studio If nothing happens, download the GitHub extension for Visual Studio and try again. Go back Latest commit majornista committed d445afc May 12, 2018 … Add openOnMouseover setting, and toggleButtonClass for responsive layout 1 To normalize behavior of top navigation links on desktop and mobile, the default behavior will be for the menu to remain closed on hover. Click should toggle the menu regardless of whether the link has a valid `href`. With `openOnMouseover: true`, hover will open the menu as before and with the menu open, clicking a top-level navigation item with a valid `href` should open the url. Add toggleButtonClass to specify a button that should toggle the menu in a responsive layout on mobile devices. Incorporate media queries for responsive layout breakpoints. Git stats 36 commits 2 branches 0 tags Files Permalink Failed to load latest commit information. Type Name Latest commit message Commit time css Add openOnMouseover setting, and toggleButtonClass for responsive layout May 11, 2018 js Add openOnMouseover setting, and toggleButtonClass for responsive layout May 11, 2018 third-party/jquery initial commit Aug 26, 2013 LICENSE initial commit Aug 26, 2013 NOTICE initial commit Aug 26, 2013 README.md initial commit Aug 26, 2013 index.html Add openOnMouseover setting, and toggleButtonClass for responsive layout May 11, 2018 package.json Updating repo references Jul 8, 2016 View code README.md Accessible Mega Menu ========================= A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. It is modeled after the mega menu on adobe.com but has been simplified for use by others. An brief explanation of our interaction design choices can be found in a blog post at Mega menu accessibility on adobe.com. Content for the links and text within the mega menu comes from the Web Content Accessibility Guidelines (WCAG) 2.0. Keyboard Accessibility The accessible mega menu supports keyboard interaction modeled after the behavior described in the WAI-ARIA Menu or Menu bar (widget) design pattern, however we also try to respect users' general expectations for the behavior of links in a global navigation. To this end, the accessible mega menu implementation permits tab focus on each of the six top-level menu items. When one of the menu items has focus, pressing the Enter key, Spacebar or Down arrow will open the submenu panel, and pressing the Left or Right arrow key will shift focus to the adjacent menu item. Links within the submenu panels are included in the tab order when the panel is open. They can also be navigated with the arrow keys or by typing the first character in the link name, which speeds up keyboard navigation considerably. Pressing the Escape key closes the submenu and restores focus to the parent menu item. Screen Reader Accessibility The accessible mega menu models its use of WAI-ARIA Roles, States, and Properties after those described in the WAI-ARIA Menu or Menu bar (widget) design pattern with some notable exceptions, so that it behaves better with screen reader user expectations for global navigation. We don't use role=""menu"" for the menu container and role=""menuitem"" for each of the links therein, because if we do, assistive technology will no longer interpret the links as links, but instead, as menu items, and the links in our global navigation will no longer show up when a screen reader user executes a shortcut command to bring up a list of links in the page. We also want to maintain the semantic structure of the submenu panels in our mega menu; our links are organized into lists and separated by headings. Omitting role=""menu"" and role=""menuitem"" for the global navigation seems the safer way to go. Usage HTML The HTML structure for the mega menu is a nav element, or any other container element, containing a list. Each list item contains a link which is followed by a div or any other container element which will serve as the pop up panel. The panel can contain any html content; in the following example, each panel contains three lists of links. You can explicitly define groups within the panel, between which a user can navigate quickly using the left and right arrow keys; in the following example, the CSS class .sub-nav-group identifies a navigable group.     <nav>         <ul class=""nav-menu"">             <li class=""nav-item"">                 <a href=""?movie"">Movies</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=0"">Action &amp; Adventure</a></li>                         <li><a href=""?movie&genre=2"">Children &amp; Family</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=7"">Dramas</a></li>                         <li><a href=""?movie&genre=9"">Foreign</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=14"">Musicals</a></li>                         <li><a href=""?movie&genre=15"">Romance</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>             <li class=""nav-item"">                 <a href=""?tv"">TV Shows</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=20"">Classic TV</a></li>                         <li><a href=""?tv&genre=21"">Crime TV</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=27"">Reality TV</a></li>                         <li><a href=""?tv&genre=30"">TV Action</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=33"">TV Dramas</a></li>                         <li><a href=""?tv&genre=34"">TV Horror</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>         </ul>     </nav> By default, accessibleMegaMenu uses the the following CSS classes to define the top-level navigation items, panels, groups within the panels, and the hover, focus, and open states. It also defines a prefix for unique id strings, which are required to indicate the relationship of a top-level navigation item to the panel it controls.     defaults = {         /* unique ID's are required to indicate aria-owns, aria-controls and aria-labelledby */         uuidPrefix: ""accessible-megamenu"",                  /* default css class used to define the megamenu styling */         menuClass: ""accessible-megamenu"",                  /* default css class for a top-level navigation item in the megamenu */         topNavItemClass: ""accessible-megamenu-top-nav-item"",                  /* default css class for a megamenu panel */         panelClass: ""accessible-megamenu-panel"",                  /* default css class for a group of items within a megamenu panel */         panelGroupClass: ""accessible-megamenu-panel-group"",                  /* default css class for the hover state */         hoverClass: ""hover"",                  /* default css class for the focus state */         focusClass: ""focus"",                  /* default css class for the open state */         openClass: ""open""      } You can optionally override the defaults to use the CSS classes you may have already defined for your mega menu. JavaScript Be sure to include jQuery and the jquery-accessibleMegaMenu.js plugin script.     <script src=""//code.jquery.com/jquery-1.10.1.min.js""></script>     <script src=""js/jquery-accessibleMegaMenu.js""></script> The following initializes the first nav element in the document as an accessibleMegaMenu, with optional CSS class overrides.     $(""nav:first"").accessibleMegaMenu({         /* prefix for generated unique id attributes, which are required             to indicate aria-owns, aria-controls and aria-labelledby */         uuidPrefix: ""accessible-megamenu"",                  /* css class used to define the megamenu styling */         menuClass: ""nav-menu"",                  /* css class for a top-level navigation item in the megamenu */         topNavItemClass: ""nav-item"",                  /* css class for a megamenu panel */         panelClass: ""sub-nav"",                  /* css class for a group of items within a megamenu panel */         panelGroupClass: ""sub-nav-group"",                  /* css class for the hover state */         hoverClass: ""hover"",                  /* css class for the focus state */         focusClass: ""focus"",                  /* css class for the open state */         openClass: ""open""     }); CSS AccessibleMegaMenu handles the showing and hiding of panels by adding or removing a CSS class. No inline styles are added to hide elements or create animation between states. Following is some rudimentary CSS for our example which enables the showing/hiding of and the layout of lists panels in the mega menu.     /* mega menu list */     .nav-menu {         display: block;         position: relative;         list-style: none;         margin: 0;         padding: 0;         z-index: 15;     }     /* a top level navigation item in the mega menu */     .nav-item {         list-style: none;         display: inline-block;         padding: 0;         margin: 0;     }     /* first descendant link within a top level navigation item */     .nav-item > a {         position: relative;         display: inline-block;         padding: 0.5em 1em;         margin: 0 0 -1px 0;         border: 1px solid transparent;     }     /* focus/open states of first descendant link within a top level         navigation item */     .nav-item > a:focus,     .nav-item > a.open {         border: 1px solid #dedede;     }     /* open state of first descendant link within a top level         navigation item */     .nav-item > a.open {         background-color: #fff;         border-bottom: none;         z-index: 1;     }     /* sub-navigation panel */     .sub-nav {         position: absolute;         display: none;         top: 2.2em;         margin-top: -1px;         padding: 0.5em 1em;         border: 1px solid #dedede;         background-color: #fff;     }     /* sub-navigation panel open state */     .sub-nav.open {         display: block;     }     /* list of items within sub-navigation panel */     .sub-nav ul {         display: inline-block;         vertical-align: top;         margin: 0 1em 0 0;         padding: 0;     }     /* list item within sub-navigation panel */     .sub-nav li {         display: block;         list-style-type: none;         margin: 0;         padding: 0;     }   Putting it all together, here is the completed example:     <!doctype html>     <html lang=""en"">     <head>     <meta charset=""UTF-8"">     <title>Simple Accessible Mega Menu Example</title>     <style>         /* Rudimentary mega menu CSS for demonstration */             /* mega menu list */         .nav-menu {             display: block;             position: relative;             list-style: none;             margin: 0;             padding: 0;             z-index: 15;         }         /* a top level navigation item in the mega menu */         .nav-item {             list-style: none;             display: inline-block;             padding: 0;             margin: 0;         }         /* first descendant link within a top level navigation item */         .nav-item > a {             position: relative;             display: inline-block;             padding: 0.5em 1em;             margin: 0 0 -1px 0;             border: 1px solid transparent;         }         /* focus/open states of first descendant link within a top level             navigation item */         .nav-item > a:focus,         .nav-item > a.open {             border: 1px solid #dedede;         }         /* open state of first descendant link within a top level             navigation item */         .nav-item > a.open {             background-color: #fff;             border-bottom: none;             z-index: 1;         }         /* sub-navigation panel */         .sub-nav {             position: absolute;             display: none;             top: 2.2em;             margin-top: -1px;             padding: 0.5em 1em;             border: 1px solid #dedede;             background-color: #fff;         }         /* sub-navigation panel open state */         .sub-nav.open {             display: block;         }         /* list of items within sub-navigation panel */         .sub-nav ul {             display: inline-block;             vertical-align: top;             margin: 0 1em 0 0;             padding: 0;         }         /* list item within sub-navigation panel */         .sub-nav li {             display: block;             list-style-type: none;             margin: 0;             padding: 0;         }          </style>     </head>     <body>     <nav>         <ul class=""nav-menu"">             <li class=""nav-item"">                 <a href=""?movie"">Movies</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=0"">Action &amp; Adventure</a></li>                         <li><a href=""?movie&genre=2"">Children &amp; Family</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=7"">Dramas</a></li>                         <li><a href=""?movie&genre=9"">Foreign</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=14"">Musicals</a></li>                         <li><a href=""?movie&genre=15"">Romance</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>             <li class=""nav-item"">                 <a href=""?tv"">TV Shows</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=20"">Classic TV</a></li>                         <li><a href=""?tv&genre=21"">Crime TV</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=27"">Reality TV</a></li>                         <li><a href=""?tv&genre=30"">TV Action</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=33"">TV Dramas</a></li>                         <li><a href=""?tv&genre=34"">TV Horror</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>         </ul>     </nav>          <!-- include jquery -->     <script src=""//code.jquery.com/jquery-1.10.1.min.js""></script>     <!-- include the jquery-accessibleMegaMenu plugin script -->     <script src=""js/jquery-accessibleMegaMenu.js""></script>     <!-- initialize a selector as an accessibleMegaMenu -->     <script>         $(""nav:first"").accessibleMegaMenu({             /* prefix for generated unique id attributes, which are required                 to indicate aria-owns, aria-controls and aria-labelledby */             uuidPrefix: ""accessible-megamenu"",                          /* css class used to define the megamenu styling */             menuClass: ""nav-menu"",                          /* css class for a top-level navigation item in the megamenu */             topNavItemClass: ""nav-item"",                          /* css class for a megamenu panel */             panelClass: ""sub-nav"",                          /* css class for a group of items within a megamenu panel */             panelGroupClass: ""sub-nav-group"",                          /* css class for the hover state */             hoverClass: ""hover"",                          /* css class for the focus state */             focusClass: ""focus"",                          /* css class for the open state */             openClass: ""open""         });     </script>     </body>     </html> About A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. Resources Readme License Apache-2.0 License Contributors 5 Languages HTML 70.8% CSS 27.3% JavaScript 1.9% © 2020 GitHub, Inc. Terms Privacy Security Status Help Contact GitHub Pricing API Training Blog About You can’t perform that action at this time. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."
116070,20200703,github.com,https://github.com/adobe-accessibility/Accessible-Mega-Menu,text/html,text/html,en,"GitHub - adobe-accessibility/Accessible-Mega-Menu: A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. Skip to content Sign up Why GitHub? Features → Code review Project management Integrations Actions Packages Security Team management Hosting Customer stories → Security → Team Enterprise Explore Explore GitHub → Learn & contribute Topics Collections Trending Learning Lab Open source guides Connect with others Events Community forum GitHub Education Marketplace Pricing Plans → Compare plans Contact Sales Nonprofit → Education → In this repository All GitHub ↵ Jump to ↵ No suggested jump to results In this repository All GitHub ↵ Jump to ↵ In this repository All GitHub ↵ Jump to ↵ Sign in Sign up adobe-accessibility / Accessible-Mega-Menu Watch 48 Star 562 Fork 184 A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. Apache-2.0 License 562 stars 184 forks Star Watch Code Issues 27 Pull requests 11 Actions Projects Security 1 Insights More Code Issues Pull requests Actions Projects Security Insights Dismiss Join GitHub today GitHub is home to over 50 million developers working together to host and review code, manage projects, and build software together. Sign up Branch: master Go to file Code Clone with HTTPS Use Git or checkout with SVN using the web URL. Open with GitHub Desktop Download ZIP Launching GitHub Desktop If nothing happens, download GitHub Desktop and try again. Go back Launching GitHub Desktop If nothing happens, download GitHub Desktop and try again. Go back Launching Xcode If nothing happens, download Xcode and try again. Go back Launching Visual Studio If nothing happens, download the GitHub extension for Visual Studio and try again. Go back Latest commit majornista committed d445afc May 11, 2018 … Add openOnMouseover setting, and toggleButtonClass for responsive layout 1 To normalize behavior of top navigation links on desktop and mobile, the default behavior will be for the menu to remain closed on hover. Click should toggle the menu regardless of whether the link has a valid `href`. With `openOnMouseover: true`, hover will open the menu as before and with the menu open, clicking a top-level navigation item with a valid `href` should open the url. Add toggleButtonClass to specify a button that should toggle the menu in a responsive layout on mobile devices. Incorporate media queries for responsive layout breakpoints. Git stats 36 commits 2 branches 0 tags Files Permalink Failed to load latest commit information. Type Name Latest commit message Commit time css Add openOnMouseover setting, and toggleButtonClass for responsive layout May 11, 2018 js Add openOnMouseover setting, and toggleButtonClass for responsive layout May 11, 2018 third-party/jquery initial commit Aug 26, 2013 LICENSE initial commit Aug 26, 2013 NOTICE initial commit Aug 26, 2013 README.md initial commit Aug 26, 2013 index.html Add openOnMouseover setting, and toggleButtonClass for responsive layout May 11, 2018 package.json Updating repo references Jul 8, 2016 View code README.md Accessible Mega Menu ========================= A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. It is modeled after the mega menu on adobe.com but has been simplified for use by others. An brief explanation of our interaction design choices can be found in a blog post at Mega menu accessibility on adobe.com. Content for the links and text within the mega menu comes from the Web Content Accessibility Guidelines (WCAG) 2.0. Keyboard Accessibility The accessible mega menu supports keyboard interaction modeled after the behavior described in the WAI-ARIA Menu or Menu bar (widget) design pattern, however we also try to respect users' general expectations for the behavior of links in a global navigation. To this end, the accessible mega menu implementation permits tab focus on each of the six top-level menu items. When one of the menu items has focus, pressing the Enter key, Spacebar or Down arrow will open the submenu panel, and pressing the Left or Right arrow key will shift focus to the adjacent menu item. Links within the submenu panels are included in the tab order when the panel is open. They can also be navigated with the arrow keys or by typing the first character in the link name, which speeds up keyboard navigation considerably. Pressing the Escape key closes the submenu and restores focus to the parent menu item. Screen Reader Accessibility The accessible mega menu models its use of WAI-ARIA Roles, States, and Properties after those described in the WAI-ARIA Menu or Menu bar (widget) design pattern with some notable exceptions, so that it behaves better with screen reader user expectations for global navigation. We don't use role=""menu"" for the menu container and role=""menuitem"" for each of the links therein, because if we do, assistive technology will no longer interpret the links as links, but instead, as menu items, and the links in our global navigation will no longer show up when a screen reader user executes a shortcut command to bring up a list of links in the page. We also want to maintain the semantic structure of the submenu panels in our mega menu; our links are organized into lists and separated by headings. Omitting role=""menu"" and role=""menuitem"" for the global navigation seems the safer way to go. Usage HTML The HTML structure for the mega menu is a nav element, or any other container element, containing a list. Each list item contains a link which is followed by a div or any other container element which will serve as the pop up panel. The panel can contain any html content; in the following example, each panel contains three lists of links. You can explicitly define groups within the panel, between which a user can navigate quickly using the left and right arrow keys; in the following example, the CSS class .sub-nav-group identifies a navigable group.     <nav>         <ul class=""nav-menu"">             <li class=""nav-item"">                 <a href=""?movie"">Movies</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=0"">Action &amp; Adventure</a></li>                         <li><a href=""?movie&genre=2"">Children &amp; Family</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=7"">Dramas</a></li>                         <li><a href=""?movie&genre=9"">Foreign</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=14"">Musicals</a></li>                         <li><a href=""?movie&genre=15"">Romance</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>             <li class=""nav-item"">                 <a href=""?tv"">TV Shows</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=20"">Classic TV</a></li>                         <li><a href=""?tv&genre=21"">Crime TV</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=27"">Reality TV</a></li>                         <li><a href=""?tv&genre=30"">TV Action</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=33"">TV Dramas</a></li>                         <li><a href=""?tv&genre=34"">TV Horror</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>         </ul>     </nav> By default, accessibleMegaMenu uses the the following CSS classes to define the top-level navigation items, panels, groups within the panels, and the hover, focus, and open states. It also defines a prefix for unique id strings, which are required to indicate the relationship of a top-level navigation item to the panel it controls.     defaults = {         /* unique ID's are required to indicate aria-owns, aria-controls and aria-labelledby */         uuidPrefix: ""accessible-megamenu"",                  /* default css class used to define the megamenu styling */         menuClass: ""accessible-megamenu"",                  /* default css class for a top-level navigation item in the megamenu */         topNavItemClass: ""accessible-megamenu-top-nav-item"",                  /* default css class for a megamenu panel */         panelClass: ""accessible-megamenu-panel"",                  /* default css class for a group of items within a megamenu panel */         panelGroupClass: ""accessible-megamenu-panel-group"",                  /* default css class for the hover state */         hoverClass: ""hover"",                  /* default css class for the focus state */         focusClass: ""focus"",                  /* default css class for the open state */         openClass: ""open""      } You can optionally override the defaults to use the CSS classes you may have already defined for your mega menu. JavaScript Be sure to include jQuery and the jquery-accessibleMegaMenu.js plugin script.     <script src=""//code.jquery.com/jquery-1.10.1.min.js""></script>     <script src=""js/jquery-accessibleMegaMenu.js""></script> The following initializes the first nav element in the document as an accessibleMegaMenu, with optional CSS class overrides.     $(""nav:first"").accessibleMegaMenu({         /* prefix for generated unique id attributes, which are required             to indicate aria-owns, aria-controls and aria-labelledby */         uuidPrefix: ""accessible-megamenu"",                  /* css class used to define the megamenu styling */         menuClass: ""nav-menu"",                  /* css class for a top-level navigation item in the megamenu */         topNavItemClass: ""nav-item"",                  /* css class for a megamenu panel */         panelClass: ""sub-nav"",                  /* css class for a group of items within a megamenu panel */         panelGroupClass: ""sub-nav-group"",                  /* css class for the hover state */         hoverClass: ""hover"",                  /* css class for the focus state */         focusClass: ""focus"",                  /* css class for the open state */         openClass: ""open""     }); CSS AccessibleMegaMenu handles the showing and hiding of panels by adding or removing a CSS class. No inline styles are added to hide elements or create animation between states. Following is some rudimentary CSS for our example which enables the showing/hiding of and the layout of lists panels in the mega menu.     /* mega menu list */     .nav-menu {         display: block;         position: relative;         list-style: none;         margin: 0;         padding: 0;         z-index: 15;     }     /* a top level navigation item in the mega menu */     .nav-item {         list-style: none;         display: inline-block;         padding: 0;         margin: 0;     }     /* first descendant link within a top level navigation item */     .nav-item > a {         position: relative;         display: inline-block;         padding: 0.5em 1em;         margin: 0 0 -1px 0;         border: 1px solid transparent;     }     /* focus/open states of first descendant link within a top level         navigation item */     .nav-item > a:focus,     .nav-item > a.open {         border: 1px solid #dedede;     }     /* open state of first descendant link within a top level         navigation item */     .nav-item > a.open {         background-color: #fff;         border-bottom: none;         z-index: 1;     }     /* sub-navigation panel */     .sub-nav {         position: absolute;         display: none;         top: 2.2em;         margin-top: -1px;         padding: 0.5em 1em;         border: 1px solid #dedede;         background-color: #fff;     }     /* sub-navigation panel open state */     .sub-nav.open {         display: block;     }     /* list of items within sub-navigation panel */     .sub-nav ul {         display: inline-block;         vertical-align: top;         margin: 0 1em 0 0;         padding: 0;     }     /* list item within sub-navigation panel */     .sub-nav li {         display: block;         list-style-type: none;         margin: 0;         padding: 0;     }   Putting it all together, here is the completed example:     <!doctype html>     <html lang=""en"">     <head>     <meta charset=""UTF-8"">     <title>Simple Accessible Mega Menu Example</title>     <style>         /* Rudimentary mega menu CSS for demonstration */             /* mega menu list */         .nav-menu {             display: block;             position: relative;             list-style: none;             margin: 0;             padding: 0;             z-index: 15;         }         /* a top level navigation item in the mega menu */         .nav-item {             list-style: none;             display: inline-block;             padding: 0;             margin: 0;         }         /* first descendant link within a top level navigation item */         .nav-item > a {             position: relative;             display: inline-block;             padding: 0.5em 1em;             margin: 0 0 -1px 0;             border: 1px solid transparent;         }         /* focus/open states of first descendant link within a top level             navigation item */         .nav-item > a:focus,         .nav-item > a.open {             border: 1px solid #dedede;         }         /* open state of first descendant link within a top level             navigation item */         .nav-item > a.open {             background-color: #fff;             border-bottom: none;             z-index: 1;         }         /* sub-navigation panel */         .sub-nav {             position: absolute;             display: none;             top: 2.2em;             margin-top: -1px;             padding: 0.5em 1em;             border: 1px solid #dedede;             background-color: #fff;         }         /* sub-navigation panel open state */         .sub-nav.open {             display: block;         }         /* list of items within sub-navigation panel */         .sub-nav ul {             display: inline-block;             vertical-align: top;             margin: 0 1em 0 0;             padding: 0;         }         /* list item within sub-navigation panel */         .sub-nav li {             display: block;             list-style-type: none;             margin: 0;             padding: 0;         }          </style>     </head>     <body>     <nav>         <ul class=""nav-menu"">             <li class=""nav-item"">                 <a href=""?movie"">Movies</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=0"">Action &amp; Adventure</a></li>                         <li><a href=""?movie&genre=2"">Children &amp; Family</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=7"">Dramas</a></li>                         <li><a href=""?movie&genre=9"">Foreign</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=14"">Musicals</a></li>                         <li><a href=""?movie&genre=15"">Romance</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>             <li class=""nav-item"">                 <a href=""?tv"">TV Shows</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=20"">Classic TV</a></li>                         <li><a href=""?tv&genre=21"">Crime TV</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=27"">Reality TV</a></li>                         <li><a href=""?tv&genre=30"">TV Action</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=33"">TV Dramas</a></li>                         <li><a href=""?tv&genre=34"">TV Horror</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>         </ul>     </nav>          <!-- include jquery -->     <script src=""//code.jquery.com/jquery-1.10.1.min.js""></script>     <!-- include the jquery-accessibleMegaMenu plugin script -->     <script src=""js/jquery-accessibleMegaMenu.js""></script>     <!-- initialize a selector as an accessibleMegaMenu -->     <script>         $(""nav:first"").accessibleMegaMenu({             /* prefix for generated unique id attributes, which are required                 to indicate aria-owns, aria-controls and aria-labelledby */             uuidPrefix: ""accessible-megamenu"",                          /* css class used to define the megamenu styling */             menuClass: ""nav-menu"",                          /* css class for a top-level navigation item in the megamenu */             topNavItemClass: ""nav-item"",                          /* css class for a megamenu panel */             panelClass: ""sub-nav"",                          /* css class for a group of items within a megamenu panel */             panelGroupClass: ""sub-nav-group"",                          /* css class for the hover state */             hoverClass: ""hover"",                          /* css class for the focus state */             focusClass: ""focus"",                          /* css class for the open state */             openClass: ""open""         });     </script>     </body>     </html> About A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. Resources Readme License Apache-2.0 License Releases No releases published Contributors 5 Languages HTML 70.8% CSS 27.3% JavaScript 1.9% © 2020 GitHub, Inc. Terms Privacy Security Status Help Contact GitHub Pricing API Training Blog About You can’t perform that action at this time. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."
126306,20200710,github.com,https://github.com/adobe-accessibility/Accessible-Mega-Menu,text/html,text/html,en,"GitHub - adobe-accessibility/Accessible-Mega-Menu: A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. Skip to content Sign up Why GitHub? Features → Code review Project management Integrations Actions Packages Security Team management Hosting Customer stories → Security → Team Enterprise Explore Explore GitHub → Learn & contribute Topics Collections Trending Learning Lab Open source guides Connect with others Events Community forum GitHub Education Marketplace Pricing Plans → Compare plans Contact Sales Nonprofit → Education → In this repository All GitHub ↵ Jump to ↵ No suggested jump to results In this repository All GitHub ↵ Jump to ↵ In this repository All GitHub ↵ Jump to ↵ Sign in Sign up adobe-accessibility / Accessible-Mega-Menu Watch 48 Star 562 Fork 186 A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. Apache-2.0 License 562 stars 186 forks Star Watch Code Issues 27 Pull requests 12 Actions Projects 0 Security Insights More Code Issues Pull requests Actions Projects Security Insights Dismiss Join GitHub today GitHub is home to over 50 million developers working together to host and review code, manage projects, and build software together. Sign up Branch: master Go to file Code Clone with HTTPS Use Git or checkout with SVN using the web URL. Open with GitHub Desktop Download ZIP Launching GitHub Desktop If nothing happens, download GitHub Desktop and try again. Go back Launching GitHub Desktop If nothing happens, download GitHub Desktop and try again. Go back Launching Xcode If nothing happens, download Xcode and try again. Go back Launching Visual Studio If nothing happens, download the GitHub extension for Visual Studio and try again. Go back Latest commit majornista committed d445afc May 11, 2018 … Add openOnMouseover setting, and toggleButtonClass for responsive layout 1 To normalize behavior of top navigation links on desktop and mobile, the default behavior will be for the menu to remain closed on hover. Click should toggle the menu regardless of whether the link has a valid `href`. With `openOnMouseover: true`, hover will open the menu as before and with the menu open, clicking a top-level navigation item with a valid `href` should open the url. Add toggleButtonClass to specify a button that should toggle the menu in a responsive layout on mobile devices. Incorporate media queries for responsive layout breakpoints. Git stats 36 commits 2 branches 0 tags Files Permalink Failed to load latest commit information. Type Name Latest commit message Commit time css Add openOnMouseover setting, and toggleButtonClass for responsive layout May 11, 2018 js Add openOnMouseover setting, and toggleButtonClass for responsive layout May 11, 2018 third-party/jquery initial commit Aug 26, 2013 LICENSE initial commit Aug 26, 2013 NOTICE initial commit Aug 26, 2013 README.md initial commit Aug 26, 2013 index.html Add openOnMouseover setting, and toggleButtonClass for responsive layout May 11, 2018 package.json Updating repo references Jul 8, 2016 View code README.md Accessible Mega Menu ========================= A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. It is modeled after the mega menu on adobe.com but has been simplified for use by others. An brief explanation of our interaction design choices can be found in a blog post at Mega menu accessibility on adobe.com. Content for the links and text within the mega menu comes from the Web Content Accessibility Guidelines (WCAG) 2.0. Keyboard Accessibility The accessible mega menu supports keyboard interaction modeled after the behavior described in the WAI-ARIA Menu or Menu bar (widget) design pattern, however we also try to respect users' general expectations for the behavior of links in a global navigation. To this end, the accessible mega menu implementation permits tab focus on each of the six top-level menu items. When one of the menu items has focus, pressing the Enter key, Spacebar or Down arrow will open the submenu panel, and pressing the Left or Right arrow key will shift focus to the adjacent menu item. Links within the submenu panels are included in the tab order when the panel is open. They can also be navigated with the arrow keys or by typing the first character in the link name, which speeds up keyboard navigation considerably. Pressing the Escape key closes the submenu and restores focus to the parent menu item. Screen Reader Accessibility The accessible mega menu models its use of WAI-ARIA Roles, States, and Properties after those described in the WAI-ARIA Menu or Menu bar (widget) design pattern with some notable exceptions, so that it behaves better with screen reader user expectations for global navigation. We don't use role=""menu"" for the menu container and role=""menuitem"" for each of the links therein, because if we do, assistive technology will no longer interpret the links as links, but instead, as menu items, and the links in our global navigation will no longer show up when a screen reader user executes a shortcut command to bring up a list of links in the page. We also want to maintain the semantic structure of the submenu panels in our mega menu; our links are organized into lists and separated by headings. Omitting role=""menu"" and role=""menuitem"" for the global navigation seems the safer way to go. Usage HTML The HTML structure for the mega menu is a nav element, or any other container element, containing a list. Each list item contains a link which is followed by a div or any other container element which will serve as the pop up panel. The panel can contain any html content; in the following example, each panel contains three lists of links. You can explicitly define groups within the panel, between which a user can navigate quickly using the left and right arrow keys; in the following example, the CSS class .sub-nav-group identifies a navigable group.     <nav>         <ul class=""nav-menu"">             <li class=""nav-item"">                 <a href=""?movie"">Movies</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=0"">Action &amp; Adventure</a></li>                         <li><a href=""?movie&genre=2"">Children &amp; Family</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=7"">Dramas</a></li>                         <li><a href=""?movie&genre=9"">Foreign</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=14"">Musicals</a></li>                         <li><a href=""?movie&genre=15"">Romance</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>             <li class=""nav-item"">                 <a href=""?tv"">TV Shows</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=20"">Classic TV</a></li>                         <li><a href=""?tv&genre=21"">Crime TV</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=27"">Reality TV</a></li>                         <li><a href=""?tv&genre=30"">TV Action</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=33"">TV Dramas</a></li>                         <li><a href=""?tv&genre=34"">TV Horror</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>         </ul>     </nav> By default, accessibleMegaMenu uses the the following CSS classes to define the top-level navigation items, panels, groups within the panels, and the hover, focus, and open states. It also defines a prefix for unique id strings, which are required to indicate the relationship of a top-level navigation item to the panel it controls.     defaults = {         /* unique ID's are required to indicate aria-owns, aria-controls and aria-labelledby */         uuidPrefix: ""accessible-megamenu"",                  /* default css class used to define the megamenu styling */         menuClass: ""accessible-megamenu"",                  /* default css class for a top-level navigation item in the megamenu */         topNavItemClass: ""accessible-megamenu-top-nav-item"",                  /* default css class for a megamenu panel */         panelClass: ""accessible-megamenu-panel"",                  /* default css class for a group of items within a megamenu panel */         panelGroupClass: ""accessible-megamenu-panel-group"",                  /* default css class for the hover state */         hoverClass: ""hover"",                  /* default css class for the focus state */         focusClass: ""focus"",                  /* default css class for the open state */         openClass: ""open""      } You can optionally override the defaults to use the CSS classes you may have already defined for your mega menu. JavaScript Be sure to include jQuery and the jquery-accessibleMegaMenu.js plugin script.     <script src=""//code.jquery.com/jquery-1.10.1.min.js""></script>     <script src=""js/jquery-accessibleMegaMenu.js""></script> The following initializes the first nav element in the document as an accessibleMegaMenu, with optional CSS class overrides.     $(""nav:first"").accessibleMegaMenu({         /* prefix for generated unique id attributes, which are required             to indicate aria-owns, aria-controls and aria-labelledby */         uuidPrefix: ""accessible-megamenu"",                  /* css class used to define the megamenu styling */         menuClass: ""nav-menu"",                  /* css class for a top-level navigation item in the megamenu */         topNavItemClass: ""nav-item"",                  /* css class for a megamenu panel */         panelClass: ""sub-nav"",                  /* css class for a group of items within a megamenu panel */         panelGroupClass: ""sub-nav-group"",                  /* css class for the hover state */         hoverClass: ""hover"",                  /* css class for the focus state */         focusClass: ""focus"",                  /* css class for the open state */         openClass: ""open""     }); CSS AccessibleMegaMenu handles the showing and hiding of panels by adding or removing a CSS class. No inline styles are added to hide elements or create animation between states. Following is some rudimentary CSS for our example which enables the showing/hiding of and the layout of lists panels in the mega menu.     /* mega menu list */     .nav-menu {         display: block;         position: relative;         list-style: none;         margin: 0;         padding: 0;         z-index: 15;     }     /* a top level navigation item in the mega menu */     .nav-item {         list-style: none;         display: inline-block;         padding: 0;         margin: 0;     }     /* first descendant link within a top level navigation item */     .nav-item > a {         position: relative;         display: inline-block;         padding: 0.5em 1em;         margin: 0 0 -1px 0;         border: 1px solid transparent;     }     /* focus/open states of first descendant link within a top level         navigation item */     .nav-item > a:focus,     .nav-item > a.open {         border: 1px solid #dedede;     }     /* open state of first descendant link within a top level         navigation item */     .nav-item > a.open {         background-color: #fff;         border-bottom: none;         z-index: 1;     }     /* sub-navigation panel */     .sub-nav {         position: absolute;         display: none;         top: 2.2em;         margin-top: -1px;         padding: 0.5em 1em;         border: 1px solid #dedede;         background-color: #fff;     }     /* sub-navigation panel open state */     .sub-nav.open {         display: block;     }     /* list of items within sub-navigation panel */     .sub-nav ul {         display: inline-block;         vertical-align: top;         margin: 0 1em 0 0;         padding: 0;     }     /* list item within sub-navigation panel */     .sub-nav li {         display: block;         list-style-type: none;         margin: 0;         padding: 0;     }   Putting it all together, here is the completed example:     <!doctype html>     <html lang=""en"">     <head>     <meta charset=""UTF-8"">     <title>Simple Accessible Mega Menu Example</title>     <style>         /* Rudimentary mega menu CSS for demonstration */             /* mega menu list */         .nav-menu {             display: block;             position: relative;             list-style: none;             margin: 0;             padding: 0;             z-index: 15;         }         /* a top level navigation item in the mega menu */         .nav-item {             list-style: none;             display: inline-block;             padding: 0;             margin: 0;         }         /* first descendant link within a top level navigation item */         .nav-item > a {             position: relative;             display: inline-block;             padding: 0.5em 1em;             margin: 0 0 -1px 0;             border: 1px solid transparent;         }         /* focus/open states of first descendant link within a top level             navigation item */         .nav-item > a:focus,         .nav-item > a.open {             border: 1px solid #dedede;         }         /* open state of first descendant link within a top level             navigation item */         .nav-item > a.open {             background-color: #fff;             border-bottom: none;             z-index: 1;         }         /* sub-navigation panel */         .sub-nav {             position: absolute;             display: none;             top: 2.2em;             margin-top: -1px;             padding: 0.5em 1em;             border: 1px solid #dedede;             background-color: #fff;         }         /* sub-navigation panel open state */         .sub-nav.open {             display: block;         }         /* list of items within sub-navigation panel */         .sub-nav ul {             display: inline-block;             vertical-align: top;             margin: 0 1em 0 0;             padding: 0;         }         /* list item within sub-navigation panel */         .sub-nav li {             display: block;             list-style-type: none;             margin: 0;             padding: 0;         }          </style>     </head>     <body>     <nav>         <ul class=""nav-menu"">             <li class=""nav-item"">                 <a href=""?movie"">Movies</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=0"">Action &amp; Adventure</a></li>                         <li><a href=""?movie&genre=2"">Children &amp; Family</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=7"">Dramas</a></li>                         <li><a href=""?movie&genre=9"">Foreign</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=14"">Musicals</a></li>                         <li><a href=""?movie&genre=15"">Romance</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>             <li class=""nav-item"">                 <a href=""?tv"">TV Shows</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=20"">Classic TV</a></li>                         <li><a href=""?tv&genre=21"">Crime TV</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=27"">Reality TV</a></li>                         <li><a href=""?tv&genre=30"">TV Action</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=33"">TV Dramas</a></li>                         <li><a href=""?tv&genre=34"">TV Horror</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>         </ul>     </nav>          <!-- include jquery -->     <script src=""//code.jquery.com/jquery-1.10.1.min.js""></script>     <!-- include the jquery-accessibleMegaMenu plugin script -->     <script src=""js/jquery-accessibleMegaMenu.js""></script>     <!-- initialize a selector as an accessibleMegaMenu -->     <script>         $(""nav:first"").accessibleMegaMenu({             /* prefix for generated unique id attributes, which are required                 to indicate aria-owns, aria-controls and aria-labelledby */             uuidPrefix: ""accessible-megamenu"",                          /* css class used to define the megamenu styling */             menuClass: ""nav-menu"",                          /* css class for a top-level navigation item in the megamenu */             topNavItemClass: ""nav-item"",                          /* css class for a megamenu panel */             panelClass: ""sub-nav"",                          /* css class for a group of items within a megamenu panel */             panelGroupClass: ""sub-nav-group"",                          /* css class for the hover state */             hoverClass: ""hover"",                          /* css class for the focus state */             focusClass: ""focus"",                          /* css class for the open state */             openClass: ""open""         });     </script>     </body>     </html> About A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. Resources Readme License Apache-2.0 License Releases No releases published Used by 9 + 1 Contributors 5 Languages HTML 70.8% CSS 27.3% JavaScript 1.9% © 2020 GitHub, Inc. Terms Privacy Security Status Help Contact GitHub Pricing API Training Blog About You can’t perform that action at this time. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."
136730,20200717,github.com,https://github.com/adobe-accessibility/Accessible-Mega-Menu,text/html,text/html,en,"GitHub - adobe-accessibility/Accessible-Mega-Menu: A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. Skip to content Sign up Why GitHub? Features → Code review Project management Integrations Actions Packages Security Team management Hosting Customer stories → Security → Team Enterprise Explore Explore GitHub → Learn & contribute Topics Collections Trending Learning Lab Open source guides Connect with others Events Community forum GitHub Education Marketplace Pricing Plans → Compare plans Contact Sales Nonprofit → Education → In this repository All GitHub ↵ Jump to ↵ No suggested jump to results In this repository All GitHub ↵ Jump to ↵ In this repository All GitHub ↵ Jump to ↵ Sign in Sign up adobe-accessibility / Accessible-Mega-Menu Watch 49 Star 564 Fork 186 A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. Apache-2.0 License 564 stars 186 forks Star Watch Code Issues 27 Pull requests 12 Actions Projects 0 Security Insights More Code Issues Pull requests Actions Projects Security Insights Dismiss Join GitHub today GitHub is home to over 50 million developers working together to host and review code, manage projects, and build software together. Sign up Branch: master Go to file Code Clone with HTTPS Use Git or checkout with SVN using the web URL. Open with GitHub Desktop Download ZIP Launching GitHub Desktop If nothing happens, download GitHub Desktop and try again. Go back Launching GitHub Desktop If nothing happens, download GitHub Desktop and try again. Go back Launching Xcode If nothing happens, download Xcode and try again. Go back Launching Visual Studio If nothing happens, download the GitHub extension for Visual Studio and try again. Go back Latest commit majornista committed d445afc May 11, 2018 … Add openOnMouseover setting, and toggleButtonClass for responsive layout 1 To normalize behavior of top navigation links on desktop and mobile, the default behavior will be for the menu to remain closed on hover. Click should toggle the menu regardless of whether the link has a valid `href`. With `openOnMouseover: true`, hover will open the menu as before and with the menu open, clicking a top-level navigation item with a valid `href` should open the url. Add toggleButtonClass to specify a button that should toggle the menu in a responsive layout on mobile devices. Incorporate media queries for responsive layout breakpoints. Git stats 36 commits 2 branches 0 tags Files Permalink Failed to load latest commit information. Type Name Latest commit message Commit time css Add openOnMouseover setting, and toggleButtonClass for responsive layout May 11, 2018 js Add openOnMouseover setting, and toggleButtonClass for responsive layout May 11, 2018 third-party/jquery initial commit Aug 26, 2013 LICENSE initial commit Aug 26, 2013 NOTICE initial commit Aug 26, 2013 README.md initial commit Aug 26, 2013 index.html Add openOnMouseover setting, and toggleButtonClass for responsive layout May 11, 2018 package.json Updating repo references Jul 8, 2016 View code README.md Accessible Mega Menu ========================= A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. It is modeled after the mega menu on adobe.com but has been simplified for use by others. An brief explanation of our interaction design choices can be found in a blog post at Mega menu accessibility on adobe.com. Content for the links and text within the mega menu comes from the Web Content Accessibility Guidelines (WCAG) 2.0. Keyboard Accessibility The accessible mega menu supports keyboard interaction modeled after the behavior described in the WAI-ARIA Menu or Menu bar (widget) design pattern, however we also try to respect users' general expectations for the behavior of links in a global navigation. To this end, the accessible mega menu implementation permits tab focus on each of the six top-level menu items. When one of the menu items has focus, pressing the Enter key, Spacebar or Down arrow will open the submenu panel, and pressing the Left or Right arrow key will shift focus to the adjacent menu item. Links within the submenu panels are included in the tab order when the panel is open. They can also be navigated with the arrow keys or by typing the first character in the link name, which speeds up keyboard navigation considerably. Pressing the Escape key closes the submenu and restores focus to the parent menu item. Screen Reader Accessibility The accessible mega menu models its use of WAI-ARIA Roles, States, and Properties after those described in the WAI-ARIA Menu or Menu bar (widget) design pattern with some notable exceptions, so that it behaves better with screen reader user expectations for global navigation. We don't use role=""menu"" for the menu container and role=""menuitem"" for each of the links therein, because if we do, assistive technology will no longer interpret the links as links, but instead, as menu items, and the links in our global navigation will no longer show up when a screen reader user executes a shortcut command to bring up a list of links in the page. We also want to maintain the semantic structure of the submenu panels in our mega menu; our links are organized into lists and separated by headings. Omitting role=""menu"" and role=""menuitem"" for the global navigation seems the safer way to go. Usage HTML The HTML structure for the mega menu is a nav element, or any other container element, containing a list. Each list item contains a link which is followed by a div or any other container element which will serve as the pop up panel. The panel can contain any html content; in the following example, each panel contains three lists of links. You can explicitly define groups within the panel, between which a user can navigate quickly using the left and right arrow keys; in the following example, the CSS class .sub-nav-group identifies a navigable group.     <nav>         <ul class=""nav-menu"">             <li class=""nav-item"">                 <a href=""?movie"">Movies</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=0"">Action &amp; Adventure</a></li>                         <li><a href=""?movie&genre=2"">Children &amp; Family</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=7"">Dramas</a></li>                         <li><a href=""?movie&genre=9"">Foreign</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=14"">Musicals</a></li>                         <li><a href=""?movie&genre=15"">Romance</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>             <li class=""nav-item"">                 <a href=""?tv"">TV Shows</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=20"">Classic TV</a></li>                         <li><a href=""?tv&genre=21"">Crime TV</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=27"">Reality TV</a></li>                         <li><a href=""?tv&genre=30"">TV Action</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=33"">TV Dramas</a></li>                         <li><a href=""?tv&genre=34"">TV Horror</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>         </ul>     </nav> By default, accessibleMegaMenu uses the the following CSS classes to define the top-level navigation items, panels, groups within the panels, and the hover, focus, and open states. It also defines a prefix for unique id strings, which are required to indicate the relationship of a top-level navigation item to the panel it controls.     defaults = {         /* unique ID's are required to indicate aria-owns, aria-controls and aria-labelledby */         uuidPrefix: ""accessible-megamenu"",                  /* default css class used to define the megamenu styling */         menuClass: ""accessible-megamenu"",                  /* default css class for a top-level navigation item in the megamenu */         topNavItemClass: ""accessible-megamenu-top-nav-item"",                  /* default css class for a megamenu panel */         panelClass: ""accessible-megamenu-panel"",                  /* default css class for a group of items within a megamenu panel */         panelGroupClass: ""accessible-megamenu-panel-group"",                  /* default css class for the hover state */         hoverClass: ""hover"",                  /* default css class for the focus state */         focusClass: ""focus"",                  /* default css class for the open state */         openClass: ""open""      } You can optionally override the defaults to use the CSS classes you may have already defined for your mega menu. JavaScript Be sure to include jQuery and the jquery-accessibleMegaMenu.js plugin script.     <script src=""//code.jquery.com/jquery-1.10.1.min.js""></script>     <script src=""js/jquery-accessibleMegaMenu.js""></script> The following initializes the first nav element in the document as an accessibleMegaMenu, with optional CSS class overrides.     $(""nav:first"").accessibleMegaMenu({         /* prefix for generated unique id attributes, which are required             to indicate aria-owns, aria-controls and aria-labelledby */         uuidPrefix: ""accessible-megamenu"",                  /* css class used to define the megamenu styling */         menuClass: ""nav-menu"",                  /* css class for a top-level navigation item in the megamenu */         topNavItemClass: ""nav-item"",                  /* css class for a megamenu panel */         panelClass: ""sub-nav"",                  /* css class for a group of items within a megamenu panel */         panelGroupClass: ""sub-nav-group"",                  /* css class for the hover state */         hoverClass: ""hover"",                  /* css class for the focus state */         focusClass: ""focus"",                  /* css class for the open state */         openClass: ""open""     }); CSS AccessibleMegaMenu handles the showing and hiding of panels by adding or removing a CSS class. No inline styles are added to hide elements or create animation between states. Following is some rudimentary CSS for our example which enables the showing/hiding of and the layout of lists panels in the mega menu.     /* mega menu list */     .nav-menu {         display: block;         position: relative;         list-style: none;         margin: 0;         padding: 0;         z-index: 15;     }     /* a top level navigation item in the mega menu */     .nav-item {         list-style: none;         display: inline-block;         padding: 0;         margin: 0;     }     /* first descendant link within a top level navigation item */     .nav-item > a {         position: relative;         display: inline-block;         padding: 0.5em 1em;         margin: 0 0 -1px 0;         border: 1px solid transparent;     }     /* focus/open states of first descendant link within a top level         navigation item */     .nav-item > a:focus,     .nav-item > a.open {         border: 1px solid #dedede;     }     /* open state of first descendant link within a top level         navigation item */     .nav-item > a.open {         background-color: #fff;         border-bottom: none;         z-index: 1;     }     /* sub-navigation panel */     .sub-nav {         position: absolute;         display: none;         top: 2.2em;         margin-top: -1px;         padding: 0.5em 1em;         border: 1px solid #dedede;         background-color: #fff;     }     /* sub-navigation panel open state */     .sub-nav.open {         display: block;     }     /* list of items within sub-navigation panel */     .sub-nav ul {         display: inline-block;         vertical-align: top;         margin: 0 1em 0 0;         padding: 0;     }     /* list item within sub-navigation panel */     .sub-nav li {         display: block;         list-style-type: none;         margin: 0;         padding: 0;     }   Putting it all together, here is the completed example:     <!doctype html>     <html lang=""en"">     <head>     <meta charset=""UTF-8"">     <title>Simple Accessible Mega Menu Example</title>     <style>         /* Rudimentary mega menu CSS for demonstration */             /* mega menu list */         .nav-menu {             display: block;             position: relative;             list-style: none;             margin: 0;             padding: 0;             z-index: 15;         }         /* a top level navigation item in the mega menu */         .nav-item {             list-style: none;             display: inline-block;             padding: 0;             margin: 0;         }         /* first descendant link within a top level navigation item */         .nav-item > a {             position: relative;             display: inline-block;             padding: 0.5em 1em;             margin: 0 0 -1px 0;             border: 1px solid transparent;         }         /* focus/open states of first descendant link within a top level             navigation item */         .nav-item > a:focus,         .nav-item > a.open {             border: 1px solid #dedede;         }         /* open state of first descendant link within a top level             navigation item */         .nav-item > a.open {             background-color: #fff;             border-bottom: none;             z-index: 1;         }         /* sub-navigation panel */         .sub-nav {             position: absolute;             display: none;             top: 2.2em;             margin-top: -1px;             padding: 0.5em 1em;             border: 1px solid #dedede;             background-color: #fff;         }         /* sub-navigation panel open state */         .sub-nav.open {             display: block;         }         /* list of items within sub-navigation panel */         .sub-nav ul {             display: inline-block;             vertical-align: top;             margin: 0 1em 0 0;             padding: 0;         }         /* list item within sub-navigation panel */         .sub-nav li {             display: block;             list-style-type: none;             margin: 0;             padding: 0;         }          </style>     </head>     <body>     <nav>         <ul class=""nav-menu"">             <li class=""nav-item"">                 <a href=""?movie"">Movies</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=0"">Action &amp; Adventure</a></li>                         <li><a href=""?movie&genre=2"">Children &amp; Family</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=7"">Dramas</a></li>                         <li><a href=""?movie&genre=9"">Foreign</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=14"">Musicals</a></li>                         <li><a href=""?movie&genre=15"">Romance</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>             <li class=""nav-item"">                 <a href=""?tv"">TV Shows</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=20"">Classic TV</a></li>                         <li><a href=""?tv&genre=21"">Crime TV</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=27"">Reality TV</a></li>                         <li><a href=""?tv&genre=30"">TV Action</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=33"">TV Dramas</a></li>                         <li><a href=""?tv&genre=34"">TV Horror</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>         </ul>     </nav>          <!-- include jquery -->     <script src=""//code.jquery.com/jquery-1.10.1.min.js""></script>     <!-- include the jquery-accessibleMegaMenu plugin script -->     <script src=""js/jquery-accessibleMegaMenu.js""></script>     <!-- initialize a selector as an accessibleMegaMenu -->     <script>         $(""nav:first"").accessibleMegaMenu({             /* prefix for generated unique id attributes, which are required                 to indicate aria-owns, aria-controls and aria-labelledby */             uuidPrefix: ""accessible-megamenu"",                          /* css class used to define the megamenu styling */             menuClass: ""nav-menu"",                          /* css class for a top-level navigation item in the megamenu */             topNavItemClass: ""nav-item"",                          /* css class for a megamenu panel */             panelClass: ""sub-nav"",                          /* css class for a group of items within a megamenu panel */             panelGroupClass: ""sub-nav-group"",                          /* css class for the hover state */             hoverClass: ""hover"",                          /* css class for the focus state */             focusClass: ""focus"",                          /* css class for the open state */             openClass: ""open""         });     </script>     </body>     </html> About A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. Resources Readme License Apache-2.0 License Releases No releases published Used by 10 + 2 Contributors 5 Languages HTML 70.8% CSS 27.3% JavaScript 1.9% © 2020 GitHub, Inc. Terms Privacy Security Status Help Contact GitHub Pricing API Training Blog About You can’t perform that action at this time. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."
147196,20200724,github.com,https://github.com/adobe-accessibility/Accessible-Mega-Menu,text/html,text/html,en,"GitHub - adobe-accessibility/Accessible-Mega-Menu: A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. Skip to content Sign up Why GitHub? Features → Code review Project management Integrations Actions Packages Security Team management Hosting Mobile Customer stories → Security → Team Enterprise Explore Explore GitHub → Learn & contribute Topics Collections Trending Learning Lab Open source guides Connect with others Events Community forum GitHub Education Marketplace Pricing Plans → Compare plans Contact Sales Nonprofit → Education → In this repository All GitHub ↵ Jump to ↵ No suggested jump to results In this repository All GitHub ↵ Jump to ↵ In this repository All GitHub ↵ Jump to ↵ Sign in Sign up adobe-accessibility / Accessible-Mega-Menu Watch 49 Star 564 Fork 186 A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. Apache-2.0 License 564 stars 186 forks Star Watch Code Issues 27 Pull requests 12 Actions Projects 0 Security Insights More Code Issues Pull requests Actions Projects Security Insights Dismiss Join GitHub today GitHub is home to over 50 million developers working together to host and review code, manage projects, and build software together. Sign up master 2 branches 0 tags Go to file Code Clone with HTTPS Use Git or checkout with SVN using the web URL. Open with GitHub Desktop Download ZIP Launching GitHub Desktop If nothing happens, download GitHub Desktop and try again. Go back Launching GitHub Desktop If nothing happens, download GitHub Desktop and try again. Go back Launching Xcode If nothing happens, download Xcode and try again. Go back Launching Visual Studio If nothing happens, download the GitHub extension for Visual Studio and try again. Go back Latest commit majornista Add openOnMouseover setting, and toggleButtonClass for responsive layout … 1 d445afc May 11, 2018 Add openOnMouseover setting, and toggleButtonClass for responsive layout To normalize behavior of top navigation links on desktop and mobile, the default behavior will be for the menu to remain closed on hover. Click should toggle the menu regardless of whether the link has a valid `href`. With `openOnMouseover: true`, hover will open the menu as before and with the menu open, clicking a top-level navigation item with a valid `href` should open the url. Add toggleButtonClass to specify a button that should toggle the menu in a responsive layout on mobile devices. Incorporate media queries for responsive layout breakpoints. d445afc 1 Git stats 36 commits Files Permalink Failed to load latest commit information. Type Name Latest commit message Commit time css Add openOnMouseover setting, and toggleButtonClass for responsive layout May 11, 2018 js Add openOnMouseover setting, and toggleButtonClass for responsive layout May 11, 2018 third-party/jquery initial commit Aug 26, 2013 LICENSE initial commit Aug 26, 2013 NOTICE initial commit Aug 26, 2013 README.md initial commit Aug 26, 2013 index.html Add openOnMouseover setting, and toggleButtonClass for responsive layout May 11, 2018 package.json Updating repo references Jul 8, 2016 View code README.md Accessible Mega Menu ========================= A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. It is modeled after the mega menu on adobe.com but has been simplified for use by others. An brief explanation of our interaction design choices can be found in a blog post at Mega menu accessibility on adobe.com. Content for the links and text within the mega menu comes from the Web Content Accessibility Guidelines (WCAG) 2.0. Keyboard Accessibility The accessible mega menu supports keyboard interaction modeled after the behavior described in the WAI-ARIA Menu or Menu bar (widget) design pattern, however we also try to respect users' general expectations for the behavior of links in a global navigation. To this end, the accessible mega menu implementation permits tab focus on each of the six top-level menu items. When one of the menu items has focus, pressing the Enter key, Spacebar or Down arrow will open the submenu panel, and pressing the Left or Right arrow key will shift focus to the adjacent menu item. Links within the submenu panels are included in the tab order when the panel is open. They can also be navigated with the arrow keys or by typing the first character in the link name, which speeds up keyboard navigation considerably. Pressing the Escape key closes the submenu and restores focus to the parent menu item. Screen Reader Accessibility The accessible mega menu models its use of WAI-ARIA Roles, States, and Properties after those described in the WAI-ARIA Menu or Menu bar (widget) design pattern with some notable exceptions, so that it behaves better with screen reader user expectations for global navigation. We don't use role=""menu"" for the menu container and role=""menuitem"" for each of the links therein, because if we do, assistive technology will no longer interpret the links as links, but instead, as menu items, and the links in our global navigation will no longer show up when a screen reader user executes a shortcut command to bring up a list of links in the page. We also want to maintain the semantic structure of the submenu panels in our mega menu; our links are organized into lists and separated by headings. Omitting role=""menu"" and role=""menuitem"" for the global navigation seems the safer way to go. Usage HTML The HTML structure for the mega menu is a nav element, or any other container element, containing a list. Each list item contains a link which is followed by a div or any other container element which will serve as the pop up panel. The panel can contain any html content; in the following example, each panel contains three lists of links. You can explicitly define groups within the panel, between which a user can navigate quickly using the left and right arrow keys; in the following example, the CSS class .sub-nav-group identifies a navigable group.     <nav>         <ul class=""nav-menu"">             <li class=""nav-item"">                 <a href=""?movie"">Movies</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=0"">Action &amp; Adventure</a></li>                         <li><a href=""?movie&genre=2"">Children &amp; Family</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=7"">Dramas</a></li>                         <li><a href=""?movie&genre=9"">Foreign</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=14"">Musicals</a></li>                         <li><a href=""?movie&genre=15"">Romance</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>             <li class=""nav-item"">                 <a href=""?tv"">TV Shows</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=20"">Classic TV</a></li>                         <li><a href=""?tv&genre=21"">Crime TV</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=27"">Reality TV</a></li>                         <li><a href=""?tv&genre=30"">TV Action</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=33"">TV Dramas</a></li>                         <li><a href=""?tv&genre=34"">TV Horror</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>         </ul>     </nav> By default, accessibleMegaMenu uses the the following CSS classes to define the top-level navigation items, panels, groups within the panels, and the hover, focus, and open states. It also defines a prefix for unique id strings, which are required to indicate the relationship of a top-level navigation item to the panel it controls.     defaults = {         /* unique ID's are required to indicate aria-owns, aria-controls and aria-labelledby */         uuidPrefix: ""accessible-megamenu"",                  /* default css class used to define the megamenu styling */         menuClass: ""accessible-megamenu"",                  /* default css class for a top-level navigation item in the megamenu */         topNavItemClass: ""accessible-megamenu-top-nav-item"",                  /* default css class for a megamenu panel */         panelClass: ""accessible-megamenu-panel"",                  /* default css class for a group of items within a megamenu panel */         panelGroupClass: ""accessible-megamenu-panel-group"",                  /* default css class for the hover state */         hoverClass: ""hover"",                  /* default css class for the focus state */         focusClass: ""focus"",                  /* default css class for the open state */         openClass: ""open""      } You can optionally override the defaults to use the CSS classes you may have already defined for your mega menu. JavaScript Be sure to include jQuery and the jquery-accessibleMegaMenu.js plugin script.     <script src=""//code.jquery.com/jquery-1.10.1.min.js""></script>     <script src=""js/jquery-accessibleMegaMenu.js""></script> The following initializes the first nav element in the document as an accessibleMegaMenu, with optional CSS class overrides.     $(""nav:first"").accessibleMegaMenu({         /* prefix for generated unique id attributes, which are required             to indicate aria-owns, aria-controls and aria-labelledby */         uuidPrefix: ""accessible-megamenu"",                  /* css class used to define the megamenu styling */         menuClass: ""nav-menu"",                  /* css class for a top-level navigation item in the megamenu */         topNavItemClass: ""nav-item"",                  /* css class for a megamenu panel */         panelClass: ""sub-nav"",                  /* css class for a group of items within a megamenu panel */         panelGroupClass: ""sub-nav-group"",                  /* css class for the hover state */         hoverClass: ""hover"",                  /* css class for the focus state */         focusClass: ""focus"",                  /* css class for the open state */         openClass: ""open""     }); CSS AccessibleMegaMenu handles the showing and hiding of panels by adding or removing a CSS class. No inline styles are added to hide elements or create animation between states. Following is some rudimentary CSS for our example which enables the showing/hiding of and the layout of lists panels in the mega menu.     /* mega menu list */     .nav-menu {         display: block;         position: relative;         list-style: none;         margin: 0;         padding: 0;         z-index: 15;     }     /* a top level navigation item in the mega menu */     .nav-item {         list-style: none;         display: inline-block;         padding: 0;         margin: 0;     }     /* first descendant link within a top level navigation item */     .nav-item > a {         position: relative;         display: inline-block;         padding: 0.5em 1em;         margin: 0 0 -1px 0;         border: 1px solid transparent;     }     /* focus/open states of first descendant link within a top level         navigation item */     .nav-item > a:focus,     .nav-item > a.open {         border: 1px solid #dedede;     }     /* open state of first descendant link within a top level         navigation item */     .nav-item > a.open {         background-color: #fff;         border-bottom: none;         z-index: 1;     }     /* sub-navigation panel */     .sub-nav {         position: absolute;         display: none;         top: 2.2em;         margin-top: -1px;         padding: 0.5em 1em;         border: 1px solid #dedede;         background-color: #fff;     }     /* sub-navigation panel open state */     .sub-nav.open {         display: block;     }     /* list of items within sub-navigation panel */     .sub-nav ul {         display: inline-block;         vertical-align: top;         margin: 0 1em 0 0;         padding: 0;     }     /* list item within sub-navigation panel */     .sub-nav li {         display: block;         list-style-type: none;         margin: 0;         padding: 0;     }   Putting it all together, here is the completed example:     <!doctype html>     <html lang=""en"">     <head>     <meta charset=""UTF-8"">     <title>Simple Accessible Mega Menu Example</title>     <style>         /* Rudimentary mega menu CSS for demonstration */             /* mega menu list */         .nav-menu {             display: block;             position: relative;             list-style: none;             margin: 0;             padding: 0;             z-index: 15;         }         /* a top level navigation item in the mega menu */         .nav-item {             list-style: none;             display: inline-block;             padding: 0;             margin: 0;         }         /* first descendant link within a top level navigation item */         .nav-item > a {             position: relative;             display: inline-block;             padding: 0.5em 1em;             margin: 0 0 -1px 0;             border: 1px solid transparent;         }         /* focus/open states of first descendant link within a top level             navigation item */         .nav-item > a:focus,         .nav-item > a.open {             border: 1px solid #dedede;         }         /* open state of first descendant link within a top level             navigation item */         .nav-item > a.open {             background-color: #fff;             border-bottom: none;             z-index: 1;         }         /* sub-navigation panel */         .sub-nav {             position: absolute;             display: none;             top: 2.2em;             margin-top: -1px;             padding: 0.5em 1em;             border: 1px solid #dedede;             background-color: #fff;         }         /* sub-navigation panel open state */         .sub-nav.open {             display: block;         }         /* list of items within sub-navigation panel */         .sub-nav ul {             display: inline-block;             vertical-align: top;             margin: 0 1em 0 0;             padding: 0;         }         /* list item within sub-navigation panel */         .sub-nav li {             display: block;             list-style-type: none;             margin: 0;             padding: 0;         }          </style>     </head>     <body>     <nav>         <ul class=""nav-menu"">             <li class=""nav-item"">                 <a href=""?movie"">Movies</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=0"">Action &amp; Adventure</a></li>                         <li><a href=""?movie&genre=2"">Children &amp; Family</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=7"">Dramas</a></li>                         <li><a href=""?movie&genre=9"">Foreign</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=14"">Musicals</a></li>                         <li><a href=""?movie&genre=15"">Romance</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>             <li class=""nav-item"">                 <a href=""?tv"">TV Shows</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=20"">Classic TV</a></li>                         <li><a href=""?tv&genre=21"">Crime TV</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=27"">Reality TV</a></li>                         <li><a href=""?tv&genre=30"">TV Action</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=33"">TV Dramas</a></li>                         <li><a href=""?tv&genre=34"">TV Horror</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>         </ul>     </nav>          <!-- include jquery -->     <script src=""//code.jquery.com/jquery-1.10.1.min.js""></script>     <!-- include the jquery-accessibleMegaMenu plugin script -->     <script src=""js/jquery-accessibleMegaMenu.js""></script>     <!-- initialize a selector as an accessibleMegaMenu -->     <script>         $(""nav:first"").accessibleMegaMenu({             /* prefix for generated unique id attributes, which are required                 to indicate aria-owns, aria-controls and aria-labelledby */             uuidPrefix: ""accessible-megamenu"",                          /* css class used to define the megamenu styling */             menuClass: ""nav-menu"",                          /* css class for a top-level navigation item in the megamenu */             topNavItemClass: ""nav-item"",                          /* css class for a megamenu panel */             panelClass: ""sub-nav"",                          /* css class for a group of items within a megamenu panel */             panelGroupClass: ""sub-nav-group"",                          /* css class for the hover state */             hoverClass: ""hover"",                          /* css class for the focus state */             focusClass: ""focus"",                          /* css class for the open state */             openClass: ""open""         });     </script>     </body>     </html> About A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. Resources Readme License Apache-2.0 License Releases No releases published Contributors 5 Languages HTML 70.8% CSS 27.3% JavaScript 1.9% © 2020 GitHub, Inc. Terms Privacy Security Status Help Contact GitHub Pricing API Training Blog About You can’t perform that action at this time. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."
158073,20200731,github.com,https://github.com/adobe-accessibility/Accessible-Mega-Menu,text/html,text/html,en,"GitHub - adobe-accessibility/Accessible-Mega-Menu: A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. Skip to content Sign up Why GitHub? Features → Code review Project management Integrations Actions Packages Security Team management Hosting Mobile Customer stories → Security → Team Enterprise Explore Explore GitHub → Learn & contribute Topics Collections Trending Learning Lab Open source guides Connect with others Events Community forum GitHub Education Marketplace Pricing Plans → Compare plans Contact Sales Nonprofit → Education → In this repository All GitHub ↵ Jump to ↵ No suggested jump to results In this repository All GitHub ↵ Jump to ↵ In this repository All GitHub ↵ Jump to ↵ Sign in Sign up adobe-accessibility / Accessible-Mega-Menu Watch 49 Star 567 Fork 185 A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. Apache-2.0 License 567 stars 185 forks Star Watch Code Issues 27 Pull requests 12 Actions Projects 0 Security Insights More Code Issues Pull requests Actions Projects Security Insights Dismiss Join GitHub today GitHub is home to over 50 million developers working together to host and review code, manage projects, and build software together. Sign up master 2 branches 0 tags Go to file Code Clone with HTTPS Use Git or checkout with SVN using the web URL. Open with GitHub Desktop Download ZIP Launching GitHub Desktop If nothing happens, download GitHub Desktop and try again. Go back Launching GitHub Desktop If nothing happens, download GitHub Desktop and try again. Go back Launching Xcode If nothing happens, download Xcode and try again. Go back Launching Visual Studio If nothing happens, download the GitHub extension for Visual Studio and try again. Go back Latest commit majornista Add openOnMouseover setting, and toggleButtonClass for responsive layout … 1 d445afc May 11, 2018 Add openOnMouseover setting, and toggleButtonClass for responsive layout To normalize behavior of top navigation links on desktop and mobile, the default behavior will be for the menu to remain closed on hover. Click should toggle the menu regardless of whether the link has a valid `href`. With `openOnMouseover: true`, hover will open the menu as before and with the menu open, clicking a top-level navigation item with a valid `href` should open the url. Add toggleButtonClass to specify a button that should toggle the menu in a responsive layout on mobile devices. Incorporate media queries for responsive layout breakpoints. d445afc 1 Git stats 36 commits Files Permalink Failed to load latest commit information. Type Name Latest commit message Commit time css js third-party/jquery LICENSE NOTICE README.md index.html package.json View code README.md Accessible Mega Menu ========================= A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. It is modeled after the mega menu on adobe.com but has been simplified for use by others. An brief explanation of our interaction design choices can be found in a blog post at Mega menu accessibility on adobe.com. Content for the links and text within the mega menu comes from the Web Content Accessibility Guidelines (WCAG) 2.0. Keyboard Accessibility The accessible mega menu supports keyboard interaction modeled after the behavior described in the WAI-ARIA Menu or Menu bar (widget) design pattern, however we also try to respect users' general expectations for the behavior of links in a global navigation. To this end, the accessible mega menu implementation permits tab focus on each of the six top-level menu items. When one of the menu items has focus, pressing the Enter key, Spacebar or Down arrow will open the submenu panel, and pressing the Left or Right arrow key will shift focus to the adjacent menu item. Links within the submenu panels are included in the tab order when the panel is open. They can also be navigated with the arrow keys or by typing the first character in the link name, which speeds up keyboard navigation considerably. Pressing the Escape key closes the submenu and restores focus to the parent menu item. Screen Reader Accessibility The accessible mega menu models its use of WAI-ARIA Roles, States, and Properties after those described in the WAI-ARIA Menu or Menu bar (widget) design pattern with some notable exceptions, so that it behaves better with screen reader user expectations for global navigation. We don't use role=""menu"" for the menu container and role=""menuitem"" for each of the links therein, because if we do, assistive technology will no longer interpret the links as links, but instead, as menu items, and the links in our global navigation will no longer show up when a screen reader user executes a shortcut command to bring up a list of links in the page. We also want to maintain the semantic structure of the submenu panels in our mega menu; our links are organized into lists and separated by headings. Omitting role=""menu"" and role=""menuitem"" for the global navigation seems the safer way to go. Usage HTML The HTML structure for the mega menu is a nav element, or any other container element, containing a list. Each list item contains a link which is followed by a div or any other container element which will serve as the pop up panel. The panel can contain any html content; in the following example, each panel contains three lists of links. You can explicitly define groups within the panel, between which a user can navigate quickly using the left and right arrow keys; in the following example, the CSS class .sub-nav-group identifies a navigable group.     <nav>         <ul class=""nav-menu"">             <li class=""nav-item"">                 <a href=""?movie"">Movies</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=0"">Action &amp; Adventure</a></li>                         <li><a href=""?movie&genre=2"">Children &amp; Family</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=7"">Dramas</a></li>                         <li><a href=""?movie&genre=9"">Foreign</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=14"">Musicals</a></li>                         <li><a href=""?movie&genre=15"">Romance</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>             <li class=""nav-item"">                 <a href=""?tv"">TV Shows</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=20"">Classic TV</a></li>                         <li><a href=""?tv&genre=21"">Crime TV</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=27"">Reality TV</a></li>                         <li><a href=""?tv&genre=30"">TV Action</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=33"">TV Dramas</a></li>                         <li><a href=""?tv&genre=34"">TV Horror</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>         </ul>     </nav> By default, accessibleMegaMenu uses the the following CSS classes to define the top-level navigation items, panels, groups within the panels, and the hover, focus, and open states. It also defines a prefix for unique id strings, which are required to indicate the relationship of a top-level navigation item to the panel it controls.     defaults = {         /* unique ID's are required to indicate aria-owns, aria-controls and aria-labelledby */         uuidPrefix: ""accessible-megamenu"",                  /* default css class used to define the megamenu styling */         menuClass: ""accessible-megamenu"",                  /* default css class for a top-level navigation item in the megamenu */         topNavItemClass: ""accessible-megamenu-top-nav-item"",                  /* default css class for a megamenu panel */         panelClass: ""accessible-megamenu-panel"",                  /* default css class for a group of items within a megamenu panel */         panelGroupClass: ""accessible-megamenu-panel-group"",                  /* default css class for the hover state */         hoverClass: ""hover"",                  /* default css class for the focus state */         focusClass: ""focus"",                  /* default css class for the open state */         openClass: ""open""      } You can optionally override the defaults to use the CSS classes you may have already defined for your mega menu. JavaScript Be sure to include jQuery and the jquery-accessibleMegaMenu.js plugin script.     <script src=""//code.jquery.com/jquery-1.10.1.min.js""></script>     <script src=""js/jquery-accessibleMegaMenu.js""></script> The following initializes the first nav element in the document as an accessibleMegaMenu, with optional CSS class overrides.     $(""nav:first"").accessibleMegaMenu({         /* prefix for generated unique id attributes, which are required             to indicate aria-owns, aria-controls and aria-labelledby */         uuidPrefix: ""accessible-megamenu"",                  /* css class used to define the megamenu styling */         menuClass: ""nav-menu"",                  /* css class for a top-level navigation item in the megamenu */         topNavItemClass: ""nav-item"",                  /* css class for a megamenu panel */         panelClass: ""sub-nav"",                  /* css class for a group of items within a megamenu panel */         panelGroupClass: ""sub-nav-group"",                  /* css class for the hover state */         hoverClass: ""hover"",                  /* css class for the focus state */         focusClass: ""focus"",                  /* css class for the open state */         openClass: ""open""     }); CSS AccessibleMegaMenu handles the showing and hiding of panels by adding or removing a CSS class. No inline styles are added to hide elements or create animation between states. Following is some rudimentary CSS for our example which enables the showing/hiding of and the layout of lists panels in the mega menu.     /* mega menu list */     .nav-menu {         display: block;         position: relative;         list-style: none;         margin: 0;         padding: 0;         z-index: 15;     }     /* a top level navigation item in the mega menu */     .nav-item {         list-style: none;         display: inline-block;         padding: 0;         margin: 0;     }     /* first descendant link within a top level navigation item */     .nav-item > a {         position: relative;         display: inline-block;         padding: 0.5em 1em;         margin: 0 0 -1px 0;         border: 1px solid transparent;     }     /* focus/open states of first descendant link within a top level         navigation item */     .nav-item > a:focus,     .nav-item > a.open {         border: 1px solid #dedede;     }     /* open state of first descendant link within a top level         navigation item */     .nav-item > a.open {         background-color: #fff;         border-bottom: none;         z-index: 1;     }     /* sub-navigation panel */     .sub-nav {         position: absolute;         display: none;         top: 2.2em;         margin-top: -1px;         padding: 0.5em 1em;         border: 1px solid #dedede;         background-color: #fff;     }     /* sub-navigation panel open state */     .sub-nav.open {         display: block;     }     /* list of items within sub-navigation panel */     .sub-nav ul {         display: inline-block;         vertical-align: top;         margin: 0 1em 0 0;         padding: 0;     }     /* list item within sub-navigation panel */     .sub-nav li {         display: block;         list-style-type: none;         margin: 0;         padding: 0;     }   Putting it all together, here is the completed example:     <!doctype html>     <html lang=""en"">     <head>     <meta charset=""UTF-8"">     <title>Simple Accessible Mega Menu Example</title>     <style>         /* Rudimentary mega menu CSS for demonstration */             /* mega menu list */         .nav-menu {             display: block;             position: relative;             list-style: none;             margin: 0;             padding: 0;             z-index: 15;         }         /* a top level navigation item in the mega menu */         .nav-item {             list-style: none;             display: inline-block;             padding: 0;             margin: 0;         }         /* first descendant link within a top level navigation item */         .nav-item > a {             position: relative;             display: inline-block;             padding: 0.5em 1em;             margin: 0 0 -1px 0;             border: 1px solid transparent;         }         /* focus/open states of first descendant link within a top level             navigation item */         .nav-item > a:focus,         .nav-item > a.open {             border: 1px solid #dedede;         }         /* open state of first descendant link within a top level             navigation item */         .nav-item > a.open {             background-color: #fff;             border-bottom: none;             z-index: 1;         }         /* sub-navigation panel */         .sub-nav {             position: absolute;             display: none;             top: 2.2em;             margin-top: -1px;             padding: 0.5em 1em;             border: 1px solid #dedede;             background-color: #fff;         }         /* sub-navigation panel open state */         .sub-nav.open {             display: block;         }         /* list of items within sub-navigation panel */         .sub-nav ul {             display: inline-block;             vertical-align: top;             margin: 0 1em 0 0;             padding: 0;         }         /* list item within sub-navigation panel */         .sub-nav li {             display: block;             list-style-type: none;             margin: 0;             padding: 0;         }          </style>     </head>     <body>     <nav>         <ul class=""nav-menu"">             <li class=""nav-item"">                 <a href=""?movie"">Movies</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=0"">Action &amp; Adventure</a></li>                         <li><a href=""?movie&genre=2"">Children &amp; Family</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=7"">Dramas</a></li>                         <li><a href=""?movie&genre=9"">Foreign</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=14"">Musicals</a></li>                         <li><a href=""?movie&genre=15"">Romance</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>             <li class=""nav-item"">                 <a href=""?tv"">TV Shows</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=20"">Classic TV</a></li>                         <li><a href=""?tv&genre=21"">Crime TV</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=27"">Reality TV</a></li>                         <li><a href=""?tv&genre=30"">TV Action</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=33"">TV Dramas</a></li>                         <li><a href=""?tv&genre=34"">TV Horror</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>         </ul>     </nav>          <!-- include jquery -->     <script src=""//code.jquery.com/jquery-1.10.1.min.js""></script>     <!-- include the jquery-accessibleMegaMenu plugin script -->     <script src=""js/jquery-accessibleMegaMenu.js""></script>     <!-- initialize a selector as an accessibleMegaMenu -->     <script>         $(""nav:first"").accessibleMegaMenu({             /* prefix for generated unique id attributes, which are required                 to indicate aria-owns, aria-controls and aria-labelledby */             uuidPrefix: ""accessible-megamenu"",                          /* css class used to define the megamenu styling */             menuClass: ""nav-menu"",                          /* css class for a top-level navigation item in the megamenu */             topNavItemClass: ""nav-item"",                          /* css class for a megamenu panel */             panelClass: ""sub-nav"",                          /* css class for a group of items within a megamenu panel */             panelGroupClass: ""sub-nav-group"",                          /* css class for the hover state */             hoverClass: ""hover"",                          /* css class for the focus state */             focusClass: ""focus"",                          /* css class for the open state */             openClass: ""open""         });     </script>     </body>     </html> About A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. Resources Readme License Apache-2.0 License Releases No releases published Used by 10 + 2 Contributors 5 Languages HTML 70.8% CSS 27.3% JavaScript 1.9% © 2020 GitHub, Inc. Terms Privacy Security Status Help Contact GitHub Pricing API Training Blog About You can’t perform that action at this time. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."
169142,20200807,github.com,https://github.com/adobe-accessibility/Accessible-Mega-Menu,text/html,text/html,en,"GitHub - adobe-accessibility/Accessible-Mega-Menu: A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. Skip to content Sign up Why GitHub? Features → Code review Project management Integrations Actions Packages Security Team management Hosting Mobile Customer stories → Security → Team Enterprise Explore Explore GitHub → Learn & contribute Topics Collections Trending Learning Lab Open source guides Connect with others Events Community forum GitHub Education Marketplace Pricing Plans → Compare plans Contact Sales Nonprofit → Education → In this repository All GitHub ↵ Jump to ↵ No suggested jump to results In this repository All GitHub ↵ Jump to ↵ In this repository All GitHub ↵ Jump to ↵ Sign in Sign up adobe-accessibility / Accessible-Mega-Menu Watch 49 Star 568 Fork 187 A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. Apache-2.0 License 568 stars 187 forks Star Watch Code Issues 27 Pull requests 12 Actions Projects 0 Security Insights More Code Issues Pull requests Actions Projects Security Insights Dismiss Join GitHub today GitHub is home to over 50 million developers working together to host and review code, manage projects, and build software together. Sign up master 2 branches 0 tags Go to file Code Clone with HTTPS Use Git or checkout with SVN using the web URL. Open with GitHub Desktop Download ZIP Launching GitHub Desktop If nothing happens, download GitHub Desktop and try again. Go back Launching GitHub Desktop If nothing happens, download GitHub Desktop and try again. Go back Launching Xcode If nothing happens, download Xcode and try again. Go back Launching Visual Studio If nothing happens, download the GitHub extension for Visual Studio and try again. Go back Latest commit Git stats 36 commits Files Permalink Failed to load latest commit information. Type Name Latest commit message Commit time css js third-party/jquery LICENSE NOTICE README.md index.html package.json View code README.md Accessible Mega Menu ========================= A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. It is modeled after the mega menu on adobe.com but has been simplified for use by others. An brief explanation of our interaction design choices can be found in a blog post at Mega menu accessibility on adobe.com. Content for the links and text within the mega menu comes from the Web Content Accessibility Guidelines (WCAG) 2.0. Keyboard Accessibility The accessible mega menu supports keyboard interaction modeled after the behavior described in the WAI-ARIA Menu or Menu bar (widget) design pattern, however we also try to respect users' general expectations for the behavior of links in a global navigation. To this end, the accessible mega menu implementation permits tab focus on each of the six top-level menu items. When one of the menu items has focus, pressing the Enter key, Spacebar or Down arrow will open the submenu panel, and pressing the Left or Right arrow key will shift focus to the adjacent menu item. Links within the submenu panels are included in the tab order when the panel is open. They can also be navigated with the arrow keys or by typing the first character in the link name, which speeds up keyboard navigation considerably. Pressing the Escape key closes the submenu and restores focus to the parent menu item. Screen Reader Accessibility The accessible mega menu models its use of WAI-ARIA Roles, States, and Properties after those described in the WAI-ARIA Menu or Menu bar (widget) design pattern with some notable exceptions, so that it behaves better with screen reader user expectations for global navigation. We don't use role=""menu"" for the menu container and role=""menuitem"" for each of the links therein, because if we do, assistive technology will no longer interpret the links as links, but instead, as menu items, and the links in our global navigation will no longer show up when a screen reader user executes a shortcut command to bring up a list of links in the page. We also want to maintain the semantic structure of the submenu panels in our mega menu; our links are organized into lists and separated by headings. Omitting role=""menu"" and role=""menuitem"" for the global navigation seems the safer way to go. Usage HTML The HTML structure for the mega menu is a nav element, or any other container element, containing a list. Each list item contains a link which is followed by a div or any other container element which will serve as the pop up panel. The panel can contain any html content; in the following example, each panel contains three lists of links. You can explicitly define groups within the panel, between which a user can navigate quickly using the left and right arrow keys; in the following example, the CSS class .sub-nav-group identifies a navigable group.     <nav>         <ul class=""nav-menu"">             <li class=""nav-item"">                 <a href=""?movie"">Movies</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=0"">Action &amp; Adventure</a></li>                         <li><a href=""?movie&genre=2"">Children &amp; Family</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=7"">Dramas</a></li>                         <li><a href=""?movie&genre=9"">Foreign</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=14"">Musicals</a></li>                         <li><a href=""?movie&genre=15"">Romance</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>             <li class=""nav-item"">                 <a href=""?tv"">TV Shows</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=20"">Classic TV</a></li>                         <li><a href=""?tv&genre=21"">Crime TV</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=27"">Reality TV</a></li>                         <li><a href=""?tv&genre=30"">TV Action</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=33"">TV Dramas</a></li>                         <li><a href=""?tv&genre=34"">TV Horror</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>         </ul>     </nav> By default, accessibleMegaMenu uses the the following CSS classes to define the top-level navigation items, panels, groups within the panels, and the hover, focus, and open states. It also defines a prefix for unique id strings, which are required to indicate the relationship of a top-level navigation item to the panel it controls.     defaults = {         /* unique ID's are required to indicate aria-owns, aria-controls and aria-labelledby */         uuidPrefix: ""accessible-megamenu"",                  /* default css class used to define the megamenu styling */         menuClass: ""accessible-megamenu"",                  /* default css class for a top-level navigation item in the megamenu */         topNavItemClass: ""accessible-megamenu-top-nav-item"",                  /* default css class for a megamenu panel */         panelClass: ""accessible-megamenu-panel"",                  /* default css class for a group of items within a megamenu panel */         panelGroupClass: ""accessible-megamenu-panel-group"",                  /* default css class for the hover state */         hoverClass: ""hover"",                  /* default css class for the focus state */         focusClass: ""focus"",                  /* default css class for the open state */         openClass: ""open""      } You can optionally override the defaults to use the CSS classes you may have already defined for your mega menu. JavaScript Be sure to include jQuery and the jquery-accessibleMegaMenu.js plugin script.     <script src=""//code.jquery.com/jquery-1.10.1.min.js""></script>     <script src=""js/jquery-accessibleMegaMenu.js""></script> The following initializes the first nav element in the document as an accessibleMegaMenu, with optional CSS class overrides.     $(""nav:first"").accessibleMegaMenu({         /* prefix for generated unique id attributes, which are required             to indicate aria-owns, aria-controls and aria-labelledby */         uuidPrefix: ""accessible-megamenu"",                  /* css class used to define the megamenu styling */         menuClass: ""nav-menu"",                  /* css class for a top-level navigation item in the megamenu */         topNavItemClass: ""nav-item"",                  /* css class for a megamenu panel */         panelClass: ""sub-nav"",                  /* css class for a group of items within a megamenu panel */         panelGroupClass: ""sub-nav-group"",                  /* css class for the hover state */         hoverClass: ""hover"",                  /* css class for the focus state */         focusClass: ""focus"",                  /* css class for the open state */         openClass: ""open""     }); CSS AccessibleMegaMenu handles the showing and hiding of panels by adding or removing a CSS class. No inline styles are added to hide elements or create animation between states. Following is some rudimentary CSS for our example which enables the showing/hiding of and the layout of lists panels in the mega menu.     /* mega menu list */     .nav-menu {         display: block;         position: relative;         list-style: none;         margin: 0;         padding: 0;         z-index: 15;     }     /* a top level navigation item in the mega menu */     .nav-item {         list-style: none;         display: inline-block;         padding: 0;         margin: 0;     }     /* first descendant link within a top level navigation item */     .nav-item > a {         position: relative;         display: inline-block;         padding: 0.5em 1em;         margin: 0 0 -1px 0;         border: 1px solid transparent;     }     /* focus/open states of first descendant link within a top level         navigation item */     .nav-item > a:focus,     .nav-item > a.open {         border: 1px solid #dedede;     }     /* open state of first descendant link within a top level         navigation item */     .nav-item > a.open {         background-color: #fff;         border-bottom: none;         z-index: 1;     }     /* sub-navigation panel */     .sub-nav {         position: absolute;         display: none;         top: 2.2em;         margin-top: -1px;         padding: 0.5em 1em;         border: 1px solid #dedede;         background-color: #fff;     }     /* sub-navigation panel open state */     .sub-nav.open {         display: block;     }     /* list of items within sub-navigation panel */     .sub-nav ul {         display: inline-block;         vertical-align: top;         margin: 0 1em 0 0;         padding: 0;     }     /* list item within sub-navigation panel */     .sub-nav li {         display: block;         list-style-type: none;         margin: 0;         padding: 0;     }   Putting it all together, here is the completed example:     <!doctype html>     <html lang=""en"">     <head>     <meta charset=""UTF-8"">     <title>Simple Accessible Mega Menu Example</title>     <style>         /* Rudimentary mega menu CSS for demonstration */             /* mega menu list */         .nav-menu {             display: block;             position: relative;             list-style: none;             margin: 0;             padding: 0;             z-index: 15;         }         /* a top level navigation item in the mega menu */         .nav-item {             list-style: none;             display: inline-block;             padding: 0;             margin: 0;         }         /* first descendant link within a top level navigation item */         .nav-item > a {             position: relative;             display: inline-block;             padding: 0.5em 1em;             margin: 0 0 -1px 0;             border: 1px solid transparent;         }         /* focus/open states of first descendant link within a top level             navigation item */         .nav-item > a:focus,         .nav-item > a.open {             border: 1px solid #dedede;         }         /* open state of first descendant link within a top level             navigation item */         .nav-item > a.open {             background-color: #fff;             border-bottom: none;             z-index: 1;         }         /* sub-navigation panel */         .sub-nav {             position: absolute;             display: none;             top: 2.2em;             margin-top: -1px;             padding: 0.5em 1em;             border: 1px solid #dedede;             background-color: #fff;         }         /* sub-navigation panel open state */         .sub-nav.open {             display: block;         }         /* list of items within sub-navigation panel */         .sub-nav ul {             display: inline-block;             vertical-align: top;             margin: 0 1em 0 0;             padding: 0;         }         /* list item within sub-navigation panel */         .sub-nav li {             display: block;             list-style-type: none;             margin: 0;             padding: 0;         }          </style>     </head>     <body>     <nav>         <ul class=""nav-menu"">             <li class=""nav-item"">                 <a href=""?movie"">Movies</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=0"">Action &amp; Adventure</a></li>                         <li><a href=""?movie&genre=2"">Children &amp; Family</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=7"">Dramas</a></li>                         <li><a href=""?movie&genre=9"">Foreign</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=14"">Musicals</a></li>                         <li><a href=""?movie&genre=15"">Romance</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>             <li class=""nav-item"">                 <a href=""?tv"">TV Shows</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=20"">Classic TV</a></li>                         <li><a href=""?tv&genre=21"">Crime TV</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=27"">Reality TV</a></li>                         <li><a href=""?tv&genre=30"">TV Action</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=33"">TV Dramas</a></li>                         <li><a href=""?tv&genre=34"">TV Horror</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>         </ul>     </nav>          <!-- include jquery -->     <script src=""//code.jquery.com/jquery-1.10.1.min.js""></script>     <!-- include the jquery-accessibleMegaMenu plugin script -->     <script src=""js/jquery-accessibleMegaMenu.js""></script>     <!-- initialize a selector as an accessibleMegaMenu -->     <script>         $(""nav:first"").accessibleMegaMenu({             /* prefix for generated unique id attributes, which are required                 to indicate aria-owns, aria-controls and aria-labelledby */             uuidPrefix: ""accessible-megamenu"",                          /* css class used to define the megamenu styling */             menuClass: ""nav-menu"",                          /* css class for a top-level navigation item in the megamenu */             topNavItemClass: ""nav-item"",                          /* css class for a megamenu panel */             panelClass: ""sub-nav"",                          /* css class for a group of items within a megamenu panel */             panelGroupClass: ""sub-nav-group"",                          /* css class for the hover state */             hoverClass: ""hover"",                          /* css class for the focus state */             focusClass: ""focus"",                          /* css class for the open state */             openClass: ""open""         });     </script>     </body>     </html> About A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. Resources Readme License Apache-2.0 License Releases No releases published Used by 10 + 2 Contributors 5 Languages HTML 70.8% CSS 27.3% JavaScript 1.9% © 2020 GitHub, Inc. Terms Privacy Security Status Help Contact GitHub Pricing API Training Blog About You can’t perform that action at this time. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."
180035,20200814,github.com,https://github.com/adobe-accessibility/Accessible-Mega-Menu,text/html,text/html,en,"GitHub - adobe-accessibility/Accessible-Mega-Menu: A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. Skip to content Sign up Why GitHub? Features → Code review Project management Integrations Actions Packages Security Team management Hosting Mobile Customer stories → Security → Team Enterprise Explore Explore GitHub → Learn & contribute Topics Collections Trending Learning Lab Open source guides Connect with others Events Community forum GitHub Education Marketplace Pricing Plans → Compare plans Contact Sales Nonprofit → Education → In this repository All GitHub ↵ Jump to ↵ No suggested jump to results In this repository All GitHub ↵ Jump to ↵ In this repository All GitHub ↵ Jump to ↵ Sign in Sign up adobe-accessibility / Accessible-Mega-Menu Watch 49 Star 568 Fork 189 A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. Apache-2.0 License 568 stars 189 forks Star Watch Code Issues 27 Pull requests 12 Actions Projects 0 Security Insights More Code Issues Pull requests Actions Projects Security Insights Dismiss Join GitHub today GitHub is home to over 50 million developers working together to host and review code, manage projects, and build software together. Sign up master 2 branches 0 tags Go to file Code Clone with HTTPS Use Git or checkout with SVN using the web URL. Open with GitHub Desktop Download ZIP Launching GitHub Desktop If nothing happens, download GitHub Desktop and try again. Go back Launching GitHub Desktop If nothing happens, download GitHub Desktop and try again. Go back Launching Xcode If nothing happens, download Xcode and try again. Go back Launching Visual Studio If nothing happens, download the GitHub extension for Visual Studio and try again. Go back Latest commit Git stats 36 commits Files Permalink Failed to load latest commit information. Type Name Latest commit message Commit time css js third-party/jquery LICENSE NOTICE README.md index.html package.json View code README.md Accessible Mega Menu ========================= A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. It is modeled after the mega menu on adobe.com but has been simplified for use by others. An brief explanation of our interaction design choices can be found in a blog post at Mega menu accessibility on adobe.com. Content for the links and text within the mega menu comes from the Web Content Accessibility Guidelines (WCAG) 2.0. Keyboard Accessibility The accessible mega menu supports keyboard interaction modeled after the behavior described in the WAI-ARIA Menu or Menu bar (widget) design pattern, however we also try to respect users' general expectations for the behavior of links in a global navigation. To this end, the accessible mega menu implementation permits tab focus on each of the six top-level menu items. When one of the menu items has focus, pressing the Enter key, Spacebar or Down arrow will open the submenu panel, and pressing the Left or Right arrow key will shift focus to the adjacent menu item. Links within the submenu panels are included in the tab order when the panel is open. They can also be navigated with the arrow keys or by typing the first character in the link name, which speeds up keyboard navigation considerably. Pressing the Escape key closes the submenu and restores focus to the parent menu item. Screen Reader Accessibility The accessible mega menu models its use of WAI-ARIA Roles, States, and Properties after those described in the WAI-ARIA Menu or Menu bar (widget) design pattern with some notable exceptions, so that it behaves better with screen reader user expectations for global navigation. We don't use role=""menu"" for the menu container and role=""menuitem"" for each of the links therein, because if we do, assistive technology will no longer interpret the links as links, but instead, as menu items, and the links in our global navigation will no longer show up when a screen reader user executes a shortcut command to bring up a list of links in the page. We also want to maintain the semantic structure of the submenu panels in our mega menu; our links are organized into lists and separated by headings. Omitting role=""menu"" and role=""menuitem"" for the global navigation seems the safer way to go. Usage HTML The HTML structure for the mega menu is a nav element, or any other container element, containing a list. Each list item contains a link which is followed by a div or any other container element which will serve as the pop up panel. The panel can contain any html content; in the following example, each panel contains three lists of links. You can explicitly define groups within the panel, between which a user can navigate quickly using the left and right arrow keys; in the following example, the CSS class .sub-nav-group identifies a navigable group.     <nav>         <ul class=""nav-menu"">             <li class=""nav-item"">                 <a href=""?movie"">Movies</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=0"">Action &amp; Adventure</a></li>                         <li><a href=""?movie&genre=2"">Children &amp; Family</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=7"">Dramas</a></li>                         <li><a href=""?movie&genre=9"">Foreign</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=14"">Musicals</a></li>                         <li><a href=""?movie&genre=15"">Romance</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>             <li class=""nav-item"">                 <a href=""?tv"">TV Shows</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=20"">Classic TV</a></li>                         <li><a href=""?tv&genre=21"">Crime TV</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=27"">Reality TV</a></li>                         <li><a href=""?tv&genre=30"">TV Action</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=33"">TV Dramas</a></li>                         <li><a href=""?tv&genre=34"">TV Horror</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>         </ul>     </nav> By default, accessibleMegaMenu uses the the following CSS classes to define the top-level navigation items, panels, groups within the panels, and the hover, focus, and open states. It also defines a prefix for unique id strings, which are required to indicate the relationship of a top-level navigation item to the panel it controls.     defaults = {         /* unique ID's are required to indicate aria-owns, aria-controls and aria-labelledby */         uuidPrefix: ""accessible-megamenu"",                  /* default css class used to define the megamenu styling */         menuClass: ""accessible-megamenu"",                  /* default css class for a top-level navigation item in the megamenu */         topNavItemClass: ""accessible-megamenu-top-nav-item"",                  /* default css class for a megamenu panel */         panelClass: ""accessible-megamenu-panel"",                  /* default css class for a group of items within a megamenu panel */         panelGroupClass: ""accessible-megamenu-panel-group"",                  /* default css class for the hover state */         hoverClass: ""hover"",                  /* default css class for the focus state */         focusClass: ""focus"",                  /* default css class for the open state */         openClass: ""open""      } You can optionally override the defaults to use the CSS classes you may have already defined for your mega menu. JavaScript Be sure to include jQuery and the jquery-accessibleMegaMenu.js plugin script.     <script src=""//code.jquery.com/jquery-1.10.1.min.js""></script>     <script src=""js/jquery-accessibleMegaMenu.js""></script> The following initializes the first nav element in the document as an accessibleMegaMenu, with optional CSS class overrides.     $(""nav:first"").accessibleMegaMenu({         /* prefix for generated unique id attributes, which are required             to indicate aria-owns, aria-controls and aria-labelledby */         uuidPrefix: ""accessible-megamenu"",                  /* css class used to define the megamenu styling */         menuClass: ""nav-menu"",                  /* css class for a top-level navigation item in the megamenu */         topNavItemClass: ""nav-item"",                  /* css class for a megamenu panel */         panelClass: ""sub-nav"",                  /* css class for a group of items within a megamenu panel */         panelGroupClass: ""sub-nav-group"",                  /* css class for the hover state */         hoverClass: ""hover"",                  /* css class for the focus state */         focusClass: ""focus"",                  /* css class for the open state */         openClass: ""open""     }); CSS AccessibleMegaMenu handles the showing and hiding of panels by adding or removing a CSS class. No inline styles are added to hide elements or create animation between states. Following is some rudimentary CSS for our example which enables the showing/hiding of and the layout of lists panels in the mega menu.     /* mega menu list */     .nav-menu {         display: block;         position: relative;         list-style: none;         margin: 0;         padding: 0;         z-index: 15;     }     /* a top level navigation item in the mega menu */     .nav-item {         list-style: none;         display: inline-block;         padding: 0;         margin: 0;     }     /* first descendant link within a top level navigation item */     .nav-item > a {         position: relative;         display: inline-block;         padding: 0.5em 1em;         margin: 0 0 -1px 0;         border: 1px solid transparent;     }     /* focus/open states of first descendant link within a top level         navigation item */     .nav-item > a:focus,     .nav-item > a.open {         border: 1px solid #dedede;     }     /* open state of first descendant link within a top level         navigation item */     .nav-item > a.open {         background-color: #fff;         border-bottom: none;         z-index: 1;     }     /* sub-navigation panel */     .sub-nav {         position: absolute;         display: none;         top: 2.2em;         margin-top: -1px;         padding: 0.5em 1em;         border: 1px solid #dedede;         background-color: #fff;     }     /* sub-navigation panel open state */     .sub-nav.open {         display: block;     }     /* list of items within sub-navigation panel */     .sub-nav ul {         display: inline-block;         vertical-align: top;         margin: 0 1em 0 0;         padding: 0;     }     /* list item within sub-navigation panel */     .sub-nav li {         display: block;         list-style-type: none;         margin: 0;         padding: 0;     }   Putting it all together, here is the completed example:     <!doctype html>     <html lang=""en"">     <head>     <meta charset=""UTF-8"">     <title>Simple Accessible Mega Menu Example</title>     <style>         /* Rudimentary mega menu CSS for demonstration */             /* mega menu list */         .nav-menu {             display: block;             position: relative;             list-style: none;             margin: 0;             padding: 0;             z-index: 15;         }         /* a top level navigation item in the mega menu */         .nav-item {             list-style: none;             display: inline-block;             padding: 0;             margin: 0;         }         /* first descendant link within a top level navigation item */         .nav-item > a {             position: relative;             display: inline-block;             padding: 0.5em 1em;             margin: 0 0 -1px 0;             border: 1px solid transparent;         }         /* focus/open states of first descendant link within a top level             navigation item */         .nav-item > a:focus,         .nav-item > a.open {             border: 1px solid #dedede;         }         /* open state of first descendant link within a top level             navigation item */         .nav-item > a.open {             background-color: #fff;             border-bottom: none;             z-index: 1;         }         /* sub-navigation panel */         .sub-nav {             position: absolute;             display: none;             top: 2.2em;             margin-top: -1px;             padding: 0.5em 1em;             border: 1px solid #dedede;             background-color: #fff;         }         /* sub-navigation panel open state */         .sub-nav.open {             display: block;         }         /* list of items within sub-navigation panel */         .sub-nav ul {             display: inline-block;             vertical-align: top;             margin: 0 1em 0 0;             padding: 0;         }         /* list item within sub-navigation panel */         .sub-nav li {             display: block;             list-style-type: none;             margin: 0;             padding: 0;         }          </style>     </head>     <body>     <nav>         <ul class=""nav-menu"">             <li class=""nav-item"">                 <a href=""?movie"">Movies</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=0"">Action &amp; Adventure</a></li>                         <li><a href=""?movie&genre=2"">Children &amp; Family</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=7"">Dramas</a></li>                         <li><a href=""?movie&genre=9"">Foreign</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=14"">Musicals</a></li>                         <li><a href=""?movie&genre=15"">Romance</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>             <li class=""nav-item"">                 <a href=""?tv"">TV Shows</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=20"">Classic TV</a></li>                         <li><a href=""?tv&genre=21"">Crime TV</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=27"">Reality TV</a></li>                         <li><a href=""?tv&genre=30"">TV Action</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=33"">TV Dramas</a></li>                         <li><a href=""?tv&genre=34"">TV Horror</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>         </ul>     </nav>          <!-- include jquery -->     <script src=""//code.jquery.com/jquery-1.10.1.min.js""></script>     <!-- include the jquery-accessibleMegaMenu plugin script -->     <script src=""js/jquery-accessibleMegaMenu.js""></script>     <!-- initialize a selector as an accessibleMegaMenu -->     <script>         $(""nav:first"").accessibleMegaMenu({             /* prefix for generated unique id attributes, which are required                 to indicate aria-owns, aria-controls and aria-labelledby */             uuidPrefix: ""accessible-megamenu"",                          /* css class used to define the megamenu styling */             menuClass: ""nav-menu"",                          /* css class for a top-level navigation item in the megamenu */             topNavItemClass: ""nav-item"",                          /* css class for a megamenu panel */             panelClass: ""sub-nav"",                          /* css class for a group of items within a megamenu panel */             panelGroupClass: ""sub-nav-group"",                          /* css class for the hover state */             hoverClass: ""hover"",                          /* css class for the focus state */             focusClass: ""focus"",                          /* css class for the open state */             openClass: ""open""         });     </script>     </body>     </html> About A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. Resources Readme License Apache-2.0 License Releases No releases published Contributors 5 Languages HTML 70.8% CSS 27.3% JavaScript 1.9% © 2020 GitHub, Inc. Terms Privacy Security Status Help Contact GitHub Pricing API Training Blog About You can’t perform that action at this time. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."
191101,20200821,github.com,https://github.com/adobe-accessibility/Accessible-Mega-Menu,text/html,text/html,en,"GitHub - adobe-accessibility/Accessible-Mega-Menu: A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. Skip to content Sign up Why GitHub? Features → Code review Project management Integrations Actions Packages Security Team management Hosting Mobile Customer stories → Security → Team Enterprise Explore Explore GitHub → Learn & contribute Topics Collections Trending Learning Lab Open source guides Connect with others Events Community forum GitHub Education Marketplace Pricing Plans → Compare plans Contact Sales Nonprofit → Education → In this repository All GitHub ↵ Jump to ↵ No suggested jump to results In this repository All GitHub ↵ Jump to ↵ In this repository All GitHub ↵ Jump to ↵ Sign in Sign up {{ message }} adobe-accessibility / Accessible-Mega-Menu Watch 49 Star 568 Fork 190 A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. Apache-2.0 License 568 stars 190 forks Star Watch Code Issues 27 Pull requests 12 Actions Projects 0 Security Insights More Code Issues Pull requests Actions Projects Security Insights Dismiss Join GitHub today GitHub is home to over 50 million developers working together to host and review code, manage projects, and build software together. Sign up master 2 branches 0 tags Go to file Code Clone with HTTPS Use Git or checkout with SVN using the web URL. Open with GitHub Desktop Download ZIP Launching GitHub Desktop If nothing happens, download GitHub Desktop and try again. Go back Launching GitHub Desktop If nothing happens, download GitHub Desktop and try again. Go back Launching Xcode If nothing happens, download Xcode and try again. Go back Launching Visual Studio If nothing happens, download the GitHub extension for Visual Studio and try again. Go back Latest commit majornista Add openOnMouseover setting, and toggleButtonClass for responsive layout … 1 d445afc May 11, 2018 Add openOnMouseover setting, and toggleButtonClass for responsive layout To normalize behavior of top navigation links on desktop and mobile, the default behavior will be for the menu to remain closed on hover. Click should toggle the menu regardless of whether the link has a valid `href`. With `openOnMouseover: true`, hover will open the menu as before and with the menu open, clicking a top-level navigation item with a valid `href` should open the url. Add toggleButtonClass to specify a button that should toggle the menu in a responsive layout on mobile devices. Incorporate media queries for responsive layout breakpoints. d445afc 1 Git stats 36 commits Files Permalink Failed to load latest commit information. Type Name Latest commit message Commit time css js third-party/jquery LICENSE NOTICE README.md index.html package.json View code README.md Accessible Mega Menu ========================= A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. It is modeled after the mega menu on adobe.com but has been simplified for use by others. An brief explanation of our interaction design choices can be found in a blog post at Mega menu accessibility on adobe.com. Content for the links and text within the mega menu comes from the Web Content Accessibility Guidelines (WCAG) 2.0. Keyboard Accessibility The accessible mega menu supports keyboard interaction modeled after the behavior described in the WAI-ARIA Menu or Menu bar (widget) design pattern, however we also try to respect users' general expectations for the behavior of links in a global navigation. To this end, the accessible mega menu implementation permits tab focus on each of the six top-level menu items. When one of the menu items has focus, pressing the Enter key, Spacebar or Down arrow will open the submenu panel, and pressing the Left or Right arrow key will shift focus to the adjacent menu item. Links within the submenu panels are included in the tab order when the panel is open. They can also be navigated with the arrow keys or by typing the first character in the link name, which speeds up keyboard navigation considerably. Pressing the Escape key closes the submenu and restores focus to the parent menu item. Screen Reader Accessibility The accessible mega menu models its use of WAI-ARIA Roles, States, and Properties after those described in the WAI-ARIA Menu or Menu bar (widget) design pattern with some notable exceptions, so that it behaves better with screen reader user expectations for global navigation. We don't use role=""menu"" for the menu container and role=""menuitem"" for each of the links therein, because if we do, assistive technology will no longer interpret the links as links, but instead, as menu items, and the links in our global navigation will no longer show up when a screen reader user executes a shortcut command to bring up a list of links in the page. We also want to maintain the semantic structure of the submenu panels in our mega menu; our links are organized into lists and separated by headings. Omitting role=""menu"" and role=""menuitem"" for the global navigation seems the safer way to go. Usage HTML The HTML structure for the mega menu is a nav element, or any other container element, containing a list. Each list item contains a link which is followed by a div or any other container element which will serve as the pop up panel. The panel can contain any html content; in the following example, each panel contains three lists of links. You can explicitly define groups within the panel, between which a user can navigate quickly using the left and right arrow keys; in the following example, the CSS class .sub-nav-group identifies a navigable group.     <nav>         <ul class=""nav-menu"">             <li class=""nav-item"">                 <a href=""?movie"">Movies</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=0"">Action &amp; Adventure</a></li>                         <li><a href=""?movie&genre=2"">Children &amp; Family</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=7"">Dramas</a></li>                         <li><a href=""?movie&genre=9"">Foreign</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=14"">Musicals</a></li>                         <li><a href=""?movie&genre=15"">Romance</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>             <li class=""nav-item"">                 <a href=""?tv"">TV Shows</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=20"">Classic TV</a></li>                         <li><a href=""?tv&genre=21"">Crime TV</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=27"">Reality TV</a></li>                         <li><a href=""?tv&genre=30"">TV Action</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=33"">TV Dramas</a></li>                         <li><a href=""?tv&genre=34"">TV Horror</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>         </ul>     </nav> By default, accessibleMegaMenu uses the the following CSS classes to define the top-level navigation items, panels, groups within the panels, and the hover, focus, and open states. It also defines a prefix for unique id strings, which are required to indicate the relationship of a top-level navigation item to the panel it controls.     defaults = {         /* unique ID's are required to indicate aria-owns, aria-controls and aria-labelledby */         uuidPrefix: ""accessible-megamenu"",                  /* default css class used to define the megamenu styling */         menuClass: ""accessible-megamenu"",                  /* default css class for a top-level navigation item in the megamenu */         topNavItemClass: ""accessible-megamenu-top-nav-item"",                  /* default css class for a megamenu panel */         panelClass: ""accessible-megamenu-panel"",                  /* default css class for a group of items within a megamenu panel */         panelGroupClass: ""accessible-megamenu-panel-group"",                  /* default css class for the hover state */         hoverClass: ""hover"",                  /* default css class for the focus state */         focusClass: ""focus"",                  /* default css class for the open state */         openClass: ""open""      } You can optionally override the defaults to use the CSS classes you may have already defined for your mega menu. JavaScript Be sure to include jQuery and the jquery-accessibleMegaMenu.js plugin script.     <script src=""//code.jquery.com/jquery-1.10.1.min.js""></script>     <script src=""js/jquery-accessibleMegaMenu.js""></script> The following initializes the first nav element in the document as an accessibleMegaMenu, with optional CSS class overrides.     $(""nav:first"").accessibleMegaMenu({         /* prefix for generated unique id attributes, which are required             to indicate aria-owns, aria-controls and aria-labelledby */         uuidPrefix: ""accessible-megamenu"",                  /* css class used to define the megamenu styling */         menuClass: ""nav-menu"",                  /* css class for a top-level navigation item in the megamenu */         topNavItemClass: ""nav-item"",                  /* css class for a megamenu panel */         panelClass: ""sub-nav"",                  /* css class for a group of items within a megamenu panel */         panelGroupClass: ""sub-nav-group"",                  /* css class for the hover state */         hoverClass: ""hover"",                  /* css class for the focus state */         focusClass: ""focus"",                  /* css class for the open state */         openClass: ""open""     }); CSS AccessibleMegaMenu handles the showing and hiding of panels by adding or removing a CSS class. No inline styles are added to hide elements or create animation between states. Following is some rudimentary CSS for our example which enables the showing/hiding of and the layout of lists panels in the mega menu.     /* mega menu list */     .nav-menu {         display: block;         position: relative;         list-style: none;         margin: 0;         padding: 0;         z-index: 15;     }     /* a top level navigation item in the mega menu */     .nav-item {         list-style: none;         display: inline-block;         padding: 0;         margin: 0;     }     /* first descendant link within a top level navigation item */     .nav-item > a {         position: relative;         display: inline-block;         padding: 0.5em 1em;         margin: 0 0 -1px 0;         border: 1px solid transparent;     }     /* focus/open states of first descendant link within a top level         navigation item */     .nav-item > a:focus,     .nav-item > a.open {         border: 1px solid #dedede;     }     /* open state of first descendant link within a top level         navigation item */     .nav-item > a.open {         background-color: #fff;         border-bottom: none;         z-index: 1;     }     /* sub-navigation panel */     .sub-nav {         position: absolute;         display: none;         top: 2.2em;         margin-top: -1px;         padding: 0.5em 1em;         border: 1px solid #dedede;         background-color: #fff;     }     /* sub-navigation panel open state */     .sub-nav.open {         display: block;     }     /* list of items within sub-navigation panel */     .sub-nav ul {         display: inline-block;         vertical-align: top;         margin: 0 1em 0 0;         padding: 0;     }     /* list item within sub-navigation panel */     .sub-nav li {         display: block;         list-style-type: none;         margin: 0;         padding: 0;     }   Putting it all together, here is the completed example:     <!doctype html>     <html lang=""en"">     <head>     <meta charset=""UTF-8"">     <title>Simple Accessible Mega Menu Example</title>     <style>         /* Rudimentary mega menu CSS for demonstration */             /* mega menu list */         .nav-menu {             display: block;             position: relative;             list-style: none;             margin: 0;             padding: 0;             z-index: 15;         }         /* a top level navigation item in the mega menu */         .nav-item {             list-style: none;             display: inline-block;             padding: 0;             margin: 0;         }         /* first descendant link within a top level navigation item */         .nav-item > a {             position: relative;             display: inline-block;             padding: 0.5em 1em;             margin: 0 0 -1px 0;             border: 1px solid transparent;         }         /* focus/open states of first descendant link within a top level             navigation item */         .nav-item > a:focus,         .nav-item > a.open {             border: 1px solid #dedede;         }         /* open state of first descendant link within a top level             navigation item */         .nav-item > a.open {             background-color: #fff;             border-bottom: none;             z-index: 1;         }         /* sub-navigation panel */         .sub-nav {             position: absolute;             display: none;             top: 2.2em;             margin-top: -1px;             padding: 0.5em 1em;             border: 1px solid #dedede;             background-color: #fff;         }         /* sub-navigation panel open state */         .sub-nav.open {             display: block;         }         /* list of items within sub-navigation panel */         .sub-nav ul {             display: inline-block;             vertical-align: top;             margin: 0 1em 0 0;             padding: 0;         }         /* list item within sub-navigation panel */         .sub-nav li {             display: block;             list-style-type: none;             margin: 0;             padding: 0;         }          </style>     </head>     <body>     <nav>         <ul class=""nav-menu"">             <li class=""nav-item"">                 <a href=""?movie"">Movies</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=0"">Action &amp; Adventure</a></li>                         <li><a href=""?movie&genre=2"">Children &amp; Family</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=7"">Dramas</a></li>                         <li><a href=""?movie&genre=9"">Foreign</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=14"">Musicals</a></li>                         <li><a href=""?movie&genre=15"">Romance</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>             <li class=""nav-item"">                 <a href=""?tv"">TV Shows</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=20"">Classic TV</a></li>                         <li><a href=""?tv&genre=21"">Crime TV</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=27"">Reality TV</a></li>                         <li><a href=""?tv&genre=30"">TV Action</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=33"">TV Dramas</a></li>                         <li><a href=""?tv&genre=34"">TV Horror</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>         </ul>     </nav>          <!-- include jquery -->     <script src=""//code.jquery.com/jquery-1.10.1.min.js""></script>     <!-- include the jquery-accessibleMegaMenu plugin script -->     <script src=""js/jquery-accessibleMegaMenu.js""></script>     <!-- initialize a selector as an accessibleMegaMenu -->     <script>         $(""nav:first"").accessibleMegaMenu({             /* prefix for generated unique id attributes, which are required                 to indicate aria-owns, aria-controls and aria-labelledby */             uuidPrefix: ""accessible-megamenu"",                          /* css class used to define the megamenu styling */             menuClass: ""nav-menu"",                          /* css class for a top-level navigation item in the megamenu */             topNavItemClass: ""nav-item"",                          /* css class for a megamenu panel */             panelClass: ""sub-nav"",                          /* css class for a group of items within a megamenu panel */             panelGroupClass: ""sub-nav-group"",                          /* css class for the hover state */             hoverClass: ""hover"",                          /* css class for the focus state */             focusClass: ""focus"",                          /* css class for the open state */             openClass: ""open""         });     </script>     </body>     </html> About A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. Resources Readme License Apache-2.0 License Releases No releases published Packages 0 No packages published Used by 10 + 2 Contributors 5 Languages HTML 70.8% CSS 27.3% JavaScript 1.9% © 2020 GitHub, Inc. Terms Privacy Security Status Help Contact GitHub Pricing API Training Blog About You can’t perform that action at this time. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."
203901,20200828,github.com,https://github.com/adobe-accessibility/Accessible-Mega-Menu,text/html,text/html,en,"GitHub - adobe-accessibility/Accessible-Mega-Menu: A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. Skip to content Sign up Why GitHub? Features → Code review Project management Integrations Actions Packages Security Team management Hosting Mobile Customer stories → Security → Team Enterprise Explore Explore GitHub → Learn & contribute Topics Collections Trending Learning Lab Open source guides Connect with others Events Community forum GitHub Education GitHub Stars program Marketplace Pricing Plans → Compare plans Contact Sales Nonprofit → Education → In this repository All GitHub ↵ Jump to ↵ No suggested jump to results In this repository All GitHub ↵ Jump to ↵ In this repository All GitHub ↵ Jump to ↵ Sign in Sign up {{ message }} adobe-accessibility / Accessible-Mega-Menu Watch 49 Star 568 Fork 190 A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. Apache-2.0 License 568 stars 190 forks Star Watch Code Issues 27 Pull requests 12 Actions Projects 0 Security Insights More Code Issues Pull requests Actions Projects Security Insights Dismiss Join GitHub today GitHub is home to over 50 million developers working together to host and review code, manage projects, and build software together. Sign up master 2 branches 0 tags Go to file Code Clone with HTTPS Use Git or checkout with SVN using the web URL. Open with GitHub Desktop Download ZIP Launching GitHub Desktop If nothing happens, download GitHub Desktop and try again. Go back Launching GitHub Desktop If nothing happens, download GitHub Desktop and try again. Go back Launching Xcode If nothing happens, download Xcode and try again. Go back Launching Visual Studio If nothing happens, download the GitHub extension for Visual Studio and try again. Go back Latest commit majornista Add openOnMouseover setting, and toggleButtonClass for responsive layout … 1 d445afc May 11, 2018 Add openOnMouseover setting, and toggleButtonClass for responsive layout To normalize behavior of top navigation links on desktop and mobile, the default behavior will be for the menu to remain closed on hover. Click should toggle the menu regardless of whether the link has a valid `href`. With `openOnMouseover: true`, hover will open the menu as before and with the menu open, clicking a top-level navigation item with a valid `href` should open the url. Add toggleButtonClass to specify a button that should toggle the menu in a responsive layout on mobile devices. Incorporate media queries for responsive layout breakpoints. d445afc 1 Git stats 36 commits Files Permalink Failed to load latest commit information. Type Name Latest commit message Commit time css Add openOnMouseover setting, and toggleButtonClass for responsive layout May 11, 2018 js Add openOnMouseover setting, and toggleButtonClass for responsive layout May 11, 2018 third-party/jquery initial commit Aug 26, 2013 LICENSE initial commit Aug 26, 2013 NOTICE initial commit Aug 26, 2013 README.md initial commit Aug 26, 2013 index.html Add openOnMouseover setting, and toggleButtonClass for responsive layout May 11, 2018 package.json Updating repo references Jul 8, 2016 View code README.md Accessible Mega Menu ========================= A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. It is modeled after the mega menu on adobe.com but has been simplified for use by others. An brief explanation of our interaction design choices can be found in a blog post at Mega menu accessibility on adobe.com. Content for the links and text within the mega menu comes from the Web Content Accessibility Guidelines (WCAG) 2.0. Keyboard Accessibility The accessible mega menu supports keyboard interaction modeled after the behavior described in the WAI-ARIA Menu or Menu bar (widget) design pattern, however we also try to respect users' general expectations for the behavior of links in a global navigation. To this end, the accessible mega menu implementation permits tab focus on each of the six top-level menu items. When one of the menu items has focus, pressing the Enter key, Spacebar or Down arrow will open the submenu panel, and pressing the Left or Right arrow key will shift focus to the adjacent menu item. Links within the submenu panels are included in the tab order when the panel is open. They can also be navigated with the arrow keys or by typing the first character in the link name, which speeds up keyboard navigation considerably. Pressing the Escape key closes the submenu and restores focus to the parent menu item. Screen Reader Accessibility The accessible mega menu models its use of WAI-ARIA Roles, States, and Properties after those described in the WAI-ARIA Menu or Menu bar (widget) design pattern with some notable exceptions, so that it behaves better with screen reader user expectations for global navigation. We don't use role=""menu"" for the menu container and role=""menuitem"" for each of the links therein, because if we do, assistive technology will no longer interpret the links as links, but instead, as menu items, and the links in our global navigation will no longer show up when a screen reader user executes a shortcut command to bring up a list of links in the page. We also want to maintain the semantic structure of the submenu panels in our mega menu; our links are organized into lists and separated by headings. Omitting role=""menu"" and role=""menuitem"" for the global navigation seems the safer way to go. Usage HTML The HTML structure for the mega menu is a nav element, or any other container element, containing a list. Each list item contains a link which is followed by a div or any other container element which will serve as the pop up panel. The panel can contain any html content; in the following example, each panel contains three lists of links. You can explicitly define groups within the panel, between which a user can navigate quickly using the left and right arrow keys; in the following example, the CSS class .sub-nav-group identifies a navigable group.     <nav>         <ul class=""nav-menu"">             <li class=""nav-item"">                 <a href=""?movie"">Movies</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=0"">Action &amp; Adventure</a></li>                         <li><a href=""?movie&genre=2"">Children &amp; Family</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=7"">Dramas</a></li>                         <li><a href=""?movie&genre=9"">Foreign</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=14"">Musicals</a></li>                         <li><a href=""?movie&genre=15"">Romance</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>             <li class=""nav-item"">                 <a href=""?tv"">TV Shows</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=20"">Classic TV</a></li>                         <li><a href=""?tv&genre=21"">Crime TV</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=27"">Reality TV</a></li>                         <li><a href=""?tv&genre=30"">TV Action</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=33"">TV Dramas</a></li>                         <li><a href=""?tv&genre=34"">TV Horror</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>         </ul>     </nav> By default, accessibleMegaMenu uses the the following CSS classes to define the top-level navigation items, panels, groups within the panels, and the hover, focus, and open states. It also defines a prefix for unique id strings, which are required to indicate the relationship of a top-level navigation item to the panel it controls.     defaults = {         /* unique ID's are required to indicate aria-owns, aria-controls and aria-labelledby */         uuidPrefix: ""accessible-megamenu"",                  /* default css class used to define the megamenu styling */         menuClass: ""accessible-megamenu"",                  /* default css class for a top-level navigation item in the megamenu */         topNavItemClass: ""accessible-megamenu-top-nav-item"",                  /* default css class for a megamenu panel */         panelClass: ""accessible-megamenu-panel"",                  /* default css class for a group of items within a megamenu panel */         panelGroupClass: ""accessible-megamenu-panel-group"",                  /* default css class for the hover state */         hoverClass: ""hover"",                  /* default css class for the focus state */         focusClass: ""focus"",                  /* default css class for the open state */         openClass: ""open""      } You can optionally override the defaults to use the CSS classes you may have already defined for your mega menu. JavaScript Be sure to include jQuery and the jquery-accessibleMegaMenu.js plugin script.     <script src=""//code.jquery.com/jquery-1.10.1.min.js""></script>     <script src=""js/jquery-accessibleMegaMenu.js""></script> The following initializes the first nav element in the document as an accessibleMegaMenu, with optional CSS class overrides.     $(""nav:first"").accessibleMegaMenu({         /* prefix for generated unique id attributes, which are required             to indicate aria-owns, aria-controls and aria-labelledby */         uuidPrefix: ""accessible-megamenu"",                  /* css class used to define the megamenu styling */         menuClass: ""nav-menu"",                  /* css class for a top-level navigation item in the megamenu */         topNavItemClass: ""nav-item"",                  /* css class for a megamenu panel */         panelClass: ""sub-nav"",                  /* css class for a group of items within a megamenu panel */         panelGroupClass: ""sub-nav-group"",                  /* css class for the hover state */         hoverClass: ""hover"",                  /* css class for the focus state */         focusClass: ""focus"",                  /* css class for the open state */         openClass: ""open""     }); CSS AccessibleMegaMenu handles the showing and hiding of panels by adding or removing a CSS class. No inline styles are added to hide elements or create animation between states. Following is some rudimentary CSS for our example which enables the showing/hiding of and the layout of lists panels in the mega menu.     /* mega menu list */     .nav-menu {         display: block;         position: relative;         list-style: none;         margin: 0;         padding: 0;         z-index: 15;     }     /* a top level navigation item in the mega menu */     .nav-item {         list-style: none;         display: inline-block;         padding: 0;         margin: 0;     }     /* first descendant link within a top level navigation item */     .nav-item > a {         position: relative;         display: inline-block;         padding: 0.5em 1em;         margin: 0 0 -1px 0;         border: 1px solid transparent;     }     /* focus/open states of first descendant link within a top level         navigation item */     .nav-item > a:focus,     .nav-item > a.open {         border: 1px solid #dedede;     }     /* open state of first descendant link within a top level         navigation item */     .nav-item > a.open {         background-color: #fff;         border-bottom: none;         z-index: 1;     }     /* sub-navigation panel */     .sub-nav {         position: absolute;         display: none;         top: 2.2em;         margin-top: -1px;         padding: 0.5em 1em;         border: 1px solid #dedede;         background-color: #fff;     }     /* sub-navigation panel open state */     .sub-nav.open {         display: block;     }     /* list of items within sub-navigation panel */     .sub-nav ul {         display: inline-block;         vertical-align: top;         margin: 0 1em 0 0;         padding: 0;     }     /* list item within sub-navigation panel */     .sub-nav li {         display: block;         list-style-type: none;         margin: 0;         padding: 0;     }   Putting it all together, here is the completed example:     <!doctype html>     <html lang=""en"">     <head>     <meta charset=""UTF-8"">     <title>Simple Accessible Mega Menu Example</title>     <style>         /* Rudimentary mega menu CSS for demonstration */             /* mega menu list */         .nav-menu {             display: block;             position: relative;             list-style: none;             margin: 0;             padding: 0;             z-index: 15;         }         /* a top level navigation item in the mega menu */         .nav-item {             list-style: none;             display: inline-block;             padding: 0;             margin: 0;         }         /* first descendant link within a top level navigation item */         .nav-item > a {             position: relative;             display: inline-block;             padding: 0.5em 1em;             margin: 0 0 -1px 0;             border: 1px solid transparent;         }         /* focus/open states of first descendant link within a top level             navigation item */         .nav-item > a:focus,         .nav-item > a.open {             border: 1px solid #dedede;         }         /* open state of first descendant link within a top level             navigation item */         .nav-item > a.open {             background-color: #fff;             border-bottom: none;             z-index: 1;         }         /* sub-navigation panel */         .sub-nav {             position: absolute;             display: none;             top: 2.2em;             margin-top: -1px;             padding: 0.5em 1em;             border: 1px solid #dedede;             background-color: #fff;         }         /* sub-navigation panel open state */         .sub-nav.open {             display: block;         }         /* list of items within sub-navigation panel */         .sub-nav ul {             display: inline-block;             vertical-align: top;             margin: 0 1em 0 0;             padding: 0;         }         /* list item within sub-navigation panel */         .sub-nav li {             display: block;             list-style-type: none;             margin: 0;             padding: 0;         }          </style>     </head>     <body>     <nav>         <ul class=""nav-menu"">             <li class=""nav-item"">                 <a href=""?movie"">Movies</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=0"">Action &amp; Adventure</a></li>                         <li><a href=""?movie&genre=2"">Children &amp; Family</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=7"">Dramas</a></li>                         <li><a href=""?movie&genre=9"">Foreign</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=14"">Musicals</a></li>                         <li><a href=""?movie&genre=15"">Romance</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>             <li class=""nav-item"">                 <a href=""?tv"">TV Shows</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=20"">Classic TV</a></li>                         <li><a href=""?tv&genre=21"">Crime TV</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=27"">Reality TV</a></li>                         <li><a href=""?tv&genre=30"">TV Action</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=33"">TV Dramas</a></li>                         <li><a href=""?tv&genre=34"">TV Horror</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>         </ul>     </nav>          <!-- include jquery -->     <script src=""//code.jquery.com/jquery-1.10.1.min.js""></script>     <!-- include the jquery-accessibleMegaMenu plugin script -->     <script src=""js/jquery-accessibleMegaMenu.js""></script>     <!-- initialize a selector as an accessibleMegaMenu -->     <script>         $(""nav:first"").accessibleMegaMenu({             /* prefix for generated unique id attributes, which are required                 to indicate aria-owns, aria-controls and aria-labelledby */             uuidPrefix: ""accessible-megamenu"",                          /* css class used to define the megamenu styling */             menuClass: ""nav-menu"",                          /* css class for a top-level navigation item in the megamenu */             topNavItemClass: ""nav-item"",                          /* css class for a megamenu panel */             panelClass: ""sub-nav"",                          /* css class for a group of items within a megamenu panel */             panelGroupClass: ""sub-nav-group"",                          /* css class for the hover state */             hoverClass: ""hover"",                          /* css class for the focus state */             focusClass: ""focus"",                          /* css class for the open state */             openClass: ""open""         });     </script>     </body>     </html> About A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. Resources Readme License Apache-2.0 License Releases No releases published Packages 0 No packages published Used by 10 + 2 Contributors 5 Languages HTML 70.8% CSS 27.3% JavaScript 1.9% © 2020 GitHub, Inc. Terms Privacy Security Status Help Contact GitHub Pricing API Training Blog About You can’t perform that action at this time. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."
215710,20200904,github.com,https://github.com/adobe-accessibility/Accessible-Mega-Menu,text/html,text/html,en,"GitHub - adobe-accessibility/Accessible-Mega-Menu: A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. Skip to content Sign up Why GitHub? Features → Code review Project management Integrations Actions Packages Security Team management Hosting Mobile Customer stories → Security → Team Enterprise Explore Explore GitHub → Learn & contribute Topics Collections Trending Learning Lab Open source guides Connect with others Events Community forum GitHub Education GitHub Stars program Marketplace Pricing Plans → Compare plans Contact Sales Nonprofit → Education → In this repository All GitHub ↵ Jump to ↵ No suggested jump to results In this repository All GitHub ↵ Jump to ↵ In this repository All GitHub ↵ Jump to ↵ Sign in Sign up {{ message }} adobe-accessibility / Accessible-Mega-Menu Watch 49 Star 569 Fork 189 A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. Apache-2.0 License 569 stars 189 forks Star Watch Code Issues 27 Pull requests 12 Actions Projects 0 Security Insights More Code Issues Pull requests Actions Projects Security Insights Dismiss Join GitHub today GitHub is home to over 50 million developers working together to host and review code, manage projects, and build software together. Sign up master 2 branches 0 tags Go to file Code Clone with HTTPS Use Git or checkout with SVN using the web URL. Open with GitHub Desktop Download ZIP Launching GitHub Desktop If nothing happens, download GitHub Desktop and try again. Go back Launching GitHub Desktop If nothing happens, download GitHub Desktop and try again. Go back Launching Xcode If nothing happens, download Xcode and try again. Go back Launching Visual Studio If nothing happens, download the GitHub extension for Visual Studio and try again. Go back Latest commit majornista Add openOnMouseover setting, and toggleButtonClass for responsive layout … 1 d445afc May 11, 2018 Add openOnMouseover setting, and toggleButtonClass for responsive layout To normalize behavior of top navigation links on desktop and mobile, the default behavior will be for the menu to remain closed on hover. Click should toggle the menu regardless of whether the link has a valid `href`. With `openOnMouseover: true`, hover will open the menu as before and with the menu open, clicking a top-level navigation item with a valid `href` should open the url. Add toggleButtonClass to specify a button that should toggle the menu in a responsive layout on mobile devices. Incorporate media queries for responsive layout breakpoints. d445afc 1 Git stats 36 commits Files Permalink Failed to load latest commit information. Type Name Latest commit message Commit time css Add openOnMouseover setting, and toggleButtonClass for responsive layout May 11, 2018 js Add openOnMouseover setting, and toggleButtonClass for responsive layout May 11, 2018 third-party/jquery initial commit Aug 26, 2013 LICENSE initial commit Aug 26, 2013 NOTICE initial commit Aug 26, 2013 README.md initial commit Aug 26, 2013 index.html Add openOnMouseover setting, and toggleButtonClass for responsive layout May 11, 2018 package.json Updating repo references Jul 8, 2016 View code README.md Accessible Mega Menu ========================= A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. It is modeled after the mega menu on adobe.com but has been simplified for use by others. An brief explanation of our interaction design choices can be found in a blog post at Mega menu accessibility on adobe.com. Content for the links and text within the mega menu comes from the Web Content Accessibility Guidelines (WCAG) 2.0. Keyboard Accessibility The accessible mega menu supports keyboard interaction modeled after the behavior described in the WAI-ARIA Menu or Menu bar (widget) design pattern, however we also try to respect users' general expectations for the behavior of links in a global navigation. To this end, the accessible mega menu implementation permits tab focus on each of the six top-level menu items. When one of the menu items has focus, pressing the Enter key, Spacebar or Down arrow will open the submenu panel, and pressing the Left or Right arrow key will shift focus to the adjacent menu item. Links within the submenu panels are included in the tab order when the panel is open. They can also be navigated with the arrow keys or by typing the first character in the link name, which speeds up keyboard navigation considerably. Pressing the Escape key closes the submenu and restores focus to the parent menu item. Screen Reader Accessibility The accessible mega menu models its use of WAI-ARIA Roles, States, and Properties after those described in the WAI-ARIA Menu or Menu bar (widget) design pattern with some notable exceptions, so that it behaves better with screen reader user expectations for global navigation. We don't use role=""menu"" for the menu container and role=""menuitem"" for each of the links therein, because if we do, assistive technology will no longer interpret the links as links, but instead, as menu items, and the links in our global navigation will no longer show up when a screen reader user executes a shortcut command to bring up a list of links in the page. We also want to maintain the semantic structure of the submenu panels in our mega menu; our links are organized into lists and separated by headings. Omitting role=""menu"" and role=""menuitem"" for the global navigation seems the safer way to go. Usage HTML The HTML structure for the mega menu is a nav element, or any other container element, containing a list. Each list item contains a link which is followed by a div or any other container element which will serve as the pop up panel. The panel can contain any html content; in the following example, each panel contains three lists of links. You can explicitly define groups within the panel, between which a user can navigate quickly using the left and right arrow keys; in the following example, the CSS class .sub-nav-group identifies a navigable group.     <nav>         <ul class=""nav-menu"">             <li class=""nav-item"">                 <a href=""?movie"">Movies</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=0"">Action &amp; Adventure</a></li>                         <li><a href=""?movie&genre=2"">Children &amp; Family</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=7"">Dramas</a></li>                         <li><a href=""?movie&genre=9"">Foreign</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=14"">Musicals</a></li>                         <li><a href=""?movie&genre=15"">Romance</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>             <li class=""nav-item"">                 <a href=""?tv"">TV Shows</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=20"">Classic TV</a></li>                         <li><a href=""?tv&genre=21"">Crime TV</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=27"">Reality TV</a></li>                         <li><a href=""?tv&genre=30"">TV Action</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=33"">TV Dramas</a></li>                         <li><a href=""?tv&genre=34"">TV Horror</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>         </ul>     </nav> By default, accessibleMegaMenu uses the the following CSS classes to define the top-level navigation items, panels, groups within the panels, and the hover, focus, and open states. It also defines a prefix for unique id strings, which are required to indicate the relationship of a top-level navigation item to the panel it controls.     defaults = {         /* unique ID's are required to indicate aria-owns, aria-controls and aria-labelledby */         uuidPrefix: ""accessible-megamenu"",                  /* default css class used to define the megamenu styling */         menuClass: ""accessible-megamenu"",                  /* default css class for a top-level navigation item in the megamenu */         topNavItemClass: ""accessible-megamenu-top-nav-item"",                  /* default css class for a megamenu panel */         panelClass: ""accessible-megamenu-panel"",                  /* default css class for a group of items within a megamenu panel */         panelGroupClass: ""accessible-megamenu-panel-group"",                  /* default css class for the hover state */         hoverClass: ""hover"",                  /* default css class for the focus state */         focusClass: ""focus"",                  /* default css class for the open state */         openClass: ""open""      } You can optionally override the defaults to use the CSS classes you may have already defined for your mega menu. JavaScript Be sure to include jQuery and the jquery-accessibleMegaMenu.js plugin script.     <script src=""//code.jquery.com/jquery-1.10.1.min.js""></script>     <script src=""js/jquery-accessibleMegaMenu.js""></script> The following initializes the first nav element in the document as an accessibleMegaMenu, with optional CSS class overrides.     $(""nav:first"").accessibleMegaMenu({         /* prefix for generated unique id attributes, which are required             to indicate aria-owns, aria-controls and aria-labelledby */         uuidPrefix: ""accessible-megamenu"",                  /* css class used to define the megamenu styling */         menuClass: ""nav-menu"",                  /* css class for a top-level navigation item in the megamenu */         topNavItemClass: ""nav-item"",                  /* css class for a megamenu panel */         panelClass: ""sub-nav"",                  /* css class for a group of items within a megamenu panel */         panelGroupClass: ""sub-nav-group"",                  /* css class for the hover state */         hoverClass: ""hover"",                  /* css class for the focus state */         focusClass: ""focus"",                  /* css class for the open state */         openClass: ""open""     }); CSS AccessibleMegaMenu handles the showing and hiding of panels by adding or removing a CSS class. No inline styles are added to hide elements or create animation between states. Following is some rudimentary CSS for our example which enables the showing/hiding of and the layout of lists panels in the mega menu.     /* mega menu list */     .nav-menu {         display: block;         position: relative;         list-style: none;         margin: 0;         padding: 0;         z-index: 15;     }     /* a top level navigation item in the mega menu */     .nav-item {         list-style: none;         display: inline-block;         padding: 0;         margin: 0;     }     /* first descendant link within a top level navigation item */     .nav-item > a {         position: relative;         display: inline-block;         padding: 0.5em 1em;         margin: 0 0 -1px 0;         border: 1px solid transparent;     }     /* focus/open states of first descendant link within a top level         navigation item */     .nav-item > a:focus,     .nav-item > a.open {         border: 1px solid #dedede;     }     /* open state of first descendant link within a top level         navigation item */     .nav-item > a.open {         background-color: #fff;         border-bottom: none;         z-index: 1;     }     /* sub-navigation panel */     .sub-nav {         position: absolute;         display: none;         top: 2.2em;         margin-top: -1px;         padding: 0.5em 1em;         border: 1px solid #dedede;         background-color: #fff;     }     /* sub-navigation panel open state */     .sub-nav.open {         display: block;     }     /* list of items within sub-navigation panel */     .sub-nav ul {         display: inline-block;         vertical-align: top;         margin: 0 1em 0 0;         padding: 0;     }     /* list item within sub-navigation panel */     .sub-nav li {         display: block;         list-style-type: none;         margin: 0;         padding: 0;     }   Putting it all together, here is the completed example:     <!doctype html>     <html lang=""en"">     <head>     <meta charset=""UTF-8"">     <title>Simple Accessible Mega Menu Example</title>     <style>         /* Rudimentary mega menu CSS for demonstration */             /* mega menu list */         .nav-menu {             display: block;             position: relative;             list-style: none;             margin: 0;             padding: 0;             z-index: 15;         }         /* a top level navigation item in the mega menu */         .nav-item {             list-style: none;             display: inline-block;             padding: 0;             margin: 0;         }         /* first descendant link within a top level navigation item */         .nav-item > a {             position: relative;             display: inline-block;             padding: 0.5em 1em;             margin: 0 0 -1px 0;             border: 1px solid transparent;         }         /* focus/open states of first descendant link within a top level             navigation item */         .nav-item > a:focus,         .nav-item > a.open {             border: 1px solid #dedede;         }         /* open state of first descendant link within a top level             navigation item */         .nav-item > a.open {             background-color: #fff;             border-bottom: none;             z-index: 1;         }         /* sub-navigation panel */         .sub-nav {             position: absolute;             display: none;             top: 2.2em;             margin-top: -1px;             padding: 0.5em 1em;             border: 1px solid #dedede;             background-color: #fff;         }         /* sub-navigation panel open state */         .sub-nav.open {             display: block;         }         /* list of items within sub-navigation panel */         .sub-nav ul {             display: inline-block;             vertical-align: top;             margin: 0 1em 0 0;             padding: 0;         }         /* list item within sub-navigation panel */         .sub-nav li {             display: block;             list-style-type: none;             margin: 0;             padding: 0;         }          </style>     </head>     <body>     <nav>         <ul class=""nav-menu"">             <li class=""nav-item"">                 <a href=""?movie"">Movies</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=0"">Action &amp; Adventure</a></li>                         <li><a href=""?movie&genre=2"">Children &amp; Family</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=7"">Dramas</a></li>                         <li><a href=""?movie&genre=9"">Foreign</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=14"">Musicals</a></li>                         <li><a href=""?movie&genre=15"">Romance</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>             <li class=""nav-item"">                 <a href=""?tv"">TV Shows</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=20"">Classic TV</a></li>                         <li><a href=""?tv&genre=21"">Crime TV</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=27"">Reality TV</a></li>                         <li><a href=""?tv&genre=30"">TV Action</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=33"">TV Dramas</a></li>                         <li><a href=""?tv&genre=34"">TV Horror</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>         </ul>     </nav>          <!-- include jquery -->     <script src=""//code.jquery.com/jquery-1.10.1.min.js""></script>     <!-- include the jquery-accessibleMegaMenu plugin script -->     <script src=""js/jquery-accessibleMegaMenu.js""></script>     <!-- initialize a selector as an accessibleMegaMenu -->     <script>         $(""nav:first"").accessibleMegaMenu({             /* prefix for generated unique id attributes, which are required                 to indicate aria-owns, aria-controls and aria-labelledby */             uuidPrefix: ""accessible-megamenu"",                          /* css class used to define the megamenu styling */             menuClass: ""nav-menu"",                          /* css class for a top-level navigation item in the megamenu */             topNavItemClass: ""nav-item"",                          /* css class for a megamenu panel */             panelClass: ""sub-nav"",                          /* css class for a group of items within a megamenu panel */             panelGroupClass: ""sub-nav-group"",                          /* css class for the hover state */             hoverClass: ""hover"",                          /* css class for the focus state */             focusClass: ""focus"",                          /* css class for the open state */             openClass: ""open""         });     </script>     </body>     </html> About A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. Resources Readme License Apache-2.0 License Releases No releases published Packages 0 No packages published Used by 10 + 2 Contributors 5 Languages HTML 70.8% CSS 27.3% JavaScript 1.9% © 2020 GitHub, Inc. Terms Privacy Security Status Help Contact GitHub Pricing API Training Blog About You can’t perform that action at this time. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."
228112,20200911,github.com,https://github.com/adobe-accessibility/Accessible-Mega-Menu,text/html,text/html,en,"GitHub - adobe-accessibility/Accessible-Mega-Menu: A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. Skip to content Sign up Why GitHub? Features → Code review Project management Integrations Actions Packages Security Team management Hosting Mobile Customer stories → Security → Team Enterprise Explore Explore GitHub → Learn & contribute Topics Collections Trending Learning Lab Open source guides Connect with others Events Community forum GitHub Education GitHub Stars program Marketplace Pricing Plans → Compare plans Contact Sales Nonprofit → Education → In this repository All GitHub ↵ Jump to ↵ No suggested jump to results In this repository All GitHub ↵ Jump to ↵ In this repository All GitHub ↵ Jump to ↵ Sign in Sign up {{ message }} adobe-accessibility / Accessible-Mega-Menu Watch 50 Star 571 Fork 189 A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. Apache-2.0 License 571 stars 189 forks Star Watch Code Issues 27 Pull requests 12 Actions Projects 0 Security Insights More Code Issues Pull requests Actions Projects Security Insights Dismiss Join GitHub today GitHub is home to over 50 million developers working together to host and review code, manage projects, and build software together. Sign up master 2 branches 0 tags Go to file Code Clone with HTTPS Use Git or checkout with SVN using the web URL. Open with GitHub Desktop Download ZIP Launching GitHub Desktop If nothing happens, download GitHub Desktop and try again. Go back Launching GitHub Desktop If nothing happens, download GitHub Desktop and try again. Go back Launching Xcode If nothing happens, download Xcode and try again. Go back Launching Visual Studio If nothing happens, download the GitHub extension for Visual Studio and try again. Go back Latest commit majornista Add openOnMouseover setting, and toggleButtonClass for responsive layout … 1 d445afc May 11, 2018 Add openOnMouseover setting, and toggleButtonClass for responsive layout To normalize behavior of top navigation links on desktop and mobile, the default behavior will be for the menu to remain closed on hover. Click should toggle the menu regardless of whether the link has a valid `href`. With `openOnMouseover: true`, hover will open the menu as before and with the menu open, clicking a top-level navigation item with a valid `href` should open the url. Add toggleButtonClass to specify a button that should toggle the menu in a responsive layout on mobile devices. Incorporate media queries for responsive layout breakpoints. d445afc 1 Git stats 36 commits Files Permalink Failed to load latest commit information. Type Name Latest commit message Commit time css Add openOnMouseover setting, and toggleButtonClass for responsive layout May 11, 2018 js Add openOnMouseover setting, and toggleButtonClass for responsive layout May 11, 2018 third-party/jquery initial commit Aug 26, 2013 LICENSE initial commit Aug 26, 2013 NOTICE initial commit Aug 26, 2013 README.md initial commit Aug 26, 2013 index.html Add openOnMouseover setting, and toggleButtonClass for responsive layout May 11, 2018 package.json Updating repo references Jul 8, 2016 View code README.md Accessible Mega Menu ========================= A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. It is modeled after the mega menu on adobe.com but has been simplified for use by others. An brief explanation of our interaction design choices can be found in a blog post at Mega menu accessibility on adobe.com. Content for the links and text within the mega menu comes from the Web Content Accessibility Guidelines (WCAG) 2.0. Keyboard Accessibility The accessible mega menu supports keyboard interaction modeled after the behavior described in the WAI-ARIA Menu or Menu bar (widget) design pattern, however we also try to respect users' general expectations for the behavior of links in a global navigation. To this end, the accessible mega menu implementation permits tab focus on each of the six top-level menu items. When one of the menu items has focus, pressing the Enter key, Spacebar or Down arrow will open the submenu panel, and pressing the Left or Right arrow key will shift focus to the adjacent menu item. Links within the submenu panels are included in the tab order when the panel is open. They can also be navigated with the arrow keys or by typing the first character in the link name, which speeds up keyboard navigation considerably. Pressing the Escape key closes the submenu and restores focus to the parent menu item. Screen Reader Accessibility The accessible mega menu models its use of WAI-ARIA Roles, States, and Properties after those described in the WAI-ARIA Menu or Menu bar (widget) design pattern with some notable exceptions, so that it behaves better with screen reader user expectations for global navigation. We don't use role=""menu"" for the menu container and role=""menuitem"" for each of the links therein, because if we do, assistive technology will no longer interpret the links as links, but instead, as menu items, and the links in our global navigation will no longer show up when a screen reader user executes a shortcut command to bring up a list of links in the page. We also want to maintain the semantic structure of the submenu panels in our mega menu; our links are organized into lists and separated by headings. Omitting role=""menu"" and role=""menuitem"" for the global navigation seems the safer way to go. Usage HTML The HTML structure for the mega menu is a nav element, or any other container element, containing a list. Each list item contains a link which is followed by a div or any other container element which will serve as the pop up panel. The panel can contain any html content; in the following example, each panel contains three lists of links. You can explicitly define groups within the panel, between which a user can navigate quickly using the left and right arrow keys; in the following example, the CSS class .sub-nav-group identifies a navigable group.     <nav>         <ul class=""nav-menu"">             <li class=""nav-item"">                 <a href=""?movie"">Movies</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=0"">Action &amp; Adventure</a></li>                         <li><a href=""?movie&genre=2"">Children &amp; Family</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=7"">Dramas</a></li>                         <li><a href=""?movie&genre=9"">Foreign</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=14"">Musicals</a></li>                         <li><a href=""?movie&genre=15"">Romance</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>             <li class=""nav-item"">                 <a href=""?tv"">TV Shows</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=20"">Classic TV</a></li>                         <li><a href=""?tv&genre=21"">Crime TV</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=27"">Reality TV</a></li>                         <li><a href=""?tv&genre=30"">TV Action</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=33"">TV Dramas</a></li>                         <li><a href=""?tv&genre=34"">TV Horror</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>         </ul>     </nav> By default, accessibleMegaMenu uses the the following CSS classes to define the top-level navigation items, panels, groups within the panels, and the hover, focus, and open states. It also defines a prefix for unique id strings, which are required to indicate the relationship of a top-level navigation item to the panel it controls.     defaults = {         /* unique ID's are required to indicate aria-owns, aria-controls and aria-labelledby */         uuidPrefix: ""accessible-megamenu"",                  /* default css class used to define the megamenu styling */         menuClass: ""accessible-megamenu"",                  /* default css class for a top-level navigation item in the megamenu */         topNavItemClass: ""accessible-megamenu-top-nav-item"",                  /* default css class for a megamenu panel */         panelClass: ""accessible-megamenu-panel"",                  /* default css class for a group of items within a megamenu panel */         panelGroupClass: ""accessible-megamenu-panel-group"",                  /* default css class for the hover state */         hoverClass: ""hover"",                  /* default css class for the focus state */         focusClass: ""focus"",                  /* default css class for the open state */         openClass: ""open""      } You can optionally override the defaults to use the CSS classes you may have already defined for your mega menu. JavaScript Be sure to include jQuery and the jquery-accessibleMegaMenu.js plugin script.     <script src=""//code.jquery.com/jquery-1.10.1.min.js""></script>     <script src=""js/jquery-accessibleMegaMenu.js""></script> The following initializes the first nav element in the document as an accessibleMegaMenu, with optional CSS class overrides.     $(""nav:first"").accessibleMegaMenu({         /* prefix for generated unique id attributes, which are required             to indicate aria-owns, aria-controls and aria-labelledby */         uuidPrefix: ""accessible-megamenu"",                  /* css class used to define the megamenu styling */         menuClass: ""nav-menu"",                  /* css class for a top-level navigation item in the megamenu */         topNavItemClass: ""nav-item"",                  /* css class for a megamenu panel */         panelClass: ""sub-nav"",                  /* css class for a group of items within a megamenu panel */         panelGroupClass: ""sub-nav-group"",                  /* css class for the hover state */         hoverClass: ""hover"",                  /* css class for the focus state */         focusClass: ""focus"",                  /* css class for the open state */         openClass: ""open""     }); CSS AccessibleMegaMenu handles the showing and hiding of panels by adding or removing a CSS class. No inline styles are added to hide elements or create animation between states. Following is some rudimentary CSS for our example which enables the showing/hiding of and the layout of lists panels in the mega menu.     /* mega menu list */     .nav-menu {         display: block;         position: relative;         list-style: none;         margin: 0;         padding: 0;         z-index: 15;     }     /* a top level navigation item in the mega menu */     .nav-item {         list-style: none;         display: inline-block;         padding: 0;         margin: 0;     }     /* first descendant link within a top level navigation item */     .nav-item > a {         position: relative;         display: inline-block;         padding: 0.5em 1em;         margin: 0 0 -1px 0;         border: 1px solid transparent;     }     /* focus/open states of first descendant link within a top level         navigation item */     .nav-item > a:focus,     .nav-item > a.open {         border: 1px solid #dedede;     }     /* open state of first descendant link within a top level         navigation item */     .nav-item > a.open {         background-color: #fff;         border-bottom: none;         z-index: 1;     }     /* sub-navigation panel */     .sub-nav {         position: absolute;         display: none;         top: 2.2em;         margin-top: -1px;         padding: 0.5em 1em;         border: 1px solid #dedede;         background-color: #fff;     }     /* sub-navigation panel open state */     .sub-nav.open {         display: block;     }     /* list of items within sub-navigation panel */     .sub-nav ul {         display: inline-block;         vertical-align: top;         margin: 0 1em 0 0;         padding: 0;     }     /* list item within sub-navigation panel */     .sub-nav li {         display: block;         list-style-type: none;         margin: 0;         padding: 0;     }   Putting it all together, here is the completed example:     <!doctype html>     <html lang=""en"">     <head>     <meta charset=""UTF-8"">     <title>Simple Accessible Mega Menu Example</title>     <style>         /* Rudimentary mega menu CSS for demonstration */             /* mega menu list */         .nav-menu {             display: block;             position: relative;             list-style: none;             margin: 0;             padding: 0;             z-index: 15;         }         /* a top level navigation item in the mega menu */         .nav-item {             list-style: none;             display: inline-block;             padding: 0;             margin: 0;         }         /* first descendant link within a top level navigation item */         .nav-item > a {             position: relative;             display: inline-block;             padding: 0.5em 1em;             margin: 0 0 -1px 0;             border: 1px solid transparent;         }         /* focus/open states of first descendant link within a top level             navigation item */         .nav-item > a:focus,         .nav-item > a.open {             border: 1px solid #dedede;         }         /* open state of first descendant link within a top level             navigation item */         .nav-item > a.open {             background-color: #fff;             border-bottom: none;             z-index: 1;         }         /* sub-navigation panel */         .sub-nav {             position: absolute;             display: none;             top: 2.2em;             margin-top: -1px;             padding: 0.5em 1em;             border: 1px solid #dedede;             background-color: #fff;         }         /* sub-navigation panel open state */         .sub-nav.open {             display: block;         }         /* list of items within sub-navigation panel */         .sub-nav ul {             display: inline-block;             vertical-align: top;             margin: 0 1em 0 0;             padding: 0;         }         /* list item within sub-navigation panel */         .sub-nav li {             display: block;             list-style-type: none;             margin: 0;             padding: 0;         }          </style>     </head>     <body>     <nav>         <ul class=""nav-menu"">             <li class=""nav-item"">                 <a href=""?movie"">Movies</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=0"">Action &amp; Adventure</a></li>                         <li><a href=""?movie&genre=2"">Children &amp; Family</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=7"">Dramas</a></li>                         <li><a href=""?movie&genre=9"">Foreign</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=14"">Musicals</a></li>                         <li><a href=""?movie&genre=15"">Romance</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>             <li class=""nav-item"">                 <a href=""?tv"">TV Shows</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=20"">Classic TV</a></li>                         <li><a href=""?tv&genre=21"">Crime TV</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=27"">Reality TV</a></li>                         <li><a href=""?tv&genre=30"">TV Action</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=33"">TV Dramas</a></li>                         <li><a href=""?tv&genre=34"">TV Horror</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>         </ul>     </nav>          <!-- include jquery -->     <script src=""//code.jquery.com/jquery-1.10.1.min.js""></script>     <!-- include the jquery-accessibleMegaMenu plugin script -->     <script src=""js/jquery-accessibleMegaMenu.js""></script>     <!-- initialize a selector as an accessibleMegaMenu -->     <script>         $(""nav:first"").accessibleMegaMenu({             /* prefix for generated unique id attributes, which are required                 to indicate aria-owns, aria-controls and aria-labelledby */             uuidPrefix: ""accessible-megamenu"",                          /* css class used to define the megamenu styling */             menuClass: ""nav-menu"",                          /* css class for a top-level navigation item in the megamenu */             topNavItemClass: ""nav-item"",                          /* css class for a megamenu panel */             panelClass: ""sub-nav"",                          /* css class for a group of items within a megamenu panel */             panelGroupClass: ""sub-nav-group"",                          /* css class for the hover state */             hoverClass: ""hover"",                          /* css class for the focus state */             focusClass: ""focus"",                          /* css class for the open state */             openClass: ""open""         });     </script>     </body>     </html> About A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. Resources Readme License Apache-2.0 License Releases No releases published Packages 0 No packages published Used by 14 + 6 Contributors 5 Languages HTML 70.8% CSS 27.3% JavaScript 1.9% © 2020 GitHub, Inc. Terms Privacy Security Status Help Contact GitHub Pricing API Training Blog About You can’t perform that action at this time. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."
240854,20200918,github.com,https://github.com/adobe-accessibility/Accessible-Mega-Menu,text/html,text/html,en,"GitHub - adobe-accessibility/Accessible-Mega-Menu: A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. Skip to content Sign up Why GitHub? Features → Code review Project management Integrations Actions Packages Security Team management Hosting Mobile Customer stories → Security → Team Enterprise Explore Explore GitHub → Learn & contribute Topics Collections Trending Learning Lab Open source guides Connect with others Events Community forum GitHub Education GitHub Stars program Marketplace Pricing Plans → Compare plans Contact Sales Nonprofit → Education → In this repository All GitHub ↵ Jump to ↵ No suggested jump to results In this repository All GitHub ↵ Jump to ↵ In this repository All GitHub ↵ Jump to ↵ Sign in Sign up {{ message }} adobe-accessibility / Accessible-Mega-Menu Watch 50 Star 571 Fork 190 A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. Apache-2.0 License 571 stars 190 forks Star Watch Code Issues 27 Pull requests 12 Actions Projects 0 Security Insights More Code Issues Pull requests Actions Projects Security Insights Dismiss Join GitHub today GitHub is home to over 50 million developers working together to host and review code, manage projects, and build software together. Sign up master 2 branches 0 tags Go to file Code Clone with HTTPS Use Git or checkout with SVN using the web URL. Open with GitHub Desktop Download ZIP Launching GitHub Desktop If nothing happens, download GitHub Desktop and try again. Go back Launching GitHub Desktop If nothing happens, download GitHub Desktop and try again. Go back Launching Xcode If nothing happens, download Xcode and try again. Go back Launching Visual Studio If nothing happens, download the GitHub extension for Visual Studio and try again. Go back Latest commit Git stats 36 commits Files Permalink Failed to load latest commit information. Type Name Latest commit message Commit time css Add openOnMouseover setting, and toggleButtonClass for responsive layout May 11, 2018 js Add openOnMouseover setting, and toggleButtonClass for responsive layout May 11, 2018 third-party/jquery initial commit Aug 26, 2013 LICENSE initial commit Aug 26, 2013 NOTICE initial commit Aug 26, 2013 README.md initial commit Aug 26, 2013 index.html Add openOnMouseover setting, and toggleButtonClass for responsive layout May 11, 2018 package.json Updating repo references Jul 8, 2016 View code README.md Accessible Mega Menu ========================= A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. It is modeled after the mega menu on adobe.com but has been simplified for use by others. An brief explanation of our interaction design choices can be found in a blog post at Mega menu accessibility on adobe.com. Content for the links and text within the mega menu comes from the Web Content Accessibility Guidelines (WCAG) 2.0. Keyboard Accessibility The accessible mega menu supports keyboard interaction modeled after the behavior described in the WAI-ARIA Menu or Menu bar (widget) design pattern, however we also try to respect users' general expectations for the behavior of links in a global navigation. To this end, the accessible mega menu implementation permits tab focus on each of the six top-level menu items. When one of the menu items has focus, pressing the Enter key, Spacebar or Down arrow will open the submenu panel, and pressing the Left or Right arrow key will shift focus to the adjacent menu item. Links within the submenu panels are included in the tab order when the panel is open. They can also be navigated with the arrow keys or by typing the first character in the link name, which speeds up keyboard navigation considerably. Pressing the Escape key closes the submenu and restores focus to the parent menu item. Screen Reader Accessibility The accessible mega menu models its use of WAI-ARIA Roles, States, and Properties after those described in the WAI-ARIA Menu or Menu bar (widget) design pattern with some notable exceptions, so that it behaves better with screen reader user expectations for global navigation. We don't use role=""menu"" for the menu container and role=""menuitem"" for each of the links therein, because if we do, assistive technology will no longer interpret the links as links, but instead, as menu items, and the links in our global navigation will no longer show up when a screen reader user executes a shortcut command to bring up a list of links in the page. We also want to maintain the semantic structure of the submenu panels in our mega menu; our links are organized into lists and separated by headings. Omitting role=""menu"" and role=""menuitem"" for the global navigation seems the safer way to go. Usage HTML The HTML structure for the mega menu is a nav element, or any other container element, containing a list. Each list item contains a link which is followed by a div or any other container element which will serve as the pop up panel. The panel can contain any html content; in the following example, each panel contains three lists of links. You can explicitly define groups within the panel, between which a user can navigate quickly using the left and right arrow keys; in the following example, the CSS class .sub-nav-group identifies a navigable group.     <nav>         <ul class=""nav-menu"">             <li class=""nav-item"">                 <a href=""?movie"">Movies</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=0"">Action &amp; Adventure</a></li>                         <li><a href=""?movie&genre=2"">Children &amp; Family</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=7"">Dramas</a></li>                         <li><a href=""?movie&genre=9"">Foreign</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=14"">Musicals</a></li>                         <li><a href=""?movie&genre=15"">Romance</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>             <li class=""nav-item"">                 <a href=""?tv"">TV Shows</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=20"">Classic TV</a></li>                         <li><a href=""?tv&genre=21"">Crime TV</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=27"">Reality TV</a></li>                         <li><a href=""?tv&genre=30"">TV Action</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=33"">TV Dramas</a></li>                         <li><a href=""?tv&genre=34"">TV Horror</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>         </ul>     </nav> By default, accessibleMegaMenu uses the the following CSS classes to define the top-level navigation items, panels, groups within the panels, and the hover, focus, and open states. It also defines a prefix for unique id strings, which are required to indicate the relationship of a top-level navigation item to the panel it controls.     defaults = {         /* unique ID's are required to indicate aria-owns, aria-controls and aria-labelledby */         uuidPrefix: ""accessible-megamenu"",                  /* default css class used to define the megamenu styling */         menuClass: ""accessible-megamenu"",                  /* default css class for a top-level navigation item in the megamenu */         topNavItemClass: ""accessible-megamenu-top-nav-item"",                  /* default css class for a megamenu panel */         panelClass: ""accessible-megamenu-panel"",                  /* default css class for a group of items within a megamenu panel */         panelGroupClass: ""accessible-megamenu-panel-group"",                  /* default css class for the hover state */         hoverClass: ""hover"",                  /* default css class for the focus state */         focusClass: ""focus"",                  /* default css class for the open state */         openClass: ""open""      } You can optionally override the defaults to use the CSS classes you may have already defined for your mega menu. JavaScript Be sure to include jQuery and the jquery-accessibleMegaMenu.js plugin script.     <script src=""//code.jquery.com/jquery-1.10.1.min.js""></script>     <script src=""js/jquery-accessibleMegaMenu.js""></script> The following initializes the first nav element in the document as an accessibleMegaMenu, with optional CSS class overrides.     $(""nav:first"").accessibleMegaMenu({         /* prefix for generated unique id attributes, which are required             to indicate aria-owns, aria-controls and aria-labelledby */         uuidPrefix: ""accessible-megamenu"",                  /* css class used to define the megamenu styling */         menuClass: ""nav-menu"",                  /* css class for a top-level navigation item in the megamenu */         topNavItemClass: ""nav-item"",                  /* css class for a megamenu panel */         panelClass: ""sub-nav"",                  /* css class for a group of items within a megamenu panel */         panelGroupClass: ""sub-nav-group"",                  /* css class for the hover state */         hoverClass: ""hover"",                  /* css class for the focus state */         focusClass: ""focus"",                  /* css class for the open state */         openClass: ""open""     }); CSS AccessibleMegaMenu handles the showing and hiding of panels by adding or removing a CSS class. No inline styles are added to hide elements or create animation between states. Following is some rudimentary CSS for our example which enables the showing/hiding of and the layout of lists panels in the mega menu.     /* mega menu list */     .nav-menu {         display: block;         position: relative;         list-style: none;         margin: 0;         padding: 0;         z-index: 15;     }     /* a top level navigation item in the mega menu */     .nav-item {         list-style: none;         display: inline-block;         padding: 0;         margin: 0;     }     /* first descendant link within a top level navigation item */     .nav-item > a {         position: relative;         display: inline-block;         padding: 0.5em 1em;         margin: 0 0 -1px 0;         border: 1px solid transparent;     }     /* focus/open states of first descendant link within a top level         navigation item */     .nav-item > a:focus,     .nav-item > a.open {         border: 1px solid #dedede;     }     /* open state of first descendant link within a top level         navigation item */     .nav-item > a.open {         background-color: #fff;         border-bottom: none;         z-index: 1;     }     /* sub-navigation panel */     .sub-nav {         position: absolute;         display: none;         top: 2.2em;         margin-top: -1px;         padding: 0.5em 1em;         border: 1px solid #dedede;         background-color: #fff;     }     /* sub-navigation panel open state */     .sub-nav.open {         display: block;     }     /* list of items within sub-navigation panel */     .sub-nav ul {         display: inline-block;         vertical-align: top;         margin: 0 1em 0 0;         padding: 0;     }     /* list item within sub-navigation panel */     .sub-nav li {         display: block;         list-style-type: none;         margin: 0;         padding: 0;     }   Putting it all together, here is the completed example:     <!doctype html>     <html lang=""en"">     <head>     <meta charset=""UTF-8"">     <title>Simple Accessible Mega Menu Example</title>     <style>         /* Rudimentary mega menu CSS for demonstration */             /* mega menu list */         .nav-menu {             display: block;             position: relative;             list-style: none;             margin: 0;             padding: 0;             z-index: 15;         }         /* a top level navigation item in the mega menu */         .nav-item {             list-style: none;             display: inline-block;             padding: 0;             margin: 0;         }         /* first descendant link within a top level navigation item */         .nav-item > a {             position: relative;             display: inline-block;             padding: 0.5em 1em;             margin: 0 0 -1px 0;             border: 1px solid transparent;         }         /* focus/open states of first descendant link within a top level             navigation item */         .nav-item > a:focus,         .nav-item > a.open {             border: 1px solid #dedede;         }         /* open state of first descendant link within a top level             navigation item */         .nav-item > a.open {             background-color: #fff;             border-bottom: none;             z-index: 1;         }         /* sub-navigation panel */         .sub-nav {             position: absolute;             display: none;             top: 2.2em;             margin-top: -1px;             padding: 0.5em 1em;             border: 1px solid #dedede;             background-color: #fff;         }         /* sub-navigation panel open state */         .sub-nav.open {             display: block;         }         /* list of items within sub-navigation panel */         .sub-nav ul {             display: inline-block;             vertical-align: top;             margin: 0 1em 0 0;             padding: 0;         }         /* list item within sub-navigation panel */         .sub-nav li {             display: block;             list-style-type: none;             margin: 0;             padding: 0;         }          </style>     </head>     <body>     <nav>         <ul class=""nav-menu"">             <li class=""nav-item"">                 <a href=""?movie"">Movies</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=0"">Action &amp; Adventure</a></li>                         <li><a href=""?movie&genre=2"">Children &amp; Family</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=7"">Dramas</a></li>                         <li><a href=""?movie&genre=9"">Foreign</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=14"">Musicals</a></li>                         <li><a href=""?movie&genre=15"">Romance</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>             <li class=""nav-item"">                 <a href=""?tv"">TV Shows</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=20"">Classic TV</a></li>                         <li><a href=""?tv&genre=21"">Crime TV</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=27"">Reality TV</a></li>                         <li><a href=""?tv&genre=30"">TV Action</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=33"">TV Dramas</a></li>                         <li><a href=""?tv&genre=34"">TV Horror</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>         </ul>     </nav>          <!-- include jquery -->     <script src=""//code.jquery.com/jquery-1.10.1.min.js""></script>     <!-- include the jquery-accessibleMegaMenu plugin script -->     <script src=""js/jquery-accessibleMegaMenu.js""></script>     <!-- initialize a selector as an accessibleMegaMenu -->     <script>         $(""nav:first"").accessibleMegaMenu({             /* prefix for generated unique id attributes, which are required                 to indicate aria-owns, aria-controls and aria-labelledby */             uuidPrefix: ""accessible-megamenu"",                          /* css class used to define the megamenu styling */             menuClass: ""nav-menu"",                          /* css class for a top-level navigation item in the megamenu */             topNavItemClass: ""nav-item"",                          /* css class for a megamenu panel */             panelClass: ""sub-nav"",                          /* css class for a group of items within a megamenu panel */             panelGroupClass: ""sub-nav-group"",                          /* css class for the hover state */             hoverClass: ""hover"",                          /* css class for the focus state */             focusClass: ""focus"",                          /* css class for the open state */             openClass: ""open""         });     </script>     </body>     </html> About A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. Resources Readme License Apache-2.0 License Releases No releases published Packages 0 No packages published Used by 14 + 6 Contributors 5 Languages HTML 70.8% CSS 27.3% JavaScript 1.9% © 2020 GitHub, Inc. Terms Privacy Security Status Help Contact GitHub Pricing API Training Blog About You can’t perform that action at this time. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."
251827,20200925,github.com,https://github.com/adobe-accessibility/Accessible-Mega-Menu,text/html,text/html,en,"GitHub - adobe-accessibility/Accessible-Mega-Menu: A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. Skip to content Sign up Why GitHub? Features → Code review Project management Integrations Actions Packages Security Team management Hosting Mobile Customer stories → Security → Team Enterprise Explore Explore GitHub → Learn & contribute Topics Collections Trending Learning Lab Open source guides Connect with others Events Community forum GitHub Education GitHub Stars program Marketplace Pricing Plans → Compare plans Contact Sales Nonprofit → Education → In this repository All GitHub ↵ Jump to ↵ No suggested jump to results In this repository All GitHub ↵ Jump to ↵ In this repository All GitHub ↵ Jump to ↵ Sign in Sign up {{ message }} adobe-accessibility / Accessible-Mega-Menu Watch 48 Star 571 Fork 190 A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. Apache-2.0 License 571 stars 190 forks Star Watch Code Issues 28 Pull requests 12 Actions Projects 0 Security Insights More Code Issues Pull requests Actions Projects Security Insights Dismiss Join GitHub today GitHub is home to over 50 million developers working together to host and review code, manage projects, and build software together. Sign up master 2 branches 0 tags Go to file Code Clone HTTPS GitHub CLI Use Git or checkout with SVN using the web URL. Work fast with our official CLI. Learn more. Open with GitHub Desktop Download ZIP Launching GitHub Desktop If nothing happens, download GitHub Desktop and try again. Go back Launching GitHub Desktop If nothing happens, download GitHub Desktop and try again. Go back Launching Xcode If nothing happens, download Xcode and try again. Go back Launching Visual Studio If nothing happens, download the GitHub extension for Visual Studio and try again. Go back Latest commit majornista Add openOnMouseover setting, and toggleButtonClass for responsive layout … 1 d445afc May 11, 2018 Add openOnMouseover setting, and toggleButtonClass for responsive layout To normalize behavior of top navigation links on desktop and mobile, the default behavior will be for the menu to remain closed on hover. Click should toggle the menu regardless of whether the link has a valid `href`. With `openOnMouseover: true`, hover will open the menu as before and with the menu open, clicking a top-level navigation item with a valid `href` should open the url. Add toggleButtonClass to specify a button that should toggle the menu in a responsive layout on mobile devices. Incorporate media queries for responsive layout breakpoints. d445afc 1 Git stats 36 commits Files Permalink Failed to load latest commit information. Type Name Latest commit message Commit time css Add openOnMouseover setting, and toggleButtonClass for responsive layout May 11, 2018 js Add openOnMouseover setting, and toggleButtonClass for responsive layout May 11, 2018 third-party/jquery initial commit Aug 26, 2013 LICENSE initial commit Aug 26, 2013 NOTICE initial commit Aug 26, 2013 README.md initial commit Aug 26, 2013 index.html Add openOnMouseover setting, and toggleButtonClass for responsive layout May 11, 2018 package.json Updating repo references Jul 8, 2016 View code README.md Accessible Mega Menu ========================= A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. It is modeled after the mega menu on adobe.com but has been simplified for use by others. An brief explanation of our interaction design choices can be found in a blog post at Mega menu accessibility on adobe.com. Content for the links and text within the mega menu comes from the Web Content Accessibility Guidelines (WCAG) 2.0. Keyboard Accessibility The accessible mega menu supports keyboard interaction modeled after the behavior described in the WAI-ARIA Menu or Menu bar (widget) design pattern, however we also try to respect users' general expectations for the behavior of links in a global navigation. To this end, the accessible mega menu implementation permits tab focus on each of the six top-level menu items. When one of the menu items has focus, pressing the Enter key, Spacebar or Down arrow will open the submenu panel, and pressing the Left or Right arrow key will shift focus to the adjacent menu item. Links within the submenu panels are included in the tab order when the panel is open. They can also be navigated with the arrow keys or by typing the first character in the link name, which speeds up keyboard navigation considerably. Pressing the Escape key closes the submenu and restores focus to the parent menu item. Screen Reader Accessibility The accessible mega menu models its use of WAI-ARIA Roles, States, and Properties after those described in the WAI-ARIA Menu or Menu bar (widget) design pattern with some notable exceptions, so that it behaves better with screen reader user expectations for global navigation. We don't use role=""menu"" for the menu container and role=""menuitem"" for each of the links therein, because if we do, assistive technology will no longer interpret the links as links, but instead, as menu items, and the links in our global navigation will no longer show up when a screen reader user executes a shortcut command to bring up a list of links in the page. We also want to maintain the semantic structure of the submenu panels in our mega menu; our links are organized into lists and separated by headings. Omitting role=""menu"" and role=""menuitem"" for the global navigation seems the safer way to go. Usage HTML The HTML structure for the mega menu is a nav element, or any other container element, containing a list. Each list item contains a link which is followed by a div or any other container element which will serve as the pop up panel. The panel can contain any html content; in the following example, each panel contains three lists of links. You can explicitly define groups within the panel, between which a user can navigate quickly using the left and right arrow keys; in the following example, the CSS class .sub-nav-group identifies a navigable group.     <nav>         <ul class=""nav-menu"">             <li class=""nav-item"">                 <a href=""?movie"">Movies</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=0"">Action &amp; Adventure</a></li>                         <li><a href=""?movie&genre=2"">Children &amp; Family</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=7"">Dramas</a></li>                         <li><a href=""?movie&genre=9"">Foreign</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=14"">Musicals</a></li>                         <li><a href=""?movie&genre=15"">Romance</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>             <li class=""nav-item"">                 <a href=""?tv"">TV Shows</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=20"">Classic TV</a></li>                         <li><a href=""?tv&genre=21"">Crime TV</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=27"">Reality TV</a></li>                         <li><a href=""?tv&genre=30"">TV Action</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=33"">TV Dramas</a></li>                         <li><a href=""?tv&genre=34"">TV Horror</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>         </ul>     </nav> By default, accessibleMegaMenu uses the the following CSS classes to define the top-level navigation items, panels, groups within the panels, and the hover, focus, and open states. It also defines a prefix for unique id strings, which are required to indicate the relationship of a top-level navigation item to the panel it controls.     defaults = {         /* unique ID's are required to indicate aria-owns, aria-controls and aria-labelledby */         uuidPrefix: ""accessible-megamenu"",                  /* default css class used to define the megamenu styling */         menuClass: ""accessible-megamenu"",                  /* default css class for a top-level navigation item in the megamenu */         topNavItemClass: ""accessible-megamenu-top-nav-item"",                  /* default css class for a megamenu panel */         panelClass: ""accessible-megamenu-panel"",                  /* default css class for a group of items within a megamenu panel */         panelGroupClass: ""accessible-megamenu-panel-group"",                  /* default css class for the hover state */         hoverClass: ""hover"",                  /* default css class for the focus state */         focusClass: ""focus"",                  /* default css class for the open state */         openClass: ""open""      } You can optionally override the defaults to use the CSS classes you may have already defined for your mega menu. JavaScript Be sure to include jQuery and the jquery-accessibleMegaMenu.js plugin script.     <script src=""//code.jquery.com/jquery-1.10.1.min.js""></script>     <script src=""js/jquery-accessibleMegaMenu.js""></script> The following initializes the first nav element in the document as an accessibleMegaMenu, with optional CSS class overrides.     $(""nav:first"").accessibleMegaMenu({         /* prefix for generated unique id attributes, which are required             to indicate aria-owns, aria-controls and aria-labelledby */         uuidPrefix: ""accessible-megamenu"",                  /* css class used to define the megamenu styling */         menuClass: ""nav-menu"",                  /* css class for a top-level navigation item in the megamenu */         topNavItemClass: ""nav-item"",                  /* css class for a megamenu panel */         panelClass: ""sub-nav"",                  /* css class for a group of items within a megamenu panel */         panelGroupClass: ""sub-nav-group"",                  /* css class for the hover state */         hoverClass: ""hover"",                  /* css class for the focus state */         focusClass: ""focus"",                  /* css class for the open state */         openClass: ""open""     }); CSS AccessibleMegaMenu handles the showing and hiding of panels by adding or removing a CSS class. No inline styles are added to hide elements or create animation between states. Following is some rudimentary CSS for our example which enables the showing/hiding of and the layout of lists panels in the mega menu.     /* mega menu list */     .nav-menu {         display: block;         position: relative;         list-style: none;         margin: 0;         padding: 0;         z-index: 15;     }     /* a top level navigation item in the mega menu */     .nav-item {         list-style: none;         display: inline-block;         padding: 0;         margin: 0;     }     /* first descendant link within a top level navigation item */     .nav-item > a {         position: relative;         display: inline-block;         padding: 0.5em 1em;         margin: 0 0 -1px 0;         border: 1px solid transparent;     }     /* focus/open states of first descendant link within a top level         navigation item */     .nav-item > a:focus,     .nav-item > a.open {         border: 1px solid #dedede;     }     /* open state of first descendant link within a top level         navigation item */     .nav-item > a.open {         background-color: #fff;         border-bottom: none;         z-index: 1;     }     /* sub-navigation panel */     .sub-nav {         position: absolute;         display: none;         top: 2.2em;         margin-top: -1px;         padding: 0.5em 1em;         border: 1px solid #dedede;         background-color: #fff;     }     /* sub-navigation panel open state */     .sub-nav.open {         display: block;     }     /* list of items within sub-navigation panel */     .sub-nav ul {         display: inline-block;         vertical-align: top;         margin: 0 1em 0 0;         padding: 0;     }     /* list item within sub-navigation panel */     .sub-nav li {         display: block;         list-style-type: none;         margin: 0;         padding: 0;     }   Putting it all together, here is the completed example:     <!doctype html>     <html lang=""en"">     <head>     <meta charset=""UTF-8"">     <title>Simple Accessible Mega Menu Example</title>     <style>         /* Rudimentary mega menu CSS for demonstration */             /* mega menu list */         .nav-menu {             display: block;             position: relative;             list-style: none;             margin: 0;             padding: 0;             z-index: 15;         }         /* a top level navigation item in the mega menu */         .nav-item {             list-style: none;             display: inline-block;             padding: 0;             margin: 0;         }         /* first descendant link within a top level navigation item */         .nav-item > a {             position: relative;             display: inline-block;             padding: 0.5em 1em;             margin: 0 0 -1px 0;             border: 1px solid transparent;         }         /* focus/open states of first descendant link within a top level             navigation item */         .nav-item > a:focus,         .nav-item > a.open {             border: 1px solid #dedede;         }         /* open state of first descendant link within a top level             navigation item */         .nav-item > a.open {             background-color: #fff;             border-bottom: none;             z-index: 1;         }         /* sub-navigation panel */         .sub-nav {             position: absolute;             display: none;             top: 2.2em;             margin-top: -1px;             padding: 0.5em 1em;             border: 1px solid #dedede;             background-color: #fff;         }         /* sub-navigation panel open state */         .sub-nav.open {             display: block;         }         /* list of items within sub-navigation panel */         .sub-nav ul {             display: inline-block;             vertical-align: top;             margin: 0 1em 0 0;             padding: 0;         }         /* list item within sub-navigation panel */         .sub-nav li {             display: block;             list-style-type: none;             margin: 0;             padding: 0;         }          </style>     </head>     <body>     <nav>         <ul class=""nav-menu"">             <li class=""nav-item"">                 <a href=""?movie"">Movies</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=0"">Action &amp; Adventure</a></li>                         <li><a href=""?movie&genre=2"">Children &amp; Family</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=7"">Dramas</a></li>                         <li><a href=""?movie&genre=9"">Foreign</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=14"">Musicals</a></li>                         <li><a href=""?movie&genre=15"">Romance</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>             <li class=""nav-item"">                 <a href=""?tv"">TV Shows</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=20"">Classic TV</a></li>                         <li><a href=""?tv&genre=21"">Crime TV</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=27"">Reality TV</a></li>                         <li><a href=""?tv&genre=30"">TV Action</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=33"">TV Dramas</a></li>                         <li><a href=""?tv&genre=34"">TV Horror</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>         </ul>     </nav>          <!-- include jquery -->     <script src=""//code.jquery.com/jquery-1.10.1.min.js""></script>     <!-- include the jquery-accessibleMegaMenu plugin script -->     <script src=""js/jquery-accessibleMegaMenu.js""></script>     <!-- initialize a selector as an accessibleMegaMenu -->     <script>         $(""nav:first"").accessibleMegaMenu({             /* prefix for generated unique id attributes, which are required                 to indicate aria-owns, aria-controls and aria-labelledby */             uuidPrefix: ""accessible-megamenu"",                          /* css class used to define the megamenu styling */             menuClass: ""nav-menu"",                          /* css class for a top-level navigation item in the megamenu */             topNavItemClass: ""nav-item"",                          /* css class for a megamenu panel */             panelClass: ""sub-nav"",                          /* css class for a group of items within a megamenu panel */             panelGroupClass: ""sub-nav-group"",                          /* css class for the hover state */             hoverClass: ""hover"",                          /* css class for the focus state */             focusClass: ""focus"",                          /* css class for the open state */             openClass: ""open""         });     </script>     </body>     </html> About A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. Resources Readme License Apache-2.0 License Releases No releases published Packages 0 No packages published Contributors 5 Languages HTML 70.8% CSS 27.3% JavaScript 1.9% © 2020 GitHub, Inc. Terms Privacy Security Status Help Contact GitHub Pricing API Training Blog About You can’t perform that action at this time. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."
264407,20201002,github.com,https://github.com/adobe-accessibility/Accessible-Mega-Menu,text/html,text/html,en,"GitHub - adobe-accessibility/Accessible-Mega-Menu: A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. Skip to content Sign up Why GitHub? Features → Code review Project management Integrations Actions Packages Security Team management Hosting Mobile Customer stories → Security → Team Enterprise Explore Explore GitHub → Learn & contribute Topics Collections Trending Learning Lab Open source guides Connect with others Events Community forum GitHub Education GitHub Stars program Marketplace Pricing Plans → Compare plans Contact Sales Nonprofit → Education → In this repository All GitHub ↵ Jump to ↵ No suggested jump to results In this repository All GitHub ↵ Jump to ↵ In this repository All GitHub ↵ Jump to ↵ Sign in Sign up {{ message }} adobe-accessibility / Accessible-Mega-Menu Watch 48 Star 570 Fork 190 A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. Apache-2.0 License 570 stars 190 forks Star Watch Code Issues 28 Pull requests 12 Actions Projects 0 Security Insights More Code Issues Pull requests Actions Projects Security Insights Dismiss Join GitHub today GitHub is home to over 50 million developers working together to host and review code, manage projects, and build software together. Sign up master 2 branches 0 tags Go to file Code Clone HTTPS GitHub CLI Use Git or checkout with SVN using the web URL. Work fast with our official CLI. Learn more. Open with GitHub Desktop Download ZIP Launching GitHub Desktop If nothing happens, download GitHub Desktop and try again. Go back Launching GitHub Desktop If nothing happens, download GitHub Desktop and try again. Go back Launching Xcode If nothing happens, download Xcode and try again. Go back Launching Visual Studio If nothing happens, download the GitHub extension for Visual Studio and try again. Go back Latest commit majornista Add openOnMouseover setting, and toggleButtonClass for responsive layout … 1 d445afc May 11, 2018 Add openOnMouseover setting, and toggleButtonClass for responsive layout To normalize behavior of top navigation links on desktop and mobile, the default behavior will be for the menu to remain closed on hover. Click should toggle the menu regardless of whether the link has a valid `href`. With `openOnMouseover: true`, hover will open the menu as before and with the menu open, clicking a top-level navigation item with a valid `href` should open the url. Add toggleButtonClass to specify a button that should toggle the menu in a responsive layout on mobile devices. Incorporate media queries for responsive layout breakpoints. d445afc 1 Git stats 36 commits Files Permalink Failed to load latest commit information. Type Name Latest commit message Commit time css Add openOnMouseover setting, and toggleButtonClass for responsive layout May 11, 2018 js Add openOnMouseover setting, and toggleButtonClass for responsive layout May 11, 2018 third-party/jquery initial commit Aug 26, 2013 LICENSE initial commit Aug 26, 2013 NOTICE initial commit Aug 26, 2013 README.md initial commit Aug 26, 2013 index.html Add openOnMouseover setting, and toggleButtonClass for responsive layout May 11, 2018 package.json Updating repo references Jul 8, 2016 View code README.md Accessible Mega Menu ========================= A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. It is modeled after the mega menu on adobe.com but has been simplified for use by others. An brief explanation of our interaction design choices can be found in a blog post at Mega menu accessibility on adobe.com. Content for the links and text within the mega menu comes from the Web Content Accessibility Guidelines (WCAG) 2.0. Keyboard Accessibility The accessible mega menu supports keyboard interaction modeled after the behavior described in the WAI-ARIA Menu or Menu bar (widget) design pattern, however we also try to respect users' general expectations for the behavior of links in a global navigation. To this end, the accessible mega menu implementation permits tab focus on each of the six top-level menu items. When one of the menu items has focus, pressing the Enter key, Spacebar or Down arrow will open the submenu panel, and pressing the Left or Right arrow key will shift focus to the adjacent menu item. Links within the submenu panels are included in the tab order when the panel is open. They can also be navigated with the arrow keys or by typing the first character in the link name, which speeds up keyboard navigation considerably. Pressing the Escape key closes the submenu and restores focus to the parent menu item. Screen Reader Accessibility The accessible mega menu models its use of WAI-ARIA Roles, States, and Properties after those described in the WAI-ARIA Menu or Menu bar (widget) design pattern with some notable exceptions, so that it behaves better with screen reader user expectations for global navigation. We don't use role=""menu"" for the menu container and role=""menuitem"" for each of the links therein, because if we do, assistive technology will no longer interpret the links as links, but instead, as menu items, and the links in our global navigation will no longer show up when a screen reader user executes a shortcut command to bring up a list of links in the page. We also want to maintain the semantic structure of the submenu panels in our mega menu; our links are organized into lists and separated by headings. Omitting role=""menu"" and role=""menuitem"" for the global navigation seems the safer way to go. Usage HTML The HTML structure for the mega menu is a nav element, or any other container element, containing a list. Each list item contains a link which is followed by a div or any other container element which will serve as the pop up panel. The panel can contain any html content; in the following example, each panel contains three lists of links. You can explicitly define groups within the panel, between which a user can navigate quickly using the left and right arrow keys; in the following example, the CSS class .sub-nav-group identifies a navigable group.     <nav>         <ul class=""nav-menu"">             <li class=""nav-item"">                 <a href=""?movie"">Movies</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=0"">Action &amp; Adventure</a></li>                         <li><a href=""?movie&genre=2"">Children &amp; Family</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=7"">Dramas</a></li>                         <li><a href=""?movie&genre=9"">Foreign</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=14"">Musicals</a></li>                         <li><a href=""?movie&genre=15"">Romance</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>             <li class=""nav-item"">                 <a href=""?tv"">TV Shows</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=20"">Classic TV</a></li>                         <li><a href=""?tv&genre=21"">Crime TV</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=27"">Reality TV</a></li>                         <li><a href=""?tv&genre=30"">TV Action</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=33"">TV Dramas</a></li>                         <li><a href=""?tv&genre=34"">TV Horror</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>         </ul>     </nav> By default, accessibleMegaMenu uses the the following CSS classes to define the top-level navigation items, panels, groups within the panels, and the hover, focus, and open states. It also defines a prefix for unique id strings, which are required to indicate the relationship of a top-level navigation item to the panel it controls.     defaults = {         /* unique ID's are required to indicate aria-owns, aria-controls and aria-labelledby */         uuidPrefix: ""accessible-megamenu"",                  /* default css class used to define the megamenu styling */         menuClass: ""accessible-megamenu"",                  /* default css class for a top-level navigation item in the megamenu */         topNavItemClass: ""accessible-megamenu-top-nav-item"",                  /* default css class for a megamenu panel */         panelClass: ""accessible-megamenu-panel"",                  /* default css class for a group of items within a megamenu panel */         panelGroupClass: ""accessible-megamenu-panel-group"",                  /* default css class for the hover state */         hoverClass: ""hover"",                  /* default css class for the focus state */         focusClass: ""focus"",                  /* default css class for the open state */         openClass: ""open""      } You can optionally override the defaults to use the CSS classes you may have already defined for your mega menu. JavaScript Be sure to include jQuery and the jquery-accessibleMegaMenu.js plugin script.     <script src=""//code.jquery.com/jquery-1.10.1.min.js""></script>     <script src=""js/jquery-accessibleMegaMenu.js""></script> The following initializes the first nav element in the document as an accessibleMegaMenu, with optional CSS class overrides.     $(""nav:first"").accessibleMegaMenu({         /* prefix for generated unique id attributes, which are required             to indicate aria-owns, aria-controls and aria-labelledby */         uuidPrefix: ""accessible-megamenu"",                  /* css class used to define the megamenu styling */         menuClass: ""nav-menu"",                  /* css class for a top-level navigation item in the megamenu */         topNavItemClass: ""nav-item"",                  /* css class for a megamenu panel */         panelClass: ""sub-nav"",                  /* css class for a group of items within a megamenu panel */         panelGroupClass: ""sub-nav-group"",                  /* css class for the hover state */         hoverClass: ""hover"",                  /* css class for the focus state */         focusClass: ""focus"",                  /* css class for the open state */         openClass: ""open""     }); CSS AccessibleMegaMenu handles the showing and hiding of panels by adding or removing a CSS class. No inline styles are added to hide elements or create animation between states. Following is some rudimentary CSS for our example which enables the showing/hiding of and the layout of lists panels in the mega menu.     /* mega menu list */     .nav-menu {         display: block;         position: relative;         list-style: none;         margin: 0;         padding: 0;         z-index: 15;     }     /* a top level navigation item in the mega menu */     .nav-item {         list-style: none;         display: inline-block;         padding: 0;         margin: 0;     }     /* first descendant link within a top level navigation item */     .nav-item > a {         position: relative;         display: inline-block;         padding: 0.5em 1em;         margin: 0 0 -1px 0;         border: 1px solid transparent;     }     /* focus/open states of first descendant link within a top level         navigation item */     .nav-item > a:focus,     .nav-item > a.open {         border: 1px solid #dedede;     }     /* open state of first descendant link within a top level         navigation item */     .nav-item > a.open {         background-color: #fff;         border-bottom: none;         z-index: 1;     }     /* sub-navigation panel */     .sub-nav {         position: absolute;         display: none;         top: 2.2em;         margin-top: -1px;         padding: 0.5em 1em;         border: 1px solid #dedede;         background-color: #fff;     }     /* sub-navigation panel open state */     .sub-nav.open {         display: block;     }     /* list of items within sub-navigation panel */     .sub-nav ul {         display: inline-block;         vertical-align: top;         margin: 0 1em 0 0;         padding: 0;     }     /* list item within sub-navigation panel */     .sub-nav li {         display: block;         list-style-type: none;         margin: 0;         padding: 0;     }   Putting it all together, here is the completed example:     <!doctype html>     <html lang=""en"">     <head>     <meta charset=""UTF-8"">     <title>Simple Accessible Mega Menu Example</title>     <style>         /* Rudimentary mega menu CSS for demonstration */             /* mega menu list */         .nav-menu {             display: block;             position: relative;             list-style: none;             margin: 0;             padding: 0;             z-index: 15;         }         /* a top level navigation item in the mega menu */         .nav-item {             list-style: none;             display: inline-block;             padding: 0;             margin: 0;         }         /* first descendant link within a top level navigation item */         .nav-item > a {             position: relative;             display: inline-block;             padding: 0.5em 1em;             margin: 0 0 -1px 0;             border: 1px solid transparent;         }         /* focus/open states of first descendant link within a top level             navigation item */         .nav-item > a:focus,         .nav-item > a.open {             border: 1px solid #dedede;         }         /* open state of first descendant link within a top level             navigation item */         .nav-item > a.open {             background-color: #fff;             border-bottom: none;             z-index: 1;         }         /* sub-navigation panel */         .sub-nav {             position: absolute;             display: none;             top: 2.2em;             margin-top: -1px;             padding: 0.5em 1em;             border: 1px solid #dedede;             background-color: #fff;         }         /* sub-navigation panel open state */         .sub-nav.open {             display: block;         }         /* list of items within sub-navigation panel */         .sub-nav ul {             display: inline-block;             vertical-align: top;             margin: 0 1em 0 0;             padding: 0;         }         /* list item within sub-navigation panel */         .sub-nav li {             display: block;             list-style-type: none;             margin: 0;             padding: 0;         }          </style>     </head>     <body>     <nav>         <ul class=""nav-menu"">             <li class=""nav-item"">                 <a href=""?movie"">Movies</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=0"">Action &amp; Adventure</a></li>                         <li><a href=""?movie&genre=2"">Children &amp; Family</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=7"">Dramas</a></li>                         <li><a href=""?movie&genre=9"">Foreign</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=14"">Musicals</a></li>                         <li><a href=""?movie&genre=15"">Romance</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>             <li class=""nav-item"">                 <a href=""?tv"">TV Shows</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=20"">Classic TV</a></li>                         <li><a href=""?tv&genre=21"">Crime TV</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=27"">Reality TV</a></li>                         <li><a href=""?tv&genre=30"">TV Action</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=33"">TV Dramas</a></li>                         <li><a href=""?tv&genre=34"">TV Horror</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>         </ul>     </nav>          <!-- include jquery -->     <script src=""//code.jquery.com/jquery-1.10.1.min.js""></script>     <!-- include the jquery-accessibleMegaMenu plugin script -->     <script src=""js/jquery-accessibleMegaMenu.js""></script>     <!-- initialize a selector as an accessibleMegaMenu -->     <script>         $(""nav:first"").accessibleMegaMenu({             /* prefix for generated unique id attributes, which are required                 to indicate aria-owns, aria-controls and aria-labelledby */             uuidPrefix: ""accessible-megamenu"",                          /* css class used to define the megamenu styling */             menuClass: ""nav-menu"",                          /* css class for a top-level navigation item in the megamenu */             topNavItemClass: ""nav-item"",                          /* css class for a megamenu panel */             panelClass: ""sub-nav"",                          /* css class for a group of items within a megamenu panel */             panelGroupClass: ""sub-nav-group"",                          /* css class for the hover state */             hoverClass: ""hover"",                          /* css class for the focus state */             focusClass: ""focus"",                          /* css class for the open state */             openClass: ""open""         });     </script>     </body>     </html> About A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. Resources Readme License Apache-2.0 License Releases No releases published Packages 0 No packages published Used by 14 + 6 Contributors 5 Languages HTML 70.8% CSS 27.3% JavaScript 1.9% © 2020 GitHub, Inc. Terms Privacy Security Status Help Contact GitHub Pricing API Training Blog About You can’t perform that action at this time. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."
276161,20201009,github.com,https://github.com/adobe-accessibility/Accessible-Mega-Menu,text/html,text/html,en,"GitHub - adobe-accessibility/Accessible-Mega-Menu: A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. Skip to content Sign up Why GitHub? Features → Code review Project management Integrations Actions Packages Security Team management Hosting Mobile Customer stories → Security → Team Enterprise Explore Explore GitHub → Learn & contribute Topics Collections Trending Learning Lab Open source guides Connect with others Events Community forum GitHub Education GitHub Stars program Marketplace Pricing Plans → Compare plans Contact Sales Nonprofit → Education → In this repository All GitHub ↵ Jump to ↵ No suggested jump to results In this repository All GitHub ↵ Jump to ↵ In this repository All GitHub ↵ Jump to ↵ Sign in Sign up {{ message }} adobe-accessibility / Accessible-Mega-Menu Watch 48 Star 569 Fork 190 A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. Apache-2.0 License 569 stars 190 forks Star Watch Code Issues 28 Pull requests 12 Actions Projects 0 Security Insights More Code Issues Pull requests Actions Projects Security Insights Dismiss Join GitHub today GitHub is home to over 50 million developers working together to host and review code, manage projects, and build software together. Sign up master 2 branches 0 tags Go to file Code Clone HTTPS GitHub CLI Use Git or checkout with SVN using the web URL. Work fast with our official CLI. Learn more. Open with GitHub Desktop Download ZIP Launching GitHub Desktop If nothing happens, download GitHub Desktop and try again. Go back Launching GitHub Desktop If nothing happens, download GitHub Desktop and try again. Go back Launching Xcode If nothing happens, download Xcode and try again. Go back Launching Visual Studio If nothing happens, download the GitHub extension for Visual Studio and try again. Go back Latest commit Git stats 36 commits Files Permalink Failed to load latest commit information. Type Name Latest commit message Commit time css js third-party/jquery LICENSE NOTICE README.md index.html package.json View code README.md Accessible Mega Menu ========================= A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. It is modeled after the mega menu on adobe.com but has been simplified for use by others. An brief explanation of our interaction design choices can be found in a blog post at Mega menu accessibility on adobe.com. Content for the links and text within the mega menu comes from the Web Content Accessibility Guidelines (WCAG) 2.0. Keyboard Accessibility The accessible mega menu supports keyboard interaction modeled after the behavior described in the WAI-ARIA Menu or Menu bar (widget) design pattern, however we also try to respect users' general expectations for the behavior of links in a global navigation. To this end, the accessible mega menu implementation permits tab focus on each of the six top-level menu items. When one of the menu items has focus, pressing the Enter key, Spacebar or Down arrow will open the submenu panel, and pressing the Left or Right arrow key will shift focus to the adjacent menu item. Links within the submenu panels are included in the tab order when the panel is open. They can also be navigated with the arrow keys or by typing the first character in the link name, which speeds up keyboard navigation considerably. Pressing the Escape key closes the submenu and restores focus to the parent menu item. Screen Reader Accessibility The accessible mega menu models its use of WAI-ARIA Roles, States, and Properties after those described in the WAI-ARIA Menu or Menu bar (widget) design pattern with some notable exceptions, so that it behaves better with screen reader user expectations for global navigation. We don't use role=""menu"" for the menu container and role=""menuitem"" for each of the links therein, because if we do, assistive technology will no longer interpret the links as links, but instead, as menu items, and the links in our global navigation will no longer show up when a screen reader user executes a shortcut command to bring up a list of links in the page. We also want to maintain the semantic structure of the submenu panels in our mega menu; our links are organized into lists and separated by headings. Omitting role=""menu"" and role=""menuitem"" for the global navigation seems the safer way to go. Usage HTML The HTML structure for the mega menu is a nav element, or any other container element, containing a list. Each list item contains a link which is followed by a div or any other container element which will serve as the pop up panel. The panel can contain any html content; in the following example, each panel contains three lists of links. You can explicitly define groups within the panel, between which a user can navigate quickly using the left and right arrow keys; in the following example, the CSS class .sub-nav-group identifies a navigable group.     <nav>         <ul class=""nav-menu"">             <li class=""nav-item"">                 <a href=""?movie"">Movies</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=0"">Action &amp; Adventure</a></li>                         <li><a href=""?movie&genre=2"">Children &amp; Family</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=7"">Dramas</a></li>                         <li><a href=""?movie&genre=9"">Foreign</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=14"">Musicals</a></li>                         <li><a href=""?movie&genre=15"">Romance</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>             <li class=""nav-item"">                 <a href=""?tv"">TV Shows</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=20"">Classic TV</a></li>                         <li><a href=""?tv&genre=21"">Crime TV</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=27"">Reality TV</a></li>                         <li><a href=""?tv&genre=30"">TV Action</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=33"">TV Dramas</a></li>                         <li><a href=""?tv&genre=34"">TV Horror</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>         </ul>     </nav> By default, accessibleMegaMenu uses the the following CSS classes to define the top-level navigation items, panels, groups within the panels, and the hover, focus, and open states. It also defines a prefix for unique id strings, which are required to indicate the relationship of a top-level navigation item to the panel it controls.     defaults = {         /* unique ID's are required to indicate aria-owns, aria-controls and aria-labelledby */         uuidPrefix: ""accessible-megamenu"",                  /* default css class used to define the megamenu styling */         menuClass: ""accessible-megamenu"",                  /* default css class for a top-level navigation item in the megamenu */         topNavItemClass: ""accessible-megamenu-top-nav-item"",                  /* default css class for a megamenu panel */         panelClass: ""accessible-megamenu-panel"",                  /* default css class for a group of items within a megamenu panel */         panelGroupClass: ""accessible-megamenu-panel-group"",                  /* default css class for the hover state */         hoverClass: ""hover"",                  /* default css class for the focus state */         focusClass: ""focus"",                  /* default css class for the open state */         openClass: ""open""      } You can optionally override the defaults to use the CSS classes you may have already defined for your mega menu. JavaScript Be sure to include jQuery and the jquery-accessibleMegaMenu.js plugin script.     <script src=""//code.jquery.com/jquery-1.10.1.min.js""></script>     <script src=""js/jquery-accessibleMegaMenu.js""></script> The following initializes the first nav element in the document as an accessibleMegaMenu, with optional CSS class overrides.     $(""nav:first"").accessibleMegaMenu({         /* prefix for generated unique id attributes, which are required             to indicate aria-owns, aria-controls and aria-labelledby */         uuidPrefix: ""accessible-megamenu"",                  /* css class used to define the megamenu styling */         menuClass: ""nav-menu"",                  /* css class for a top-level navigation item in the megamenu */         topNavItemClass: ""nav-item"",                  /* css class for a megamenu panel */         panelClass: ""sub-nav"",                  /* css class for a group of items within a megamenu panel */         panelGroupClass: ""sub-nav-group"",                  /* css class for the hover state */         hoverClass: ""hover"",                  /* css class for the focus state */         focusClass: ""focus"",                  /* css class for the open state */         openClass: ""open""     }); CSS AccessibleMegaMenu handles the showing and hiding of panels by adding or removing a CSS class. No inline styles are added to hide elements or create animation between states. Following is some rudimentary CSS for our example which enables the showing/hiding of and the layout of lists panels in the mega menu.     /* mega menu list */     .nav-menu {         display: block;         position: relative;         list-style: none;         margin: 0;         padding: 0;         z-index: 15;     }     /* a top level navigation item in the mega menu */     .nav-item {         list-style: none;         display: inline-block;         padding: 0;         margin: 0;     }     /* first descendant link within a top level navigation item */     .nav-item > a {         position: relative;         display: inline-block;         padding: 0.5em 1em;         margin: 0 0 -1px 0;         border: 1px solid transparent;     }     /* focus/open states of first descendant link within a top level         navigation item */     .nav-item > a:focus,     .nav-item > a.open {         border: 1px solid #dedede;     }     /* open state of first descendant link within a top level         navigation item */     .nav-item > a.open {         background-color: #fff;         border-bottom: none;         z-index: 1;     }     /* sub-navigation panel */     .sub-nav {         position: absolute;         display: none;         top: 2.2em;         margin-top: -1px;         padding: 0.5em 1em;         border: 1px solid #dedede;         background-color: #fff;     }     /* sub-navigation panel open state */     .sub-nav.open {         display: block;     }     /* list of items within sub-navigation panel */     .sub-nav ul {         display: inline-block;         vertical-align: top;         margin: 0 1em 0 0;         padding: 0;     }     /* list item within sub-navigation panel */     .sub-nav li {         display: block;         list-style-type: none;         margin: 0;         padding: 0;     }   Putting it all together, here is the completed example:     <!doctype html>     <html lang=""en"">     <head>     <meta charset=""UTF-8"">     <title>Simple Accessible Mega Menu Example</title>     <style>         /* Rudimentary mega menu CSS for demonstration */             /* mega menu list */         .nav-menu {             display: block;             position: relative;             list-style: none;             margin: 0;             padding: 0;             z-index: 15;         }         /* a top level navigation item in the mega menu */         .nav-item {             list-style: none;             display: inline-block;             padding: 0;             margin: 0;         }         /* first descendant link within a top level navigation item */         .nav-item > a {             position: relative;             display: inline-block;             padding: 0.5em 1em;             margin: 0 0 -1px 0;             border: 1px solid transparent;         }         /* focus/open states of first descendant link within a top level             navigation item */         .nav-item > a:focus,         .nav-item > a.open {             border: 1px solid #dedede;         }         /* open state of first descendant link within a top level             navigation item */         .nav-item > a.open {             background-color: #fff;             border-bottom: none;             z-index: 1;         }         /* sub-navigation panel */         .sub-nav {             position: absolute;             display: none;             top: 2.2em;             margin-top: -1px;             padding: 0.5em 1em;             border: 1px solid #dedede;             background-color: #fff;         }         /* sub-navigation panel open state */         .sub-nav.open {             display: block;         }         /* list of items within sub-navigation panel */         .sub-nav ul {             display: inline-block;             vertical-align: top;             margin: 0 1em 0 0;             padding: 0;         }         /* list item within sub-navigation panel */         .sub-nav li {             display: block;             list-style-type: none;             margin: 0;             padding: 0;         }          </style>     </head>     <body>     <nav>         <ul class=""nav-menu"">             <li class=""nav-item"">                 <a href=""?movie"">Movies</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=0"">Action &amp; Adventure</a></li>                         <li><a href=""?movie&genre=2"">Children &amp; Family</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=7"">Dramas</a></li>                         <li><a href=""?movie&genre=9"">Foreign</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=14"">Musicals</a></li>                         <li><a href=""?movie&genre=15"">Romance</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>             <li class=""nav-item"">                 <a href=""?tv"">TV Shows</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=20"">Classic TV</a></li>                         <li><a href=""?tv&genre=21"">Crime TV</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=27"">Reality TV</a></li>                         <li><a href=""?tv&genre=30"">TV Action</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=33"">TV Dramas</a></li>                         <li><a href=""?tv&genre=34"">TV Horror</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>         </ul>     </nav>          <!-- include jquery -->     <script src=""//code.jquery.com/jquery-1.10.1.min.js""></script>     <!-- include the jquery-accessibleMegaMenu plugin script -->     <script src=""js/jquery-accessibleMegaMenu.js""></script>     <!-- initialize a selector as an accessibleMegaMenu -->     <script>         $(""nav:first"").accessibleMegaMenu({             /* prefix for generated unique id attributes, which are required                 to indicate aria-owns, aria-controls and aria-labelledby */             uuidPrefix: ""accessible-megamenu"",                          /* css class used to define the megamenu styling */             menuClass: ""nav-menu"",                          /* css class for a top-level navigation item in the megamenu */             topNavItemClass: ""nav-item"",                          /* css class for a megamenu panel */             panelClass: ""sub-nav"",                          /* css class for a group of items within a megamenu panel */             panelGroupClass: ""sub-nav-group"",                          /* css class for the hover state */             hoverClass: ""hover"",                          /* css class for the focus state */             focusClass: ""focus"",                          /* css class for the open state */             openClass: ""open""         });     </script>     </body>     </html> About A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. Resources Readme License Apache-2.0 License Releases No releases published Packages 0 No packages published Used by 14 + 6 Contributors 5 Languages HTML 70.8% CSS 27.3% JavaScript 1.9% © 2020 GitHub, Inc. Terms Privacy Cookie Preferences Security Status Help Contact GitHub Pricing API Training Blog About You can’t perform that action at this time. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session. We use optional third-party analytics cookies to understand how you use GitHub.com so we can build better products. Learn more. Accept Reject We use optional third-party analytics cookies to understand how you use GitHub.com so we can build better products. You can always update your selection by clicking Cookie Preferences at the bottom of the page. For more information, see our Privacy Statement. Essential cookies We use essential cookies to perform essential website functions, e.g. they're used to log you in. Learn more Always active Analytics cookies We use analytics cookies to understand how you use our websites so we can make them better, e.g. they're used to gather information about the pages you visit and how many clicks you need to accomplish a task. Learn more Accept Reject Save preferences"
288251,20201016,github.com,https://github.com/adobe-accessibility/Accessible-Mega-Menu,text/html,text/html,en,"GitHub - adobe-accessibility/Accessible-Mega-Menu: A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. Skip to content Sign up Why GitHub? Features → Code review Project management Integrations Actions Packages Security Team management Hosting Mobile Customer stories → Security → Team Enterprise Explore Explore GitHub → Learn & contribute Topics Collections Trending Learning Lab Open source guides Connect with others Events Community forum GitHub Education GitHub Stars program Marketplace Pricing Plans → Compare plans Contact Sales Nonprofit → Education → In this repository All GitHub ↵ Jump to ↵ No suggested jump to results In this repository All GitHub ↵ Jump to ↵ In this repository All GitHub ↵ Jump to ↵ Sign in Sign up {{ message }} adobe-accessibility / Accessible-Mega-Menu Watch 48 Star 570 Fork 190 A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. Apache-2.0 License 570 stars 190 forks Star Watch Code Issues 28 Pull requests 12 Actions Projects 0 Security Insights More Code Issues Pull requests Actions Projects Security Insights Dismiss Join GitHub today GitHub is home to over 50 million developers working together to host and review code, manage projects, and build software together. Sign up master 2 branches 0 tags Go to file Code Clone HTTPS GitHub CLI Use Git or checkout with SVN using the web URL. Work fast with our official CLI. Learn more. Open with GitHub Desktop Download ZIP Launching GitHub Desktop If nothing happens, download GitHub Desktop and try again. Go back Launching GitHub Desktop If nothing happens, download GitHub Desktop and try again. Go back Launching Xcode If nothing happens, download Xcode and try again. Go back Launching Visual Studio If nothing happens, download the GitHub extension for Visual Studio and try again. Go back Latest commit majornista Add openOnMouseover setting, and toggleButtonClass for responsive layout … 1 d445afc May 11, 2018 Add openOnMouseover setting, and toggleButtonClass for responsive layout To normalize behavior of top navigation links on desktop and mobile, the default behavior will be for the menu to remain closed on hover. Click should toggle the menu regardless of whether the link has a valid `href`. With `openOnMouseover: true`, hover will open the menu as before and with the menu open, clicking a top-level navigation item with a valid `href` should open the url. Add toggleButtonClass to specify a button that should toggle the menu in a responsive layout on mobile devices. Incorporate media queries for responsive layout breakpoints. d445afc 1 Git stats 36 commits Files Permalink Failed to load latest commit information. Type Name Latest commit message Commit time css Add openOnMouseover setting, and toggleButtonClass for responsive layout May 11, 2018 js Add openOnMouseover setting, and toggleButtonClass for responsive layout May 11, 2018 third-party/jquery initial commit Aug 26, 2013 LICENSE initial commit Aug 26, 2013 NOTICE initial commit Aug 26, 2013 README.md initial commit Aug 26, 2013 index.html Add openOnMouseover setting, and toggleButtonClass for responsive layout May 11, 2018 package.json Updating repo references Jul 8, 2016 View code README.md Accessible Mega Menu ========================= A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. It is modeled after the mega menu on adobe.com but has been simplified for use by others. An brief explanation of our interaction design choices can be found in a blog post at Mega menu accessibility on adobe.com. Content for the links and text within the mega menu comes from the Web Content Accessibility Guidelines (WCAG) 2.0. Keyboard Accessibility The accessible mega menu supports keyboard interaction modeled after the behavior described in the WAI-ARIA Menu or Menu bar (widget) design pattern, however we also try to respect users' general expectations for the behavior of links in a global navigation. To this end, the accessible mega menu implementation permits tab focus on each of the six top-level menu items. When one of the menu items has focus, pressing the Enter key, Spacebar or Down arrow will open the submenu panel, and pressing the Left or Right arrow key will shift focus to the adjacent menu item. Links within the submenu panels are included in the tab order when the panel is open. They can also be navigated with the arrow keys or by typing the first character in the link name, which speeds up keyboard navigation considerably. Pressing the Escape key closes the submenu and restores focus to the parent menu item. Screen Reader Accessibility The accessible mega menu models its use of WAI-ARIA Roles, States, and Properties after those described in the WAI-ARIA Menu or Menu bar (widget) design pattern with some notable exceptions, so that it behaves better with screen reader user expectations for global navigation. We don't use role=""menu"" for the menu container and role=""menuitem"" for each of the links therein, because if we do, assistive technology will no longer interpret the links as links, but instead, as menu items, and the links in our global navigation will no longer show up when a screen reader user executes a shortcut command to bring up a list of links in the page. We also want to maintain the semantic structure of the submenu panels in our mega menu; our links are organized into lists and separated by headings. Omitting role=""menu"" and role=""menuitem"" for the global navigation seems the safer way to go. Usage HTML The HTML structure for the mega menu is a nav element, or any other container element, containing a list. Each list item contains a link which is followed by a div or any other container element which will serve as the pop up panel. The panel can contain any html content; in the following example, each panel contains three lists of links. You can explicitly define groups within the panel, between which a user can navigate quickly using the left and right arrow keys; in the following example, the CSS class .sub-nav-group identifies a navigable group.     <nav>         <ul class=""nav-menu"">             <li class=""nav-item"">                 <a href=""?movie"">Movies</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=0"">Action &amp; Adventure</a></li>                         <li><a href=""?movie&genre=2"">Children &amp; Family</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=7"">Dramas</a></li>                         <li><a href=""?movie&genre=9"">Foreign</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=14"">Musicals</a></li>                         <li><a href=""?movie&genre=15"">Romance</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>             <li class=""nav-item"">                 <a href=""?tv"">TV Shows</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=20"">Classic TV</a></li>                         <li><a href=""?tv&genre=21"">Crime TV</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=27"">Reality TV</a></li>                         <li><a href=""?tv&genre=30"">TV Action</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=33"">TV Dramas</a></li>                         <li><a href=""?tv&genre=34"">TV Horror</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>         </ul>     </nav> By default, accessibleMegaMenu uses the the following CSS classes to define the top-level navigation items, panels, groups within the panels, and the hover, focus, and open states. It also defines a prefix for unique id strings, which are required to indicate the relationship of a top-level navigation item to the panel it controls.     defaults = {         /* unique ID's are required to indicate aria-owns, aria-controls and aria-labelledby */         uuidPrefix: ""accessible-megamenu"",                  /* default css class used to define the megamenu styling */         menuClass: ""accessible-megamenu"",                  /* default css class for a top-level navigation item in the megamenu */         topNavItemClass: ""accessible-megamenu-top-nav-item"",                  /* default css class for a megamenu panel */         panelClass: ""accessible-megamenu-panel"",                  /* default css class for a group of items within a megamenu panel */         panelGroupClass: ""accessible-megamenu-panel-group"",                  /* default css class for the hover state */         hoverClass: ""hover"",                  /* default css class for the focus state */         focusClass: ""focus"",                  /* default css class for the open state */         openClass: ""open""      } You can optionally override the defaults to use the CSS classes you may have already defined for your mega menu. JavaScript Be sure to include jQuery and the jquery-accessibleMegaMenu.js plugin script.     <script src=""//code.jquery.com/jquery-1.10.1.min.js""></script>     <script src=""js/jquery-accessibleMegaMenu.js""></script> The following initializes the first nav element in the document as an accessibleMegaMenu, with optional CSS class overrides.     $(""nav:first"").accessibleMegaMenu({         /* prefix for generated unique id attributes, which are required             to indicate aria-owns, aria-controls and aria-labelledby */         uuidPrefix: ""accessible-megamenu"",                  /* css class used to define the megamenu styling */         menuClass: ""nav-menu"",                  /* css class for a top-level navigation item in the megamenu */         topNavItemClass: ""nav-item"",                  /* css class for a megamenu panel */         panelClass: ""sub-nav"",                  /* css class for a group of items within a megamenu panel */         panelGroupClass: ""sub-nav-group"",                  /* css class for the hover state */         hoverClass: ""hover"",                  /* css class for the focus state */         focusClass: ""focus"",                  /* css class for the open state */         openClass: ""open""     }); CSS AccessibleMegaMenu handles the showing and hiding of panels by adding or removing a CSS class. No inline styles are added to hide elements or create animation between states. Following is some rudimentary CSS for our example which enables the showing/hiding of and the layout of lists panels in the mega menu.     /* mega menu list */     .nav-menu {         display: block;         position: relative;         list-style: none;         margin: 0;         padding: 0;         z-index: 15;     }     /* a top level navigation item in the mega menu */     .nav-item {         list-style: none;         display: inline-block;         padding: 0;         margin: 0;     }     /* first descendant link within a top level navigation item */     .nav-item > a {         position: relative;         display: inline-block;         padding: 0.5em 1em;         margin: 0 0 -1px 0;         border: 1px solid transparent;     }     /* focus/open states of first descendant link within a top level         navigation item */     .nav-item > a:focus,     .nav-item > a.open {         border: 1px solid #dedede;     }     /* open state of first descendant link within a top level         navigation item */     .nav-item > a.open {         background-color: #fff;         border-bottom: none;         z-index: 1;     }     /* sub-navigation panel */     .sub-nav {         position: absolute;         display: none;         top: 2.2em;         margin-top: -1px;         padding: 0.5em 1em;         border: 1px solid #dedede;         background-color: #fff;     }     /* sub-navigation panel open state */     .sub-nav.open {         display: block;     }     /* list of items within sub-navigation panel */     .sub-nav ul {         display: inline-block;         vertical-align: top;         margin: 0 1em 0 0;         padding: 0;     }     /* list item within sub-navigation panel */     .sub-nav li {         display: block;         list-style-type: none;         margin: 0;         padding: 0;     }   Putting it all together, here is the completed example:     <!doctype html>     <html lang=""en"">     <head>     <meta charset=""UTF-8"">     <title>Simple Accessible Mega Menu Example</title>     <style>         /* Rudimentary mega menu CSS for demonstration */             /* mega menu list */         .nav-menu {             display: block;             position: relative;             list-style: none;             margin: 0;             padding: 0;             z-index: 15;         }         /* a top level navigation item in the mega menu */         .nav-item {             list-style: none;             display: inline-block;             padding: 0;             margin: 0;         }         /* first descendant link within a top level navigation item */         .nav-item > a {             position: relative;             display: inline-block;             padding: 0.5em 1em;             margin: 0 0 -1px 0;             border: 1px solid transparent;         }         /* focus/open states of first descendant link within a top level             navigation item */         .nav-item > a:focus,         .nav-item > a.open {             border: 1px solid #dedede;         }         /* open state of first descendant link within a top level             navigation item */         .nav-item > a.open {             background-color: #fff;             border-bottom: none;             z-index: 1;         }         /* sub-navigation panel */         .sub-nav {             position: absolute;             display: none;             top: 2.2em;             margin-top: -1px;             padding: 0.5em 1em;             border: 1px solid #dedede;             background-color: #fff;         }         /* sub-navigation panel open state */         .sub-nav.open {             display: block;         }         /* list of items within sub-navigation panel */         .sub-nav ul {             display: inline-block;             vertical-align: top;             margin: 0 1em 0 0;             padding: 0;         }         /* list item within sub-navigation panel */         .sub-nav li {             display: block;             list-style-type: none;             margin: 0;             padding: 0;         }          </style>     </head>     <body>     <nav>         <ul class=""nav-menu"">             <li class=""nav-item"">                 <a href=""?movie"">Movies</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=0"">Action &amp; Adventure</a></li>                         <li><a href=""?movie&genre=2"">Children &amp; Family</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=7"">Dramas</a></li>                         <li><a href=""?movie&genre=9"">Foreign</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=14"">Musicals</a></li>                         <li><a href=""?movie&genre=15"">Romance</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>             <li class=""nav-item"">                 <a href=""?tv"">TV Shows</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=20"">Classic TV</a></li>                         <li><a href=""?tv&genre=21"">Crime TV</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=27"">Reality TV</a></li>                         <li><a href=""?tv&genre=30"">TV Action</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=33"">TV Dramas</a></li>                         <li><a href=""?tv&genre=34"">TV Horror</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>         </ul>     </nav>          <!-- include jquery -->     <script src=""//code.jquery.com/jquery-1.10.1.min.js""></script>     <!-- include the jquery-accessibleMegaMenu plugin script -->     <script src=""js/jquery-accessibleMegaMenu.js""></script>     <!-- initialize a selector as an accessibleMegaMenu -->     <script>         $(""nav:first"").accessibleMegaMenu({             /* prefix for generated unique id attributes, which are required                 to indicate aria-owns, aria-controls and aria-labelledby */             uuidPrefix: ""accessible-megamenu"",                          /* css class used to define the megamenu styling */             menuClass: ""nav-menu"",                          /* css class for a top-level navigation item in the megamenu */             topNavItemClass: ""nav-item"",                          /* css class for a megamenu panel */             panelClass: ""sub-nav"",                          /* css class for a group of items within a megamenu panel */             panelGroupClass: ""sub-nav-group"",                          /* css class for the hover state */             hoverClass: ""hover"",                          /* css class for the focus state */             focusClass: ""focus"",                          /* css class for the open state */             openClass: ""open""         });     </script>     </body>     </html> About A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. Resources Readme License Apache-2.0 License Releases No releases published Packages 0 No packages published Contributors 5 Languages HTML 70.8% CSS 27.3% JavaScript 1.9% © 2020 GitHub, Inc. Terms Privacy Cookie Preferences Security Status Help Contact GitHub Pricing API Training Blog About You can’t perform that action at this time. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session. We use optional third-party analytics cookies to understand how you use GitHub.com so we can build better products. Learn more. Accept Reject We use optional third-party analytics cookies to understand how you use GitHub.com so we can build better products. You can always update your selection by clicking Cookie Preferences at the bottom of the page. For more information, see our Privacy Statement. Essential cookies We use essential cookies to perform essential website functions, e.g. they're used to log you in. Learn more Always active Analytics cookies We use analytics cookies to understand how you use our websites so we can make them better, e.g. they're used to gather information about the pages you visit and how many clicks you need to accomplish a task. Learn more Accept Reject Save preferences"
300307,20201023,github.com,https://github.com/adobe-accessibility/Accessible-Mega-Menu,text/html,text/html,en,"GitHub - adobe-accessibility/Accessible-Mega-Menu: A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. Skip to content Sign up Why GitHub? Features → Code review Project management Integrations Actions Packages Security Team management Hosting Mobile Customer stories → Security → Team Enterprise Explore Explore GitHub → Learn & contribute Topics Collections Trending Learning Lab Open source guides Connect with others Events Community forum GitHub Education GitHub Stars program Marketplace Pricing Plans → Compare plans Contact Sales Nonprofit → Education → In this repository All GitHub ↵ Jump to ↵ No suggested jump to results In this repository All GitHub ↵ Jump to ↵ In this repository All GitHub ↵ Jump to ↵ Sign in Sign up {{ message }} adobe-accessibility / Accessible-Mega-Menu Watch 48 Star 572 Fork 190 A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. Apache-2.0 License 572 stars 190 forks Star Watch Code Issues 28 Pull requests 12 Actions Projects 0 Security Insights More Code Issues Pull requests Actions Projects Security Insights Dismiss Join GitHub today GitHub is home to over 50 million developers working together to host and review code, manage projects, and build software together. Sign up master 2 branches 0 tags Go to file Code Clone HTTPS GitHub CLI Use Git or checkout with SVN using the web URL. Work fast with our official CLI. Learn more. Open with GitHub Desktop Download ZIP Launching GitHub Desktop If nothing happens, download GitHub Desktop and try again. Go back Launching GitHub Desktop If nothing happens, download GitHub Desktop and try again. Go back Launching Xcode If nothing happens, download Xcode and try again. Go back Launching Visual Studio If nothing happens, download the GitHub extension for Visual Studio and try again. Go back Latest commit Git stats 36 commits Files Permalink Failed to load latest commit information. Type Name Latest commit message Commit time css js third-party/jquery LICENSE NOTICE README.md index.html package.json View code README.md Accessible Mega Menu ========================= A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. It is modeled after the mega menu on adobe.com but has been simplified for use by others. An brief explanation of our interaction design choices can be found in a blog post at Mega menu accessibility on adobe.com. Content for the links and text within the mega menu comes from the Web Content Accessibility Guidelines (WCAG) 2.0. Keyboard Accessibility The accessible mega menu supports keyboard interaction modeled after the behavior described in the WAI-ARIA Menu or Menu bar (widget) design pattern, however we also try to respect users' general expectations for the behavior of links in a global navigation. To this end, the accessible mega menu implementation permits tab focus on each of the six top-level menu items. When one of the menu items has focus, pressing the Enter key, Spacebar or Down arrow will open the submenu panel, and pressing the Left or Right arrow key will shift focus to the adjacent menu item. Links within the submenu panels are included in the tab order when the panel is open. They can also be navigated with the arrow keys or by typing the first character in the link name, which speeds up keyboard navigation considerably. Pressing the Escape key closes the submenu and restores focus to the parent menu item. Screen Reader Accessibility The accessible mega menu models its use of WAI-ARIA Roles, States, and Properties after those described in the WAI-ARIA Menu or Menu bar (widget) design pattern with some notable exceptions, so that it behaves better with screen reader user expectations for global navigation. We don't use role=""menu"" for the menu container and role=""menuitem"" for each of the links therein, because if we do, assistive technology will no longer interpret the links as links, but instead, as menu items, and the links in our global navigation will no longer show up when a screen reader user executes a shortcut command to bring up a list of links in the page. We also want to maintain the semantic structure of the submenu panels in our mega menu; our links are organized into lists and separated by headings. Omitting role=""menu"" and role=""menuitem"" for the global navigation seems the safer way to go. Usage HTML The HTML structure for the mega menu is a nav element, or any other container element, containing a list. Each list item contains a link which is followed by a div or any other container element which will serve as the pop up panel. The panel can contain any html content; in the following example, each panel contains three lists of links. You can explicitly define groups within the panel, between which a user can navigate quickly using the left and right arrow keys; in the following example, the CSS class .sub-nav-group identifies a navigable group.     <nav>         <ul class=""nav-menu"">             <li class=""nav-item"">                 <a href=""?movie"">Movies</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=0"">Action &amp; Adventure</a></li>                         <li><a href=""?movie&genre=2"">Children &amp; Family</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=7"">Dramas</a></li>                         <li><a href=""?movie&genre=9"">Foreign</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=14"">Musicals</a></li>                         <li><a href=""?movie&genre=15"">Romance</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>             <li class=""nav-item"">                 <a href=""?tv"">TV Shows</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=20"">Classic TV</a></li>                         <li><a href=""?tv&genre=21"">Crime TV</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=27"">Reality TV</a></li>                         <li><a href=""?tv&genre=30"">TV Action</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=33"">TV Dramas</a></li>                         <li><a href=""?tv&genre=34"">TV Horror</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>         </ul>     </nav> By default, accessibleMegaMenu uses the the following CSS classes to define the top-level navigation items, panels, groups within the panels, and the hover, focus, and open states. It also defines a prefix for unique id strings, which are required to indicate the relationship of a top-level navigation item to the panel it controls.     defaults = {         /* unique ID's are required to indicate aria-owns, aria-controls and aria-labelledby */         uuidPrefix: ""accessible-megamenu"",                  /* default css class used to define the megamenu styling */         menuClass: ""accessible-megamenu"",                  /* default css class for a top-level navigation item in the megamenu */         topNavItemClass: ""accessible-megamenu-top-nav-item"",                  /* default css class for a megamenu panel */         panelClass: ""accessible-megamenu-panel"",                  /* default css class for a group of items within a megamenu panel */         panelGroupClass: ""accessible-megamenu-panel-group"",                  /* default css class for the hover state */         hoverClass: ""hover"",                  /* default css class for the focus state */         focusClass: ""focus"",                  /* default css class for the open state */         openClass: ""open""      } You can optionally override the defaults to use the CSS classes you may have already defined for your mega menu. JavaScript Be sure to include jQuery and the jquery-accessibleMegaMenu.js plugin script.     <script src=""//code.jquery.com/jquery-1.10.1.min.js""></script>     <script src=""js/jquery-accessibleMegaMenu.js""></script> The following initializes the first nav element in the document as an accessibleMegaMenu, with optional CSS class overrides.     $(""nav:first"").accessibleMegaMenu({         /* prefix for generated unique id attributes, which are required             to indicate aria-owns, aria-controls and aria-labelledby */         uuidPrefix: ""accessible-megamenu"",                  /* css class used to define the megamenu styling */         menuClass: ""nav-menu"",                  /* css class for a top-level navigation item in the megamenu */         topNavItemClass: ""nav-item"",                  /* css class for a megamenu panel */         panelClass: ""sub-nav"",                  /* css class for a group of items within a megamenu panel */         panelGroupClass: ""sub-nav-group"",                  /* css class for the hover state */         hoverClass: ""hover"",                  /* css class for the focus state */         focusClass: ""focus"",                  /* css class for the open state */         openClass: ""open""     }); CSS AccessibleMegaMenu handles the showing and hiding of panels by adding or removing a CSS class. No inline styles are added to hide elements or create animation between states. Following is some rudimentary CSS for our example which enables the showing/hiding of and the layout of lists panels in the mega menu.     /* mega menu list */     .nav-menu {         display: block;         position: relative;         list-style: none;         margin: 0;         padding: 0;         z-index: 15;     }     /* a top level navigation item in the mega menu */     .nav-item {         list-style: none;         display: inline-block;         padding: 0;         margin: 0;     }     /* first descendant link within a top level navigation item */     .nav-item > a {         position: relative;         display: inline-block;         padding: 0.5em 1em;         margin: 0 0 -1px 0;         border: 1px solid transparent;     }     /* focus/open states of first descendant link within a top level         navigation item */     .nav-item > a:focus,     .nav-item > a.open {         border: 1px solid #dedede;     }     /* open state of first descendant link within a top level         navigation item */     .nav-item > a.open {         background-color: #fff;         border-bottom: none;         z-index: 1;     }     /* sub-navigation panel */     .sub-nav {         position: absolute;         display: none;         top: 2.2em;         margin-top: -1px;         padding: 0.5em 1em;         border: 1px solid #dedede;         background-color: #fff;     }     /* sub-navigation panel open state */     .sub-nav.open {         display: block;     }     /* list of items within sub-navigation panel */     .sub-nav ul {         display: inline-block;         vertical-align: top;         margin: 0 1em 0 0;         padding: 0;     }     /* list item within sub-navigation panel */     .sub-nav li {         display: block;         list-style-type: none;         margin: 0;         padding: 0;     }   Putting it all together, here is the completed example:     <!doctype html>     <html lang=""en"">     <head>     <meta charset=""UTF-8"">     <title>Simple Accessible Mega Menu Example</title>     <style>         /* Rudimentary mega menu CSS for demonstration */             /* mega menu list */         .nav-menu {             display: block;             position: relative;             list-style: none;             margin: 0;             padding: 0;             z-index: 15;         }         /* a top level navigation item in the mega menu */         .nav-item {             list-style: none;             display: inline-block;             padding: 0;             margin: 0;         }         /* first descendant link within a top level navigation item */         .nav-item > a {             position: relative;             display: inline-block;             padding: 0.5em 1em;             margin: 0 0 -1px 0;             border: 1px solid transparent;         }         /* focus/open states of first descendant link within a top level             navigation item */         .nav-item > a:focus,         .nav-item > a.open {             border: 1px solid #dedede;         }         /* open state of first descendant link within a top level             navigation item */         .nav-item > a.open {             background-color: #fff;             border-bottom: none;             z-index: 1;         }         /* sub-navigation panel */         .sub-nav {             position: absolute;             display: none;             top: 2.2em;             margin-top: -1px;             padding: 0.5em 1em;             border: 1px solid #dedede;             background-color: #fff;         }         /* sub-navigation panel open state */         .sub-nav.open {             display: block;         }         /* list of items within sub-navigation panel */         .sub-nav ul {             display: inline-block;             vertical-align: top;             margin: 0 1em 0 0;             padding: 0;         }         /* list item within sub-navigation panel */         .sub-nav li {             display: block;             list-style-type: none;             margin: 0;             padding: 0;         }          </style>     </head>     <body>     <nav>         <ul class=""nav-menu"">             <li class=""nav-item"">                 <a href=""?movie"">Movies</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=0"">Action &amp; Adventure</a></li>                         <li><a href=""?movie&genre=2"">Children &amp; Family</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=7"">Dramas</a></li>                         <li><a href=""?movie&genre=9"">Foreign</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=14"">Musicals</a></li>                         <li><a href=""?movie&genre=15"">Romance</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>             <li class=""nav-item"">                 <a href=""?tv"">TV Shows</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=20"">Classic TV</a></li>                         <li><a href=""?tv&genre=21"">Crime TV</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=27"">Reality TV</a></li>                         <li><a href=""?tv&genre=30"">TV Action</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=33"">TV Dramas</a></li>                         <li><a href=""?tv&genre=34"">TV Horror</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>         </ul>     </nav>          <!-- include jquery -->     <script src=""//code.jquery.com/jquery-1.10.1.min.js""></script>     <!-- include the jquery-accessibleMegaMenu plugin script -->     <script src=""js/jquery-accessibleMegaMenu.js""></script>     <!-- initialize a selector as an accessibleMegaMenu -->     <script>         $(""nav:first"").accessibleMegaMenu({             /* prefix for generated unique id attributes, which are required                 to indicate aria-owns, aria-controls and aria-labelledby */             uuidPrefix: ""accessible-megamenu"",                          /* css class used to define the megamenu styling */             menuClass: ""nav-menu"",                          /* css class for a top-level navigation item in the megamenu */             topNavItemClass: ""nav-item"",                          /* css class for a megamenu panel */             panelClass: ""sub-nav"",                          /* css class for a group of items within a megamenu panel */             panelGroupClass: ""sub-nav-group"",                          /* css class for the hover state */             hoverClass: ""hover"",                          /* css class for the focus state */             focusClass: ""focus"",                          /* css class for the open state */             openClass: ""open""         });     </script>     </body>     </html> About A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. Resources Readme License Apache-2.0 License Releases No releases published Packages 0 No packages published Used by 14 + 6 Contributors 5 Languages HTML 70.8% CSS 27.3% JavaScript 1.9% © 2020 GitHub, Inc. Terms Privacy Cookie Preferences Security Status Help Contact GitHub Pricing API Training Blog About You can’t perform that action at this time. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session. We use optional third-party analytics cookies to understand how you use GitHub.com so we can build better products. Learn more. Accept Reject We use optional third-party analytics cookies to understand how you use GitHub.com so we can build better products. You can always update your selection by clicking Cookie Preferences at the bottom of the page. For more information, see our Privacy Statement. Essential cookies We use essential cookies to perform essential website functions, e.g. they're used to log you in. Learn more Always active Analytics cookies We use analytics cookies to understand how you use our websites so we can make them better, e.g. they're used to gather information about the pages you visit and how many clicks you need to accomplish a task. Learn more Accept Reject Save preferences"
312083,20201030,github.com,https://github.com/adobe-accessibility/Accessible-Mega-Menu,text/html,text/html,en,"GitHub - adobe-accessibility/Accessible-Mega-Menu: A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. Skip to content Sign up Why GitHub? Features → Code review Project management Integrations Actions Packages Security Team management Hosting Mobile Customer stories → Security → Team Enterprise Explore Explore GitHub → Learn & contribute Topics Collections Trending Learning Lab Open source guides Connect with others Events Community forum GitHub Education GitHub Stars program Marketplace Pricing Plans → Compare plans Contact Sales Nonprofit → Education → In this repository All GitHub ↵ Jump to ↵ No suggested jump to results In this repository All GitHub ↵ Jump to ↵ In this repository All GitHub ↵ Jump to ↵ Sign in Sign up {{ message }} adobe-accessibility / Accessible-Mega-Menu Watch 48 Star 572 Fork 190 A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. Apache-2.0 License 572 stars 190 forks Star Watch Code Issues 28 Pull requests 12 Actions Projects 0 Security Insights More Code Issues Pull requests Actions Projects Security Insights Dismiss Join GitHub today GitHub is home to over 50 million developers working together to host and review code, manage projects, and build software together. Sign up master 2 branches 0 tags Go to file Code Clone HTTPS GitHub CLI Use Git or checkout with SVN using the web URL. Work fast with our official CLI. Learn more. Open with GitHub Desktop Download ZIP Launching GitHub Desktop If nothing happens, download GitHub Desktop and try again. Go back Launching GitHub Desktop If nothing happens, download GitHub Desktop and try again. Go back Launching Xcode If nothing happens, download Xcode and try again. Go back Launching Visual Studio If nothing happens, download the GitHub extension for Visual Studio and try again. Go back Latest commit Git stats 36 commits Files Permalink Failed to load latest commit information. Type Name Latest commit message Commit time css js third-party/jquery LICENSE NOTICE README.md index.html package.json View code README.md Accessible Mega Menu ========================= A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. It is modeled after the mega menu on adobe.com but has been simplified for use by others. An brief explanation of our interaction design choices can be found in a blog post at Mega menu accessibility on adobe.com. Content for the links and text within the mega menu comes from the Web Content Accessibility Guidelines (WCAG) 2.0. Keyboard Accessibility The accessible mega menu supports keyboard interaction modeled after the behavior described in the WAI-ARIA Menu or Menu bar (widget) design pattern, however we also try to respect users' general expectations for the behavior of links in a global navigation. To this end, the accessible mega menu implementation permits tab focus on each of the six top-level menu items. When one of the menu items has focus, pressing the Enter key, Spacebar or Down arrow will open the submenu panel, and pressing the Left or Right arrow key will shift focus to the adjacent menu item. Links within the submenu panels are included in the tab order when the panel is open. They can also be navigated with the arrow keys or by typing the first character in the link name, which speeds up keyboard navigation considerably. Pressing the Escape key closes the submenu and restores focus to the parent menu item. Screen Reader Accessibility The accessible mega menu models its use of WAI-ARIA Roles, States, and Properties after those described in the WAI-ARIA Menu or Menu bar (widget) design pattern with some notable exceptions, so that it behaves better with screen reader user expectations for global navigation. We don't use role=""menu"" for the menu container and role=""menuitem"" for each of the links therein, because if we do, assistive technology will no longer interpret the links as links, but instead, as menu items, and the links in our global navigation will no longer show up when a screen reader user executes a shortcut command to bring up a list of links in the page. We also want to maintain the semantic structure of the submenu panels in our mega menu; our links are organized into lists and separated by headings. Omitting role=""menu"" and role=""menuitem"" for the global navigation seems the safer way to go. Usage HTML The HTML structure for the mega menu is a nav element, or any other container element, containing a list. Each list item contains a link which is followed by a div or any other container element which will serve as the pop up panel. The panel can contain any html content; in the following example, each panel contains three lists of links. You can explicitly define groups within the panel, between which a user can navigate quickly using the left and right arrow keys; in the following example, the CSS class .sub-nav-group identifies a navigable group.     <nav>         <ul class=""nav-menu"">             <li class=""nav-item"">                 <a href=""?movie"">Movies</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=0"">Action &amp; Adventure</a></li>                         <li><a href=""?movie&genre=2"">Children &amp; Family</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=7"">Dramas</a></li>                         <li><a href=""?movie&genre=9"">Foreign</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=14"">Musicals</a></li>                         <li><a href=""?movie&genre=15"">Romance</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>             <li class=""nav-item"">                 <a href=""?tv"">TV Shows</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=20"">Classic TV</a></li>                         <li><a href=""?tv&genre=21"">Crime TV</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=27"">Reality TV</a></li>                         <li><a href=""?tv&genre=30"">TV Action</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=33"">TV Dramas</a></li>                         <li><a href=""?tv&genre=34"">TV Horror</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>         </ul>     </nav> By default, accessibleMegaMenu uses the the following CSS classes to define the top-level navigation items, panels, groups within the panels, and the hover, focus, and open states. It also defines a prefix for unique id strings, which are required to indicate the relationship of a top-level navigation item to the panel it controls.     defaults = {         /* unique ID's are required to indicate aria-owns, aria-controls and aria-labelledby */         uuidPrefix: ""accessible-megamenu"",                  /* default css class used to define the megamenu styling */         menuClass: ""accessible-megamenu"",                  /* default css class for a top-level navigation item in the megamenu */         topNavItemClass: ""accessible-megamenu-top-nav-item"",                  /* default css class for a megamenu panel */         panelClass: ""accessible-megamenu-panel"",                  /* default css class for a group of items within a megamenu panel */         panelGroupClass: ""accessible-megamenu-panel-group"",                  /* default css class for the hover state */         hoverClass: ""hover"",                  /* default css class for the focus state */         focusClass: ""focus"",                  /* default css class for the open state */         openClass: ""open""      } You can optionally override the defaults to use the CSS classes you may have already defined for your mega menu. JavaScript Be sure to include jQuery and the jquery-accessibleMegaMenu.js plugin script.     <script src=""//code.jquery.com/jquery-1.10.1.min.js""></script>     <script src=""js/jquery-accessibleMegaMenu.js""></script> The following initializes the first nav element in the document as an accessibleMegaMenu, with optional CSS class overrides.     $(""nav:first"").accessibleMegaMenu({         /* prefix for generated unique id attributes, which are required             to indicate aria-owns, aria-controls and aria-labelledby */         uuidPrefix: ""accessible-megamenu"",                  /* css class used to define the megamenu styling */         menuClass: ""nav-menu"",                  /* css class for a top-level navigation item in the megamenu */         topNavItemClass: ""nav-item"",                  /* css class for a megamenu panel */         panelClass: ""sub-nav"",                  /* css class for a group of items within a megamenu panel */         panelGroupClass: ""sub-nav-group"",                  /* css class for the hover state */         hoverClass: ""hover"",                  /* css class for the focus state */         focusClass: ""focus"",                  /* css class for the open state */         openClass: ""open""     }); CSS AccessibleMegaMenu handles the showing and hiding of panels by adding or removing a CSS class. No inline styles are added to hide elements or create animation between states. Following is some rudimentary CSS for our example which enables the showing/hiding of and the layout of lists panels in the mega menu.     /* mega menu list */     .nav-menu {         display: block;         position: relative;         list-style: none;         margin: 0;         padding: 0;         z-index: 15;     }     /* a top level navigation item in the mega menu */     .nav-item {         list-style: none;         display: inline-block;         padding: 0;         margin: 0;     }     /* first descendant link within a top level navigation item */     .nav-item > a {         position: relative;         display: inline-block;         padding: 0.5em 1em;         margin: 0 0 -1px 0;         border: 1px solid transparent;     }     /* focus/open states of first descendant link within a top level         navigation item */     .nav-item > a:focus,     .nav-item > a.open {         border: 1px solid #dedede;     }     /* open state of first descendant link within a top level         navigation item */     .nav-item > a.open {         background-color: #fff;         border-bottom: none;         z-index: 1;     }     /* sub-navigation panel */     .sub-nav {         position: absolute;         display: none;         top: 2.2em;         margin-top: -1px;         padding: 0.5em 1em;         border: 1px solid #dedede;         background-color: #fff;     }     /* sub-navigation panel open state */     .sub-nav.open {         display: block;     }     /* list of items within sub-navigation panel */     .sub-nav ul {         display: inline-block;         vertical-align: top;         margin: 0 1em 0 0;         padding: 0;     }     /* list item within sub-navigation panel */     .sub-nav li {         display: block;         list-style-type: none;         margin: 0;         padding: 0;     }   Putting it all together, here is the completed example:     <!doctype html>     <html lang=""en"">     <head>     <meta charset=""UTF-8"">     <title>Simple Accessible Mega Menu Example</title>     <style>         /* Rudimentary mega menu CSS for demonstration */             /* mega menu list */         .nav-menu {             display: block;             position: relative;             list-style: none;             margin: 0;             padding: 0;             z-index: 15;         }         /* a top level navigation item in the mega menu */         .nav-item {             list-style: none;             display: inline-block;             padding: 0;             margin: 0;         }         /* first descendant link within a top level navigation item */         .nav-item > a {             position: relative;             display: inline-block;             padding: 0.5em 1em;             margin: 0 0 -1px 0;             border: 1px solid transparent;         }         /* focus/open states of first descendant link within a top level             navigation item */         .nav-item > a:focus,         .nav-item > a.open {             border: 1px solid #dedede;         }         /* open state of first descendant link within a top level             navigation item */         .nav-item > a.open {             background-color: #fff;             border-bottom: none;             z-index: 1;         }         /* sub-navigation panel */         .sub-nav {             position: absolute;             display: none;             top: 2.2em;             margin-top: -1px;             padding: 0.5em 1em;             border: 1px solid #dedede;             background-color: #fff;         }         /* sub-navigation panel open state */         .sub-nav.open {             display: block;         }         /* list of items within sub-navigation panel */         .sub-nav ul {             display: inline-block;             vertical-align: top;             margin: 0 1em 0 0;             padding: 0;         }         /* list item within sub-navigation panel */         .sub-nav li {             display: block;             list-style-type: none;             margin: 0;             padding: 0;         }          </style>     </head>     <body>     <nav>         <ul class=""nav-menu"">             <li class=""nav-item"">                 <a href=""?movie"">Movies</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=0"">Action &amp; Adventure</a></li>                         <li><a href=""?movie&genre=2"">Children &amp; Family</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=7"">Dramas</a></li>                         <li><a href=""?movie&genre=9"">Foreign</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=14"">Musicals</a></li>                         <li><a href=""?movie&genre=15"">Romance</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>             <li class=""nav-item"">                 <a href=""?tv"">TV Shows</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=20"">Classic TV</a></li>                         <li><a href=""?tv&genre=21"">Crime TV</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=27"">Reality TV</a></li>                         <li><a href=""?tv&genre=30"">TV Action</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=33"">TV Dramas</a></li>                         <li><a href=""?tv&genre=34"">TV Horror</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>         </ul>     </nav>          <!-- include jquery -->     <script src=""//code.jquery.com/jquery-1.10.1.min.js""></script>     <!-- include the jquery-accessibleMegaMenu plugin script -->     <script src=""js/jquery-accessibleMegaMenu.js""></script>     <!-- initialize a selector as an accessibleMegaMenu -->     <script>         $(""nav:first"").accessibleMegaMenu({             /* prefix for generated unique id attributes, which are required                 to indicate aria-owns, aria-controls and aria-labelledby */             uuidPrefix: ""accessible-megamenu"",                          /* css class used to define the megamenu styling */             menuClass: ""nav-menu"",                          /* css class for a top-level navigation item in the megamenu */             topNavItemClass: ""nav-item"",                          /* css class for a megamenu panel */             panelClass: ""sub-nav"",                          /* css class for a group of items within a megamenu panel */             panelGroupClass: ""sub-nav-group"",                          /* css class for the hover state */             hoverClass: ""hover"",                          /* css class for the focus state */             focusClass: ""focus"",                          /* css class for the open state */             openClass: ""open""         });     </script>     </body>     </html> About A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. Resources Readme License Apache-2.0 License Releases No releases published Packages 0 No packages published Contributors 5 Languages HTML 70.8% CSS 27.3% JavaScript 1.9% © 2020 GitHub, Inc. Terms Privacy Cookie Preferences Security Status Help Contact GitHub Pricing API Training Blog About You can’t perform that action at this time. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session. We use optional third-party analytics cookies to understand how you use GitHub.com so we can build better products. Learn more. Accept Reject We use optional third-party analytics cookies to understand how you use GitHub.com so we can build better products. You can always update your selection by clicking Cookie Preferences at the bottom of the page. For more information, see our Privacy Statement. Essential cookies We use essential cookies to perform essential website functions, e.g. they're used to log you in. Learn more Always active Analytics cookies We use analytics cookies to understand how you use our websites so we can make them better, e.g. they're used to gather information about the pages you visit and how many clicks you need to accomplish a task. Learn more Accept Reject Save preferences"
323984,20201106,github.com,https://github.com/adobe-accessibility/Accessible-Mega-Menu,text/html,text/html,en,"GitHub - adobe-accessibility/Accessible-Mega-Menu: A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. Skip to content Sign up Why GitHub? Features → Code review Project management Integrations Actions Packages Security Team management Hosting Mobile Customer stories → Security → Team Enterprise Explore Explore GitHub → Learn & contribute Topics Collections Trending Learning Lab Open source guides Connect with others Events Community forum GitHub Education GitHub Stars program Marketplace Pricing Plans → Compare plans Contact Sales Nonprofit → Education → In this repository All GitHub ↵ Jump to ↵ No suggested jump to results In this repository All GitHub ↵ Jump to ↵ In this repository All GitHub ↵ Jump to ↵ Sign in Sign up {{ message }} adobe-accessibility / Accessible-Mega-Menu Watch 49 Star 572 Fork 190 A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. Apache-2.0 License 572 stars 190 forks Star Watch Code Issues 28 Pull requests 12 Actions Projects 0 Security Insights More Code Issues Pull requests Actions Projects Security Insights Dismiss Join GitHub today GitHub is home to over 50 million developers working together to host and review code, manage projects, and build software together. Sign up master 2 branches 0 tags Go to file Code Clone HTTPS GitHub CLI Use Git or checkout with SVN using the web URL. Work fast with our official CLI. Learn more. Open with GitHub Desktop Download ZIP Launching GitHub Desktop If nothing happens, download GitHub Desktop and try again. Go back Launching GitHub Desktop If nothing happens, download GitHub Desktop and try again. Go back Launching Xcode If nothing happens, download Xcode and try again. Go back Launching Visual Studio If nothing happens, download the GitHub extension for Visual Studio and try again. Go back Latest commit majornista Add openOnMouseover setting, and toggleButtonClass for responsive layout … 1 d445afc May 11, 2018 Add openOnMouseover setting, and toggleButtonClass for responsive layout To normalize behavior of top navigation links on desktop and mobile, the default behavior will be for the menu to remain closed on hover. Click should toggle the menu regardless of whether the link has a valid `href`. With `openOnMouseover: true`, hover will open the menu as before and with the menu open, clicking a top-level navigation item with a valid `href` should open the url. Add toggleButtonClass to specify a button that should toggle the menu in a responsive layout on mobile devices. Incorporate media queries for responsive layout breakpoints. d445afc 1 Git stats 36 commits Files Permalink Failed to load latest commit information. Type Name Latest commit message Commit time css js third-party/jquery LICENSE NOTICE README.md index.html package.json View code README.md Accessible Mega Menu ========================= A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. It is modeled after the mega menu on adobe.com but has been simplified for use by others. An brief explanation of our interaction design choices can be found in a blog post at Mega menu accessibility on adobe.com. Content for the links and text within the mega menu comes from the Web Content Accessibility Guidelines (WCAG) 2.0. Keyboard Accessibility The accessible mega menu supports keyboard interaction modeled after the behavior described in the WAI-ARIA Menu or Menu bar (widget) design pattern, however we also try to respect users' general expectations for the behavior of links in a global navigation. To this end, the accessible mega menu implementation permits tab focus on each of the six top-level menu items. When one of the menu items has focus, pressing the Enter key, Spacebar or Down arrow will open the submenu panel, and pressing the Left or Right arrow key will shift focus to the adjacent menu item. Links within the submenu panels are included in the tab order when the panel is open. They can also be navigated with the arrow keys or by typing the first character in the link name, which speeds up keyboard navigation considerably. Pressing the Escape key closes the submenu and restores focus to the parent menu item. Screen Reader Accessibility The accessible mega menu models its use of WAI-ARIA Roles, States, and Properties after those described in the WAI-ARIA Menu or Menu bar (widget) design pattern with some notable exceptions, so that it behaves better with screen reader user expectations for global navigation. We don't use role=""menu"" for the menu container and role=""menuitem"" for each of the links therein, because if we do, assistive technology will no longer interpret the links as links, but instead, as menu items, and the links in our global navigation will no longer show up when a screen reader user executes a shortcut command to bring up a list of links in the page. We also want to maintain the semantic structure of the submenu panels in our mega menu; our links are organized into lists and separated by headings. Omitting role=""menu"" and role=""menuitem"" for the global navigation seems the safer way to go. Usage HTML The HTML structure for the mega menu is a nav element, or any other container element, containing a list. Each list item contains a link which is followed by a div or any other container element which will serve as the pop up panel. The panel can contain any html content; in the following example, each panel contains three lists of links. You can explicitly define groups within the panel, between which a user can navigate quickly using the left and right arrow keys; in the following example, the CSS class .sub-nav-group identifies a navigable group.     <nav>         <ul class=""nav-menu"">             <li class=""nav-item"">                 <a href=""?movie"">Movies</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=0"">Action &amp; Adventure</a></li>                         <li><a href=""?movie&genre=2"">Children &amp; Family</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=7"">Dramas</a></li>                         <li><a href=""?movie&genre=9"">Foreign</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=14"">Musicals</a></li>                         <li><a href=""?movie&genre=15"">Romance</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>             <li class=""nav-item"">                 <a href=""?tv"">TV Shows</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=20"">Classic TV</a></li>                         <li><a href=""?tv&genre=21"">Crime TV</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=27"">Reality TV</a></li>                         <li><a href=""?tv&genre=30"">TV Action</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=33"">TV Dramas</a></li>                         <li><a href=""?tv&genre=34"">TV Horror</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>         </ul>     </nav> By default, accessibleMegaMenu uses the the following CSS classes to define the top-level navigation items, panels, groups within the panels, and the hover, focus, and open states. It also defines a prefix for unique id strings, which are required to indicate the relationship of a top-level navigation item to the panel it controls.     defaults = {         /* unique ID's are required to indicate aria-owns, aria-controls and aria-labelledby */         uuidPrefix: ""accessible-megamenu"",                  /* default css class used to define the megamenu styling */         menuClass: ""accessible-megamenu"",                  /* default css class for a top-level navigation item in the megamenu */         topNavItemClass: ""accessible-megamenu-top-nav-item"",                  /* default css class for a megamenu panel */         panelClass: ""accessible-megamenu-panel"",                  /* default css class for a group of items within a megamenu panel */         panelGroupClass: ""accessible-megamenu-panel-group"",                  /* default css class for the hover state */         hoverClass: ""hover"",                  /* default css class for the focus state */         focusClass: ""focus"",                  /* default css class for the open state */         openClass: ""open""      } You can optionally override the defaults to use the CSS classes you may have already defined for your mega menu. JavaScript Be sure to include jQuery and the jquery-accessibleMegaMenu.js plugin script.     <script src=""//code.jquery.com/jquery-1.10.1.min.js""></script>     <script src=""js/jquery-accessibleMegaMenu.js""></script> The following initializes the first nav element in the document as an accessibleMegaMenu, with optional CSS class overrides.     $(""nav:first"").accessibleMegaMenu({         /* prefix for generated unique id attributes, which are required             to indicate aria-owns, aria-controls and aria-labelledby */         uuidPrefix: ""accessible-megamenu"",                  /* css class used to define the megamenu styling */         menuClass: ""nav-menu"",                  /* css class for a top-level navigation item in the megamenu */         topNavItemClass: ""nav-item"",                  /* css class for a megamenu panel */         panelClass: ""sub-nav"",                  /* css class for a group of items within a megamenu panel */         panelGroupClass: ""sub-nav-group"",                  /* css class for the hover state */         hoverClass: ""hover"",                  /* css class for the focus state */         focusClass: ""focus"",                  /* css class for the open state */         openClass: ""open""     }); CSS AccessibleMegaMenu handles the showing and hiding of panels by adding or removing a CSS class. No inline styles are added to hide elements or create animation between states. Following is some rudimentary CSS for our example which enables the showing/hiding of and the layout of lists panels in the mega menu.     /* mega menu list */     .nav-menu {         display: block;         position: relative;         list-style: none;         margin: 0;         padding: 0;         z-index: 15;     }     /* a top level navigation item in the mega menu */     .nav-item {         list-style: none;         display: inline-block;         padding: 0;         margin: 0;     }     /* first descendant link within a top level navigation item */     .nav-item > a {         position: relative;         display: inline-block;         padding: 0.5em 1em;         margin: 0 0 -1px 0;         border: 1px solid transparent;     }     /* focus/open states of first descendant link within a top level         navigation item */     .nav-item > a:focus,     .nav-item > a.open {         border: 1px solid #dedede;     }     /* open state of first descendant link within a top level         navigation item */     .nav-item > a.open {         background-color: #fff;         border-bottom: none;         z-index: 1;     }     /* sub-navigation panel */     .sub-nav {         position: absolute;         display: none;         top: 2.2em;         margin-top: -1px;         padding: 0.5em 1em;         border: 1px solid #dedede;         background-color: #fff;     }     /* sub-navigation panel open state */     .sub-nav.open {         display: block;     }     /* list of items within sub-navigation panel */     .sub-nav ul {         display: inline-block;         vertical-align: top;         margin: 0 1em 0 0;         padding: 0;     }     /* list item within sub-navigation panel */     .sub-nav li {         display: block;         list-style-type: none;         margin: 0;         padding: 0;     }   Putting it all together, here is the completed example:     <!doctype html>     <html lang=""en"">     <head>     <meta charset=""UTF-8"">     <title>Simple Accessible Mega Menu Example</title>     <style>         /* Rudimentary mega menu CSS for demonstration */             /* mega menu list */         .nav-menu {             display: block;             position: relative;             list-style: none;             margin: 0;             padding: 0;             z-index: 15;         }         /* a top level navigation item in the mega menu */         .nav-item {             list-style: none;             display: inline-block;             padding: 0;             margin: 0;         }         /* first descendant link within a top level navigation item */         .nav-item > a {             position: relative;             display: inline-block;             padding: 0.5em 1em;             margin: 0 0 -1px 0;             border: 1px solid transparent;         }         /* focus/open states of first descendant link within a top level             navigation item */         .nav-item > a:focus,         .nav-item > a.open {             border: 1px solid #dedede;         }         /* open state of first descendant link within a top level             navigation item */         .nav-item > a.open {             background-color: #fff;             border-bottom: none;             z-index: 1;         }         /* sub-navigation panel */         .sub-nav {             position: absolute;             display: none;             top: 2.2em;             margin-top: -1px;             padding: 0.5em 1em;             border: 1px solid #dedede;             background-color: #fff;         }         /* sub-navigation panel open state */         .sub-nav.open {             display: block;         }         /* list of items within sub-navigation panel */         .sub-nav ul {             display: inline-block;             vertical-align: top;             margin: 0 1em 0 0;             padding: 0;         }         /* list item within sub-navigation panel */         .sub-nav li {             display: block;             list-style-type: none;             margin: 0;             padding: 0;         }          </style>     </head>     <body>     <nav>         <ul class=""nav-menu"">             <li class=""nav-item"">                 <a href=""?movie"">Movies</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=0"">Action &amp; Adventure</a></li>                         <li><a href=""?movie&genre=2"">Children &amp; Family</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=7"">Dramas</a></li>                         <li><a href=""?movie&genre=9"">Foreign</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=14"">Musicals</a></li>                         <li><a href=""?movie&genre=15"">Romance</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>             <li class=""nav-item"">                 <a href=""?tv"">TV Shows</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=20"">Classic TV</a></li>                         <li><a href=""?tv&genre=21"">Crime TV</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=27"">Reality TV</a></li>                         <li><a href=""?tv&genre=30"">TV Action</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=33"">TV Dramas</a></li>                         <li><a href=""?tv&genre=34"">TV Horror</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>         </ul>     </nav>          <!-- include jquery -->     <script src=""//code.jquery.com/jquery-1.10.1.min.js""></script>     <!-- include the jquery-accessibleMegaMenu plugin script -->     <script src=""js/jquery-accessibleMegaMenu.js""></script>     <!-- initialize a selector as an accessibleMegaMenu -->     <script>         $(""nav:first"").accessibleMegaMenu({             /* prefix for generated unique id attributes, which are required                 to indicate aria-owns, aria-controls and aria-labelledby */             uuidPrefix: ""accessible-megamenu"",                          /* css class used to define the megamenu styling */             menuClass: ""nav-menu"",                          /* css class for a top-level navigation item in the megamenu */             topNavItemClass: ""nav-item"",                          /* css class for a megamenu panel */             panelClass: ""sub-nav"",                          /* css class for a group of items within a megamenu panel */             panelGroupClass: ""sub-nav-group"",                          /* css class for the hover state */             hoverClass: ""hover"",                          /* css class for the focus state */             focusClass: ""focus"",                          /* css class for the open state */             openClass: ""open""         });     </script>     </body>     </html> About A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. Resources Readme License Apache-2.0 License Releases No releases published Packages 0 No packages published Used by 14 + 6 Contributors 5 Languages HTML 70.8% CSS 27.3% JavaScript 1.9% © 2020 GitHub, Inc. Terms Privacy Cookie Preferences Security Status Help Contact GitHub Pricing API Training Blog About You can’t perform that action at this time. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session. We use optional third-party analytics cookies to understand how you use GitHub.com so we can build better products. Learn more. Accept Reject We use optional third-party analytics cookies to understand how you use GitHub.com so we can build better products. You can always update your selection by clicking Cookie Preferences at the bottom of the page. For more information, see our Privacy Statement. Essential cookies We use essential cookies to perform essential website functions, e.g. they're used to log you in. Learn more Always active Analytics cookies We use analytics cookies to understand how you use our websites so we can make them better, e.g. they're used to gather information about the pages you visit and how many clicks you need to accomplish a task. Learn more Accept Reject Save preferences"
334919,20201113,github.com,https://github.com/adobe-accessibility/Accessible-Mega-Menu,text/html,text/html,en,"GitHub - adobe-accessibility/Accessible-Mega-Menu: A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. Skip to content Sign up Why GitHub? Features → Code review Project management Integrations Actions Packages Security Team management Hosting Mobile Customer stories → Security → Team Enterprise Explore Explore GitHub → Learn & contribute Topics Collections Trending Learning Lab Open source guides Connect with others Events Community forum GitHub Education GitHub Stars program Marketplace Pricing Plans → Compare plans Contact Sales Nonprofit → Education → In this repository All GitHub ↵ Jump to ↵ No suggested jump to results In this repository All GitHub ↵ Jump to ↵ In this repository All GitHub ↵ Jump to ↵ Sign in Sign up {{ message }} adobe-accessibility / Accessible-Mega-Menu Watch 49 Star 572 Fork 190 A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. Apache-2.0 License 572 stars 190 forks Star Watch Code Issues 28 Pull requests 12 Actions Projects 0 Security Insights More Code Issues Pull requests Actions Projects Security Insights Dismiss Join GitHub today GitHub is home to over 50 million developers working together to host and review code, manage projects, and build software together. Sign up GitHub is where the world builds software Millions of developers and companies build, ship, and maintain their software on GitHub — the largest and most advanced development platform in the world. Sign up for free Dismiss master 2 branches 0 tags Go to file Code Clone HTTPS GitHub CLI Use Git or checkout with SVN using the web URL. Work fast with our official CLI. Learn more. Open with GitHub Desktop Download ZIP Launching GitHub Desktop If nothing happens, download GitHub Desktop and try again. Go back Launching GitHub Desktop If nothing happens, download GitHub Desktop and try again. Go back Launching Xcode If nothing happens, download Xcode and try again. Go back Launching Visual Studio If nothing happens, download the GitHub extension for Visual Studio and try again. Go back Latest commit majornista Add openOnMouseover setting, and toggleButtonClass for responsive layout … 1 d445afc May 11, 2018 Add openOnMouseover setting, and toggleButtonClass for responsive layout To normalize behavior of top navigation links on desktop and mobile, the default behavior will be for the menu to remain closed on hover. Click should toggle the menu regardless of whether the link has a valid `href`. With `openOnMouseover: true`, hover will open the menu as before and with the menu open, clicking a top-level navigation item with a valid `href` should open the url. Add toggleButtonClass to specify a button that should toggle the menu in a responsive layout on mobile devices. Incorporate media queries for responsive layout breakpoints. d445afc 1 Git stats 36 commits Files Permalink Failed to load latest commit information. Type Name Latest commit message Commit time css Add openOnMouseover setting, and toggleButtonClass for responsive layout May 11, 2018 js Add openOnMouseover setting, and toggleButtonClass for responsive layout May 11, 2018 third-party/jquery initial commit Aug 26, 2013 LICENSE initial commit Aug 26, 2013 NOTICE initial commit Aug 26, 2013 README.md initial commit Aug 26, 2013 index.html Add openOnMouseover setting, and toggleButtonClass for responsive layout May 11, 2018 package.json Updating repo references Jul 8, 2016 View code README.md Accessible Mega Menu ========================= A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. It is modeled after the mega menu on adobe.com but has been simplified for use by others. An brief explanation of our interaction design choices can be found in a blog post at Mega menu accessibility on adobe.com. Content for the links and text within the mega menu comes from the Web Content Accessibility Guidelines (WCAG) 2.0. Keyboard Accessibility The accessible mega menu supports keyboard interaction modeled after the behavior described in the WAI-ARIA Menu or Menu bar (widget) design pattern, however we also try to respect users' general expectations for the behavior of links in a global navigation. To this end, the accessible mega menu implementation permits tab focus on each of the six top-level menu items. When one of the menu items has focus, pressing the Enter key, Spacebar or Down arrow will open the submenu panel, and pressing the Left or Right arrow key will shift focus to the adjacent menu item. Links within the submenu panels are included in the tab order when the panel is open. They can also be navigated with the arrow keys or by typing the first character in the link name, which speeds up keyboard navigation considerably. Pressing the Escape key closes the submenu and restores focus to the parent menu item. Screen Reader Accessibility The accessible mega menu models its use of WAI-ARIA Roles, States, and Properties after those described in the WAI-ARIA Menu or Menu bar (widget) design pattern with some notable exceptions, so that it behaves better with screen reader user expectations for global navigation. We don't use role=""menu"" for the menu container and role=""menuitem"" for each of the links therein, because if we do, assistive technology will no longer interpret the links as links, but instead, as menu items, and the links in our global navigation will no longer show up when a screen reader user executes a shortcut command to bring up a list of links in the page. We also want to maintain the semantic structure of the submenu panels in our mega menu; our links are organized into lists and separated by headings. Omitting role=""menu"" and role=""menuitem"" for the global navigation seems the safer way to go. Usage HTML The HTML structure for the mega menu is a nav element, or any other container element, containing a list. Each list item contains a link which is followed by a div or any other container element which will serve as the pop up panel. The panel can contain any html content; in the following example, each panel contains three lists of links. You can explicitly define groups within the panel, between which a user can navigate quickly using the left and right arrow keys; in the following example, the CSS class .sub-nav-group identifies a navigable group.     <nav>         <ul class=""nav-menu"">             <li class=""nav-item"">                 <a href=""?movie"">Movies</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=0"">Action &amp; Adventure</a></li>                         <li><a href=""?movie&genre=2"">Children &amp; Family</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=7"">Dramas</a></li>                         <li><a href=""?movie&genre=9"">Foreign</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=14"">Musicals</a></li>                         <li><a href=""?movie&genre=15"">Romance</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>             <li class=""nav-item"">                 <a href=""?tv"">TV Shows</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=20"">Classic TV</a></li>                         <li><a href=""?tv&genre=21"">Crime TV</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=27"">Reality TV</a></li>                         <li><a href=""?tv&genre=30"">TV Action</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=33"">TV Dramas</a></li>                         <li><a href=""?tv&genre=34"">TV Horror</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>         </ul>     </nav> By default, accessibleMegaMenu uses the the following CSS classes to define the top-level navigation items, panels, groups within the panels, and the hover, focus, and open states. It also defines a prefix for unique id strings, which are required to indicate the relationship of a top-level navigation item to the panel it controls.     defaults = {         /* unique ID's are required to indicate aria-owns, aria-controls and aria-labelledby */         uuidPrefix: ""accessible-megamenu"",                  /* default css class used to define the megamenu styling */         menuClass: ""accessible-megamenu"",                  /* default css class for a top-level navigation item in the megamenu */         topNavItemClass: ""accessible-megamenu-top-nav-item"",                  /* default css class for a megamenu panel */         panelClass: ""accessible-megamenu-panel"",                  /* default css class for a group of items within a megamenu panel */         panelGroupClass: ""accessible-megamenu-panel-group"",                  /* default css class for the hover state */         hoverClass: ""hover"",                  /* default css class for the focus state */         focusClass: ""focus"",                  /* default css class for the open state */         openClass: ""open""      } You can optionally override the defaults to use the CSS classes you may have already defined for your mega menu. JavaScript Be sure to include jQuery and the jquery-accessibleMegaMenu.js plugin script.     <script src=""//code.jquery.com/jquery-1.10.1.min.js""></script>     <script src=""js/jquery-accessibleMegaMenu.js""></script> The following initializes the first nav element in the document as an accessibleMegaMenu, with optional CSS class overrides.     $(""nav:first"").accessibleMegaMenu({         /* prefix for generated unique id attributes, which are required             to indicate aria-owns, aria-controls and aria-labelledby */         uuidPrefix: ""accessible-megamenu"",                  /* css class used to define the megamenu styling */         menuClass: ""nav-menu"",                  /* css class for a top-level navigation item in the megamenu */         topNavItemClass: ""nav-item"",                  /* css class for a megamenu panel */         panelClass: ""sub-nav"",                  /* css class for a group of items within a megamenu panel */         panelGroupClass: ""sub-nav-group"",                  /* css class for the hover state */         hoverClass: ""hover"",                  /* css class for the focus state */         focusClass: ""focus"",                  /* css class for the open state */         openClass: ""open""     }); CSS AccessibleMegaMenu handles the showing and hiding of panels by adding or removing a CSS class. No inline styles are added to hide elements or create animation between states. Following is some rudimentary CSS for our example which enables the showing/hiding of and the layout of lists panels in the mega menu.     /* mega menu list */     .nav-menu {         display: block;         position: relative;         list-style: none;         margin: 0;         padding: 0;         z-index: 15;     }     /* a top level navigation item in the mega menu */     .nav-item {         list-style: none;         display: inline-block;         padding: 0;         margin: 0;     }     /* first descendant link within a top level navigation item */     .nav-item > a {         position: relative;         display: inline-block;         padding: 0.5em 1em;         margin: 0 0 -1px 0;         border: 1px solid transparent;     }     /* focus/open states of first descendant link within a top level         navigation item */     .nav-item > a:focus,     .nav-item > a.open {         border: 1px solid #dedede;     }     /* open state of first descendant link within a top level         navigation item */     .nav-item > a.open {         background-color: #fff;         border-bottom: none;         z-index: 1;     }     /* sub-navigation panel */     .sub-nav {         position: absolute;         display: none;         top: 2.2em;         margin-top: -1px;         padding: 0.5em 1em;         border: 1px solid #dedede;         background-color: #fff;     }     /* sub-navigation panel open state */     .sub-nav.open {         display: block;     }     /* list of items within sub-navigation panel */     .sub-nav ul {         display: inline-block;         vertical-align: top;         margin: 0 1em 0 0;         padding: 0;     }     /* list item within sub-navigation panel */     .sub-nav li {         display: block;         list-style-type: none;         margin: 0;         padding: 0;     }   Putting it all together, here is the completed example:     <!doctype html>     <html lang=""en"">     <head>     <meta charset=""UTF-8"">     <title>Simple Accessible Mega Menu Example</title>     <style>         /* Rudimentary mega menu CSS for demonstration */             /* mega menu list */         .nav-menu {             display: block;             position: relative;             list-style: none;             margin: 0;             padding: 0;             z-index: 15;         }         /* a top level navigation item in the mega menu */         .nav-item {             list-style: none;             display: inline-block;             padding: 0;             margin: 0;         }         /* first descendant link within a top level navigation item */         .nav-item > a {             position: relative;             display: inline-block;             padding: 0.5em 1em;             margin: 0 0 -1px 0;             border: 1px solid transparent;         }         /* focus/open states of first descendant link within a top level             navigation item */         .nav-item > a:focus,         .nav-item > a.open {             border: 1px solid #dedede;         }         /* open state of first descendant link within a top level             navigation item */         .nav-item > a.open {             background-color: #fff;             border-bottom: none;             z-index: 1;         }         /* sub-navigation panel */         .sub-nav {             position: absolute;             display: none;             top: 2.2em;             margin-top: -1px;             padding: 0.5em 1em;             border: 1px solid #dedede;             background-color: #fff;         }         /* sub-navigation panel open state */         .sub-nav.open {             display: block;         }         /* list of items within sub-navigation panel */         .sub-nav ul {             display: inline-block;             vertical-align: top;             margin: 0 1em 0 0;             padding: 0;         }         /* list item within sub-navigation panel */         .sub-nav li {             display: block;             list-style-type: none;             margin: 0;             padding: 0;         }          </style>     </head>     <body>     <nav>         <ul class=""nav-menu"">             <li class=""nav-item"">                 <a href=""?movie"">Movies</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=0"">Action &amp; Adventure</a></li>                         <li><a href=""?movie&genre=2"">Children &amp; Family</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=7"">Dramas</a></li>                         <li><a href=""?movie&genre=9"">Foreign</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=14"">Musicals</a></li>                         <li><a href=""?movie&genre=15"">Romance</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>             <li class=""nav-item"">                 <a href=""?tv"">TV Shows</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=20"">Classic TV</a></li>                         <li><a href=""?tv&genre=21"">Crime TV</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=27"">Reality TV</a></li>                         <li><a href=""?tv&genre=30"">TV Action</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=33"">TV Dramas</a></li>                         <li><a href=""?tv&genre=34"">TV Horror</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>         </ul>     </nav>          <!-- include jquery -->     <script src=""//code.jquery.com/jquery-1.10.1.min.js""></script>     <!-- include the jquery-accessibleMegaMenu plugin script -->     <script src=""js/jquery-accessibleMegaMenu.js""></script>     <!-- initialize a selector as an accessibleMegaMenu -->     <script>         $(""nav:first"").accessibleMegaMenu({             /* prefix for generated unique id attributes, which are required                 to indicate aria-owns, aria-controls and aria-labelledby */             uuidPrefix: ""accessible-megamenu"",                          /* css class used to define the megamenu styling */             menuClass: ""nav-menu"",                          /* css class for a top-level navigation item in the megamenu */             topNavItemClass: ""nav-item"",                          /* css class for a megamenu panel */             panelClass: ""sub-nav"",                          /* css class for a group of items within a megamenu panel */             panelGroupClass: ""sub-nav-group"",                          /* css class for the hover state */             hoverClass: ""hover"",                          /* css class for the focus state */             focusClass: ""focus"",                          /* css class for the open state */             openClass: ""open""         });     </script>     </body>     </html> About A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. Resources Readme License Apache-2.0 License Releases No releases published Packages 0 No packages published Used by 14 + 6 Contributors 5 Languages HTML 70.8% CSS 27.3% JavaScript 1.9% © 2020 GitHub, Inc. Terms Privacy Cookie Preferences Security Status Help Contact GitHub Pricing API Training Blog About You can’t perform that action at this time. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session. We use optional third-party analytics cookies to understand how you use GitHub.com so we can build better products. Learn more. Accept Reject We use optional third-party analytics cookies to understand how you use GitHub.com so we can build better products. You can always update your selection by clicking Cookie Preferences at the bottom of the page. For more information, see our Privacy Statement. Essential cookies We use essential cookies to perform essential website functions, e.g. they're used to log you in. Learn more Always active Analytics cookies We use analytics cookies to understand how you use our websites so we can make them better, e.g. they're used to gather information about the pages you visit and how many clicks you need to accomplish a task. Learn more Accept Reject Save preferences"
346599,20201120,github.com,https://github.com/adobe-accessibility/Accessible-Mega-Menu,text/html,text/html,en,"GitHub - adobe-accessibility/Accessible-Mega-Menu: A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. Skip to content Sign up Why GitHub? Features → Code review Project management Integrations Actions Packages Security Team management Hosting Mobile Customer stories → Security → Team Enterprise Explore Explore GitHub → Learn & contribute Topics Collections Trending Learning Lab Open source guides Connect with others Events Community forum GitHub Education GitHub Stars program Marketplace Pricing Plans → Compare plans Contact Sales Nonprofit → Education → In this repository All GitHub ↵ Jump to ↵ No suggested jump to results In this repository All GitHub ↵ Jump to ↵ In this repository All GitHub ↵ Jump to ↵ Sign in Sign up {{ message }} adobe-accessibility / Accessible-Mega-Menu Watch 49 Star 573 Fork 190 A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. Apache-2.0 License 573 stars 190 forks Star Watch Code Issues 28 Pull requests 12 Actions Projects 0 Security Insights More Code Issues Pull requests Actions Projects Security Insights Dismiss Join GitHub today GitHub is home to over 50 million developers working together to host and review code, manage projects, and build software together. Sign up GitHub is where the world builds software Millions of developers and companies build, ship, and maintain their software on GitHub — the largest and most advanced development platform in the world. Sign up for free Dismiss master 2 branches 0 tags Go to file Code Clone HTTPS GitHub CLI Use Git or checkout with SVN using the web URL. Work fast with our official CLI. Learn more. Open with GitHub Desktop Download ZIP Launching GitHub Desktop If nothing happens, download GitHub Desktop and try again. Go back Launching GitHub Desktop If nothing happens, download GitHub Desktop and try again. Go back Launching Xcode If nothing happens, download Xcode and try again. Go back Launching Visual Studio If nothing happens, download the GitHub extension for Visual Studio and try again. Go back Latest commit majornista Add openOnMouseover setting, and toggleButtonClass for responsive layout … 1 d445afc May 11, 2018 Add openOnMouseover setting, and toggleButtonClass for responsive layout To normalize behavior of top navigation links on desktop and mobile, the default behavior will be for the menu to remain closed on hover. Click should toggle the menu regardless of whether the link has a valid `href`. With `openOnMouseover: true`, hover will open the menu as before and with the menu open, clicking a top-level navigation item with a valid `href` should open the url. Add toggleButtonClass to specify a button that should toggle the menu in a responsive layout on mobile devices. Incorporate media queries for responsive layout breakpoints. d445afc 1 Git stats 36 commits Files Permalink Failed to load latest commit information. Type Name Latest commit message Commit time css Add openOnMouseover setting, and toggleButtonClass for responsive layout May 11, 2018 js Add openOnMouseover setting, and toggleButtonClass for responsive layout May 11, 2018 third-party/jquery initial commit Aug 26, 2013 LICENSE initial commit Aug 26, 2013 NOTICE initial commit Aug 26, 2013 README.md initial commit Aug 26, 2013 index.html Add openOnMouseover setting, and toggleButtonClass for responsive layout May 11, 2018 package.json Updating repo references Jul 8, 2016 View code README.md Accessible Mega Menu ========================= A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. It is modeled after the mega menu on adobe.com but has been simplified for use by others. An brief explanation of our interaction design choices can be found in a blog post at Mega menu accessibility on adobe.com. Content for the links and text within the mega menu comes from the Web Content Accessibility Guidelines (WCAG) 2.0. Keyboard Accessibility The accessible mega menu supports keyboard interaction modeled after the behavior described in the WAI-ARIA Menu or Menu bar (widget) design pattern, however we also try to respect users' general expectations for the behavior of links in a global navigation. To this end, the accessible mega menu implementation permits tab focus on each of the six top-level menu items. When one of the menu items has focus, pressing the Enter key, Spacebar or Down arrow will open the submenu panel, and pressing the Left or Right arrow key will shift focus to the adjacent menu item. Links within the submenu panels are included in the tab order when the panel is open. They can also be navigated with the arrow keys or by typing the first character in the link name, which speeds up keyboard navigation considerably. Pressing the Escape key closes the submenu and restores focus to the parent menu item. Screen Reader Accessibility The accessible mega menu models its use of WAI-ARIA Roles, States, and Properties after those described in the WAI-ARIA Menu or Menu bar (widget) design pattern with some notable exceptions, so that it behaves better with screen reader user expectations for global navigation. We don't use role=""menu"" for the menu container and role=""menuitem"" for each of the links therein, because if we do, assistive technology will no longer interpret the links as links, but instead, as menu items, and the links in our global navigation will no longer show up when a screen reader user executes a shortcut command to bring up a list of links in the page. We also want to maintain the semantic structure of the submenu panels in our mega menu; our links are organized into lists and separated by headings. Omitting role=""menu"" and role=""menuitem"" for the global navigation seems the safer way to go. Usage HTML The HTML structure for the mega menu is a nav element, or any other container element, containing a list. Each list item contains a link which is followed by a div or any other container element which will serve as the pop up panel. The panel can contain any html content; in the following example, each panel contains three lists of links. You can explicitly define groups within the panel, between which a user can navigate quickly using the left and right arrow keys; in the following example, the CSS class .sub-nav-group identifies a navigable group.     <nav>         <ul class=""nav-menu"">             <li class=""nav-item"">                 <a href=""?movie"">Movies</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=0"">Action &amp; Adventure</a></li>                         <li><a href=""?movie&genre=2"">Children &amp; Family</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=7"">Dramas</a></li>                         <li><a href=""?movie&genre=9"">Foreign</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=14"">Musicals</a></li>                         <li><a href=""?movie&genre=15"">Romance</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>             <li class=""nav-item"">                 <a href=""?tv"">TV Shows</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=20"">Classic TV</a></li>                         <li><a href=""?tv&genre=21"">Crime TV</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=27"">Reality TV</a></li>                         <li><a href=""?tv&genre=30"">TV Action</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=33"">TV Dramas</a></li>                         <li><a href=""?tv&genre=34"">TV Horror</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>         </ul>     </nav> By default, accessibleMegaMenu uses the the following CSS classes to define the top-level navigation items, panels, groups within the panels, and the hover, focus, and open states. It also defines a prefix for unique id strings, which are required to indicate the relationship of a top-level navigation item to the panel it controls.     defaults = {         /* unique ID's are required to indicate aria-owns, aria-controls and aria-labelledby */         uuidPrefix: ""accessible-megamenu"",                  /* default css class used to define the megamenu styling */         menuClass: ""accessible-megamenu"",                  /* default css class for a top-level navigation item in the megamenu */         topNavItemClass: ""accessible-megamenu-top-nav-item"",                  /* default css class for a megamenu panel */         panelClass: ""accessible-megamenu-panel"",                  /* default css class for a group of items within a megamenu panel */         panelGroupClass: ""accessible-megamenu-panel-group"",                  /* default css class for the hover state */         hoverClass: ""hover"",                  /* default css class for the focus state */         focusClass: ""focus"",                  /* default css class for the open state */         openClass: ""open""      } You can optionally override the defaults to use the CSS classes you may have already defined for your mega menu. JavaScript Be sure to include jQuery and the jquery-accessibleMegaMenu.js plugin script.     <script src=""//code.jquery.com/jquery-1.10.1.min.js""></script>     <script src=""js/jquery-accessibleMegaMenu.js""></script> The following initializes the first nav element in the document as an accessibleMegaMenu, with optional CSS class overrides.     $(""nav:first"").accessibleMegaMenu({         /* prefix for generated unique id attributes, which are required             to indicate aria-owns, aria-controls and aria-labelledby */         uuidPrefix: ""accessible-megamenu"",                  /* css class used to define the megamenu styling */         menuClass: ""nav-menu"",                  /* css class for a top-level navigation item in the megamenu */         topNavItemClass: ""nav-item"",                  /* css class for a megamenu panel */         panelClass: ""sub-nav"",                  /* css class for a group of items within a megamenu panel */         panelGroupClass: ""sub-nav-group"",                  /* css class for the hover state */         hoverClass: ""hover"",                  /* css class for the focus state */         focusClass: ""focus"",                  /* css class for the open state */         openClass: ""open""     }); CSS AccessibleMegaMenu handles the showing and hiding of panels by adding or removing a CSS class. No inline styles are added to hide elements or create animation between states. Following is some rudimentary CSS for our example which enables the showing/hiding of and the layout of lists panels in the mega menu.     /* mega menu list */     .nav-menu {         display: block;         position: relative;         list-style: none;         margin: 0;         padding: 0;         z-index: 15;     }     /* a top level navigation item in the mega menu */     .nav-item {         list-style: none;         display: inline-block;         padding: 0;         margin: 0;     }     /* first descendant link within a top level navigation item */     .nav-item > a {         position: relative;         display: inline-block;         padding: 0.5em 1em;         margin: 0 0 -1px 0;         border: 1px solid transparent;     }     /* focus/open states of first descendant link within a top level         navigation item */     .nav-item > a:focus,     .nav-item > a.open {         border: 1px solid #dedede;     }     /* open state of first descendant link within a top level         navigation item */     .nav-item > a.open {         background-color: #fff;         border-bottom: none;         z-index: 1;     }     /* sub-navigation panel */     .sub-nav {         position: absolute;         display: none;         top: 2.2em;         margin-top: -1px;         padding: 0.5em 1em;         border: 1px solid #dedede;         background-color: #fff;     }     /* sub-navigation panel open state */     .sub-nav.open {         display: block;     }     /* list of items within sub-navigation panel */     .sub-nav ul {         display: inline-block;         vertical-align: top;         margin: 0 1em 0 0;         padding: 0;     }     /* list item within sub-navigation panel */     .sub-nav li {         display: block;         list-style-type: none;         margin: 0;         padding: 0;     }   Putting it all together, here is the completed example:     <!doctype html>     <html lang=""en"">     <head>     <meta charset=""UTF-8"">     <title>Simple Accessible Mega Menu Example</title>     <style>         /* Rudimentary mega menu CSS for demonstration */             /* mega menu list */         .nav-menu {             display: block;             position: relative;             list-style: none;             margin: 0;             padding: 0;             z-index: 15;         }         /* a top level navigation item in the mega menu */         .nav-item {             list-style: none;             display: inline-block;             padding: 0;             margin: 0;         }         /* first descendant link within a top level navigation item */         .nav-item > a {             position: relative;             display: inline-block;             padding: 0.5em 1em;             margin: 0 0 -1px 0;             border: 1px solid transparent;         }         /* focus/open states of first descendant link within a top level             navigation item */         .nav-item > a:focus,         .nav-item > a.open {             border: 1px solid #dedede;         }         /* open state of first descendant link within a top level             navigation item */         .nav-item > a.open {             background-color: #fff;             border-bottom: none;             z-index: 1;         }         /* sub-navigation panel */         .sub-nav {             position: absolute;             display: none;             top: 2.2em;             margin-top: -1px;             padding: 0.5em 1em;             border: 1px solid #dedede;             background-color: #fff;         }         /* sub-navigation panel open state */         .sub-nav.open {             display: block;         }         /* list of items within sub-navigation panel */         .sub-nav ul {             display: inline-block;             vertical-align: top;             margin: 0 1em 0 0;             padding: 0;         }         /* list item within sub-navigation panel */         .sub-nav li {             display: block;             list-style-type: none;             margin: 0;             padding: 0;         }          </style>     </head>     <body>     <nav>         <ul class=""nav-menu"">             <li class=""nav-item"">                 <a href=""?movie"">Movies</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=0"">Action &amp; Adventure</a></li>                         <li><a href=""?movie&genre=2"">Children &amp; Family</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=7"">Dramas</a></li>                         <li><a href=""?movie&genre=9"">Foreign</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=14"">Musicals</a></li>                         <li><a href=""?movie&genre=15"">Romance</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>             <li class=""nav-item"">                 <a href=""?tv"">TV Shows</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=20"">Classic TV</a></li>                         <li><a href=""?tv&genre=21"">Crime TV</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=27"">Reality TV</a></li>                         <li><a href=""?tv&genre=30"">TV Action</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=33"">TV Dramas</a></li>                         <li><a href=""?tv&genre=34"">TV Horror</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>         </ul>     </nav>          <!-- include jquery -->     <script src=""//code.jquery.com/jquery-1.10.1.min.js""></script>     <!-- include the jquery-accessibleMegaMenu plugin script -->     <script src=""js/jquery-accessibleMegaMenu.js""></script>     <!-- initialize a selector as an accessibleMegaMenu -->     <script>         $(""nav:first"").accessibleMegaMenu({             /* prefix for generated unique id attributes, which are required                 to indicate aria-owns, aria-controls and aria-labelledby */             uuidPrefix: ""accessible-megamenu"",                          /* css class used to define the megamenu styling */             menuClass: ""nav-menu"",                          /* css class for a top-level navigation item in the megamenu */             topNavItemClass: ""nav-item"",                          /* css class for a megamenu panel */             panelClass: ""sub-nav"",                          /* css class for a group of items within a megamenu panel */             panelGroupClass: ""sub-nav-group"",                          /* css class for the hover state */             hoverClass: ""hover"",                          /* css class for the focus state */             focusClass: ""focus"",                          /* css class for the open state */             openClass: ""open""         });     </script>     </body>     </html> About A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. Resources Readme License Apache-2.0 License Releases No releases published Packages 0 No packages published Used by 14 + 6 Contributors 5 Languages HTML 70.8% CSS 27.3% JavaScript 1.9% © 2020 GitHub, Inc. Terms Privacy Cookie Preferences Security Status Help Contact GitHub Pricing API Training Blog About You can’t perform that action at this time. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session. We use optional third-party analytics cookies to understand how you use GitHub.com so we can build better products. Learn more. Accept Reject We use optional third-party analytics cookies to understand how you use GitHub.com so we can build better products. You can always update your selection by clicking Cookie Preferences at the bottom of the page. For more information, see our Privacy Statement. Essential cookies We use essential cookies to perform essential website functions, e.g. they're used to log you in. Learn more Always active Analytics cookies We use analytics cookies to understand how you use our websites so we can make them better, e.g. they're used to gather information about the pages you visit and how many clicks you need to accomplish a task. Learn more Accept Reject Save preferences"
357266,20201127,github.com,https://github.com/adobe-accessibility/Accessible-Mega-Menu,text/html,text/html,en,"GitHub - adobe-accessibility/Accessible-Mega-Menu: A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. Skip to content Sign up Why GitHub? Features → Code review Project management Integrations Actions Packages Security Team management Hosting Mobile Customer stories → Security → Team Enterprise Explore Explore GitHub → Learn & contribute Topics Collections Trending Learning Lab Open source guides Connect with others Events Community forum GitHub Education GitHub Stars program Marketplace Pricing Plans → Compare plans Contact Sales Nonprofit → Education → In this repository All GitHub ↵ Jump to ↵ No suggested jump to results In this repository All GitHub ↵ Jump to ↵ In this repository All GitHub ↵ Jump to ↵ Sign in Sign up {{ message }} adobe-accessibility / Accessible-Mega-Menu Watch 49 Star 572 Fork 189 A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. Apache-2.0 License 572 stars 189 forks Star Watch Code Issues 28 Pull requests 12 Actions Projects 0 Security Insights More Code Issues Pull requests Actions Projects Security Insights Dismiss Join GitHub today GitHub is home to over 50 million developers working together to host and review code, manage projects, and build software together. Sign up GitHub is where the world builds software Millions of developers and companies build, ship, and maintain their software on GitHub — the largest and most advanced development platform in the world. Sign up for free Dismiss master 2 branches 0 tags Go to file Code Clone HTTPS GitHub CLI Use Git or checkout with SVN using the web URL. Work fast with our official CLI. Learn more. Open with GitHub Desktop Download ZIP Launching GitHub Desktop If nothing happens, download GitHub Desktop and try again. Go back Launching GitHub Desktop If nothing happens, download GitHub Desktop and try again. Go back Launching Xcode If nothing happens, download Xcode and try again. Go back Launching Visual Studio If nothing happens, download the GitHub extension for Visual Studio and try again. Go back Latest commit majornista Add openOnMouseover setting, and toggleButtonClass for responsive layout … 1 d445afc May 11, 2018 Add openOnMouseover setting, and toggleButtonClass for responsive layout To normalize behavior of top navigation links on desktop and mobile, the default behavior will be for the menu to remain closed on hover. Click should toggle the menu regardless of whether the link has a valid `href`. With `openOnMouseover: true`, hover will open the menu as before and with the menu open, clicking a top-level navigation item with a valid `href` should open the url. Add toggleButtonClass to specify a button that should toggle the menu in a responsive layout on mobile devices. Incorporate media queries for responsive layout breakpoints. d445afc 1 Git stats 36 commits Files Permalink Failed to load latest commit information. Type Name Latest commit message Commit time css Add openOnMouseover setting, and toggleButtonClass for responsive layout May 11, 2018 js Add openOnMouseover setting, and toggleButtonClass for responsive layout May 11, 2018 third-party/jquery initial commit Aug 26, 2013 LICENSE initial commit Aug 26, 2013 NOTICE initial commit Aug 26, 2013 README.md initial commit Aug 26, 2013 index.html Add openOnMouseover setting, and toggleButtonClass for responsive layout May 11, 2018 package.json Updating repo references Jul 8, 2016 View code README.md Accessible Mega Menu ========================= A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. It is modeled after the mega menu on adobe.com but has been simplified for use by others. An brief explanation of our interaction design choices can be found in a blog post at Mega menu accessibility on adobe.com. Content for the links and text within the mega menu comes from the Web Content Accessibility Guidelines (WCAG) 2.0. Keyboard Accessibility The accessible mega menu supports keyboard interaction modeled after the behavior described in the WAI-ARIA Menu or Menu bar (widget) design pattern, however we also try to respect users' general expectations for the behavior of links in a global navigation. To this end, the accessible mega menu implementation permits tab focus on each of the six top-level menu items. When one of the menu items has focus, pressing the Enter key, Spacebar or Down arrow will open the submenu panel, and pressing the Left or Right arrow key will shift focus to the adjacent menu item. Links within the submenu panels are included in the tab order when the panel is open. They can also be navigated with the arrow keys or by typing the first character in the link name, which speeds up keyboard navigation considerably. Pressing the Escape key closes the submenu and restores focus to the parent menu item. Screen Reader Accessibility The accessible mega menu models its use of WAI-ARIA Roles, States, and Properties after those described in the WAI-ARIA Menu or Menu bar (widget) design pattern with some notable exceptions, so that it behaves better with screen reader user expectations for global navigation. We don't use role=""menu"" for the menu container and role=""menuitem"" for each of the links therein, because if we do, assistive technology will no longer interpret the links as links, but instead, as menu items, and the links in our global navigation will no longer show up when a screen reader user executes a shortcut command to bring up a list of links in the page. We also want to maintain the semantic structure of the submenu panels in our mega menu; our links are organized into lists and separated by headings. Omitting role=""menu"" and role=""menuitem"" for the global navigation seems the safer way to go. Usage HTML The HTML structure for the mega menu is a nav element, or any other container element, containing a list. Each list item contains a link which is followed by a div or any other container element which will serve as the pop up panel. The panel can contain any html content; in the following example, each panel contains three lists of links. You can explicitly define groups within the panel, between which a user can navigate quickly using the left and right arrow keys; in the following example, the CSS class .sub-nav-group identifies a navigable group.     <nav>         <ul class=""nav-menu"">             <li class=""nav-item"">                 <a href=""?movie"">Movies</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=0"">Action &amp; Adventure</a></li>                         <li><a href=""?movie&genre=2"">Children &amp; Family</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=7"">Dramas</a></li>                         <li><a href=""?movie&genre=9"">Foreign</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=14"">Musicals</a></li>                         <li><a href=""?movie&genre=15"">Romance</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>             <li class=""nav-item"">                 <a href=""?tv"">TV Shows</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=20"">Classic TV</a></li>                         <li><a href=""?tv&genre=21"">Crime TV</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=27"">Reality TV</a></li>                         <li><a href=""?tv&genre=30"">TV Action</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=33"">TV Dramas</a></li>                         <li><a href=""?tv&genre=34"">TV Horror</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>         </ul>     </nav> By default, accessibleMegaMenu uses the the following CSS classes to define the top-level navigation items, panels, groups within the panels, and the hover, focus, and open states. It also defines a prefix for unique id strings, which are required to indicate the relationship of a top-level navigation item to the panel it controls.     defaults = {         /* unique ID's are required to indicate aria-owns, aria-controls and aria-labelledby */         uuidPrefix: ""accessible-megamenu"",                  /* default css class used to define the megamenu styling */         menuClass: ""accessible-megamenu"",                  /* default css class for a top-level navigation item in the megamenu */         topNavItemClass: ""accessible-megamenu-top-nav-item"",                  /* default css class for a megamenu panel */         panelClass: ""accessible-megamenu-panel"",                  /* default css class for a group of items within a megamenu panel */         panelGroupClass: ""accessible-megamenu-panel-group"",                  /* default css class for the hover state */         hoverClass: ""hover"",                  /* default css class for the focus state */         focusClass: ""focus"",                  /* default css class for the open state */         openClass: ""open""      } You can optionally override the defaults to use the CSS classes you may have already defined for your mega menu. JavaScript Be sure to include jQuery and the jquery-accessibleMegaMenu.js plugin script.     <script src=""//code.jquery.com/jquery-1.10.1.min.js""></script>     <script src=""js/jquery-accessibleMegaMenu.js""></script> The following initializes the first nav element in the document as an accessibleMegaMenu, with optional CSS class overrides.     $(""nav:first"").accessibleMegaMenu({         /* prefix for generated unique id attributes, which are required             to indicate aria-owns, aria-controls and aria-labelledby */         uuidPrefix: ""accessible-megamenu"",                  /* css class used to define the megamenu styling */         menuClass: ""nav-menu"",                  /* css class for a top-level navigation item in the megamenu */         topNavItemClass: ""nav-item"",                  /* css class for a megamenu panel */         panelClass: ""sub-nav"",                  /* css class for a group of items within a megamenu panel */         panelGroupClass: ""sub-nav-group"",                  /* css class for the hover state */         hoverClass: ""hover"",                  /* css class for the focus state */         focusClass: ""focus"",                  /* css class for the open state */         openClass: ""open""     }); CSS AccessibleMegaMenu handles the showing and hiding of panels by adding or removing a CSS class. No inline styles are added to hide elements or create animation between states. Following is some rudimentary CSS for our example which enables the showing/hiding of and the layout of lists panels in the mega menu.     /* mega menu list */     .nav-menu {         display: block;         position: relative;         list-style: none;         margin: 0;         padding: 0;         z-index: 15;     }     /* a top level navigation item in the mega menu */     .nav-item {         list-style: none;         display: inline-block;         padding: 0;         margin: 0;     }     /* first descendant link within a top level navigation item */     .nav-item > a {         position: relative;         display: inline-block;         padding: 0.5em 1em;         margin: 0 0 -1px 0;         border: 1px solid transparent;     }     /* focus/open states of first descendant link within a top level         navigation item */     .nav-item > a:focus,     .nav-item > a.open {         border: 1px solid #dedede;     }     /* open state of first descendant link within a top level         navigation item */     .nav-item > a.open {         background-color: #fff;         border-bottom: none;         z-index: 1;     }     /* sub-navigation panel */     .sub-nav {         position: absolute;         display: none;         top: 2.2em;         margin-top: -1px;         padding: 0.5em 1em;         border: 1px solid #dedede;         background-color: #fff;     }     /* sub-navigation panel open state */     .sub-nav.open {         display: block;     }     /* list of items within sub-navigation panel */     .sub-nav ul {         display: inline-block;         vertical-align: top;         margin: 0 1em 0 0;         padding: 0;     }     /* list item within sub-navigation panel */     .sub-nav li {         display: block;         list-style-type: none;         margin: 0;         padding: 0;     }   Putting it all together, here is the completed example:     <!doctype html>     <html lang=""en"">     <head>     <meta charset=""UTF-8"">     <title>Simple Accessible Mega Menu Example</title>     <style>         /* Rudimentary mega menu CSS for demonstration */             /* mega menu list */         .nav-menu {             display: block;             position: relative;             list-style: none;             margin: 0;             padding: 0;             z-index: 15;         }         /* a top level navigation item in the mega menu */         .nav-item {             list-style: none;             display: inline-block;             padding: 0;             margin: 0;         }         /* first descendant link within a top level navigation item */         .nav-item > a {             position: relative;             display: inline-block;             padding: 0.5em 1em;             margin: 0 0 -1px 0;             border: 1px solid transparent;         }         /* focus/open states of first descendant link within a top level             navigation item */         .nav-item > a:focus,         .nav-item > a.open {             border: 1px solid #dedede;         }         /* open state of first descendant link within a top level             navigation item */         .nav-item > a.open {             background-color: #fff;             border-bottom: none;             z-index: 1;         }         /* sub-navigation panel */         .sub-nav {             position: absolute;             display: none;             top: 2.2em;             margin-top: -1px;             padding: 0.5em 1em;             border: 1px solid #dedede;             background-color: #fff;         }         /* sub-navigation panel open state */         .sub-nav.open {             display: block;         }         /* list of items within sub-navigation panel */         .sub-nav ul {             display: inline-block;             vertical-align: top;             margin: 0 1em 0 0;             padding: 0;         }         /* list item within sub-navigation panel */         .sub-nav li {             display: block;             list-style-type: none;             margin: 0;             padding: 0;         }          </style>     </head>     <body>     <nav>         <ul class=""nav-menu"">             <li class=""nav-item"">                 <a href=""?movie"">Movies</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=0"">Action &amp; Adventure</a></li>                         <li><a href=""?movie&genre=2"">Children &amp; Family</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=7"">Dramas</a></li>                         <li><a href=""?movie&genre=9"">Foreign</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=14"">Musicals</a></li>                         <li><a href=""?movie&genre=15"">Romance</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>             <li class=""nav-item"">                 <a href=""?tv"">TV Shows</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=20"">Classic TV</a></li>                         <li><a href=""?tv&genre=21"">Crime TV</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=27"">Reality TV</a></li>                         <li><a href=""?tv&genre=30"">TV Action</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=33"">TV Dramas</a></li>                         <li><a href=""?tv&genre=34"">TV Horror</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>         </ul>     </nav>          <!-- include jquery -->     <script src=""//code.jquery.com/jquery-1.10.1.min.js""></script>     <!-- include the jquery-accessibleMegaMenu plugin script -->     <script src=""js/jquery-accessibleMegaMenu.js""></script>     <!-- initialize a selector as an accessibleMegaMenu -->     <script>         $(""nav:first"").accessibleMegaMenu({             /* prefix for generated unique id attributes, which are required                 to indicate aria-owns, aria-controls and aria-labelledby */             uuidPrefix: ""accessible-megamenu"",                          /* css class used to define the megamenu styling */             menuClass: ""nav-menu"",                          /* css class for a top-level navigation item in the megamenu */             topNavItemClass: ""nav-item"",                          /* css class for a megamenu panel */             panelClass: ""sub-nav"",                          /* css class for a group of items within a megamenu panel */             panelGroupClass: ""sub-nav-group"",                          /* css class for the hover state */             hoverClass: ""hover"",                          /* css class for the focus state */             focusClass: ""focus"",                          /* css class for the open state */             openClass: ""open""         });     </script>     </body>     </html> About A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. Resources Readme License Apache-2.0 License Releases No releases published Packages 0 No packages published Used by 14 + 6 Contributors 5 Languages HTML 70.8% CSS 27.3% JavaScript 1.9% © 2020 GitHub, Inc. Terms Privacy Cookie Preferences Security Status Help Contact GitHub Pricing API Training Blog About You can’t perform that action at this time. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session. We use optional third-party analytics cookies to understand how you use GitHub.com so we can build better products. Learn more. Accept Reject We use optional third-party analytics cookies to understand how you use GitHub.com so we can build better products. You can always update your selection by clicking Cookie Preferences at the bottom of the page. For more information, see our Privacy Statement. Essential cookies We use essential cookies to perform essential website functions, e.g. they're used to log you in. Learn more Always active Analytics cookies We use analytics cookies to understand how you use our websites so we can make them better, e.g. they're used to gather information about the pages you visit and how many clicks you need to accomplish a task. Learn more Accept Reject Save preferences"
368882,20201204,github.com,https://github.com/adobe-accessibility/Accessible-Mega-Menu,text/html,text/html,en,"GitHub - adobe-accessibility/Accessible-Mega-Menu: A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. Skip to content Sign up Why GitHub? Features → Code review Project management Integrations Actions Packages Security Team management Hosting Mobile Customer stories → Security → Team Enterprise Explore Explore GitHub → Learn & contribute Topics Collections Trending Learning Lab Open source guides Connect with others Events Community forum GitHub Education GitHub Stars program Marketplace Pricing Plans → Compare plans Contact Sales Nonprofit → Education → In this repository All GitHub ↵ Jump to ↵ No suggested jump to results In this repository All GitHub ↵ Jump to ↵ In this repository All GitHub ↵ Jump to ↵ Sign in Sign up {{ message }} adobe-accessibility / Accessible-Mega-Menu Watch 49 Star 572 Fork 189 A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. Apache-2.0 License 572 stars 189 forks Star Watch Code Issues 28 Pull requests 12 Actions Projects 0 Security Insights More Code Issues Pull requests Actions Projects Security Insights Dismiss Join GitHub today GitHub is home to over 50 million developers working together to host and review code, manage projects, and build software together. Sign up GitHub is where the world builds software Millions of developers and companies build, ship, and maintain their software on GitHub — the largest and most advanced development platform in the world. Sign up for free Dismiss master 2 branches 0 tags Go to file Code Clone HTTPS GitHub CLI Use Git or checkout with SVN using the web URL. Work fast with our official CLI. Learn more. Open with GitHub Desktop Download ZIP Launching GitHub Desktop If nothing happens, download GitHub Desktop and try again. Go back Launching GitHub Desktop If nothing happens, download GitHub Desktop and try again. Go back Launching Xcode If nothing happens, download Xcode and try again. Go back Launching Visual Studio If nothing happens, download the GitHub extension for Visual Studio and try again. Go back Latest commit majornista Add openOnMouseover setting, and toggleButtonClass for responsive layout … 1 d445afc May 11, 2018 Add openOnMouseover setting, and toggleButtonClass for responsive layout To normalize behavior of top navigation links on desktop and mobile, the default behavior will be for the menu to remain closed on hover. Click should toggle the menu regardless of whether the link has a valid `href`. With `openOnMouseover: true`, hover will open the menu as before and with the menu open, clicking a top-level navigation item with a valid `href` should open the url. Add toggleButtonClass to specify a button that should toggle the menu in a responsive layout on mobile devices. Incorporate media queries for responsive layout breakpoints. d445afc 1 Git stats 36 commits Files Permalink Failed to load latest commit information. Type Name Latest commit message Commit time css Add openOnMouseover setting, and toggleButtonClass for responsive layout May 11, 2018 js Add openOnMouseover setting, and toggleButtonClass for responsive layout May 11, 2018 third-party/jquery initial commit Aug 26, 2013 LICENSE initial commit Aug 26, 2013 NOTICE initial commit Aug 26, 2013 README.md initial commit Aug 26, 2013 index.html Add openOnMouseover setting, and toggleButtonClass for responsive layout May 11, 2018 package.json Updating repo references Jul 8, 2016 View code README.md Accessible Mega Menu ========================= A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. It is modeled after the mega menu on adobe.com but has been simplified for use by others. An brief explanation of our interaction design choices can be found in a blog post at Mega menu accessibility on adobe.com. Content for the links and text within the mega menu comes from the Web Content Accessibility Guidelines (WCAG) 2.0. Keyboard Accessibility The accessible mega menu supports keyboard interaction modeled after the behavior described in the WAI-ARIA Menu or Menu bar (widget) design pattern, however we also try to respect users' general expectations for the behavior of links in a global navigation. To this end, the accessible mega menu implementation permits tab focus on each of the six top-level menu items. When one of the menu items has focus, pressing the Enter key, Spacebar or Down arrow will open the submenu panel, and pressing the Left or Right arrow key will shift focus to the adjacent menu item. Links within the submenu panels are included in the tab order when the panel is open. They can also be navigated with the arrow keys or by typing the first character in the link name, which speeds up keyboard navigation considerably. Pressing the Escape key closes the submenu and restores focus to the parent menu item. Screen Reader Accessibility The accessible mega menu models its use of WAI-ARIA Roles, States, and Properties after those described in the WAI-ARIA Menu or Menu bar (widget) design pattern with some notable exceptions, so that it behaves better with screen reader user expectations for global navigation. We don't use role=""menu"" for the menu container and role=""menuitem"" for each of the links therein, because if we do, assistive technology will no longer interpret the links as links, but instead, as menu items, and the links in our global navigation will no longer show up when a screen reader user executes a shortcut command to bring up a list of links in the page. We also want to maintain the semantic structure of the submenu panels in our mega menu; our links are organized into lists and separated by headings. Omitting role=""menu"" and role=""menuitem"" for the global navigation seems the safer way to go. Usage HTML The HTML structure for the mega menu is a nav element, or any other container element, containing a list. Each list item contains a link which is followed by a div or any other container element which will serve as the pop up panel. The panel can contain any html content; in the following example, each panel contains three lists of links. You can explicitly define groups within the panel, between which a user can navigate quickly using the left and right arrow keys; in the following example, the CSS class .sub-nav-group identifies a navigable group.     <nav>         <ul class=""nav-menu"">             <li class=""nav-item"">                 <a href=""?movie"">Movies</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=0"">Action &amp; Adventure</a></li>                         <li><a href=""?movie&genre=2"">Children &amp; Family</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=7"">Dramas</a></li>                         <li><a href=""?movie&genre=9"">Foreign</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=14"">Musicals</a></li>                         <li><a href=""?movie&genre=15"">Romance</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>             <li class=""nav-item"">                 <a href=""?tv"">TV Shows</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=20"">Classic TV</a></li>                         <li><a href=""?tv&genre=21"">Crime TV</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=27"">Reality TV</a></li>                         <li><a href=""?tv&genre=30"">TV Action</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=33"">TV Dramas</a></li>                         <li><a href=""?tv&genre=34"">TV Horror</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>         </ul>     </nav> By default, accessibleMegaMenu uses the the following CSS classes to define the top-level navigation items, panels, groups within the panels, and the hover, focus, and open states. It also defines a prefix for unique id strings, which are required to indicate the relationship of a top-level navigation item to the panel it controls.     defaults = {         /* unique ID's are required to indicate aria-owns, aria-controls and aria-labelledby */         uuidPrefix: ""accessible-megamenu"",                  /* default css class used to define the megamenu styling */         menuClass: ""accessible-megamenu"",                  /* default css class for a top-level navigation item in the megamenu */         topNavItemClass: ""accessible-megamenu-top-nav-item"",                  /* default css class for a megamenu panel */         panelClass: ""accessible-megamenu-panel"",                  /* default css class for a group of items within a megamenu panel */         panelGroupClass: ""accessible-megamenu-panel-group"",                  /* default css class for the hover state */         hoverClass: ""hover"",                  /* default css class for the focus state */         focusClass: ""focus"",                  /* default css class for the open state */         openClass: ""open""      } You can optionally override the defaults to use the CSS classes you may have already defined for your mega menu. JavaScript Be sure to include jQuery and the jquery-accessibleMegaMenu.js plugin script.     <script src=""//code.jquery.com/jquery-1.10.1.min.js""></script>     <script src=""js/jquery-accessibleMegaMenu.js""></script> The following initializes the first nav element in the document as an accessibleMegaMenu, with optional CSS class overrides.     $(""nav:first"").accessibleMegaMenu({         /* prefix for generated unique id attributes, which are required             to indicate aria-owns, aria-controls and aria-labelledby */         uuidPrefix: ""accessible-megamenu"",                  /* css class used to define the megamenu styling */         menuClass: ""nav-menu"",                  /* css class for a top-level navigation item in the megamenu */         topNavItemClass: ""nav-item"",                  /* css class for a megamenu panel */         panelClass: ""sub-nav"",                  /* css class for a group of items within a megamenu panel */         panelGroupClass: ""sub-nav-group"",                  /* css class for the hover state */         hoverClass: ""hover"",                  /* css class for the focus state */         focusClass: ""focus"",                  /* css class for the open state */         openClass: ""open""     }); CSS AccessibleMegaMenu handles the showing and hiding of panels by adding or removing a CSS class. No inline styles are added to hide elements or create animation between states. Following is some rudimentary CSS for our example which enables the showing/hiding of and the layout of lists panels in the mega menu.     /* mega menu list */     .nav-menu {         display: block;         position: relative;         list-style: none;         margin: 0;         padding: 0;         z-index: 15;     }     /* a top level navigation item in the mega menu */     .nav-item {         list-style: none;         display: inline-block;         padding: 0;         margin: 0;     }     /* first descendant link within a top level navigation item */     .nav-item > a {         position: relative;         display: inline-block;         padding: 0.5em 1em;         margin: 0 0 -1px 0;         border: 1px solid transparent;     }     /* focus/open states of first descendant link within a top level         navigation item */     .nav-item > a:focus,     .nav-item > a.open {         border: 1px solid #dedede;     }     /* open state of first descendant link within a top level         navigation item */     .nav-item > a.open {         background-color: #fff;         border-bottom: none;         z-index: 1;     }     /* sub-navigation panel */     .sub-nav {         position: absolute;         display: none;         top: 2.2em;         margin-top: -1px;         padding: 0.5em 1em;         border: 1px solid #dedede;         background-color: #fff;     }     /* sub-navigation panel open state */     .sub-nav.open {         display: block;     }     /* list of items within sub-navigation panel */     .sub-nav ul {         display: inline-block;         vertical-align: top;         margin: 0 1em 0 0;         padding: 0;     }     /* list item within sub-navigation panel */     .sub-nav li {         display: block;         list-style-type: none;         margin: 0;         padding: 0;     }   Putting it all together, here is the completed example:     <!doctype html>     <html lang=""en"">     <head>     <meta charset=""UTF-8"">     <title>Simple Accessible Mega Menu Example</title>     <style>         /* Rudimentary mega menu CSS for demonstration */             /* mega menu list */         .nav-menu {             display: block;             position: relative;             list-style: none;             margin: 0;             padding: 0;             z-index: 15;         }         /* a top level navigation item in the mega menu */         .nav-item {             list-style: none;             display: inline-block;             padding: 0;             margin: 0;         }         /* first descendant link within a top level navigation item */         .nav-item > a {             position: relative;             display: inline-block;             padding: 0.5em 1em;             margin: 0 0 -1px 0;             border: 1px solid transparent;         }         /* focus/open states of first descendant link within a top level             navigation item */         .nav-item > a:focus,         .nav-item > a.open {             border: 1px solid #dedede;         }         /* open state of first descendant link within a top level             navigation item */         .nav-item > a.open {             background-color: #fff;             border-bottom: none;             z-index: 1;         }         /* sub-navigation panel */         .sub-nav {             position: absolute;             display: none;             top: 2.2em;             margin-top: -1px;             padding: 0.5em 1em;             border: 1px solid #dedede;             background-color: #fff;         }         /* sub-navigation panel open state */         .sub-nav.open {             display: block;         }         /* list of items within sub-navigation panel */         .sub-nav ul {             display: inline-block;             vertical-align: top;             margin: 0 1em 0 0;             padding: 0;         }         /* list item within sub-navigation panel */         .sub-nav li {             display: block;             list-style-type: none;             margin: 0;             padding: 0;         }          </style>     </head>     <body>     <nav>         <ul class=""nav-menu"">             <li class=""nav-item"">                 <a href=""?movie"">Movies</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=0"">Action &amp; Adventure</a></li>                         <li><a href=""?movie&genre=2"">Children &amp; Family</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=7"">Dramas</a></li>                         <li><a href=""?movie&genre=9"">Foreign</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=14"">Musicals</a></li>                         <li><a href=""?movie&genre=15"">Romance</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>             <li class=""nav-item"">                 <a href=""?tv"">TV Shows</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=20"">Classic TV</a></li>                         <li><a href=""?tv&genre=21"">Crime TV</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=27"">Reality TV</a></li>                         <li><a href=""?tv&genre=30"">TV Action</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=33"">TV Dramas</a></li>                         <li><a href=""?tv&genre=34"">TV Horror</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>         </ul>     </nav>          <!-- include jquery -->     <script src=""//code.jquery.com/jquery-1.10.1.min.js""></script>     <!-- include the jquery-accessibleMegaMenu plugin script -->     <script src=""js/jquery-accessibleMegaMenu.js""></script>     <!-- initialize a selector as an accessibleMegaMenu -->     <script>         $(""nav:first"").accessibleMegaMenu({             /* prefix for generated unique id attributes, which are required                 to indicate aria-owns, aria-controls and aria-labelledby */             uuidPrefix: ""accessible-megamenu"",                          /* css class used to define the megamenu styling */             menuClass: ""nav-menu"",                          /* css class for a top-level navigation item in the megamenu */             topNavItemClass: ""nav-item"",                          /* css class for a megamenu panel */             panelClass: ""sub-nav"",                          /* css class for a group of items within a megamenu panel */             panelGroupClass: ""sub-nav-group"",                          /* css class for the hover state */             hoverClass: ""hover"",                          /* css class for the focus state */             focusClass: ""focus"",                          /* css class for the open state */             openClass: ""open""         });     </script>     </body>     </html> About A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. Resources Readme License Apache-2.0 License Releases No releases published Packages 0 No packages published Used by 14 + 6 Contributors 5 Languages HTML 70.8% CSS 27.3% JavaScript 1.9% © 2020 GitHub, Inc. Terms Privacy Cookie Preferences Security Status Help Contact GitHub Pricing API Training Blog About You can’t perform that action at this time. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session. We use optional third-party analytics cookies to understand how you use GitHub.com so we can build better products. Learn more. Accept Reject We use optional third-party analytics cookies to understand how you use GitHub.com so we can build better products. You can always update your selection by clicking Cookie Preferences at the bottom of the page. For more information, see our Privacy Statement. Essential cookies We use essential cookies to perform essential website functions, e.g. they're used to log you in. Learn more Always active Analytics cookies We use analytics cookies to understand how you use our websites so we can make them better, e.g. they're used to gather information about the pages you visit and how many clicks you need to accomplish a task. Learn more Accept Reject Save preferences"
379728,20201211,github.com,https://github.com/adobe-accessibility/Accessible-Mega-Menu,text/html,text/html,en,"GitHub - adobe-accessibility/Accessible-Mega-Menu: A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. Skip to content Sign up Why GitHub? Features → Code review Project management Integrations Actions Packages Security Team management Hosting Mobile Customer stories → Security → Team Enterprise Explore Explore GitHub → Learn & contribute Topics Collections Trending Learning Lab Open source guides Connect with others Events Community forum GitHub Education GitHub Stars program Marketplace Pricing Plans → Compare plans Contact Sales Nonprofit → Education → In this repository All GitHub ↵ Jump to ↵ No suggested jump to results In this repository All GitHub ↵ Jump to ↵ In this repository All GitHub ↵ Jump to ↵ Sign in Sign up {{ message }} adobe-accessibility / Accessible-Mega-Menu Watch 49 Star 571 Fork 188 A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. Apache-2.0 License 571 stars 188 forks Star Watch Code Issues 28 Pull requests 6 Actions Projects 0 Security Insights More Code Issues Pull requests Actions Projects Security Insights Dismiss Join GitHub today GitHub is home to over 50 million developers working together to host and review code, manage projects, and build software together. Sign up GitHub is where the world builds software Millions of developers and companies build, ship, and maintain their software on GitHub — the largest and most advanced development platform in the world. Sign up for free Dismiss master 2 branches 0 tags Go to file Code Clone HTTPS GitHub CLI Use Git or checkout with SVN using the web URL. Work fast with our official CLI. Learn more. Open with GitHub Desktop Download ZIP Launching GitHub Desktop If nothing happens, download GitHub Desktop and try again. Go back Launching GitHub Desktop If nothing happens, download GitHub Desktop and try again. Go back Launching Xcode If nothing happens, download Xcode and try again. Go back Launching Visual Studio If nothing happens, download the GitHub extension for Visual Studio and try again. Go back Latest commit Git stats 39 commits Files Permalink Failed to load latest commit information. Type Name Latest commit message Commit time css Add openOnMouseover setting, and toggleButtonClass for responsive layout May 11, 2018 js fix evaluation for ChromeVox object Dec 7, 2020 third-party/jquery initial commit Aug 26, 2013 LICENSE initial commit Aug 26, 2013 NOTICE initial commit Aug 26, 2013 README.md initial commit Aug 26, 2013 index.html Updating WCAG 2.0 References to WCAG 2.1 (#67) Dec 4, 2020 package.json Updating repo references Jul 8, 2016 View code README.md Accessible Mega Menu ========================= A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. It is modeled after the mega menu on adobe.com but has been simplified for use by others. An brief explanation of our interaction design choices can be found in a blog post at Mega menu accessibility on adobe.com. Content for the links and text within the mega menu comes from the Web Content Accessibility Guidelines (WCAG) 2.0. Keyboard Accessibility The accessible mega menu supports keyboard interaction modeled after the behavior described in the WAI-ARIA Menu or Menu bar (widget) design pattern, however we also try to respect users' general expectations for the behavior of links in a global navigation. To this end, the accessible mega menu implementation permits tab focus on each of the six top-level menu items. When one of the menu items has focus, pressing the Enter key, Spacebar or Down arrow will open the submenu panel, and pressing the Left or Right arrow key will shift focus to the adjacent menu item. Links within the submenu panels are included in the tab order when the panel is open. They can also be navigated with the arrow keys or by typing the first character in the link name, which speeds up keyboard navigation considerably. Pressing the Escape key closes the submenu and restores focus to the parent menu item. Screen Reader Accessibility The accessible mega menu models its use of WAI-ARIA Roles, States, and Properties after those described in the WAI-ARIA Menu or Menu bar (widget) design pattern with some notable exceptions, so that it behaves better with screen reader user expectations for global navigation. We don't use role=""menu"" for the menu container and role=""menuitem"" for each of the links therein, because if we do, assistive technology will no longer interpret the links as links, but instead, as menu items, and the links in our global navigation will no longer show up when a screen reader user executes a shortcut command to bring up a list of links in the page. We also want to maintain the semantic structure of the submenu panels in our mega menu; our links are organized into lists and separated by headings. Omitting role=""menu"" and role=""menuitem"" for the global navigation seems the safer way to go. Usage HTML The HTML structure for the mega menu is a nav element, or any other container element, containing a list. Each list item contains a link which is followed by a div or any other container element which will serve as the pop up panel. The panel can contain any html content; in the following example, each panel contains three lists of links. You can explicitly define groups within the panel, between which a user can navigate quickly using the left and right arrow keys; in the following example, the CSS class .sub-nav-group identifies a navigable group.     <nav>         <ul class=""nav-menu"">             <li class=""nav-item"">                 <a href=""?movie"">Movies</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=0"">Action &amp; Adventure</a></li>                         <li><a href=""?movie&genre=2"">Children &amp; Family</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=7"">Dramas</a></li>                         <li><a href=""?movie&genre=9"">Foreign</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=14"">Musicals</a></li>                         <li><a href=""?movie&genre=15"">Romance</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>             <li class=""nav-item"">                 <a href=""?tv"">TV Shows</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=20"">Classic TV</a></li>                         <li><a href=""?tv&genre=21"">Crime TV</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=27"">Reality TV</a></li>                         <li><a href=""?tv&genre=30"">TV Action</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=33"">TV Dramas</a></li>                         <li><a href=""?tv&genre=34"">TV Horror</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>         </ul>     </nav> By default, accessibleMegaMenu uses the the following CSS classes to define the top-level navigation items, panels, groups within the panels, and the hover, focus, and open states. It also defines a prefix for unique id strings, which are required to indicate the relationship of a top-level navigation item to the panel it controls.     defaults = {         /* unique ID's are required to indicate aria-owns, aria-controls and aria-labelledby */         uuidPrefix: ""accessible-megamenu"",                  /* default css class used to define the megamenu styling */         menuClass: ""accessible-megamenu"",                  /* default css class for a top-level navigation item in the megamenu */         topNavItemClass: ""accessible-megamenu-top-nav-item"",                  /* default css class for a megamenu panel */         panelClass: ""accessible-megamenu-panel"",                  /* default css class for a group of items within a megamenu panel */         panelGroupClass: ""accessible-megamenu-panel-group"",                  /* default css class for the hover state */         hoverClass: ""hover"",                  /* default css class for the focus state */         focusClass: ""focus"",                  /* default css class for the open state */         openClass: ""open""      } You can optionally override the defaults to use the CSS classes you may have already defined for your mega menu. JavaScript Be sure to include jQuery and the jquery-accessibleMegaMenu.js plugin script.     <script src=""//code.jquery.com/jquery-1.10.1.min.js""></script>     <script src=""js/jquery-accessibleMegaMenu.js""></script> The following initializes the first nav element in the document as an accessibleMegaMenu, with optional CSS class overrides.     $(""nav:first"").accessibleMegaMenu({         /* prefix for generated unique id attributes, which are required             to indicate aria-owns, aria-controls and aria-labelledby */         uuidPrefix: ""accessible-megamenu"",                  /* css class used to define the megamenu styling */         menuClass: ""nav-menu"",                  /* css class for a top-level navigation item in the megamenu */         topNavItemClass: ""nav-item"",                  /* css class for a megamenu panel */         panelClass: ""sub-nav"",                  /* css class for a group of items within a megamenu panel */         panelGroupClass: ""sub-nav-group"",                  /* css class for the hover state */         hoverClass: ""hover"",                  /* css class for the focus state */         focusClass: ""focus"",                  /* css class for the open state */         openClass: ""open""     }); CSS AccessibleMegaMenu handles the showing and hiding of panels by adding or removing a CSS class. No inline styles are added to hide elements or create animation between states. Following is some rudimentary CSS for our example which enables the showing/hiding of and the layout of lists panels in the mega menu.     /* mega menu list */     .nav-menu {         display: block;         position: relative;         list-style: none;         margin: 0;         padding: 0;         z-index: 15;     }     /* a top level navigation item in the mega menu */     .nav-item {         list-style: none;         display: inline-block;         padding: 0;         margin: 0;     }     /* first descendant link within a top level navigation item */     .nav-item > a {         position: relative;         display: inline-block;         padding: 0.5em 1em;         margin: 0 0 -1px 0;         border: 1px solid transparent;     }     /* focus/open states of first descendant link within a top level         navigation item */     .nav-item > a:focus,     .nav-item > a.open {         border: 1px solid #dedede;     }     /* open state of first descendant link within a top level         navigation item */     .nav-item > a.open {         background-color: #fff;         border-bottom: none;         z-index: 1;     }     /* sub-navigation panel */     .sub-nav {         position: absolute;         display: none;         top: 2.2em;         margin-top: -1px;         padding: 0.5em 1em;         border: 1px solid #dedede;         background-color: #fff;     }     /* sub-navigation panel open state */     .sub-nav.open {         display: block;     }     /* list of items within sub-navigation panel */     .sub-nav ul {         display: inline-block;         vertical-align: top;         margin: 0 1em 0 0;         padding: 0;     }     /* list item within sub-navigation panel */     .sub-nav li {         display: block;         list-style-type: none;         margin: 0;         padding: 0;     }   Putting it all together, here is the completed example:     <!doctype html>     <html lang=""en"">     <head>     <meta charset=""UTF-8"">     <title>Simple Accessible Mega Menu Example</title>     <style>         /* Rudimentary mega menu CSS for demonstration */             /* mega menu list */         .nav-menu {             display: block;             position: relative;             list-style: none;             margin: 0;             padding: 0;             z-index: 15;         }         /* a top level navigation item in the mega menu */         .nav-item {             list-style: none;             display: inline-block;             padding: 0;             margin: 0;         }         /* first descendant link within a top level navigation item */         .nav-item > a {             position: relative;             display: inline-block;             padding: 0.5em 1em;             margin: 0 0 -1px 0;             border: 1px solid transparent;         }         /* focus/open states of first descendant link within a top level             navigation item */         .nav-item > a:focus,         .nav-item > a.open {             border: 1px solid #dedede;         }         /* open state of first descendant link within a top level             navigation item */         .nav-item > a.open {             background-color: #fff;             border-bottom: none;             z-index: 1;         }         /* sub-navigation panel */         .sub-nav {             position: absolute;             display: none;             top: 2.2em;             margin-top: -1px;             padding: 0.5em 1em;             border: 1px solid #dedede;             background-color: #fff;         }         /* sub-navigation panel open state */         .sub-nav.open {             display: block;         }         /* list of items within sub-navigation panel */         .sub-nav ul {             display: inline-block;             vertical-align: top;             margin: 0 1em 0 0;             padding: 0;         }         /* list item within sub-navigation panel */         .sub-nav li {             display: block;             list-style-type: none;             margin: 0;             padding: 0;         }          </style>     </head>     <body>     <nav>         <ul class=""nav-menu"">             <li class=""nav-item"">                 <a href=""?movie"">Movies</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=0"">Action &amp; Adventure</a></li>                         <li><a href=""?movie&genre=2"">Children &amp; Family</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=7"">Dramas</a></li>                         <li><a href=""?movie&genre=9"">Foreign</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=14"">Musicals</a></li>                         <li><a href=""?movie&genre=15"">Romance</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>             <li class=""nav-item"">                 <a href=""?tv"">TV Shows</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=20"">Classic TV</a></li>                         <li><a href=""?tv&genre=21"">Crime TV</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=27"">Reality TV</a></li>                         <li><a href=""?tv&genre=30"">TV Action</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=33"">TV Dramas</a></li>                         <li><a href=""?tv&genre=34"">TV Horror</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>         </ul>     </nav>          <!-- include jquery -->     <script src=""//code.jquery.com/jquery-1.10.1.min.js""></script>     <!-- include the jquery-accessibleMegaMenu plugin script -->     <script src=""js/jquery-accessibleMegaMenu.js""></script>     <!-- initialize a selector as an accessibleMegaMenu -->     <script>         $(""nav:first"").accessibleMegaMenu({             /* prefix for generated unique id attributes, which are required                 to indicate aria-owns, aria-controls and aria-labelledby */             uuidPrefix: ""accessible-megamenu"",                          /* css class used to define the megamenu styling */             menuClass: ""nav-menu"",                          /* css class for a top-level navigation item in the megamenu */             topNavItemClass: ""nav-item"",                          /* css class for a megamenu panel */             panelClass: ""sub-nav"",                          /* css class for a group of items within a megamenu panel */             panelGroupClass: ""sub-nav-group"",                          /* css class for the hover state */             hoverClass: ""hover"",                          /* css class for the focus state */             focusClass: ""focus"",                          /* css class for the open state */             openClass: ""open""         });     </script>     </body>     </html> About A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. Resources Readme License Apache-2.0 License Releases No releases published Packages 0 No packages published Used by 15 + 7 Contributors 7 Languages HTML 71.8% CSS 26.4% JavaScript 1.8% © 2020 GitHub, Inc. Terms Privacy Cookie Preferences Security Status Help Contact GitHub Pricing API Training Blog About You can’t perform that action at this time. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session. We use optional third-party analytics cookies to understand how you use GitHub.com so we can build better products. Learn more. Accept Reject We use optional third-party analytics cookies to understand how you use GitHub.com so we can build better products. You can always update your selection by clicking Cookie Preferences at the bottom of the page. For more information, see our Privacy Statement. Essential cookies We use essential cookies to perform essential website functions, e.g. they're used to log you in. Learn more Always active Analytics cookies We use analytics cookies to understand how you use our websites so we can make them better, e.g. they're used to gather information about the pages you visit and how many clicks you need to accomplish a task. Learn more Accept Reject Save preferences"
389679,20201218,github.com,https://github.com/adobe-accessibility/Accessible-Mega-Menu,text/html,text/html,en,"GitHub - adobe-accessibility/Accessible-Mega-Menu: A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. Skip to content Sign up Why GitHub? Features → Code review Project management Integrations Actions Packages Security Team management Hosting Mobile Customer stories → Security → Team Enterprise Explore Explore GitHub → Learn & contribute Topics Collections Trending Learning Lab Open source guides Connect with others Events Community forum GitHub Education GitHub Stars program Marketplace Pricing Plans → Compare plans Contact Sales Nonprofit → Education → In this repository All GitHub ↵ Jump to ↵ No suggested jump to results In this repository All GitHub ↵ Jump to ↵ In this repository All GitHub ↵ Jump to ↵ Sign in Sign up {{ message }} adobe-accessibility / Accessible-Mega-Menu Watch 50 Star 571 Fork 189 A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. Apache-2.0 License 571 stars 189 forks Star Watch Code Issues 28 Pull requests 6 Actions Projects 0 Security Insights More Code Issues Pull requests Actions Projects Security Insights master 2 branches 0 tags Go to file Code Clone HTTPS GitHub CLI Use Git or checkout with SVN using the web URL. Work fast with our official CLI. Learn more. Open with GitHub Desktop Download ZIP Launching GitHub Desktop If nothing happens, download GitHub Desktop and try again. Go back Launching GitHub Desktop If nothing happens, download GitHub Desktop and try again. Go back Launching Xcode If nothing happens, download Xcode and try again. Go back Launching Visual Studio If nothing happens, download the GitHub extension for Visual Studio and try again. Go back Latest commit majornista fix evaluation for ChromeVox object … 5c070bc Dec 7, 2020 fix evaluation for ChromeVox object 5c070bc Git stats 39 commits Files Permalink Failed to load latest commit information. Type Name Latest commit message Commit time css js third-party/jquery LICENSE NOTICE README.md index.html package.json View code README.md Accessible Mega Menu ========================= A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. It is modeled after the mega menu on adobe.com but has been simplified for use by others. An brief explanation of our interaction design choices can be found in a blog post at Mega menu accessibility on adobe.com. Content for the links and text within the mega menu comes from the Web Content Accessibility Guidelines (WCAG) 2.0. Keyboard Accessibility The accessible mega menu supports keyboard interaction modeled after the behavior described in the WAI-ARIA Menu or Menu bar (widget) design pattern, however we also try to respect users' general expectations for the behavior of links in a global navigation. To this end, the accessible mega menu implementation permits tab focus on each of the six top-level menu items. When one of the menu items has focus, pressing the Enter key, Spacebar or Down arrow will open the submenu panel, and pressing the Left or Right arrow key will shift focus to the adjacent menu item. Links within the submenu panels are included in the tab order when the panel is open. They can also be navigated with the arrow keys or by typing the first character in the link name, which speeds up keyboard navigation considerably. Pressing the Escape key closes the submenu and restores focus to the parent menu item. Screen Reader Accessibility The accessible mega menu models its use of WAI-ARIA Roles, States, and Properties after those described in the WAI-ARIA Menu or Menu bar (widget) design pattern with some notable exceptions, so that it behaves better with screen reader user expectations for global navigation. We don't use role=""menu"" for the menu container and role=""menuitem"" for each of the links therein, because if we do, assistive technology will no longer interpret the links as links, but instead, as menu items, and the links in our global navigation will no longer show up when a screen reader user executes a shortcut command to bring up a list of links in the page. We also want to maintain the semantic structure of the submenu panels in our mega menu; our links are organized into lists and separated by headings. Omitting role=""menu"" and role=""menuitem"" for the global navigation seems the safer way to go. Usage HTML The HTML structure for the mega menu is a nav element, or any other container element, containing a list. Each list item contains a link which is followed by a div or any other container element which will serve as the pop up panel. The panel can contain any html content; in the following example, each panel contains three lists of links. You can explicitly define groups within the panel, between which a user can navigate quickly using the left and right arrow keys; in the following example, the CSS class .sub-nav-group identifies a navigable group.     <nav>         <ul class=""nav-menu"">             <li class=""nav-item"">                 <a href=""?movie"">Movies</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=0"">Action &amp; Adventure</a></li>                         <li><a href=""?movie&genre=2"">Children &amp; Family</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=7"">Dramas</a></li>                         <li><a href=""?movie&genre=9"">Foreign</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=14"">Musicals</a></li>                         <li><a href=""?movie&genre=15"">Romance</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>             <li class=""nav-item"">                 <a href=""?tv"">TV Shows</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=20"">Classic TV</a></li>                         <li><a href=""?tv&genre=21"">Crime TV</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=27"">Reality TV</a></li>                         <li><a href=""?tv&genre=30"">TV Action</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=33"">TV Dramas</a></li>                         <li><a href=""?tv&genre=34"">TV Horror</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>         </ul>     </nav> By default, accessibleMegaMenu uses the the following CSS classes to define the top-level navigation items, panels, groups within the panels, and the hover, focus, and open states. It also defines a prefix for unique id strings, which are required to indicate the relationship of a top-level navigation item to the panel it controls.     defaults = {         /* unique ID's are required to indicate aria-owns, aria-controls and aria-labelledby */         uuidPrefix: ""accessible-megamenu"",                  /* default css class used to define the megamenu styling */         menuClass: ""accessible-megamenu"",                  /* default css class for a top-level navigation item in the megamenu */         topNavItemClass: ""accessible-megamenu-top-nav-item"",                  /* default css class for a megamenu panel */         panelClass: ""accessible-megamenu-panel"",                  /* default css class for a group of items within a megamenu panel */         panelGroupClass: ""accessible-megamenu-panel-group"",                  /* default css class for the hover state */         hoverClass: ""hover"",                  /* default css class for the focus state */         focusClass: ""focus"",                  /* default css class for the open state */         openClass: ""open""      } You can optionally override the defaults to use the CSS classes you may have already defined for your mega menu. JavaScript Be sure to include jQuery and the jquery-accessibleMegaMenu.js plugin script.     <script src=""//code.jquery.com/jquery-1.10.1.min.js""></script>     <script src=""js/jquery-accessibleMegaMenu.js""></script> The following initializes the first nav element in the document as an accessibleMegaMenu, with optional CSS class overrides.     $(""nav:first"").accessibleMegaMenu({         /* prefix for generated unique id attributes, which are required             to indicate aria-owns, aria-controls and aria-labelledby */         uuidPrefix: ""accessible-megamenu"",                  /* css class used to define the megamenu styling */         menuClass: ""nav-menu"",                  /* css class for a top-level navigation item in the megamenu */         topNavItemClass: ""nav-item"",                  /* css class for a megamenu panel */         panelClass: ""sub-nav"",                  /* css class for a group of items within a megamenu panel */         panelGroupClass: ""sub-nav-group"",                  /* css class for the hover state */         hoverClass: ""hover"",                  /* css class for the focus state */         focusClass: ""focus"",                  /* css class for the open state */         openClass: ""open""     }); CSS AccessibleMegaMenu handles the showing and hiding of panels by adding or removing a CSS class. No inline styles are added to hide elements or create animation between states. Following is some rudimentary CSS for our example which enables the showing/hiding of and the layout of lists panels in the mega menu.     /* mega menu list */     .nav-menu {         display: block;         position: relative;         list-style: none;         margin: 0;         padding: 0;         z-index: 15;     }     /* a top level navigation item in the mega menu */     .nav-item {         list-style: none;         display: inline-block;         padding: 0;         margin: 0;     }     /* first descendant link within a top level navigation item */     .nav-item > a {         position: relative;         display: inline-block;         padding: 0.5em 1em;         margin: 0 0 -1px 0;         border: 1px solid transparent;     }     /* focus/open states of first descendant link within a top level         navigation item */     .nav-item > a:focus,     .nav-item > a.open {         border: 1px solid #dedede;     }     /* open state of first descendant link within a top level         navigation item */     .nav-item > a.open {         background-color: #fff;         border-bottom: none;         z-index: 1;     }     /* sub-navigation panel */     .sub-nav {         position: absolute;         display: none;         top: 2.2em;         margin-top: -1px;         padding: 0.5em 1em;         border: 1px solid #dedede;         background-color: #fff;     }     /* sub-navigation panel open state */     .sub-nav.open {         display: block;     }     /* list of items within sub-navigation panel */     .sub-nav ul {         display: inline-block;         vertical-align: top;         margin: 0 1em 0 0;         padding: 0;     }     /* list item within sub-navigation panel */     .sub-nav li {         display: block;         list-style-type: none;         margin: 0;         padding: 0;     }   Putting it all together, here is the completed example:     <!doctype html>     <html lang=""en"">     <head>     <meta charset=""UTF-8"">     <title>Simple Accessible Mega Menu Example</title>     <style>         /* Rudimentary mega menu CSS for demonstration */             /* mega menu list */         .nav-menu {             display: block;             position: relative;             list-style: none;             margin: 0;             padding: 0;             z-index: 15;         }         /* a top level navigation item in the mega menu */         .nav-item {             list-style: none;             display: inline-block;             padding: 0;             margin: 0;         }         /* first descendant link within a top level navigation item */         .nav-item > a {             position: relative;             display: inline-block;             padding: 0.5em 1em;             margin: 0 0 -1px 0;             border: 1px solid transparent;         }         /* focus/open states of first descendant link within a top level             navigation item */         .nav-item > a:focus,         .nav-item > a.open {             border: 1px solid #dedede;         }         /* open state of first descendant link within a top level             navigation item */         .nav-item > a.open {             background-color: #fff;             border-bottom: none;             z-index: 1;         }         /* sub-navigation panel */         .sub-nav {             position: absolute;             display: none;             top: 2.2em;             margin-top: -1px;             padding: 0.5em 1em;             border: 1px solid #dedede;             background-color: #fff;         }         /* sub-navigation panel open state */         .sub-nav.open {             display: block;         }         /* list of items within sub-navigation panel */         .sub-nav ul {             display: inline-block;             vertical-align: top;             margin: 0 1em 0 0;             padding: 0;         }         /* list item within sub-navigation panel */         .sub-nav li {             display: block;             list-style-type: none;             margin: 0;             padding: 0;         }          </style>     </head>     <body>     <nav>         <ul class=""nav-menu"">             <li class=""nav-item"">                 <a href=""?movie"">Movies</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=0"">Action &amp; Adventure</a></li>                         <li><a href=""?movie&genre=2"">Children &amp; Family</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=7"">Dramas</a></li>                         <li><a href=""?movie&genre=9"">Foreign</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=14"">Musicals</a></li>                         <li><a href=""?movie&genre=15"">Romance</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>             <li class=""nav-item"">                 <a href=""?tv"">TV Shows</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=20"">Classic TV</a></li>                         <li><a href=""?tv&genre=21"">Crime TV</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=27"">Reality TV</a></li>                         <li><a href=""?tv&genre=30"">TV Action</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=33"">TV Dramas</a></li>                         <li><a href=""?tv&genre=34"">TV Horror</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>         </ul>     </nav>          <!-- include jquery -->     <script src=""//code.jquery.com/jquery-1.10.1.min.js""></script>     <!-- include the jquery-accessibleMegaMenu plugin script -->     <script src=""js/jquery-accessibleMegaMenu.js""></script>     <!-- initialize a selector as an accessibleMegaMenu -->     <script>         $(""nav:first"").accessibleMegaMenu({             /* prefix for generated unique id attributes, which are required                 to indicate aria-owns, aria-controls and aria-labelledby */             uuidPrefix: ""accessible-megamenu"",                          /* css class used to define the megamenu styling */             menuClass: ""nav-menu"",                          /* css class for a top-level navigation item in the megamenu */             topNavItemClass: ""nav-item"",                          /* css class for a megamenu panel */             panelClass: ""sub-nav"",                          /* css class for a group of items within a megamenu panel */             panelGroupClass: ""sub-nav-group"",                          /* css class for the hover state */             hoverClass: ""hover"",                          /* css class for the focus state */             focusClass: ""focus"",                          /* css class for the open state */             openClass: ""open""         });     </script>     </body>     </html> About A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. Resources Readme License Apache-2.0 License Releases No releases published Packages 0 No packages published Used by 15 + 7 Contributors 7 Languages HTML 71.8% CSS 26.4% JavaScript 1.8% © 2020 GitHub, Inc. Terms Privacy Security Status Help Contact GitHub Pricing API Training Blog About You can’t perform that action at this time. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."
398957,20201225,github.com,https://github.com/adobe-accessibility/Accessible-Mega-Menu,text/html,text/html,en,"GitHub - adobe-accessibility/Accessible-Mega-Menu: A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. Skip to content Sign up Why GitHub? Features → Code review Project management Integrations Actions Packages Security Team management Hosting Mobile Customer stories → Security → Team Enterprise Explore Explore GitHub → Learn & contribute Topics Collections Trending Learning Lab Open source guides Connect with others Events Community forum GitHub Education GitHub Stars program Marketplace Pricing Plans → Compare plans Contact Sales Nonprofit → Education → In this repository All GitHub ↵ Jump to ↵ No suggested jump to results In this repository All GitHub ↵ Jump to ↵ In this repository All GitHub ↵ Jump to ↵ Sign in Sign up {{ message }} adobe-accessibility / Accessible-Mega-Menu Watch 50 Star 572 Fork 189 A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. Apache-2.0 License 572 stars 189 forks Star Watch Code Issues 28 Pull requests 6 Actions Projects 0 Security Insights More Code Issues Pull requests Actions Projects Security Insights master 2 branches 0 tags Go to file Code Clone HTTPS GitHub CLI Use Git or checkout with SVN using the web URL. Work fast with our official CLI. Learn more. Open with GitHub Desktop Download ZIP Launching GitHub Desktop If nothing happens, download GitHub Desktop and try again. Go back Launching GitHub Desktop If nothing happens, download GitHub Desktop and try again. Go back Launching Xcode If nothing happens, download Xcode and try again. Go back Launching Visual Studio If nothing happens, download the GitHub extension for Visual Studio and try again. Go back Latest commit majornista fix evaluation for ChromeVox object … 5c070bc Dec 7, 2020 fix evaluation for ChromeVox object 5c070bc Git stats 39 commits Files Permalink Failed to load latest commit information. Type Name Latest commit message Commit time css Add openOnMouseover setting, and toggleButtonClass for responsive layout May 11, 2018 js fix evaluation for ChromeVox object Dec 7, 2020 third-party/jquery initial commit Aug 26, 2013 LICENSE initial commit Aug 26, 2013 NOTICE initial commit Aug 26, 2013 README.md initial commit Aug 26, 2013 index.html Updating WCAG 2.0 References to WCAG 2.1 (#67) Dec 4, 2020 package.json Updating repo references Jul 8, 2016 View code README.md Accessible Mega Menu ========================= A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. It is modeled after the mega menu on adobe.com but has been simplified for use by others. An brief explanation of our interaction design choices can be found in a blog post at Mega menu accessibility on adobe.com. Content for the links and text within the mega menu comes from the Web Content Accessibility Guidelines (WCAG) 2.0. Keyboard Accessibility The accessible mega menu supports keyboard interaction modeled after the behavior described in the WAI-ARIA Menu or Menu bar (widget) design pattern, however we also try to respect users' general expectations for the behavior of links in a global navigation. To this end, the accessible mega menu implementation permits tab focus on each of the six top-level menu items. When one of the menu items has focus, pressing the Enter key, Spacebar or Down arrow will open the submenu panel, and pressing the Left or Right arrow key will shift focus to the adjacent menu item. Links within the submenu panels are included in the tab order when the panel is open. They can also be navigated with the arrow keys or by typing the first character in the link name, which speeds up keyboard navigation considerably. Pressing the Escape key closes the submenu and restores focus to the parent menu item. Screen Reader Accessibility The accessible mega menu models its use of WAI-ARIA Roles, States, and Properties after those described in the WAI-ARIA Menu or Menu bar (widget) design pattern with some notable exceptions, so that it behaves better with screen reader user expectations for global navigation. We don't use role=""menu"" for the menu container and role=""menuitem"" for each of the links therein, because if we do, assistive technology will no longer interpret the links as links, but instead, as menu items, and the links in our global navigation will no longer show up when a screen reader user executes a shortcut command to bring up a list of links in the page. We also want to maintain the semantic structure of the submenu panels in our mega menu; our links are organized into lists and separated by headings. Omitting role=""menu"" and role=""menuitem"" for the global navigation seems the safer way to go. Usage HTML The HTML structure for the mega menu is a nav element, or any other container element, containing a list. Each list item contains a link which is followed by a div or any other container element which will serve as the pop up panel. The panel can contain any html content; in the following example, each panel contains three lists of links. You can explicitly define groups within the panel, between which a user can navigate quickly using the left and right arrow keys; in the following example, the CSS class .sub-nav-group identifies a navigable group.     <nav>         <ul class=""nav-menu"">             <li class=""nav-item"">                 <a href=""?movie"">Movies</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=0"">Action &amp; Adventure</a></li>                         <li><a href=""?movie&genre=2"">Children &amp; Family</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=7"">Dramas</a></li>                         <li><a href=""?movie&genre=9"">Foreign</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=14"">Musicals</a></li>                         <li><a href=""?movie&genre=15"">Romance</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>             <li class=""nav-item"">                 <a href=""?tv"">TV Shows</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=20"">Classic TV</a></li>                         <li><a href=""?tv&genre=21"">Crime TV</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=27"">Reality TV</a></li>                         <li><a href=""?tv&genre=30"">TV Action</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=33"">TV Dramas</a></li>                         <li><a href=""?tv&genre=34"">TV Horror</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>         </ul>     </nav> By default, accessibleMegaMenu uses the the following CSS classes to define the top-level navigation items, panels, groups within the panels, and the hover, focus, and open states. It also defines a prefix for unique id strings, which are required to indicate the relationship of a top-level navigation item to the panel it controls.     defaults = {         /* unique ID's are required to indicate aria-owns, aria-controls and aria-labelledby */         uuidPrefix: ""accessible-megamenu"",                  /* default css class used to define the megamenu styling */         menuClass: ""accessible-megamenu"",                  /* default css class for a top-level navigation item in the megamenu */         topNavItemClass: ""accessible-megamenu-top-nav-item"",                  /* default css class for a megamenu panel */         panelClass: ""accessible-megamenu-panel"",                  /* default css class for a group of items within a megamenu panel */         panelGroupClass: ""accessible-megamenu-panel-group"",                  /* default css class for the hover state */         hoverClass: ""hover"",                  /* default css class for the focus state */         focusClass: ""focus"",                  /* default css class for the open state */         openClass: ""open""      } You can optionally override the defaults to use the CSS classes you may have already defined for your mega menu. JavaScript Be sure to include jQuery and the jquery-accessibleMegaMenu.js plugin script.     <script src=""//code.jquery.com/jquery-1.10.1.min.js""></script>     <script src=""js/jquery-accessibleMegaMenu.js""></script> The following initializes the first nav element in the document as an accessibleMegaMenu, with optional CSS class overrides.     $(""nav:first"").accessibleMegaMenu({         /* prefix for generated unique id attributes, which are required             to indicate aria-owns, aria-controls and aria-labelledby */         uuidPrefix: ""accessible-megamenu"",                  /* css class used to define the megamenu styling */         menuClass: ""nav-menu"",                  /* css class for a top-level navigation item in the megamenu */         topNavItemClass: ""nav-item"",                  /* css class for a megamenu panel */         panelClass: ""sub-nav"",                  /* css class for a group of items within a megamenu panel */         panelGroupClass: ""sub-nav-group"",                  /* css class for the hover state */         hoverClass: ""hover"",                  /* css class for the focus state */         focusClass: ""focus"",                  /* css class for the open state */         openClass: ""open""     }); CSS AccessibleMegaMenu handles the showing and hiding of panels by adding or removing a CSS class. No inline styles are added to hide elements or create animation between states. Following is some rudimentary CSS for our example which enables the showing/hiding of and the layout of lists panels in the mega menu.     /* mega menu list */     .nav-menu {         display: block;         position: relative;         list-style: none;         margin: 0;         padding: 0;         z-index: 15;     }     /* a top level navigation item in the mega menu */     .nav-item {         list-style: none;         display: inline-block;         padding: 0;         margin: 0;     }     /* first descendant link within a top level navigation item */     .nav-item > a {         position: relative;         display: inline-block;         padding: 0.5em 1em;         margin: 0 0 -1px 0;         border: 1px solid transparent;     }     /* focus/open states of first descendant link within a top level         navigation item */     .nav-item > a:focus,     .nav-item > a.open {         border: 1px solid #dedede;     }     /* open state of first descendant link within a top level         navigation item */     .nav-item > a.open {         background-color: #fff;         border-bottom: none;         z-index: 1;     }     /* sub-navigation panel */     .sub-nav {         position: absolute;         display: none;         top: 2.2em;         margin-top: -1px;         padding: 0.5em 1em;         border: 1px solid #dedede;         background-color: #fff;     }     /* sub-navigation panel open state */     .sub-nav.open {         display: block;     }     /* list of items within sub-navigation panel */     .sub-nav ul {         display: inline-block;         vertical-align: top;         margin: 0 1em 0 0;         padding: 0;     }     /* list item within sub-navigation panel */     .sub-nav li {         display: block;         list-style-type: none;         margin: 0;         padding: 0;     }   Putting it all together, here is the completed example:     <!doctype html>     <html lang=""en"">     <head>     <meta charset=""UTF-8"">     <title>Simple Accessible Mega Menu Example</title>     <style>         /* Rudimentary mega menu CSS for demonstration */             /* mega menu list */         .nav-menu {             display: block;             position: relative;             list-style: none;             margin: 0;             padding: 0;             z-index: 15;         }         /* a top level navigation item in the mega menu */         .nav-item {             list-style: none;             display: inline-block;             padding: 0;             margin: 0;         }         /* first descendant link within a top level navigation item */         .nav-item > a {             position: relative;             display: inline-block;             padding: 0.5em 1em;             margin: 0 0 -1px 0;             border: 1px solid transparent;         }         /* focus/open states of first descendant link within a top level             navigation item */         .nav-item > a:focus,         .nav-item > a.open {             border: 1px solid #dedede;         }         /* open state of first descendant link within a top level             navigation item */         .nav-item > a.open {             background-color: #fff;             border-bottom: none;             z-index: 1;         }         /* sub-navigation panel */         .sub-nav {             position: absolute;             display: none;             top: 2.2em;             margin-top: -1px;             padding: 0.5em 1em;             border: 1px solid #dedede;             background-color: #fff;         }         /* sub-navigation panel open state */         .sub-nav.open {             display: block;         }         /* list of items within sub-navigation panel */         .sub-nav ul {             display: inline-block;             vertical-align: top;             margin: 0 1em 0 0;             padding: 0;         }         /* list item within sub-navigation panel */         .sub-nav li {             display: block;             list-style-type: none;             margin: 0;             padding: 0;         }          </style>     </head>     <body>     <nav>         <ul class=""nav-menu"">             <li class=""nav-item"">                 <a href=""?movie"">Movies</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=0"">Action &amp; Adventure</a></li>                         <li><a href=""?movie&genre=2"">Children &amp; Family</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=7"">Dramas</a></li>                         <li><a href=""?movie&genre=9"">Foreign</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=14"">Musicals</a></li>                         <li><a href=""?movie&genre=15"">Romance</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>             <li class=""nav-item"">                 <a href=""?tv"">TV Shows</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=20"">Classic TV</a></li>                         <li><a href=""?tv&genre=21"">Crime TV</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=27"">Reality TV</a></li>                         <li><a href=""?tv&genre=30"">TV Action</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=33"">TV Dramas</a></li>                         <li><a href=""?tv&genre=34"">TV Horror</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>         </ul>     </nav>          <!-- include jquery -->     <script src=""//code.jquery.com/jquery-1.10.1.min.js""></script>     <!-- include the jquery-accessibleMegaMenu plugin script -->     <script src=""js/jquery-accessibleMegaMenu.js""></script>     <!-- initialize a selector as an accessibleMegaMenu -->     <script>         $(""nav:first"").accessibleMegaMenu({             /* prefix for generated unique id attributes, which are required                 to indicate aria-owns, aria-controls and aria-labelledby */             uuidPrefix: ""accessible-megamenu"",                          /* css class used to define the megamenu styling */             menuClass: ""nav-menu"",                          /* css class for a top-level navigation item in the megamenu */             topNavItemClass: ""nav-item"",                          /* css class for a megamenu panel */             panelClass: ""sub-nav"",                          /* css class for a group of items within a megamenu panel */             panelGroupClass: ""sub-nav-group"",                          /* css class for the hover state */             hoverClass: ""hover"",                          /* css class for the focus state */             focusClass: ""focus"",                          /* css class for the open state */             openClass: ""open""         });     </script>     </body>     </html> About A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. Resources Readme License Apache-2.0 License Releases No releases published Packages 0 No packages published Contributors 7 Languages HTML 71.8% CSS 26.4% JavaScript 1.8% © 2020 GitHub, Inc. Terms Privacy Security Status Help Contact GitHub Pricing API Training Blog About You can’t perform that action at this time. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."
408071,20210101,github.com,https://github.com/adobe-accessibility/Accessible-Mega-Menu,text/html,text/html,en,"GitHub - adobe-accessibility/Accessible-Mega-Menu: A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. Skip to content Sign up Why GitHub? Features → Code review Project management Integrations Actions Packages Security Team management Hosting Mobile Customer stories → Security → Team Enterprise Explore Explore GitHub → Learn & contribute Topics Collections Trending Learning Lab Open source guides Connect with others Events Community forum GitHub Education GitHub Stars program Marketplace Pricing Plans → Compare plans Contact Sales Nonprofit → Education → In this repository All GitHub ↵ Jump to ↵ No suggested jump to results In this repository All GitHub ↵ Jump to ↵ In this repository All GitHub ↵ Jump to ↵ Sign in Sign up {{ message }} adobe-accessibility / Accessible-Mega-Menu Watch 50 Star 572 Fork 189 A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. Apache-2.0 License 572 stars 189 forks Star Watch Code Issues 28 Pull requests 6 Actions Projects 0 Security Insights More Code Issues Pull requests Actions Projects Security Insights master 2 branches 0 tags Go to file Code Clone HTTPS GitHub CLI Use Git or checkout with SVN using the web URL. Work fast with our official CLI. Learn more. Open with GitHub Desktop Download ZIP Launching GitHub Desktop If nothing happens, download GitHub Desktop and try again. Go back Launching GitHub Desktop If nothing happens, download GitHub Desktop and try again. Go back Launching Xcode If nothing happens, download Xcode and try again. Go back Launching Visual Studio If nothing happens, download the GitHub extension for Visual Studio and try again. Go back Latest commit Git stats 39 commits Files Permalink Failed to load latest commit information. Type Name Latest commit message Commit time css js third-party/jquery LICENSE NOTICE README.md index.html package.json View code README.md Accessible Mega Menu ========================= A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. It is modeled after the mega menu on adobe.com but has been simplified for use by others. An brief explanation of our interaction design choices can be found in a blog post at Mega menu accessibility on adobe.com. Content for the links and text within the mega menu comes from the Web Content Accessibility Guidelines (WCAG) 2.0. Keyboard Accessibility The accessible mega menu supports keyboard interaction modeled after the behavior described in the WAI-ARIA Menu or Menu bar (widget) design pattern, however we also try to respect users' general expectations for the behavior of links in a global navigation. To this end, the accessible mega menu implementation permits tab focus on each of the six top-level menu items. When one of the menu items has focus, pressing the Enter key, Spacebar or Down arrow will open the submenu panel, and pressing the Left or Right arrow key will shift focus to the adjacent menu item. Links within the submenu panels are included in the tab order when the panel is open. They can also be navigated with the arrow keys or by typing the first character in the link name, which speeds up keyboard navigation considerably. Pressing the Escape key closes the submenu and restores focus to the parent menu item. Screen Reader Accessibility The accessible mega menu models its use of WAI-ARIA Roles, States, and Properties after those described in the WAI-ARIA Menu or Menu bar (widget) design pattern with some notable exceptions, so that it behaves better with screen reader user expectations for global navigation. We don't use role=""menu"" for the menu container and role=""menuitem"" for each of the links therein, because if we do, assistive technology will no longer interpret the links as links, but instead, as menu items, and the links in our global navigation will no longer show up when a screen reader user executes a shortcut command to bring up a list of links in the page. We also want to maintain the semantic structure of the submenu panels in our mega menu; our links are organized into lists and separated by headings. Omitting role=""menu"" and role=""menuitem"" for the global navigation seems the safer way to go. Usage HTML The HTML structure for the mega menu is a nav element, or any other container element, containing a list. Each list item contains a link which is followed by a div or any other container element which will serve as the pop up panel. The panel can contain any html content; in the following example, each panel contains three lists of links. You can explicitly define groups within the panel, between which a user can navigate quickly using the left and right arrow keys; in the following example, the CSS class .sub-nav-group identifies a navigable group.     <nav>         <ul class=""nav-menu"">             <li class=""nav-item"">                 <a href=""?movie"">Movies</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=0"">Action &amp; Adventure</a></li>                         <li><a href=""?movie&genre=2"">Children &amp; Family</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=7"">Dramas</a></li>                         <li><a href=""?movie&genre=9"">Foreign</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=14"">Musicals</a></li>                         <li><a href=""?movie&genre=15"">Romance</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>             <li class=""nav-item"">                 <a href=""?tv"">TV Shows</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=20"">Classic TV</a></li>                         <li><a href=""?tv&genre=21"">Crime TV</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=27"">Reality TV</a></li>                         <li><a href=""?tv&genre=30"">TV Action</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=33"">TV Dramas</a></li>                         <li><a href=""?tv&genre=34"">TV Horror</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>         </ul>     </nav> By default, accessibleMegaMenu uses the the following CSS classes to define the top-level navigation items, panels, groups within the panels, and the hover, focus, and open states. It also defines a prefix for unique id strings, which are required to indicate the relationship of a top-level navigation item to the panel it controls.     defaults = {         /* unique ID's are required to indicate aria-owns, aria-controls and aria-labelledby */         uuidPrefix: ""accessible-megamenu"",                  /* default css class used to define the megamenu styling */         menuClass: ""accessible-megamenu"",                  /* default css class for a top-level navigation item in the megamenu */         topNavItemClass: ""accessible-megamenu-top-nav-item"",                  /* default css class for a megamenu panel */         panelClass: ""accessible-megamenu-panel"",                  /* default css class for a group of items within a megamenu panel */         panelGroupClass: ""accessible-megamenu-panel-group"",                  /* default css class for the hover state */         hoverClass: ""hover"",                  /* default css class for the focus state */         focusClass: ""focus"",                  /* default css class for the open state */         openClass: ""open""      } You can optionally override the defaults to use the CSS classes you may have already defined for your mega menu. JavaScript Be sure to include jQuery and the jquery-accessibleMegaMenu.js plugin script.     <script src=""//code.jquery.com/jquery-1.10.1.min.js""></script>     <script src=""js/jquery-accessibleMegaMenu.js""></script> The following initializes the first nav element in the document as an accessibleMegaMenu, with optional CSS class overrides.     $(""nav:first"").accessibleMegaMenu({         /* prefix for generated unique id attributes, which are required             to indicate aria-owns, aria-controls and aria-labelledby */         uuidPrefix: ""accessible-megamenu"",                  /* css class used to define the megamenu styling */         menuClass: ""nav-menu"",                  /* css class for a top-level navigation item in the megamenu */         topNavItemClass: ""nav-item"",                  /* css class for a megamenu panel */         panelClass: ""sub-nav"",                  /* css class for a group of items within a megamenu panel */         panelGroupClass: ""sub-nav-group"",                  /* css class for the hover state */         hoverClass: ""hover"",                  /* css class for the focus state */         focusClass: ""focus"",                  /* css class for the open state */         openClass: ""open""     }); CSS AccessibleMegaMenu handles the showing and hiding of panels by adding or removing a CSS class. No inline styles are added to hide elements or create animation between states. Following is some rudimentary CSS for our example which enables the showing/hiding of and the layout of lists panels in the mega menu.     /* mega menu list */     .nav-menu {         display: block;         position: relative;         list-style: none;         margin: 0;         padding: 0;         z-index: 15;     }     /* a top level navigation item in the mega menu */     .nav-item {         list-style: none;         display: inline-block;         padding: 0;         margin: 0;     }     /* first descendant link within a top level navigation item */     .nav-item > a {         position: relative;         display: inline-block;         padding: 0.5em 1em;         margin: 0 0 -1px 0;         border: 1px solid transparent;     }     /* focus/open states of first descendant link within a top level         navigation item */     .nav-item > a:focus,     .nav-item > a.open {         border: 1px solid #dedede;     }     /* open state of first descendant link within a top level         navigation item */     .nav-item > a.open {         background-color: #fff;         border-bottom: none;         z-index: 1;     }     /* sub-navigation panel */     .sub-nav {         position: absolute;         display: none;         top: 2.2em;         margin-top: -1px;         padding: 0.5em 1em;         border: 1px solid #dedede;         background-color: #fff;     }     /* sub-navigation panel open state */     .sub-nav.open {         display: block;     }     /* list of items within sub-navigation panel */     .sub-nav ul {         display: inline-block;         vertical-align: top;         margin: 0 1em 0 0;         padding: 0;     }     /* list item within sub-navigation panel */     .sub-nav li {         display: block;         list-style-type: none;         margin: 0;         padding: 0;     }   Putting it all together, here is the completed example:     <!doctype html>     <html lang=""en"">     <head>     <meta charset=""UTF-8"">     <title>Simple Accessible Mega Menu Example</title>     <style>         /* Rudimentary mega menu CSS for demonstration */             /* mega menu list */         .nav-menu {             display: block;             position: relative;             list-style: none;             margin: 0;             padding: 0;             z-index: 15;         }         /* a top level navigation item in the mega menu */         .nav-item {             list-style: none;             display: inline-block;             padding: 0;             margin: 0;         }         /* first descendant link within a top level navigation item */         .nav-item > a {             position: relative;             display: inline-block;             padding: 0.5em 1em;             margin: 0 0 -1px 0;             border: 1px solid transparent;         }         /* focus/open states of first descendant link within a top level             navigation item */         .nav-item > a:focus,         .nav-item > a.open {             border: 1px solid #dedede;         }         /* open state of first descendant link within a top level             navigation item */         .nav-item > a.open {             background-color: #fff;             border-bottom: none;             z-index: 1;         }         /* sub-navigation panel */         .sub-nav {             position: absolute;             display: none;             top: 2.2em;             margin-top: -1px;             padding: 0.5em 1em;             border: 1px solid #dedede;             background-color: #fff;         }         /* sub-navigation panel open state */         .sub-nav.open {             display: block;         }         /* list of items within sub-navigation panel */         .sub-nav ul {             display: inline-block;             vertical-align: top;             margin: 0 1em 0 0;             padding: 0;         }         /* list item within sub-navigation panel */         .sub-nav li {             display: block;             list-style-type: none;             margin: 0;             padding: 0;         }          </style>     </head>     <body>     <nav>         <ul class=""nav-menu"">             <li class=""nav-item"">                 <a href=""?movie"">Movies</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=0"">Action &amp; Adventure</a></li>                         <li><a href=""?movie&genre=2"">Children &amp; Family</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=7"">Dramas</a></li>                         <li><a href=""?movie&genre=9"">Foreign</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=14"">Musicals</a></li>                         <li><a href=""?movie&genre=15"">Romance</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>             <li class=""nav-item"">                 <a href=""?tv"">TV Shows</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=20"">Classic TV</a></li>                         <li><a href=""?tv&genre=21"">Crime TV</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=27"">Reality TV</a></li>                         <li><a href=""?tv&genre=30"">TV Action</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=33"">TV Dramas</a></li>                         <li><a href=""?tv&genre=34"">TV Horror</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>         </ul>     </nav>          <!-- include jquery -->     <script src=""//code.jquery.com/jquery-1.10.1.min.js""></script>     <!-- include the jquery-accessibleMegaMenu plugin script -->     <script src=""js/jquery-accessibleMegaMenu.js""></script>     <!-- initialize a selector as an accessibleMegaMenu -->     <script>         $(""nav:first"").accessibleMegaMenu({             /* prefix for generated unique id attributes, which are required                 to indicate aria-owns, aria-controls and aria-labelledby */             uuidPrefix: ""accessible-megamenu"",                          /* css class used to define the megamenu styling */             menuClass: ""nav-menu"",                          /* css class for a top-level navigation item in the megamenu */             topNavItemClass: ""nav-item"",                          /* css class for a megamenu panel */             panelClass: ""sub-nav"",                          /* css class for a group of items within a megamenu panel */             panelGroupClass: ""sub-nav-group"",                          /* css class for the hover state */             hoverClass: ""hover"",                          /* css class for the focus state */             focusClass: ""focus"",                          /* css class for the open state */             openClass: ""open""         });     </script>     </body>     </html> About A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. Resources Readme License Apache-2.0 License Releases No releases published Packages 0 No packages published Contributors 7 Languages HTML 71.8% CSS 26.4% JavaScript 1.8% © 2021 GitHub, Inc. Terms Privacy Security Status Help Contact GitHub Pricing API Training Blog About You can’t perform that action at this time. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."
417316,20210108,github.com,https://github.com/adobe-accessibility/Accessible-Mega-Menu,text/html,text/html,en,"GitHub - adobe-accessibility/Accessible-Mega-Menu: A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. Skip to content Sign up Why GitHub? Features → Code review Project management Integrations Actions Packages Security Team management Hosting Mobile Customer stories → Security → Team Enterprise Explore Explore GitHub → Learn & contribute Topics Collections Trending Learning Lab Open source guides Connect with others Events Community forum GitHub Education GitHub Stars program Marketplace Pricing Plans → Compare plans Contact Sales Nonprofit → Education → In this repository All GitHub ↵ Jump to ↵ No suggested jump to results In this repository All GitHub ↵ Jump to ↵ In this repository All GitHub ↵ Jump to ↵ Sign in Sign up {{ message }} adobe-accessibility / Accessible-Mega-Menu Watch 50 Star 572 Fork 189 A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. Apache-2.0 License 572 stars 189 forks Star Watch Code Issues 28 Pull requests 6 Actions Projects 0 Security Insights More Code Issues Pull requests Actions Projects Security Insights master 2 branches 0 tags Go to file Code Clone HTTPS GitHub CLI Use Git or checkout with SVN using the web URL. Work fast with our official CLI. Learn more. Open with GitHub Desktop Download ZIP Launching GitHub Desktop If nothing happens, download GitHub Desktop and try again. Go back Launching GitHub Desktop If nothing happens, download GitHub Desktop and try again. Go back Launching Xcode If nothing happens, download Xcode and try again. Go back Launching Visual Studio If nothing happens, download the GitHub extension for Visual Studio and try again. Go back Latest commit Git stats 39 commits Files Permalink Failed to load latest commit information. Type Name Latest commit message Commit time css js third-party/jquery LICENSE NOTICE README.md index.html package.json View code README.md Accessible Mega Menu ========================= A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. It is modeled after the mega menu on adobe.com but has been simplified for use by others. An brief explanation of our interaction design choices can be found in a blog post at Mega menu accessibility on adobe.com. Content for the links and text within the mega menu comes from the Web Content Accessibility Guidelines (WCAG) 2.0. Keyboard Accessibility The accessible mega menu supports keyboard interaction modeled after the behavior described in the WAI-ARIA Menu or Menu bar (widget) design pattern, however we also try to respect users' general expectations for the behavior of links in a global navigation. To this end, the accessible mega menu implementation permits tab focus on each of the six top-level menu items. When one of the menu items has focus, pressing the Enter key, Spacebar or Down arrow will open the submenu panel, and pressing the Left or Right arrow key will shift focus to the adjacent menu item. Links within the submenu panels are included in the tab order when the panel is open. They can also be navigated with the arrow keys or by typing the first character in the link name, which speeds up keyboard navigation considerably. Pressing the Escape key closes the submenu and restores focus to the parent menu item. Screen Reader Accessibility The accessible mega menu models its use of WAI-ARIA Roles, States, and Properties after those described in the WAI-ARIA Menu or Menu bar (widget) design pattern with some notable exceptions, so that it behaves better with screen reader user expectations for global navigation. We don't use role=""menu"" for the menu container and role=""menuitem"" for each of the links therein, because if we do, assistive technology will no longer interpret the links as links, but instead, as menu items, and the links in our global navigation will no longer show up when a screen reader user executes a shortcut command to bring up a list of links in the page. We also want to maintain the semantic structure of the submenu panels in our mega menu; our links are organized into lists and separated by headings. Omitting role=""menu"" and role=""menuitem"" for the global navigation seems the safer way to go. Usage HTML The HTML structure for the mega menu is a nav element, or any other container element, containing a list. Each list item contains a link which is followed by a div or any other container element which will serve as the pop up panel. The panel can contain any html content; in the following example, each panel contains three lists of links. You can explicitly define groups within the panel, between which a user can navigate quickly using the left and right arrow keys; in the following example, the CSS class .sub-nav-group identifies a navigable group.     <nav>         <ul class=""nav-menu"">             <li class=""nav-item"">                 <a href=""?movie"">Movies</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=0"">Action &amp; Adventure</a></li>                         <li><a href=""?movie&genre=2"">Children &amp; Family</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=7"">Dramas</a></li>                         <li><a href=""?movie&genre=9"">Foreign</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=14"">Musicals</a></li>                         <li><a href=""?movie&genre=15"">Romance</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>             <li class=""nav-item"">                 <a href=""?tv"">TV Shows</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=20"">Classic TV</a></li>                         <li><a href=""?tv&genre=21"">Crime TV</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=27"">Reality TV</a></li>                         <li><a href=""?tv&genre=30"">TV Action</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=33"">TV Dramas</a></li>                         <li><a href=""?tv&genre=34"">TV Horror</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>         </ul>     </nav> By default, accessibleMegaMenu uses the the following CSS classes to define the top-level navigation items, panels, groups within the panels, and the hover, focus, and open states. It also defines a prefix for unique id strings, which are required to indicate the relationship of a top-level navigation item to the panel it controls.     defaults = {         /* unique ID's are required to indicate aria-owns, aria-controls and aria-labelledby */         uuidPrefix: ""accessible-megamenu"",                  /* default css class used to define the megamenu styling */         menuClass: ""accessible-megamenu"",                  /* default css class for a top-level navigation item in the megamenu */         topNavItemClass: ""accessible-megamenu-top-nav-item"",                  /* default css class for a megamenu panel */         panelClass: ""accessible-megamenu-panel"",                  /* default css class for a group of items within a megamenu panel */         panelGroupClass: ""accessible-megamenu-panel-group"",                  /* default css class for the hover state */         hoverClass: ""hover"",                  /* default css class for the focus state */         focusClass: ""focus"",                  /* default css class for the open state */         openClass: ""open""      } You can optionally override the defaults to use the CSS classes you may have already defined for your mega menu. JavaScript Be sure to include jQuery and the jquery-accessibleMegaMenu.js plugin script.     <script src=""//code.jquery.com/jquery-1.10.1.min.js""></script>     <script src=""js/jquery-accessibleMegaMenu.js""></script> The following initializes the first nav element in the document as an accessibleMegaMenu, with optional CSS class overrides.     $(""nav:first"").accessibleMegaMenu({         /* prefix for generated unique id attributes, which are required             to indicate aria-owns, aria-controls and aria-labelledby */         uuidPrefix: ""accessible-megamenu"",                  /* css class used to define the megamenu styling */         menuClass: ""nav-menu"",                  /* css class for a top-level navigation item in the megamenu */         topNavItemClass: ""nav-item"",                  /* css class for a megamenu panel */         panelClass: ""sub-nav"",                  /* css class for a group of items within a megamenu panel */         panelGroupClass: ""sub-nav-group"",                  /* css class for the hover state */         hoverClass: ""hover"",                  /* css class for the focus state */         focusClass: ""focus"",                  /* css class for the open state */         openClass: ""open""     }); CSS AccessibleMegaMenu handles the showing and hiding of panels by adding or removing a CSS class. No inline styles are added to hide elements or create animation between states. Following is some rudimentary CSS for our example which enables the showing/hiding of and the layout of lists panels in the mega menu.     /* mega menu list */     .nav-menu {         display: block;         position: relative;         list-style: none;         margin: 0;         padding: 0;         z-index: 15;     }     /* a top level navigation item in the mega menu */     .nav-item {         list-style: none;         display: inline-block;         padding: 0;         margin: 0;     }     /* first descendant link within a top level navigation item */     .nav-item > a {         position: relative;         display: inline-block;         padding: 0.5em 1em;         margin: 0 0 -1px 0;         border: 1px solid transparent;     }     /* focus/open states of first descendant link within a top level         navigation item */     .nav-item > a:focus,     .nav-item > a.open {         border: 1px solid #dedede;     }     /* open state of first descendant link within a top level         navigation item */     .nav-item > a.open {         background-color: #fff;         border-bottom: none;         z-index: 1;     }     /* sub-navigation panel */     .sub-nav {         position: absolute;         display: none;         top: 2.2em;         margin-top: -1px;         padding: 0.5em 1em;         border: 1px solid #dedede;         background-color: #fff;     }     /* sub-navigation panel open state */     .sub-nav.open {         display: block;     }     /* list of items within sub-navigation panel */     .sub-nav ul {         display: inline-block;         vertical-align: top;         margin: 0 1em 0 0;         padding: 0;     }     /* list item within sub-navigation panel */     .sub-nav li {         display: block;         list-style-type: none;         margin: 0;         padding: 0;     }   Putting it all together, here is the completed example:     <!doctype html>     <html lang=""en"">     <head>     <meta charset=""UTF-8"">     <title>Simple Accessible Mega Menu Example</title>     <style>         /* Rudimentary mega menu CSS for demonstration */             /* mega menu list */         .nav-menu {             display: block;             position: relative;             list-style: none;             margin: 0;             padding: 0;             z-index: 15;         }         /* a top level navigation item in the mega menu */         .nav-item {             list-style: none;             display: inline-block;             padding: 0;             margin: 0;         }         /* first descendant link within a top level navigation item */         .nav-item > a {             position: relative;             display: inline-block;             padding: 0.5em 1em;             margin: 0 0 -1px 0;             border: 1px solid transparent;         }         /* focus/open states of first descendant link within a top level             navigation item */         .nav-item > a:focus,         .nav-item > a.open {             border: 1px solid #dedede;         }         /* open state of first descendant link within a top level             navigation item */         .nav-item > a.open {             background-color: #fff;             border-bottom: none;             z-index: 1;         }         /* sub-navigation panel */         .sub-nav {             position: absolute;             display: none;             top: 2.2em;             margin-top: -1px;             padding: 0.5em 1em;             border: 1px solid #dedede;             background-color: #fff;         }         /* sub-navigation panel open state */         .sub-nav.open {             display: block;         }         /* list of items within sub-navigation panel */         .sub-nav ul {             display: inline-block;             vertical-align: top;             margin: 0 1em 0 0;             padding: 0;         }         /* list item within sub-navigation panel */         .sub-nav li {             display: block;             list-style-type: none;             margin: 0;             padding: 0;         }          </style>     </head>     <body>     <nav>         <ul class=""nav-menu"">             <li class=""nav-item"">                 <a href=""?movie"">Movies</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=0"">Action &amp; Adventure</a></li>                         <li><a href=""?movie&genre=2"">Children &amp; Family</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=7"">Dramas</a></li>                         <li><a href=""?movie&genre=9"">Foreign</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=14"">Musicals</a></li>                         <li><a href=""?movie&genre=15"">Romance</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>             <li class=""nav-item"">                 <a href=""?tv"">TV Shows</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=20"">Classic TV</a></li>                         <li><a href=""?tv&genre=21"">Crime TV</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=27"">Reality TV</a></li>                         <li><a href=""?tv&genre=30"">TV Action</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=33"">TV Dramas</a></li>                         <li><a href=""?tv&genre=34"">TV Horror</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>         </ul>     </nav>          <!-- include jquery -->     <script src=""//code.jquery.com/jquery-1.10.1.min.js""></script>     <!-- include the jquery-accessibleMegaMenu plugin script -->     <script src=""js/jquery-accessibleMegaMenu.js""></script>     <!-- initialize a selector as an accessibleMegaMenu -->     <script>         $(""nav:first"").accessibleMegaMenu({             /* prefix for generated unique id attributes, which are required                 to indicate aria-owns, aria-controls and aria-labelledby */             uuidPrefix: ""accessible-megamenu"",                          /* css class used to define the megamenu styling */             menuClass: ""nav-menu"",                          /* css class for a top-level navigation item in the megamenu */             topNavItemClass: ""nav-item"",                          /* css class for a megamenu panel */             panelClass: ""sub-nav"",                          /* css class for a group of items within a megamenu panel */             panelGroupClass: ""sub-nav-group"",                          /* css class for the hover state */             hoverClass: ""hover"",                          /* css class for the focus state */             focusClass: ""focus"",                          /* css class for the open state */             openClass: ""open""         });     </script>     </body>     </html> About A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. Resources Readme License Apache-2.0 License Releases No releases published Packages 0 No packages published Used by 15 + 7 Contributors 7 Languages HTML 71.8% CSS 26.4% JavaScript 1.8% © 2021 GitHub, Inc. Terms Privacy Security Status Help Contact GitHub Pricing API Training Blog About You can’t perform that action at this time. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."
426520,20210115,github.com,https://github.com/adobe-accessibility/Accessible-Mega-Menu,text/html,text/html,en,"GitHub - adobe-accessibility/Accessible-Mega-Menu: A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. Skip to content Sign up Why GitHub? Features → Code review Project management Integrations Actions Packages Security Team management Hosting Mobile Customer stories → Security → Team Enterprise Explore Explore GitHub → Learn & contribute Topics Collections Trending Learning Lab Open source guides Connect with others Events Community forum GitHub Education GitHub Stars program Marketplace Pricing Plans → Compare plans Contact Sales Nonprofit → Education → In this repository All GitHub ↵ Jump to ↵ No suggested jump to results In this repository All GitHub ↵ Jump to ↵ In this organization All GitHub ↵ Jump to ↵ In this repository All GitHub ↵ Jump to ↵ Sign in Sign up {{ message }} adobe-accessibility / Accessible-Mega-Menu Watch 50 Star 573 Fork 192 A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. Apache-2.0 License 573 stars 192 forks Star Watch Code Issues 28 Pull requests 6 Actions Projects 0 Security Insights More Code Issues Pull requests Actions Projects Security Insights master 2 branches 0 tags Go to file Code Clone HTTPS GitHub CLI Use Git or checkout with SVN using the web URL. Work fast with our official CLI. Learn more. Open with GitHub Desktop Download ZIP Launching GitHub Desktop If nothing happens, download GitHub Desktop and try again. Go back Launching GitHub Desktop If nothing happens, download GitHub Desktop and try again. Go back Launching Xcode If nothing happens, download Xcode and try again. Go back Launching Visual Studio If nothing happens, download the GitHub extension for Visual Studio and try again. Go back Latest commit majornista fix evaluation for ChromeVox object … 5c070bc Dec 7, 2020 fix evaluation for ChromeVox object 5c070bc Git stats 39 commits Files Permalink Failed to load latest commit information. Type Name Latest commit message Commit time css Add openOnMouseover setting, and toggleButtonClass for responsive layout May 11, 2018 js fix evaluation for ChromeVox object Dec 7, 2020 third-party/jquery initial commit Aug 26, 2013 LICENSE initial commit Aug 26, 2013 NOTICE initial commit Aug 26, 2013 README.md initial commit Aug 26, 2013 index.html Updating WCAG 2.0 References to WCAG 2.1 (#67) Dec 4, 2020 package.json Updating repo references Jul 8, 2016 View code README.md Accessible Mega Menu ========================= A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. It is modeled after the mega menu on adobe.com but has been simplified for use by others. An brief explanation of our interaction design choices can be found in a blog post at Mega menu accessibility on adobe.com. Content for the links and text within the mega menu comes from the Web Content Accessibility Guidelines (WCAG) 2.0. Keyboard Accessibility The accessible mega menu supports keyboard interaction modeled after the behavior described in the WAI-ARIA Menu or Menu bar (widget) design pattern, however we also try to respect users' general expectations for the behavior of links in a global navigation. To this end, the accessible mega menu implementation permits tab focus on each of the six top-level menu items. When one of the menu items has focus, pressing the Enter key, Spacebar or Down arrow will open the submenu panel, and pressing the Left or Right arrow key will shift focus to the adjacent menu item. Links within the submenu panels are included in the tab order when the panel is open. They can also be navigated with the arrow keys or by typing the first character in the link name, which speeds up keyboard navigation considerably. Pressing the Escape key closes the submenu and restores focus to the parent menu item. Screen Reader Accessibility The accessible mega menu models its use of WAI-ARIA Roles, States, and Properties after those described in the WAI-ARIA Menu or Menu bar (widget) design pattern with some notable exceptions, so that it behaves better with screen reader user expectations for global navigation. We don't use role=""menu"" for the menu container and role=""menuitem"" for each of the links therein, because if we do, assistive technology will no longer interpret the links as links, but instead, as menu items, and the links in our global navigation will no longer show up when a screen reader user executes a shortcut command to bring up a list of links in the page. We also want to maintain the semantic structure of the submenu panels in our mega menu; our links are organized into lists and separated by headings. Omitting role=""menu"" and role=""menuitem"" for the global navigation seems the safer way to go. Usage HTML The HTML structure for the mega menu is a nav element, or any other container element, containing a list. Each list item contains a link which is followed by a div or any other container element which will serve as the pop up panel. The panel can contain any html content; in the following example, each panel contains three lists of links. You can explicitly define groups within the panel, between which a user can navigate quickly using the left and right arrow keys; in the following example, the CSS class .sub-nav-group identifies a navigable group.     <nav>         <ul class=""nav-menu"">             <li class=""nav-item"">                 <a href=""?movie"">Movies</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=0"">Action &amp; Adventure</a></li>                         <li><a href=""?movie&genre=2"">Children &amp; Family</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=7"">Dramas</a></li>                         <li><a href=""?movie&genre=9"">Foreign</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=14"">Musicals</a></li>                         <li><a href=""?movie&genre=15"">Romance</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>             <li class=""nav-item"">                 <a href=""?tv"">TV Shows</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=20"">Classic TV</a></li>                         <li><a href=""?tv&genre=21"">Crime TV</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=27"">Reality TV</a></li>                         <li><a href=""?tv&genre=30"">TV Action</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=33"">TV Dramas</a></li>                         <li><a href=""?tv&genre=34"">TV Horror</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>         </ul>     </nav> By default, accessibleMegaMenu uses the the following CSS classes to define the top-level navigation items, panels, groups within the panels, and the hover, focus, and open states. It also defines a prefix for unique id strings, which are required to indicate the relationship of a top-level navigation item to the panel it controls.     defaults = {         /* unique ID's are required to indicate aria-owns, aria-controls and aria-labelledby */         uuidPrefix: ""accessible-megamenu"",                  /* default css class used to define the megamenu styling */         menuClass: ""accessible-megamenu"",                  /* default css class for a top-level navigation item in the megamenu */         topNavItemClass: ""accessible-megamenu-top-nav-item"",                  /* default css class for a megamenu panel */         panelClass: ""accessible-megamenu-panel"",                  /* default css class for a group of items within a megamenu panel */         panelGroupClass: ""accessible-megamenu-panel-group"",                  /* default css class for the hover state */         hoverClass: ""hover"",                  /* default css class for the focus state */         focusClass: ""focus"",                  /* default css class for the open state */         openClass: ""open""      } You can optionally override the defaults to use the CSS classes you may have already defined for your mega menu. JavaScript Be sure to include jQuery and the jquery-accessibleMegaMenu.js plugin script.     <script src=""//code.jquery.com/jquery-1.10.1.min.js""></script>     <script src=""js/jquery-accessibleMegaMenu.js""></script> The following initializes the first nav element in the document as an accessibleMegaMenu, with optional CSS class overrides.     $(""nav:first"").accessibleMegaMenu({         /* prefix for generated unique id attributes, which are required             to indicate aria-owns, aria-controls and aria-labelledby */         uuidPrefix: ""accessible-megamenu"",                  /* css class used to define the megamenu styling */         menuClass: ""nav-menu"",                  /* css class for a top-level navigation item in the megamenu */         topNavItemClass: ""nav-item"",                  /* css class for a megamenu panel */         panelClass: ""sub-nav"",                  /* css class for a group of items within a megamenu panel */         panelGroupClass: ""sub-nav-group"",                  /* css class for the hover state */         hoverClass: ""hover"",                  /* css class for the focus state */         focusClass: ""focus"",                  /* css class for the open state */         openClass: ""open""     }); CSS AccessibleMegaMenu handles the showing and hiding of panels by adding or removing a CSS class. No inline styles are added to hide elements or create animation between states. Following is some rudimentary CSS for our example which enables the showing/hiding of and the layout of lists panels in the mega menu.     /* mega menu list */     .nav-menu {         display: block;         position: relative;         list-style: none;         margin: 0;         padding: 0;         z-index: 15;     }     /* a top level navigation item in the mega menu */     .nav-item {         list-style: none;         display: inline-block;         padding: 0;         margin: 0;     }     /* first descendant link within a top level navigation item */     .nav-item > a {         position: relative;         display: inline-block;         padding: 0.5em 1em;         margin: 0 0 -1px 0;         border: 1px solid transparent;     }     /* focus/open states of first descendant link within a top level         navigation item */     .nav-item > a:focus,     .nav-item > a.open {         border: 1px solid #dedede;     }     /* open state of first descendant link within a top level         navigation item */     .nav-item > a.open {         background-color: #fff;         border-bottom: none;         z-index: 1;     }     /* sub-navigation panel */     .sub-nav {         position: absolute;         display: none;         top: 2.2em;         margin-top: -1px;         padding: 0.5em 1em;         border: 1px solid #dedede;         background-color: #fff;     }     /* sub-navigation panel open state */     .sub-nav.open {         display: block;     }     /* list of items within sub-navigation panel */     .sub-nav ul {         display: inline-block;         vertical-align: top;         margin: 0 1em 0 0;         padding: 0;     }     /* list item within sub-navigation panel */     .sub-nav li {         display: block;         list-style-type: none;         margin: 0;         padding: 0;     }   Putting it all together, here is the completed example:     <!doctype html>     <html lang=""en"">     <head>     <meta charset=""UTF-8"">     <title>Simple Accessible Mega Menu Example</title>     <style>         /* Rudimentary mega menu CSS for demonstration */             /* mega menu list */         .nav-menu {             display: block;             position: relative;             list-style: none;             margin: 0;             padding: 0;             z-index: 15;         }         /* a top level navigation item in the mega menu */         .nav-item {             list-style: none;             display: inline-block;             padding: 0;             margin: 0;         }         /* first descendant link within a top level navigation item */         .nav-item > a {             position: relative;             display: inline-block;             padding: 0.5em 1em;             margin: 0 0 -1px 0;             border: 1px solid transparent;         }         /* focus/open states of first descendant link within a top level             navigation item */         .nav-item > a:focus,         .nav-item > a.open {             border: 1px solid #dedede;         }         /* open state of first descendant link within a top level             navigation item */         .nav-item > a.open {             background-color: #fff;             border-bottom: none;             z-index: 1;         }         /* sub-navigation panel */         .sub-nav {             position: absolute;             display: none;             top: 2.2em;             margin-top: -1px;             padding: 0.5em 1em;             border: 1px solid #dedede;             background-color: #fff;         }         /* sub-navigation panel open state */         .sub-nav.open {             display: block;         }         /* list of items within sub-navigation panel */         .sub-nav ul {             display: inline-block;             vertical-align: top;             margin: 0 1em 0 0;             padding: 0;         }         /* list item within sub-navigation panel */         .sub-nav li {             display: block;             list-style-type: none;             margin: 0;             padding: 0;         }          </style>     </head>     <body>     <nav>         <ul class=""nav-menu"">             <li class=""nav-item"">                 <a href=""?movie"">Movies</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=0"">Action &amp; Adventure</a></li>                         <li><a href=""?movie&genre=2"">Children &amp; Family</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=7"">Dramas</a></li>                         <li><a href=""?movie&genre=9"">Foreign</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=14"">Musicals</a></li>                         <li><a href=""?movie&genre=15"">Romance</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>             <li class=""nav-item"">                 <a href=""?tv"">TV Shows</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=20"">Classic TV</a></li>                         <li><a href=""?tv&genre=21"">Crime TV</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=27"">Reality TV</a></li>                         <li><a href=""?tv&genre=30"">TV Action</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=33"">TV Dramas</a></li>                         <li><a href=""?tv&genre=34"">TV Horror</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>         </ul>     </nav>          <!-- include jquery -->     <script src=""//code.jquery.com/jquery-1.10.1.min.js""></script>     <!-- include the jquery-accessibleMegaMenu plugin script -->     <script src=""js/jquery-accessibleMegaMenu.js""></script>     <!-- initialize a selector as an accessibleMegaMenu -->     <script>         $(""nav:first"").accessibleMegaMenu({             /* prefix for generated unique id attributes, which are required                 to indicate aria-owns, aria-controls and aria-labelledby */             uuidPrefix: ""accessible-megamenu"",                          /* css class used to define the megamenu styling */             menuClass: ""nav-menu"",                          /* css class for a top-level navigation item in the megamenu */             topNavItemClass: ""nav-item"",                          /* css class for a megamenu panel */             panelClass: ""sub-nav"",                          /* css class for a group of items within a megamenu panel */             panelGroupClass: ""sub-nav-group"",                          /* css class for the hover state */             hoverClass: ""hover"",                          /* css class for the focus state */             focusClass: ""focus"",                          /* css class for the open state */             openClass: ""open""         });     </script>     </body>     </html> About A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. Resources Readme License Apache-2.0 License Releases No releases published Packages 0 No packages published Used by 15 + 7 Contributors 7 Languages HTML 71.8% CSS 26.4% JavaScript 1.8% © 2021 GitHub, Inc. Terms Privacy Security Status Help Contact GitHub Pricing API Training Blog About You can’t perform that action at this time. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."
435882,20210122,github.com,https://github.com/adobe-accessibility/Accessible-Mega-Menu,text/html,text/html,en,"GitHub - adobe-accessibility/Accessible-Mega-Menu: A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. Skip to content Sign up Why GitHub? Features → Mobile → Actions → Codespaces → Packages → Security → Code review → Project management → Integrations → GitHub Sponsors → Customer stories → Security → Team Enterprise Explore Explore GitHub → Learn & contribute Topics → Collections → Trending → Learning Lab → Open source guides → Connect with others The ReadME Project → Events → Community forum → GitHub Education → GitHub Stars program → Marketplace Pricing Plans → Compare plans → Contact Sales → Nonprofit → Education → In this repository All GitHub ↵ Jump to ↵ No suggested jump to results In this repository All GitHub ↵ Jump to ↵ In this organization All GitHub ↵ Jump to ↵ In this repository All GitHub ↵ Jump to ↵ Sign in Sign up {{ message }} adobe-accessibility / Accessible-Mega-Menu Watch 50 Star 575 Fork 193 A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. Apache-2.0 License 575 stars 193 forks Star Watch Code Issues 28 Pull requests 6 Actions Projects 0 Security Insights More Code Issues Pull requests Actions Projects Security Insights master 2 branches 0 tags Go to file Code Clone HTTPS GitHub CLI Use Git or checkout with SVN using the web URL. Work fast with our official CLI. Learn more. Open with GitHub Desktop Download ZIP Launching GitHub Desktop If nothing happens, download GitHub Desktop and try again. Go back Launching GitHub Desktop If nothing happens, download GitHub Desktop and try again. Go back Launching Xcode If nothing happens, download Xcode and try again. Go back Launching Visual Studio If nothing happens, download the GitHub extension for Visual Studio and try again. Go back Latest commit majornista fix evaluation for ChromeVox object … 5c070bc Dec 7, 2020 fix evaluation for ChromeVox object 5c070bc Git stats 39 commits Files Permalink Failed to load latest commit information. Type Name Latest commit message Commit time css Add openOnMouseover setting, and toggleButtonClass for responsive layout May 11, 2018 js fix evaluation for ChromeVox object Dec 7, 2020 third-party/jquery initial commit Aug 26, 2013 LICENSE initial commit Aug 26, 2013 NOTICE initial commit Aug 26, 2013 README.md initial commit Aug 26, 2013 index.html Updating WCAG 2.0 References to WCAG 2.1 (#67) Dec 4, 2020 package.json Updating repo references Jul 8, 2016 View code README.md Accessible Mega Menu ========================= A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. It is modeled after the mega menu on adobe.com but has been simplified for use by others. An brief explanation of our interaction design choices can be found in a blog post at Mega menu accessibility on adobe.com. Content for the links and text within the mega menu comes from the Web Content Accessibility Guidelines (WCAG) 2.0. Keyboard Accessibility The accessible mega menu supports keyboard interaction modeled after the behavior described in the WAI-ARIA Menu or Menu bar (widget) design pattern, however we also try to respect users' general expectations for the behavior of links in a global navigation. To this end, the accessible mega menu implementation permits tab focus on each of the six top-level menu items. When one of the menu items has focus, pressing the Enter key, Spacebar or Down arrow will open the submenu panel, and pressing the Left or Right arrow key will shift focus to the adjacent menu item. Links within the submenu panels are included in the tab order when the panel is open. They can also be navigated with the arrow keys or by typing the first character in the link name, which speeds up keyboard navigation considerably. Pressing the Escape key closes the submenu and restores focus to the parent menu item. Screen Reader Accessibility The accessible mega menu models its use of WAI-ARIA Roles, States, and Properties after those described in the WAI-ARIA Menu or Menu bar (widget) design pattern with some notable exceptions, so that it behaves better with screen reader user expectations for global navigation. We don't use role=""menu"" for the menu container and role=""menuitem"" for each of the links therein, because if we do, assistive technology will no longer interpret the links as links, but instead, as menu items, and the links in our global navigation will no longer show up when a screen reader user executes a shortcut command to bring up a list of links in the page. We also want to maintain the semantic structure of the submenu panels in our mega menu; our links are organized into lists and separated by headings. Omitting role=""menu"" and role=""menuitem"" for the global navigation seems the safer way to go. Usage HTML The HTML structure for the mega menu is a nav element, or any other container element, containing a list. Each list item contains a link which is followed by a div or any other container element which will serve as the pop up panel. The panel can contain any html content; in the following example, each panel contains three lists of links. You can explicitly define groups within the panel, between which a user can navigate quickly using the left and right arrow keys; in the following example, the CSS class .sub-nav-group identifies a navigable group.     <nav>         <ul class=""nav-menu"">             <li class=""nav-item"">                 <a href=""?movie"">Movies</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=0"">Action &amp; Adventure</a></li>                         <li><a href=""?movie&genre=2"">Children &amp; Family</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=7"">Dramas</a></li>                         <li><a href=""?movie&genre=9"">Foreign</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=14"">Musicals</a></li>                         <li><a href=""?movie&genre=15"">Romance</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>             <li class=""nav-item"">                 <a href=""?tv"">TV Shows</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=20"">Classic TV</a></li>                         <li><a href=""?tv&genre=21"">Crime TV</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=27"">Reality TV</a></li>                         <li><a href=""?tv&genre=30"">TV Action</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=33"">TV Dramas</a></li>                         <li><a href=""?tv&genre=34"">TV Horror</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>         </ul>     </nav> By default, accessibleMegaMenu uses the the following CSS classes to define the top-level navigation items, panels, groups within the panels, and the hover, focus, and open states. It also defines a prefix for unique id strings, which are required to indicate the relationship of a top-level navigation item to the panel it controls.     defaults = {         /* unique ID's are required to indicate aria-owns, aria-controls and aria-labelledby */         uuidPrefix: ""accessible-megamenu"",                  /* default css class used to define the megamenu styling */         menuClass: ""accessible-megamenu"",                  /* default css class for a top-level navigation item in the megamenu */         topNavItemClass: ""accessible-megamenu-top-nav-item"",                  /* default css class for a megamenu panel */         panelClass: ""accessible-megamenu-panel"",                  /* default css class for a group of items within a megamenu panel */         panelGroupClass: ""accessible-megamenu-panel-group"",                  /* default css class for the hover state */         hoverClass: ""hover"",                  /* default css class for the focus state */         focusClass: ""focus"",                  /* default css class for the open state */         openClass: ""open""      } You can optionally override the defaults to use the CSS classes you may have already defined for your mega menu. JavaScript Be sure to include jQuery and the jquery-accessibleMegaMenu.js plugin script.     <script src=""//code.jquery.com/jquery-1.10.1.min.js""></script>     <script src=""js/jquery-accessibleMegaMenu.js""></script> The following initializes the first nav element in the document as an accessibleMegaMenu, with optional CSS class overrides.     $(""nav:first"").accessibleMegaMenu({         /* prefix for generated unique id attributes, which are required             to indicate aria-owns, aria-controls and aria-labelledby */         uuidPrefix: ""accessible-megamenu"",                  /* css class used to define the megamenu styling */         menuClass: ""nav-menu"",                  /* css class for a top-level navigation item in the megamenu */         topNavItemClass: ""nav-item"",                  /* css class for a megamenu panel */         panelClass: ""sub-nav"",                  /* css class for a group of items within a megamenu panel */         panelGroupClass: ""sub-nav-group"",                  /* css class for the hover state */         hoverClass: ""hover"",                  /* css class for the focus state */         focusClass: ""focus"",                  /* css class for the open state */         openClass: ""open""     }); CSS AccessibleMegaMenu handles the showing and hiding of panels by adding or removing a CSS class. No inline styles are added to hide elements or create animation between states. Following is some rudimentary CSS for our example which enables the showing/hiding of and the layout of lists panels in the mega menu.     /* mega menu list */     .nav-menu {         display: block;         position: relative;         list-style: none;         margin: 0;         padding: 0;         z-index: 15;     }     /* a top level navigation item in the mega menu */     .nav-item {         list-style: none;         display: inline-block;         padding: 0;         margin: 0;     }     /* first descendant link within a top level navigation item */     .nav-item > a {         position: relative;         display: inline-block;         padding: 0.5em 1em;         margin: 0 0 -1px 0;         border: 1px solid transparent;     }     /* focus/open states of first descendant link within a top level         navigation item */     .nav-item > a:focus,     .nav-item > a.open {         border: 1px solid #dedede;     }     /* open state of first descendant link within a top level         navigation item */     .nav-item > a.open {         background-color: #fff;         border-bottom: none;         z-index: 1;     }     /* sub-navigation panel */     .sub-nav {         position: absolute;         display: none;         top: 2.2em;         margin-top: -1px;         padding: 0.5em 1em;         border: 1px solid #dedede;         background-color: #fff;     }     /* sub-navigation panel open state */     .sub-nav.open {         display: block;     }     /* list of items within sub-navigation panel */     .sub-nav ul {         display: inline-block;         vertical-align: top;         margin: 0 1em 0 0;         padding: 0;     }     /* list item within sub-navigation panel */     .sub-nav li {         display: block;         list-style-type: none;         margin: 0;         padding: 0;     }   Putting it all together, here is the completed example:     <!doctype html>     <html lang=""en"">     <head>     <meta charset=""UTF-8"">     <title>Simple Accessible Mega Menu Example</title>     <style>         /* Rudimentary mega menu CSS for demonstration */             /* mega menu list */         .nav-menu {             display: block;             position: relative;             list-style: none;             margin: 0;             padding: 0;             z-index: 15;         }         /* a top level navigation item in the mega menu */         .nav-item {             list-style: none;             display: inline-block;             padding: 0;             margin: 0;         }         /* first descendant link within a top level navigation item */         .nav-item > a {             position: relative;             display: inline-block;             padding: 0.5em 1em;             margin: 0 0 -1px 0;             border: 1px solid transparent;         }         /* focus/open states of first descendant link within a top level             navigation item */         .nav-item > a:focus,         .nav-item > a.open {             border: 1px solid #dedede;         }         /* open state of first descendant link within a top level             navigation item */         .nav-item > a.open {             background-color: #fff;             border-bottom: none;             z-index: 1;         }         /* sub-navigation panel */         .sub-nav {             position: absolute;             display: none;             top: 2.2em;             margin-top: -1px;             padding: 0.5em 1em;             border: 1px solid #dedede;             background-color: #fff;         }         /* sub-navigation panel open state */         .sub-nav.open {             display: block;         }         /* list of items within sub-navigation panel */         .sub-nav ul {             display: inline-block;             vertical-align: top;             margin: 0 1em 0 0;             padding: 0;         }         /* list item within sub-navigation panel */         .sub-nav li {             display: block;             list-style-type: none;             margin: 0;             padding: 0;         }          </style>     </head>     <body>     <nav>         <ul class=""nav-menu"">             <li class=""nav-item"">                 <a href=""?movie"">Movies</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=0"">Action &amp; Adventure</a></li>                         <li><a href=""?movie&genre=2"">Children &amp; Family</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=7"">Dramas</a></li>                         <li><a href=""?movie&genre=9"">Foreign</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=14"">Musicals</a></li>                         <li><a href=""?movie&genre=15"">Romance</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>             <li class=""nav-item"">                 <a href=""?tv"">TV Shows</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=20"">Classic TV</a></li>                         <li><a href=""?tv&genre=21"">Crime TV</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=27"">Reality TV</a></li>                         <li><a href=""?tv&genre=30"">TV Action</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=33"">TV Dramas</a></li>                         <li><a href=""?tv&genre=34"">TV Horror</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>         </ul>     </nav>          <!-- include jquery -->     <script src=""//code.jquery.com/jquery-1.10.1.min.js""></script>     <!-- include the jquery-accessibleMegaMenu plugin script -->     <script src=""js/jquery-accessibleMegaMenu.js""></script>     <!-- initialize a selector as an accessibleMegaMenu -->     <script>         $(""nav:first"").accessibleMegaMenu({             /* prefix for generated unique id attributes, which are required                 to indicate aria-owns, aria-controls and aria-labelledby */             uuidPrefix: ""accessible-megamenu"",                          /* css class used to define the megamenu styling */             menuClass: ""nav-menu"",                          /* css class for a top-level navigation item in the megamenu */             topNavItemClass: ""nav-item"",                          /* css class for a megamenu panel */             panelClass: ""sub-nav"",                          /* css class for a group of items within a megamenu panel */             panelGroupClass: ""sub-nav-group"",                          /* css class for the hover state */             hoverClass: ""hover"",                          /* css class for the focus state */             focusClass: ""focus"",                          /* css class for the open state */             openClass: ""open""         });     </script>     </body>     </html> About A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. Resources Readme License Apache-2.0 License Releases No releases published Packages 0 No packages published Used by 15 + 7 Contributors 7 Languages HTML 71.8% CSS 26.4% JavaScript 1.8% © 2021 GitHub, Inc. Terms Privacy Security Status Docs Contact GitHub Pricing API Training Blog About You can’t perform that action at this time. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."
445084,20210129,github.com,https://github.com/adobe-accessibility/Accessible-Mega-Menu,text/html,text/html,en,"GitHub - adobe-accessibility/Accessible-Mega-Menu: A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. Skip to content Sign up Why GitHub? Features → Mobile → Actions → Codespaces → Packages → Security → Code review → Project management → Integrations → GitHub Sponsors → Customer stories → Security → Team Enterprise Explore Explore GitHub → Learn & contribute Topics → Collections → Trending → Learning Lab → Open source guides → Connect with others The ReadME Project → Events → Community forum → GitHub Education → GitHub Stars program → Marketplace Pricing Plans → Compare plans → Contact Sales → Nonprofit → Education → In this repository All GitHub ↵ Jump to ↵ No suggested jump to results In this repository All GitHub ↵ Jump to ↵ In this organization All GitHub ↵ Jump to ↵ In this repository All GitHub ↵ Jump to ↵ Sign in Sign up {{ message }} adobe-accessibility / Accessible-Mega-Menu Watch 50 Star 575 Fork 194 A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. Apache-2.0 License 575 stars 194 forks Star Watch Code Issues 28 Pull requests 6 Actions Projects 0 Security Insights More Code Issues Pull requests Actions Projects Security Insights master 2 branches 0 tags Go to file Code Clone HTTPS GitHub CLI Use Git or checkout with SVN using the web URL. Work fast with our official CLI. Learn more. Open with GitHub Desktop Download ZIP Launching GitHub Desktop If nothing happens, download GitHub Desktop and try again. Go back Launching GitHub Desktop If nothing happens, download GitHub Desktop and try again. Go back Launching Xcode If nothing happens, download Xcode and try again. Go back Launching Visual Studio If nothing happens, download the GitHub extension for Visual Studio and try again. Go back Latest commit majornista fix evaluation for ChromeVox object … 5c070bc Dec 7, 2020 fix evaluation for ChromeVox object 5c070bc Git stats 39 commits Files Permalink Failed to load latest commit information. Type Name Latest commit message Commit time css Add openOnMouseover setting, and toggleButtonClass for responsive layout May 11, 2018 js fix evaluation for ChromeVox object Dec 7, 2020 third-party/jquery initial commit Aug 26, 2013 LICENSE initial commit Aug 26, 2013 NOTICE initial commit Aug 26, 2013 README.md initial commit Aug 26, 2013 index.html Updating WCAG 2.0 References to WCAG 2.1 (#67) Dec 4, 2020 package.json Updating repo references Jul 8, 2016 View code README.md Accessible Mega Menu ========================= A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. It is modeled after the mega menu on adobe.com but has been simplified for use by others. An brief explanation of our interaction design choices can be found in a blog post at Mega menu accessibility on adobe.com. Content for the links and text within the mega menu comes from the Web Content Accessibility Guidelines (WCAG) 2.0. Keyboard Accessibility The accessible mega menu supports keyboard interaction modeled after the behavior described in the WAI-ARIA Menu or Menu bar (widget) design pattern, however we also try to respect users' general expectations for the behavior of links in a global navigation. To this end, the accessible mega menu implementation permits tab focus on each of the six top-level menu items. When one of the menu items has focus, pressing the Enter key, Spacebar or Down arrow will open the submenu panel, and pressing the Left or Right arrow key will shift focus to the adjacent menu item. Links within the submenu panels are included in the tab order when the panel is open. They can also be navigated with the arrow keys or by typing the first character in the link name, which speeds up keyboard navigation considerably. Pressing the Escape key closes the submenu and restores focus to the parent menu item. Screen Reader Accessibility The accessible mega menu models its use of WAI-ARIA Roles, States, and Properties after those described in the WAI-ARIA Menu or Menu bar (widget) design pattern with some notable exceptions, so that it behaves better with screen reader user expectations for global navigation. We don't use role=""menu"" for the menu container and role=""menuitem"" for each of the links therein, because if we do, assistive technology will no longer interpret the links as links, but instead, as menu items, and the links in our global navigation will no longer show up when a screen reader user executes a shortcut command to bring up a list of links in the page. We also want to maintain the semantic structure of the submenu panels in our mega menu; our links are organized into lists and separated by headings. Omitting role=""menu"" and role=""menuitem"" for the global navigation seems the safer way to go. Usage HTML The HTML structure for the mega menu is a nav element, or any other container element, containing a list. Each list item contains a link which is followed by a div or any other container element which will serve as the pop up panel. The panel can contain any html content; in the following example, each panel contains three lists of links. You can explicitly define groups within the panel, between which a user can navigate quickly using the left and right arrow keys; in the following example, the CSS class .sub-nav-group identifies a navigable group.     <nav>         <ul class=""nav-menu"">             <li class=""nav-item"">                 <a href=""?movie"">Movies</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=0"">Action &amp; Adventure</a></li>                         <li><a href=""?movie&genre=2"">Children &amp; Family</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=7"">Dramas</a></li>                         <li><a href=""?movie&genre=9"">Foreign</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=14"">Musicals</a></li>                         <li><a href=""?movie&genre=15"">Romance</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>             <li class=""nav-item"">                 <a href=""?tv"">TV Shows</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=20"">Classic TV</a></li>                         <li><a href=""?tv&genre=21"">Crime TV</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=27"">Reality TV</a></li>                         <li><a href=""?tv&genre=30"">TV Action</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=33"">TV Dramas</a></li>                         <li><a href=""?tv&genre=34"">TV Horror</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>         </ul>     </nav> By default, accessibleMegaMenu uses the the following CSS classes to define the top-level navigation items, panels, groups within the panels, and the hover, focus, and open states. It also defines a prefix for unique id strings, which are required to indicate the relationship of a top-level navigation item to the panel it controls.     defaults = {         /* unique ID's are required to indicate aria-owns, aria-controls and aria-labelledby */         uuidPrefix: ""accessible-megamenu"",                  /* default css class used to define the megamenu styling */         menuClass: ""accessible-megamenu"",                  /* default css class for a top-level navigation item in the megamenu */         topNavItemClass: ""accessible-megamenu-top-nav-item"",                  /* default css class for a megamenu panel */         panelClass: ""accessible-megamenu-panel"",                  /* default css class for a group of items within a megamenu panel */         panelGroupClass: ""accessible-megamenu-panel-group"",                  /* default css class for the hover state */         hoverClass: ""hover"",                  /* default css class for the focus state */         focusClass: ""focus"",                  /* default css class for the open state */         openClass: ""open""      } You can optionally override the defaults to use the CSS classes you may have already defined for your mega menu. JavaScript Be sure to include jQuery and the jquery-accessibleMegaMenu.js plugin script.     <script src=""//code.jquery.com/jquery-1.10.1.min.js""></script>     <script src=""js/jquery-accessibleMegaMenu.js""></script> The following initializes the first nav element in the document as an accessibleMegaMenu, with optional CSS class overrides.     $(""nav:first"").accessibleMegaMenu({         /* prefix for generated unique id attributes, which are required             to indicate aria-owns, aria-controls and aria-labelledby */         uuidPrefix: ""accessible-megamenu"",                  /* css class used to define the megamenu styling */         menuClass: ""nav-menu"",                  /* css class for a top-level navigation item in the megamenu */         topNavItemClass: ""nav-item"",                  /* css class for a megamenu panel */         panelClass: ""sub-nav"",                  /* css class for a group of items within a megamenu panel */         panelGroupClass: ""sub-nav-group"",                  /* css class for the hover state */         hoverClass: ""hover"",                  /* css class for the focus state */         focusClass: ""focus"",                  /* css class for the open state */         openClass: ""open""     }); CSS AccessibleMegaMenu handles the showing and hiding of panels by adding or removing a CSS class. No inline styles are added to hide elements or create animation between states. Following is some rudimentary CSS for our example which enables the showing/hiding of and the layout of lists panels in the mega menu.     /* mega menu list */     .nav-menu {         display: block;         position: relative;         list-style: none;         margin: 0;         padding: 0;         z-index: 15;     }     /* a top level navigation item in the mega menu */     .nav-item {         list-style: none;         display: inline-block;         padding: 0;         margin: 0;     }     /* first descendant link within a top level navigation item */     .nav-item > a {         position: relative;         display: inline-block;         padding: 0.5em 1em;         margin: 0 0 -1px 0;         border: 1px solid transparent;     }     /* focus/open states of first descendant link within a top level         navigation item */     .nav-item > a:focus,     .nav-item > a.open {         border: 1px solid #dedede;     }     /* open state of first descendant link within a top level         navigation item */     .nav-item > a.open {         background-color: #fff;         border-bottom: none;         z-index: 1;     }     /* sub-navigation panel */     .sub-nav {         position: absolute;         display: none;         top: 2.2em;         margin-top: -1px;         padding: 0.5em 1em;         border: 1px solid #dedede;         background-color: #fff;     }     /* sub-navigation panel open state */     .sub-nav.open {         display: block;     }     /* list of items within sub-navigation panel */     .sub-nav ul {         display: inline-block;         vertical-align: top;         margin: 0 1em 0 0;         padding: 0;     }     /* list item within sub-navigation panel */     .sub-nav li {         display: block;         list-style-type: none;         margin: 0;         padding: 0;     }   Putting it all together, here is the completed example:     <!doctype html>     <html lang=""en"">     <head>     <meta charset=""UTF-8"">     <title>Simple Accessible Mega Menu Example</title>     <style>         /* Rudimentary mega menu CSS for demonstration */             /* mega menu list */         .nav-menu {             display: block;             position: relative;             list-style: none;             margin: 0;             padding: 0;             z-index: 15;         }         /* a top level navigation item in the mega menu */         .nav-item {             list-style: none;             display: inline-block;             padding: 0;             margin: 0;         }         /* first descendant link within a top level navigation item */         .nav-item > a {             position: relative;             display: inline-block;             padding: 0.5em 1em;             margin: 0 0 -1px 0;             border: 1px solid transparent;         }         /* focus/open states of first descendant link within a top level             navigation item */         .nav-item > a:focus,         .nav-item > a.open {             border: 1px solid #dedede;         }         /* open state of first descendant link within a top level             navigation item */         .nav-item > a.open {             background-color: #fff;             border-bottom: none;             z-index: 1;         }         /* sub-navigation panel */         .sub-nav {             position: absolute;             display: none;             top: 2.2em;             margin-top: -1px;             padding: 0.5em 1em;             border: 1px solid #dedede;             background-color: #fff;         }         /* sub-navigation panel open state */         .sub-nav.open {             display: block;         }         /* list of items within sub-navigation panel */         .sub-nav ul {             display: inline-block;             vertical-align: top;             margin: 0 1em 0 0;             padding: 0;         }         /* list item within sub-navigation panel */         .sub-nav li {             display: block;             list-style-type: none;             margin: 0;             padding: 0;         }          </style>     </head>     <body>     <nav>         <ul class=""nav-menu"">             <li class=""nav-item"">                 <a href=""?movie"">Movies</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=0"">Action &amp; Adventure</a></li>                         <li><a href=""?movie&genre=2"">Children &amp; Family</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=7"">Dramas</a></li>                         <li><a href=""?movie&genre=9"">Foreign</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=14"">Musicals</a></li>                         <li><a href=""?movie&genre=15"">Romance</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>             <li class=""nav-item"">                 <a href=""?tv"">TV Shows</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=20"">Classic TV</a></li>                         <li><a href=""?tv&genre=21"">Crime TV</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=27"">Reality TV</a></li>                         <li><a href=""?tv&genre=30"">TV Action</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=33"">TV Dramas</a></li>                         <li><a href=""?tv&genre=34"">TV Horror</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>         </ul>     </nav>          <!-- include jquery -->     <script src=""//code.jquery.com/jquery-1.10.1.min.js""></script>     <!-- include the jquery-accessibleMegaMenu plugin script -->     <script src=""js/jquery-accessibleMegaMenu.js""></script>     <!-- initialize a selector as an accessibleMegaMenu -->     <script>         $(""nav:first"").accessibleMegaMenu({             /* prefix for generated unique id attributes, which are required                 to indicate aria-owns, aria-controls and aria-labelledby */             uuidPrefix: ""accessible-megamenu"",                          /* css class used to define the megamenu styling */             menuClass: ""nav-menu"",                          /* css class for a top-level navigation item in the megamenu */             topNavItemClass: ""nav-item"",                          /* css class for a megamenu panel */             panelClass: ""sub-nav"",                          /* css class for a group of items within a megamenu panel */             panelGroupClass: ""sub-nav-group"",                          /* css class for the hover state */             hoverClass: ""hover"",                          /* css class for the focus state */             focusClass: ""focus"",                          /* css class for the open state */             openClass: ""open""         });     </script>     </body>     </html> About A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. Resources Readme License Apache-2.0 License Releases No releases published Packages 0 No packages published Used by 15 + 7 Contributors 7 Languages HTML 71.8% CSS 26.4% JavaScript 1.8% © 2021 GitHub, Inc. Terms Privacy Security Status Docs Contact GitHub Pricing API Training Blog About You can’t perform that action at this time. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."
455213,20210205,github.com,https://github.com/adobe-accessibility/Accessible-Mega-Menu,text/html,text/html,en,"GitHub - adobe-accessibility/Accessible-Mega-Menu: A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. Skip to content Sign up Why GitHub? Features → Mobile → Actions → Codespaces → Packages → Security → Code review → Project management → Integrations → GitHub Sponsors → Customer stories → Security → Team Enterprise Explore Explore GitHub → Learn & contribute Topics → Collections → Trending → Learning Lab → Open source guides → Connect with others The ReadME Project → Events → Community forum → GitHub Education → GitHub Stars program → Marketplace Pricing Plans → Compare plans → Contact Sales → Nonprofit → Education → In this repository All GitHub ↵ Jump to ↵ No suggested jump to results In this repository All GitHub ↵ Jump to ↵ In this organization All GitHub ↵ Jump to ↵ In this repository All GitHub ↵ Jump to ↵ Sign in Sign up {{ message }} adobe-accessibility / Accessible-Mega-Menu Watch 50 Star 576 Fork 194 A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. Apache-2.0 License 576 stars 194 forks Star Watch Code Issues 28 Pull requests 6 Actions Projects 0 Security Insights More Code Issues Pull requests Actions Projects Security Insights master 2 branches 0 tags Go to file Code Clone HTTPS GitHub CLI Use Git or checkout with SVN using the web URL. Work fast with our official CLI. Learn more. Open with GitHub Desktop Download ZIP Launching GitHub Desktop If nothing happens, download GitHub Desktop and try again. Go back Launching GitHub Desktop If nothing happens, download GitHub Desktop and try again. Go back Launching Xcode If nothing happens, download Xcode and try again. Go back Launching Visual Studio If nothing happens, download the GitHub extension for Visual Studio and try again. Go back Latest commit majornista fix evaluation for ChromeVox object … 5c070bc Dec 7, 2020 fix evaluation for ChromeVox object 5c070bc Git stats 39 commits Files Permalink Failed to load latest commit information. Type Name Latest commit message Commit time css js third-party/jquery LICENSE NOTICE README.md index.html package.json View code README.md Accessible Mega Menu ========================= A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. It is modeled after the mega menu on adobe.com but has been simplified for use by others. An brief explanation of our interaction design choices can be found in a blog post at Mega menu accessibility on adobe.com. Content for the links and text within the mega menu comes from the Web Content Accessibility Guidelines (WCAG) 2.0. Keyboard Accessibility The accessible mega menu supports keyboard interaction modeled after the behavior described in the WAI-ARIA Menu or Menu bar (widget) design pattern, however we also try to respect users' general expectations for the behavior of links in a global navigation. To this end, the accessible mega menu implementation permits tab focus on each of the six top-level menu items. When one of the menu items has focus, pressing the Enter key, Spacebar or Down arrow will open the submenu panel, and pressing the Left or Right arrow key will shift focus to the adjacent menu item. Links within the submenu panels are included in the tab order when the panel is open. They can also be navigated with the arrow keys or by typing the first character in the link name, which speeds up keyboard navigation considerably. Pressing the Escape key closes the submenu and restores focus to the parent menu item. Screen Reader Accessibility The accessible mega menu models its use of WAI-ARIA Roles, States, and Properties after those described in the WAI-ARIA Menu or Menu bar (widget) design pattern with some notable exceptions, so that it behaves better with screen reader user expectations for global navigation. We don't use role=""menu"" for the menu container and role=""menuitem"" for each of the links therein, because if we do, assistive technology will no longer interpret the links as links, but instead, as menu items, and the links in our global navigation will no longer show up when a screen reader user executes a shortcut command to bring up a list of links in the page. We also want to maintain the semantic structure of the submenu panels in our mega menu; our links are organized into lists and separated by headings. Omitting role=""menu"" and role=""menuitem"" for the global navigation seems the safer way to go. Usage HTML The HTML structure for the mega menu is a nav element, or any other container element, containing a list. Each list item contains a link which is followed by a div or any other container element which will serve as the pop up panel. The panel can contain any html content; in the following example, each panel contains three lists of links. You can explicitly define groups within the panel, between which a user can navigate quickly using the left and right arrow keys; in the following example, the CSS class .sub-nav-group identifies a navigable group.     <nav>         <ul class=""nav-menu"">             <li class=""nav-item"">                 <a href=""?movie"">Movies</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=0"">Action &amp; Adventure</a></li>                         <li><a href=""?movie&genre=2"">Children &amp; Family</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=7"">Dramas</a></li>                         <li><a href=""?movie&genre=9"">Foreign</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=14"">Musicals</a></li>                         <li><a href=""?movie&genre=15"">Romance</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>             <li class=""nav-item"">                 <a href=""?tv"">TV Shows</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=20"">Classic TV</a></li>                         <li><a href=""?tv&genre=21"">Crime TV</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=27"">Reality TV</a></li>                         <li><a href=""?tv&genre=30"">TV Action</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=33"">TV Dramas</a></li>                         <li><a href=""?tv&genre=34"">TV Horror</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>         </ul>     </nav> By default, accessibleMegaMenu uses the the following CSS classes to define the top-level navigation items, panels, groups within the panels, and the hover, focus, and open states. It also defines a prefix for unique id strings, which are required to indicate the relationship of a top-level navigation item to the panel it controls.     defaults = {         /* unique ID's are required to indicate aria-owns, aria-controls and aria-labelledby */         uuidPrefix: ""accessible-megamenu"",                  /* default css class used to define the megamenu styling */         menuClass: ""accessible-megamenu"",                  /* default css class for a top-level navigation item in the megamenu */         topNavItemClass: ""accessible-megamenu-top-nav-item"",                  /* default css class for a megamenu panel */         panelClass: ""accessible-megamenu-panel"",                  /* default css class for a group of items within a megamenu panel */         panelGroupClass: ""accessible-megamenu-panel-group"",                  /* default css class for the hover state */         hoverClass: ""hover"",                  /* default css class for the focus state */         focusClass: ""focus"",                  /* default css class for the open state */         openClass: ""open""      } You can optionally override the defaults to use the CSS classes you may have already defined for your mega menu. JavaScript Be sure to include jQuery and the jquery-accessibleMegaMenu.js plugin script.     <script src=""//code.jquery.com/jquery-1.10.1.min.js""></script>     <script src=""js/jquery-accessibleMegaMenu.js""></script> The following initializes the first nav element in the document as an accessibleMegaMenu, with optional CSS class overrides.     $(""nav:first"").accessibleMegaMenu({         /* prefix for generated unique id attributes, which are required             to indicate aria-owns, aria-controls and aria-labelledby */         uuidPrefix: ""accessible-megamenu"",                  /* css class used to define the megamenu styling */         menuClass: ""nav-menu"",                  /* css class for a top-level navigation item in the megamenu */         topNavItemClass: ""nav-item"",                  /* css class for a megamenu panel */         panelClass: ""sub-nav"",                  /* css class for a group of items within a megamenu panel */         panelGroupClass: ""sub-nav-group"",                  /* css class for the hover state */         hoverClass: ""hover"",                  /* css class for the focus state */         focusClass: ""focus"",                  /* css class for the open state */         openClass: ""open""     }); CSS AccessibleMegaMenu handles the showing and hiding of panels by adding or removing a CSS class. No inline styles are added to hide elements or create animation between states. Following is some rudimentary CSS for our example which enables the showing/hiding of and the layout of lists panels in the mega menu.     /* mega menu list */     .nav-menu {         display: block;         position: relative;         list-style: none;         margin: 0;         padding: 0;         z-index: 15;     }     /* a top level navigation item in the mega menu */     .nav-item {         list-style: none;         display: inline-block;         padding: 0;         margin: 0;     }     /* first descendant link within a top level navigation item */     .nav-item > a {         position: relative;         display: inline-block;         padding: 0.5em 1em;         margin: 0 0 -1px 0;         border: 1px solid transparent;     }     /* focus/open states of first descendant link within a top level         navigation item */     .nav-item > a:focus,     .nav-item > a.open {         border: 1px solid #dedede;     }     /* open state of first descendant link within a top level         navigation item */     .nav-item > a.open {         background-color: #fff;         border-bottom: none;         z-index: 1;     }     /* sub-navigation panel */     .sub-nav {         position: absolute;         display: none;         top: 2.2em;         margin-top: -1px;         padding: 0.5em 1em;         border: 1px solid #dedede;         background-color: #fff;     }     /* sub-navigation panel open state */     .sub-nav.open {         display: block;     }     /* list of items within sub-navigation panel */     .sub-nav ul {         display: inline-block;         vertical-align: top;         margin: 0 1em 0 0;         padding: 0;     }     /* list item within sub-navigation panel */     .sub-nav li {         display: block;         list-style-type: none;         margin: 0;         padding: 0;     }   Putting it all together, here is the completed example:     <!doctype html>     <html lang=""en"">     <head>     <meta charset=""UTF-8"">     <title>Simple Accessible Mega Menu Example</title>     <style>         /* Rudimentary mega menu CSS for demonstration */             /* mega menu list */         .nav-menu {             display: block;             position: relative;             list-style: none;             margin: 0;             padding: 0;             z-index: 15;         }         /* a top level navigation item in the mega menu */         .nav-item {             list-style: none;             display: inline-block;             padding: 0;             margin: 0;         }         /* first descendant link within a top level navigation item */         .nav-item > a {             position: relative;             display: inline-block;             padding: 0.5em 1em;             margin: 0 0 -1px 0;             border: 1px solid transparent;         }         /* focus/open states of first descendant link within a top level             navigation item */         .nav-item > a:focus,         .nav-item > a.open {             border: 1px solid #dedede;         }         /* open state of first descendant link within a top level             navigation item */         .nav-item > a.open {             background-color: #fff;             border-bottom: none;             z-index: 1;         }         /* sub-navigation panel */         .sub-nav {             position: absolute;             display: none;             top: 2.2em;             margin-top: -1px;             padding: 0.5em 1em;             border: 1px solid #dedede;             background-color: #fff;         }         /* sub-navigation panel open state */         .sub-nav.open {             display: block;         }         /* list of items within sub-navigation panel */         .sub-nav ul {             display: inline-block;             vertical-align: top;             margin: 0 1em 0 0;             padding: 0;         }         /* list item within sub-navigation panel */         .sub-nav li {             display: block;             list-style-type: none;             margin: 0;             padding: 0;         }          </style>     </head>     <body>     <nav>         <ul class=""nav-menu"">             <li class=""nav-item"">                 <a href=""?movie"">Movies</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=0"">Action &amp; Adventure</a></li>                         <li><a href=""?movie&genre=2"">Children &amp; Family</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=7"">Dramas</a></li>                         <li><a href=""?movie&genre=9"">Foreign</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=14"">Musicals</a></li>                         <li><a href=""?movie&genre=15"">Romance</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>             <li class=""nav-item"">                 <a href=""?tv"">TV Shows</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=20"">Classic TV</a></li>                         <li><a href=""?tv&genre=21"">Crime TV</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=27"">Reality TV</a></li>                         <li><a href=""?tv&genre=30"">TV Action</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=33"">TV Dramas</a></li>                         <li><a href=""?tv&genre=34"">TV Horror</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>         </ul>     </nav>          <!-- include jquery -->     <script src=""//code.jquery.com/jquery-1.10.1.min.js""></script>     <!-- include the jquery-accessibleMegaMenu plugin script -->     <script src=""js/jquery-accessibleMegaMenu.js""></script>     <!-- initialize a selector as an accessibleMegaMenu -->     <script>         $(""nav:first"").accessibleMegaMenu({             /* prefix for generated unique id attributes, which are required                 to indicate aria-owns, aria-controls and aria-labelledby */             uuidPrefix: ""accessible-megamenu"",                          /* css class used to define the megamenu styling */             menuClass: ""nav-menu"",                          /* css class for a top-level navigation item in the megamenu */             topNavItemClass: ""nav-item"",                          /* css class for a megamenu panel */             panelClass: ""sub-nav"",                          /* css class for a group of items within a megamenu panel */             panelGroupClass: ""sub-nav-group"",                          /* css class for the hover state */             hoverClass: ""hover"",                          /* css class for the focus state */             focusClass: ""focus"",                          /* css class for the open state */             openClass: ""open""         });     </script>     </body>     </html> About A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. Resources Readme License Apache-2.0 License Releases No releases published Packages 0 No packages published Used by 15 + 7 Contributors 7 Languages HTML 71.8% CSS 26.4% JavaScript 1.8% © 2021 GitHub, Inc. Terms Privacy Security Status Docs Contact GitHub Pricing API Training Blog About You can’t perform that action at this time. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."
465329,20210212,github.com,https://github.com/adobe-accessibility/Accessible-Mega-Menu,text/html,text/html,en,"GitHub - adobe-accessibility/Accessible-Mega-Menu: A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. Skip to content Sign up Why GitHub? Features → Mobile → Actions → Codespaces → Packages → Security → Code review → Project management → Integrations → GitHub Sponsors → Customer stories → Security → Team Enterprise Explore Explore GitHub → Learn & contribute Topics → Collections → Trending → Learning Lab → Open source guides → Connect with others The ReadME Project → Events → Community forum → GitHub Education → GitHub Stars program → Marketplace Pricing Plans → Compare plans → Contact Sales → Nonprofit → Education → In this repository All GitHub ↵ Jump to ↵ No suggested jump to results In this repository All GitHub ↵ Jump to ↵ In this organization All GitHub ↵ Jump to ↵ In this repository All GitHub ↵ Jump to ↵ Sign in Sign up {{ message }} adobe-accessibility / Accessible-Mega-Menu Watch 50 Star 576 Fork 194 A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. Apache-2.0 License 576 stars 194 forks Star Watch Code Issues 28 Pull requests 6 Actions Projects 0 Security Insights More Code Issues Pull requests Actions Projects Security Insights master 2 branches 0 tags Go to file Code Clone HTTPS GitHub CLI Use Git or checkout with SVN using the web URL. Work fast with our official CLI. Learn more. Open with GitHub Desktop Download ZIP Launching GitHub Desktop If nothing happens, download GitHub Desktop and try again. Go back Launching GitHub Desktop If nothing happens, download GitHub Desktop and try again. Go back Launching Xcode If nothing happens, download Xcode and try again. Go back Launching Visual Studio If nothing happens, download the GitHub extension for Visual Studio and try again. Go back Latest commit majornista fix evaluation for ChromeVox object … 5c070bc Dec 7, 2020 fix evaluation for ChromeVox object 5c070bc Git stats 39 commits Files Permalink Failed to load latest commit information. Type Name Latest commit message Commit time css js third-party/jquery LICENSE NOTICE README.md index.html package.json View code README.md Accessible Mega Menu ========================= A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. It is modeled after the mega menu on adobe.com but has been simplified for use by others. An brief explanation of our interaction design choices can be found in a blog post at Mega menu accessibility on adobe.com. Content for the links and text within the mega menu comes from the Web Content Accessibility Guidelines (WCAG) 2.0. Keyboard Accessibility The accessible mega menu supports keyboard interaction modeled after the behavior described in the WAI-ARIA Menu or Menu bar (widget) design pattern, however we also try to respect users' general expectations for the behavior of links in a global navigation. To this end, the accessible mega menu implementation permits tab focus on each of the six top-level menu items. When one of the menu items has focus, pressing the Enter key, Spacebar or Down arrow will open the submenu panel, and pressing the Left or Right arrow key will shift focus to the adjacent menu item. Links within the submenu panels are included in the tab order when the panel is open. They can also be navigated with the arrow keys or by typing the first character in the link name, which speeds up keyboard navigation considerably. Pressing the Escape key closes the submenu and restores focus to the parent menu item. Screen Reader Accessibility The accessible mega menu models its use of WAI-ARIA Roles, States, and Properties after those described in the WAI-ARIA Menu or Menu bar (widget) design pattern with some notable exceptions, so that it behaves better with screen reader user expectations for global navigation. We don't use role=""menu"" for the menu container and role=""menuitem"" for each of the links therein, because if we do, assistive technology will no longer interpret the links as links, but instead, as menu items, and the links in our global navigation will no longer show up when a screen reader user executes a shortcut command to bring up a list of links in the page. We also want to maintain the semantic structure of the submenu panels in our mega menu; our links are organized into lists and separated by headings. Omitting role=""menu"" and role=""menuitem"" for the global navigation seems the safer way to go. Usage HTML The HTML structure for the mega menu is a nav element, or any other container element, containing a list. Each list item contains a link which is followed by a div or any other container element which will serve as the pop up panel. The panel can contain any html content; in the following example, each panel contains three lists of links. You can explicitly define groups within the panel, between which a user can navigate quickly using the left and right arrow keys; in the following example, the CSS class .sub-nav-group identifies a navigable group.     <nav>         <ul class=""nav-menu"">             <li class=""nav-item"">                 <a href=""?movie"">Movies</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=0"">Action &amp; Adventure</a></li>                         <li><a href=""?movie&genre=2"">Children &amp; Family</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=7"">Dramas</a></li>                         <li><a href=""?movie&genre=9"">Foreign</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=14"">Musicals</a></li>                         <li><a href=""?movie&genre=15"">Romance</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>             <li class=""nav-item"">                 <a href=""?tv"">TV Shows</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=20"">Classic TV</a></li>                         <li><a href=""?tv&genre=21"">Crime TV</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=27"">Reality TV</a></li>                         <li><a href=""?tv&genre=30"">TV Action</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=33"">TV Dramas</a></li>                         <li><a href=""?tv&genre=34"">TV Horror</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>         </ul>     </nav> By default, accessibleMegaMenu uses the the following CSS classes to define the top-level navigation items, panels, groups within the panels, and the hover, focus, and open states. It also defines a prefix for unique id strings, which are required to indicate the relationship of a top-level navigation item to the panel it controls.     defaults = {         /* unique ID's are required to indicate aria-owns, aria-controls and aria-labelledby */         uuidPrefix: ""accessible-megamenu"",                  /* default css class used to define the megamenu styling */         menuClass: ""accessible-megamenu"",                  /* default css class for a top-level navigation item in the megamenu */         topNavItemClass: ""accessible-megamenu-top-nav-item"",                  /* default css class for a megamenu panel */         panelClass: ""accessible-megamenu-panel"",                  /* default css class for a group of items within a megamenu panel */         panelGroupClass: ""accessible-megamenu-panel-group"",                  /* default css class for the hover state */         hoverClass: ""hover"",                  /* default css class for the focus state */         focusClass: ""focus"",                  /* default css class for the open state */         openClass: ""open""      } You can optionally override the defaults to use the CSS classes you may have already defined for your mega menu. JavaScript Be sure to include jQuery and the jquery-accessibleMegaMenu.js plugin script.     <script src=""//code.jquery.com/jquery-1.10.1.min.js""></script>     <script src=""js/jquery-accessibleMegaMenu.js""></script> The following initializes the first nav element in the document as an accessibleMegaMenu, with optional CSS class overrides.     $(""nav:first"").accessibleMegaMenu({         /* prefix for generated unique id attributes, which are required             to indicate aria-owns, aria-controls and aria-labelledby */         uuidPrefix: ""accessible-megamenu"",                  /* css class used to define the megamenu styling */         menuClass: ""nav-menu"",                  /* css class for a top-level navigation item in the megamenu */         topNavItemClass: ""nav-item"",                  /* css class for a megamenu panel */         panelClass: ""sub-nav"",                  /* css class for a group of items within a megamenu panel */         panelGroupClass: ""sub-nav-group"",                  /* css class for the hover state */         hoverClass: ""hover"",                  /* css class for the focus state */         focusClass: ""focus"",                  /* css class for the open state */         openClass: ""open""     }); CSS AccessibleMegaMenu handles the showing and hiding of panels by adding or removing a CSS class. No inline styles are added to hide elements or create animation between states. Following is some rudimentary CSS for our example which enables the showing/hiding of and the layout of lists panels in the mega menu.     /* mega menu list */     .nav-menu {         display: block;         position: relative;         list-style: none;         margin: 0;         padding: 0;         z-index: 15;     }     /* a top level navigation item in the mega menu */     .nav-item {         list-style: none;         display: inline-block;         padding: 0;         margin: 0;     }     /* first descendant link within a top level navigation item */     .nav-item > a {         position: relative;         display: inline-block;         padding: 0.5em 1em;         margin: 0 0 -1px 0;         border: 1px solid transparent;     }     /* focus/open states of first descendant link within a top level         navigation item */     .nav-item > a:focus,     .nav-item > a.open {         border: 1px solid #dedede;     }     /* open state of first descendant link within a top level         navigation item */     .nav-item > a.open {         background-color: #fff;         border-bottom: none;         z-index: 1;     }     /* sub-navigation panel */     .sub-nav {         position: absolute;         display: none;         top: 2.2em;         margin-top: -1px;         padding: 0.5em 1em;         border: 1px solid #dedede;         background-color: #fff;     }     /* sub-navigation panel open state */     .sub-nav.open {         display: block;     }     /* list of items within sub-navigation panel */     .sub-nav ul {         display: inline-block;         vertical-align: top;         margin: 0 1em 0 0;         padding: 0;     }     /* list item within sub-navigation panel */     .sub-nav li {         display: block;         list-style-type: none;         margin: 0;         padding: 0;     }   Putting it all together, here is the completed example:     <!doctype html>     <html lang=""en"">     <head>     <meta charset=""UTF-8"">     <title>Simple Accessible Mega Menu Example</title>     <style>         /* Rudimentary mega menu CSS for demonstration */             /* mega menu list */         .nav-menu {             display: block;             position: relative;             list-style: none;             margin: 0;             padding: 0;             z-index: 15;         }         /* a top level navigation item in the mega menu */         .nav-item {             list-style: none;             display: inline-block;             padding: 0;             margin: 0;         }         /* first descendant link within a top level navigation item */         .nav-item > a {             position: relative;             display: inline-block;             padding: 0.5em 1em;             margin: 0 0 -1px 0;             border: 1px solid transparent;         }         /* focus/open states of first descendant link within a top level             navigation item */         .nav-item > a:focus,         .nav-item > a.open {             border: 1px solid #dedede;         }         /* open state of first descendant link within a top level             navigation item */         .nav-item > a.open {             background-color: #fff;             border-bottom: none;             z-index: 1;         }         /* sub-navigation panel */         .sub-nav {             position: absolute;             display: none;             top: 2.2em;             margin-top: -1px;             padding: 0.5em 1em;             border: 1px solid #dedede;             background-color: #fff;         }         /* sub-navigation panel open state */         .sub-nav.open {             display: block;         }         /* list of items within sub-navigation panel */         .sub-nav ul {             display: inline-block;             vertical-align: top;             margin: 0 1em 0 0;             padding: 0;         }         /* list item within sub-navigation panel */         .sub-nav li {             display: block;             list-style-type: none;             margin: 0;             padding: 0;         }          </style>     </head>     <body>     <nav>         <ul class=""nav-menu"">             <li class=""nav-item"">                 <a href=""?movie"">Movies</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=0"">Action &amp; Adventure</a></li>                         <li><a href=""?movie&genre=2"">Children &amp; Family</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=7"">Dramas</a></li>                         <li><a href=""?movie&genre=9"">Foreign</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=14"">Musicals</a></li>                         <li><a href=""?movie&genre=15"">Romance</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>             <li class=""nav-item"">                 <a href=""?tv"">TV Shows</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=20"">Classic TV</a></li>                         <li><a href=""?tv&genre=21"">Crime TV</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=27"">Reality TV</a></li>                         <li><a href=""?tv&genre=30"">TV Action</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=33"">TV Dramas</a></li>                         <li><a href=""?tv&genre=34"">TV Horror</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>         </ul>     </nav>          <!-- include jquery -->     <script src=""//code.jquery.com/jquery-1.10.1.min.js""></script>     <!-- include the jquery-accessibleMegaMenu plugin script -->     <script src=""js/jquery-accessibleMegaMenu.js""></script>     <!-- initialize a selector as an accessibleMegaMenu -->     <script>         $(""nav:first"").accessibleMegaMenu({             /* prefix for generated unique id attributes, which are required                 to indicate aria-owns, aria-controls and aria-labelledby */             uuidPrefix: ""accessible-megamenu"",                          /* css class used to define the megamenu styling */             menuClass: ""nav-menu"",                          /* css class for a top-level navigation item in the megamenu */             topNavItemClass: ""nav-item"",                          /* css class for a megamenu panel */             panelClass: ""sub-nav"",                          /* css class for a group of items within a megamenu panel */             panelGroupClass: ""sub-nav-group"",                          /* css class for the hover state */             hoverClass: ""hover"",                          /* css class for the focus state */             focusClass: ""focus"",                          /* css class for the open state */             openClass: ""open""         });     </script>     </body>     </html> About A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. Resources Readme License Apache-2.0 License Releases No releases published Packages 0 No packages published Used by 15 + 7 Contributors 7 Languages HTML 71.8% CSS 26.4% JavaScript 1.8% © 2021 GitHub, Inc. Terms Privacy Security Status Docs Contact GitHub Pricing API Training Blog About You can’t perform that action at this time. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."
472692,20210212,github.com,https://github.com/crypto-browserify/crypto-browserify,text/html,text/html,en,"GitHub - crypto-browserify/crypto-browserify: partial implementation of node's `crypto` for the browser Skip to content Sign up Why GitHub? Features → Mobile → Actions → Codespaces → Packages → Security → Code review → Project management → Integrations → GitHub Sponsors → Customer stories → Security → Team Enterprise Explore Explore GitHub → Learn & contribute Topics → Collections → Trending → Learning Lab → Open source guides → Connect with others The ReadME Project → Events → Community forum → GitHub Education → GitHub Stars program → Marketplace Pricing Plans → Compare plans → Contact Sales → Nonprofit → Education → In this repository All GitHub ↵ Jump to ↵ No suggested jump to results In this repository All GitHub ↵ Jump to ↵ In this organization All GitHub ↵ Jump to ↵ In this repository All GitHub ↵ Jump to ↵ Sign in Sign up {{ message }} crypto-browserify / crypto-browserify Watch 21 Star 462 Fork 146 partial implementation of node's `crypto` for the browser MIT License 462 stars 146 forks Star Watch Code Issues 18 Pull requests 6 Actions Projects 0 Wiki Security Insights More Code Issues Pull requests Actions Projects Wiki Security Insights master 6 branches 31 tags Go to file Code Clone HTTPS GitHub CLI Use Git or checkout with SVN using the web URL. Work fast with our official CLI. Learn more. Open with GitHub Desktop Download ZIP Launching GitHub Desktop If nothing happens, download GitHub Desktop and try again. Go back Launching GitHub Desktop If nothing happens, download GitHub Desktop and try again. Go back Launching Xcode If nothing happens, download Xcode and try again. Go back Launching Visual Studio If nothing happens, download the GitHub extension for Visual Studio and try again. Go back Latest commit calvinmetcalf fix debian issue (maybe) … 460a13b Feb 9, 2018 fix debian issue (maybe) 460a13b Git stats 362 commits Files Permalink Failed to load latest commit information. Type Name Latest commit message Commit time example add standard 5.0.0 Aug 13, 2015 test fix debian issue (maybe) Feb 9, 2018 .gitignore Add .gitignore Aug 5, 2013 .travis.yml saucelabs aparently only goes back to 7 Oct 19, 2017 .zuul.yml add zuul and browser tests Oct 3, 2015 LICENSE Add MIT license Sep 20, 2013 README.md add privateEncrypt/publicDecrypt to README Dec 14, 2015 index.js add rndom fill Oct 18, 2017 package.json 3.12.0 Nov 3, 2017 View code README.md crypto-browserify A port of node's crypto module to the browser. The goal of this module is to reimplement node's crypto module, in pure javascript so that it can run in the browser. Here is the subset that is currently implemented: createHash (sha1, sha224, sha256, sha384, sha512, md5, rmd160) createHmac (sha1, sha224, sha256, sha384, sha512, md5, rmd160) pbkdf2 pbkdf2Sync randomBytes pseudoRandomBytes createCipher (aes) createDecipher (aes) createDiffieHellman createSign (rsa, ecdsa) createVerify (rsa, ecdsa) createECDH (secp256k1) publicEncrypt/privateDecrypt (rsa) privateEncrypt/publicDecrypt (rsa) todo these features from node's crypto are still unimplemented. createCredentials contributions If you are interested in writing a feature, please implement as a new module, which will be incorporated into crypto-browserify as a dependency. All deps must be compatible with node's crypto (generate example inputs and outputs with node, and save base64 strings inside JSON, so that tests can run in the browser. see sha.js Crypto is extra serious so please do not hesitate to review the code, and post comments if you do. License MIT About partial implementation of node's `crypto` for the browser Resources Readme License MIT License Releases 31 tags Packages 0 No packages published Used by 5.5m + 5,475,797 Contributors 24 + 13 contributors Languages JavaScript 99.1% HTML 0.9% © 2021 GitHub, Inc. Terms Privacy Security Status Docs Contact GitHub Pricing API Training Blog About You can’t perform that action at this time. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."
472693,20210212,github.com,https://github.com/indutny/elliptic/issues,text/html,text/html,en,"Issues · indutny/elliptic · GitHub Skip to content Sign up Why GitHub? Features → Mobile → Actions → Codespaces → Packages → Security → Code review → Project management → Integrations → GitHub Sponsors → Customer stories → Security → Team Enterprise Explore Explore GitHub → Learn & contribute Topics → Collections → Trending → Learning Lab → Open source guides → Connect with others The ReadME Project → Events → Community forum → GitHub Education → GitHub Stars program → Marketplace Pricing Plans → Compare plans → Contact Sales → Nonprofit → Education → In this repository All GitHub ↵ Jump to ↵ No suggested jump to results In this repository All GitHub ↵ Jump to ↵ In this user All GitHub ↵ Jump to ↵ In this repository All GitHub ↵ Jump to ↵ Sign in Sign up {{ message }} indutny / elliptic Watch 50 Star 1.2k Fork 287 Code Issues 68 Pull requests 16 Actions Projects 0 Wiki Security Insights More Code Issues Pull requests Actions Projects Wiki Security Insights Labels 8 Milestones 0 Labels 8 Milestones 0 New issue Have a question about this project? Sign up for a free GitHub account to open an issue and contact its maintainers and the community. Pick a username Email Address Password Sign up for GitHub By clicking “Sign up for GitHub”, you agree to our terms of service and privacy statement. We’ll occasionally send you account related emails. Already on GitHub? Sign in to your account 68 Open 96 Closed 68 Open 96 Closed Author Filter by author author: Filter by this user Label Filter by label Use alt + click/return to exclude labels. Projects Filter by project Milestones Filter by milestone Assignee Filter by who’s assigned Sort Sort by Newest Oldest Most commented Least commented Recently updated Least recently updated Most reactions 👍 👎 😄 🎉 😕 ❤️ 🚀 👀 How to decipher the encrypted message? #245 opened Jan 27, 2021 by istabraq-iot Montgomery Curve25519 is not openssl compatible #243 opened Dec 28, 2020 by jc-lab 3 Curves p384 and p521 produce incorrect results #239 opened Oct 18, 2020 by guidovranken i want to use this library with c# #238 opened Oct 10, 2020 by medozeus Elliptic.js support following curve types: #236 opened Oct 5, 2020 by medozeus The Elliptic package 6.5.2 for Node.js allows ECDSA signature malleability via variations in encoding, leading '\0' bytes, or integer overflows. #235 opened Oct 1, 2020 by bsomeshwer EdDSA: What is a reason to manipulate with bytes? #233 opened Aug 27, 2020 by mahnunchik why use derive method get ECDH key，i got different length #230 opened Jul 10, 2020 by cqupt-yifanwu 4 Why do I generate my local test path in chunk-vendors when packing with NPM #229 opened Jun 22, 2020 by Anthonychen1994 1 TypedArray support ? #228 opened Jun 20, 2020 by dojyorin Is there way to generate PKCS#8 private key from Pem format ECC Private key #225 opened Apr 28, 2020 by sureshreddygovindu Signature validation in python. Prefix configuration? #224 opened Apr 25, 2020 by amrbz is it possible to do assymetric encryption? #223 opened Apr 7, 2020 by maroodb 1 Missing infinity point encoding #218 opened Feb 21, 2020 by catenacyber 1 ECDH P-521 public key point not on curve according to java (clojure) #216 opened Feb 11, 2020 by slhabity 1 how save and load private / publick key in pem or other format #215 opened Jan 27, 2020 by fturiot 2 How to pair client to server BTCPay NodeJS client? #214 opened Jan 21, 2020 by savshit 1 How to pair client to server BTCPay NodeJS client? #213 opened Jan 21, 2020 by savshit curve25519 and BouncyCastle(bc) in c# Different compute shared secret #209 opened Dec 11, 2019 by shamohai 2 Feature: Schnorr signatures #208 opened Dec 11, 2019 by junderw 6 How to define curve secp224k1? #205 opened Nov 15, 2019 by ahzf ec.keyFromPrivate returns a KeyPair with a private key even when receiving a random input #201 opened Oct 2, 2019 by ziccardi 1 secp256k1.createPublicKey is not a function #199 opened Sep 18, 2019 by qy201901 1 Compatibility issue with curve25519-java #198 opened Sep 13, 2019 by c0deguard 6 DeprecationWarning on Buffer #196 opened Sep 11, 2019 by exoego 1 3 Previous 1 2 3 Next Previous Next ProTip! Add no:assignee to see everything that’s not assigned. © 2021 GitHub, Inc. Terms Privacy Security Status Docs Contact GitHub Pricing API Training Blog About You can’t perform that action at this time. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."
472694,20210212,github.com,https://github.com/indutny/elliptic,text/html,text/html,en,"GitHub - indutny/elliptic: Fast Elliptic Curve Cryptography in plain javascript Skip to content Sign up Why GitHub? Features → Mobile → Actions → Codespaces → Packages → Security → Code review → Project management → Integrations → GitHub Sponsors → Customer stories → Security → Team Enterprise Explore Explore GitHub → Learn & contribute Topics → Collections → Trending → Learning Lab → Open source guides → Connect with others The ReadME Project → Events → Community forum → GitHub Education → GitHub Stars program → Marketplace Pricing Plans → Compare plans → Contact Sales → Nonprofit → Education → In this repository All GitHub ↵ Jump to ↵ No suggested jump to results In this repository All GitHub ↵ Jump to ↵ In this user All GitHub ↵ Jump to ↵ In this repository All GitHub ↵ Jump to ↵ Sign in Sign up {{ message }} indutny / elliptic Watch 50 Star 1.2k Fork 287 Fast Elliptic Curve Cryptography in plain javascript 1.2k stars 287 forks Star Watch Code Issues 68 Pull requests 16 Actions Projects 0 Wiki Security Insights More Code Issues Pull requests Actions Projects Wiki Security Insights master 2 branches 85 tags Go to file Code Clone HTTPS GitHub CLI Use Git or checkout with SVN using the web URL. Work fast with our official CLI. Learn more. Open with GitHub Desktop Download ZIP Launching GitHub Desktop If nothing happens, download GitHub Desktop and try again. Go back Launching GitHub Desktop If nothing happens, download GitHub Desktop and try again. Go back Launching Xcode If nothing happens, download Xcode and try again. Go back Launching Visual Studio If nothing happens, download the GitHub extension for Visual Studio and try again. Go back Latest commit indutny 6.5.4 … 43ac7f2 Feb 2, 2021 6.5.4 43ac7f2 Git stats 331 commits Files Permalink Failed to load latest commit information. Type Name Latest commit message Commit time benchmarks package: remove Makefile and dist Jan 29, 2016 dist 6.5.4 Feb 2, 2021 lib ec: validate that a point before deriving keys Feb 2, 2021 test ec: validate that a point before deriving keys Feb 2, 2021 .codeclimate.yml test: improvements with Saucelabs/Codeclimate Mar 31, 2016 .eslintignore lib: relint using eslint Aug 2, 2020 .eslintrc.js lib: relint using eslint Aug 2, 2020 .gitignore test: improvements with Saucelabs/Codeclimate Mar 31, 2016 .npmignore npmignore: dist May 20, 2016 .travis.yml travis: really move on Jun 26, 2019 Gruntfile.js grunt: fix standalone build May 25, 2016 README.md readme: update example Mar 23, 2017 package-lock.json 6.5.4 Feb 2, 2021 package.json 6.5.4 Feb 2, 2021 View code README.md Elliptic Fast elliptic-curve cryptography in a plain javascript implementation. NOTE: Please take a look at http://safecurves.cr.yp.to/ before choosing a curve for your cryptography operations. Incentive ECC is much slower than regular RSA cryptography, the JS implementations are even more slower. Benchmarks $ node benchmarks/index.js Benchmarking: sign elliptic#sign x 262 ops/sec ±0.51% (177 runs sampled) eccjs#sign x 55.91 ops/sec ±0.90% (144 runs sampled) ------------------------ Fastest is elliptic#sign ======================== Benchmarking: verify elliptic#verify x 113 ops/sec ±0.50% (166 runs sampled) eccjs#verify x 48.56 ops/sec ±0.36% (125 runs sampled) ------------------------ Fastest is elliptic#verify ======================== Benchmarking: gen elliptic#gen x 294 ops/sec ±0.43% (176 runs sampled) eccjs#gen x 62.25 ops/sec ±0.63% (129 runs sampled) ------------------------ Fastest is elliptic#gen ======================== Benchmarking: ecdh elliptic#ecdh x 136 ops/sec ±0.85% (156 runs sampled) ------------------------ Fastest is elliptic#ecdh ======================== API ECDSA var EC = require('elliptic').ec; // Create and initialize EC context // (better do it once and reuse it) var ec = new EC('secp256k1'); // Generate keys var key = ec.genKeyPair(); // Sign the message's hash (input must be an array, or a hex-string) var msgHash = [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ]; var signature = key.sign(msgHash); // Export DER encoded signature in Array var derSign = signature.toDER(); // Verify signature console.log(key.verify(msgHash, derSign)); // CHECK WITH NO PRIVATE KEY var pubPoint = key.getPublic(); var x = pubPoint.getX(); var y = pubPoint.getY(); // Public Key MUST be either: // 1) '04' + hex string of x + hex string of y; or // 2) object with two hex string properties (x and y); or // 3) object with two buffer properties (x and y) var pub = pubPoint.encode('hex');                                 // case 1 var pub = { x: x.toString('hex'), y: y.toString('hex') };         // case 2 var pub = { x: x.toBuffer(), y: y.toBuffer() };                   // case 3 var pub = { x: x.toArrayLike(Buffer), y: y.toArrayLike(Buffer) }; // case 3 // Import public key var key = ec.keyFromPublic(pub, 'hex'); // Signature MUST be either: // 1) DER-encoded signature as hex-string; or // 2) DER-encoded signature as buffer; or // 3) object with two hex-string properties (r and s); or // 4) object with two buffer properties (r and s) var signature = '3046022100...'; // case 1 var signature = new Buffer('...'); // case 2 var signature = { r: 'b1fc...', s: '9c42...' }; // case 3 // Verify signature console.log(key.verify(msgHash, signature)); EdDSA var EdDSA = require('elliptic').eddsa; // Create and initialize EdDSA context // (better do it once and reuse it) var ec = new EdDSA('ed25519'); // Create key pair from secret var key = ec.keyFromSecret('693e3c...'); // hex string, array or Buffer // Sign the message's hash (input must be an array, or a hex-string) var msgHash = [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ]; var signature = key.sign(msgHash).toHex(); // Verify signature console.log(key.verify(msgHash, signature)); // CHECK WITH NO PRIVATE KEY // Import public key var pub = '0a1af638...'; var key = ec.keyFromPublic(pub, 'hex'); // Verify signature var signature = '70bed1...'; console.log(key.verify(msgHash, signature)); ECDH var EC = require('elliptic').ec; var ec = new EC('curve25519'); // Generate keys var key1 = ec.genKeyPair(); var key2 = ec.genKeyPair(); var shared1 = key1.derive(key2.getPublic()); var shared2 = key2.derive(key1.getPublic()); console.log('Both shared secrets are BN instances'); console.log(shared1.toString(16)); console.log(shared2.toString(16)); three and more members: var EC = require('elliptic').ec; var ec = new EC('curve25519'); var A = ec.genKeyPair(); var B = ec.genKeyPair(); var C = ec.genKeyPair(); var AB = A.getPublic().mul(B.getPrivate()) var BC = B.getPublic().mul(C.getPrivate()) var CA = C.getPublic().mul(A.getPrivate()) var ABC = AB.mul(C.getPrivate()) var BCA = BC.mul(A.getPrivate()) var CAB = CA.mul(B.getPrivate()) console.log(ABC.getX().toString(16)) console.log(BCA.getX().toString(16)) console.log(CAB.getX().toString(16)) NOTE: .derive() returns a BN instance. Supported curves Elliptic.js support following curve types: Short Weierstrass Montgomery Edwards Twisted Edwards Following curve 'presets' are embedded into the library: secp256k1 p192 p224 p256 p384 p521 curve25519 ed25519 NOTE: That curve25519 could not be used for ECDSA, use ed25519 instead. Implementation details ECDSA is using deterministic k value generation as per RFC6979. Most of the curve operations are performed on non-affine coordinates (either projective or extended), various windowing techniques are used for different cases. All operations are performed in reduction context using bn.js, hashing is provided by hash.js Related projects eccrypto: isomorphic implementation of ECDSA, ECDH and ECIES for both browserify and node (uses elliptic for browser and secp256k1-node for node) LICENSE This software is licensed under the MIT License. Copyright Fedor Indutny, 2014. Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the ""Software""), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. About Fast Elliptic Curve Cryptography in plain javascript Resources Readme Releases 85 tags Packages 0 No packages published Used by 5.4m + 5,414,932 Contributors 25 + 14 contributors Languages JavaScript 99.3% HTML 0.7% © 2021 GitHub, Inc. Terms Privacy Security Status Docs Contact GitHub Pricing API Training Blog About You can’t perform that action at this time. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."
475499,20210219,github.com,https://github.com/adobe-accessibility/Accessible-Mega-Menu,text/html,text/html,en,"GitHub - adobe-accessibility/Accessible-Mega-Menu: A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. Skip to content Sign up Why GitHub? Features → Mobile → Actions → Codespaces → Packages → Security → Code review → Project management → Integrations → GitHub Sponsors → Customer stories → Security → Team Enterprise Explore Explore GitHub → Learn & contribute Topics → Collections → Trending → Learning Lab → Open source guides → Connect with others The ReadME Project → Events → Community forum → GitHub Education → GitHub Stars program → Marketplace Pricing Plans → Compare plans → Contact Sales → Nonprofit → Education → In this repository All GitHub ↵ Jump to ↵ No suggested jump to results In this repository All GitHub ↵ Jump to ↵ In this organization All GitHub ↵ Jump to ↵ In this repository All GitHub ↵ Jump to ↵ Sign in Sign up {{ message }} adobe-accessibility / Accessible-Mega-Menu Watch 50 Star 575 Fork 194 A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. Apache-2.0 License 575 stars 194 forks Star Watch Code Issues 28 Pull requests 6 Actions Projects 0 Security Insights More Code Issues Pull requests Actions Projects Security Insights master Switch branches/tags Branches Tags Nothing to show {{ refName }} default View all branches Nothing to show {{ refName }} default View all tags 2 branches 0 tags Go to file Code Clone HTTPS GitHub CLI Use Git or checkout with SVN using the web URL. Work fast with our official CLI. Learn more. Open with GitHub Desktop Download ZIP Launching GitHub Desktop If nothing happens, download GitHub Desktop and try again. Go back Launching GitHub Desktop If nothing happens, download GitHub Desktop and try again. Go back Launching Xcode If nothing happens, download Xcode and try again. Go back Launching Visual Studio If nothing happens, download the GitHub extension for Visual Studio and try again. Go back Latest commit majornista fix evaluation for ChromeVox object … 5c070bc Dec 7, 2020 fix evaluation for ChromeVox object 5c070bc Git stats 39 commits Files Permalink Failed to load latest commit information. Type Name Latest commit message Commit time css js third-party/jquery LICENSE NOTICE README.md index.html package.json View code README.md Accessible Mega Menu ========================= A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. It is modeled after the mega menu on adobe.com but has been simplified for use by others. An brief explanation of our interaction design choices can be found in a blog post at Mega menu accessibility on adobe.com. Content for the links and text within the mega menu comes from the Web Content Accessibility Guidelines (WCAG) 2.0. Keyboard Accessibility The accessible mega menu supports keyboard interaction modeled after the behavior described in the WAI-ARIA Menu or Menu bar (widget) design pattern, however we also try to respect users' general expectations for the behavior of links in a global navigation. To this end, the accessible mega menu implementation permits tab focus on each of the six top-level menu items. When one of the menu items has focus, pressing the Enter key, Spacebar or Down arrow will open the submenu panel, and pressing the Left or Right arrow key will shift focus to the adjacent menu item. Links within the submenu panels are included in the tab order when the panel is open. They can also be navigated with the arrow keys or by typing the first character in the link name, which speeds up keyboard navigation considerably. Pressing the Escape key closes the submenu and restores focus to the parent menu item. Screen Reader Accessibility The accessible mega menu models its use of WAI-ARIA Roles, States, and Properties after those described in the WAI-ARIA Menu or Menu bar (widget) design pattern with some notable exceptions, so that it behaves better with screen reader user expectations for global navigation. We don't use role=""menu"" for the menu container and role=""menuitem"" for each of the links therein, because if we do, assistive technology will no longer interpret the links as links, but instead, as menu items, and the links in our global navigation will no longer show up when a screen reader user executes a shortcut command to bring up a list of links in the page. We also want to maintain the semantic structure of the submenu panels in our mega menu; our links are organized into lists and separated by headings. Omitting role=""menu"" and role=""menuitem"" for the global navigation seems the safer way to go. Usage HTML The HTML structure for the mega menu is a nav element, or any other container element, containing a list. Each list item contains a link which is followed by a div or any other container element which will serve as the pop up panel. The panel can contain any html content; in the following example, each panel contains three lists of links. You can explicitly define groups within the panel, between which a user can navigate quickly using the left and right arrow keys; in the following example, the CSS class .sub-nav-group identifies a navigable group.     <nav>         <ul class=""nav-menu"">             <li class=""nav-item"">                 <a href=""?movie"">Movies</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=0"">Action &amp; Adventure</a></li>                         <li><a href=""?movie&genre=2"">Children &amp; Family</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=7"">Dramas</a></li>                         <li><a href=""?movie&genre=9"">Foreign</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=14"">Musicals</a></li>                         <li><a href=""?movie&genre=15"">Romance</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>             <li class=""nav-item"">                 <a href=""?tv"">TV Shows</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=20"">Classic TV</a></li>                         <li><a href=""?tv&genre=21"">Crime TV</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=27"">Reality TV</a></li>                         <li><a href=""?tv&genre=30"">TV Action</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=33"">TV Dramas</a></li>                         <li><a href=""?tv&genre=34"">TV Horror</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>         </ul>     </nav> By default, accessibleMegaMenu uses the the following CSS classes to define the top-level navigation items, panels, groups within the panels, and the hover, focus, and open states. It also defines a prefix for unique id strings, which are required to indicate the relationship of a top-level navigation item to the panel it controls.     defaults = {         /* unique ID's are required to indicate aria-owns, aria-controls and aria-labelledby */         uuidPrefix: ""accessible-megamenu"",                  /* default css class used to define the megamenu styling */         menuClass: ""accessible-megamenu"",                  /* default css class for a top-level navigation item in the megamenu */         topNavItemClass: ""accessible-megamenu-top-nav-item"",                  /* default css class for a megamenu panel */         panelClass: ""accessible-megamenu-panel"",                  /* default css class for a group of items within a megamenu panel */         panelGroupClass: ""accessible-megamenu-panel-group"",                  /* default css class for the hover state */         hoverClass: ""hover"",                  /* default css class for the focus state */         focusClass: ""focus"",                  /* default css class for the open state */         openClass: ""open""      } You can optionally override the defaults to use the CSS classes you may have already defined for your mega menu. JavaScript Be sure to include jQuery and the jquery-accessibleMegaMenu.js plugin script.     <script src=""//code.jquery.com/jquery-1.10.1.min.js""></script>     <script src=""js/jquery-accessibleMegaMenu.js""></script> The following initializes the first nav element in the document as an accessibleMegaMenu, with optional CSS class overrides.     $(""nav:first"").accessibleMegaMenu({         /* prefix for generated unique id attributes, which are required             to indicate aria-owns, aria-controls and aria-labelledby */         uuidPrefix: ""accessible-megamenu"",                  /* css class used to define the megamenu styling */         menuClass: ""nav-menu"",                  /* css class for a top-level navigation item in the megamenu */         topNavItemClass: ""nav-item"",                  /* css class for a megamenu panel */         panelClass: ""sub-nav"",                  /* css class for a group of items within a megamenu panel */         panelGroupClass: ""sub-nav-group"",                  /* css class for the hover state */         hoverClass: ""hover"",                  /* css class for the focus state */         focusClass: ""focus"",                  /* css class for the open state */         openClass: ""open""     }); CSS AccessibleMegaMenu handles the showing and hiding of panels by adding or removing a CSS class. No inline styles are added to hide elements or create animation between states. Following is some rudimentary CSS for our example which enables the showing/hiding of and the layout of lists panels in the mega menu.     /* mega menu list */     .nav-menu {         display: block;         position: relative;         list-style: none;         margin: 0;         padding: 0;         z-index: 15;     }     /* a top level navigation item in the mega menu */     .nav-item {         list-style: none;         display: inline-block;         padding: 0;         margin: 0;     }     /* first descendant link within a top level navigation item */     .nav-item > a {         position: relative;         display: inline-block;         padding: 0.5em 1em;         margin: 0 0 -1px 0;         border: 1px solid transparent;     }     /* focus/open states of first descendant link within a top level         navigation item */     .nav-item > a:focus,     .nav-item > a.open {         border: 1px solid #dedede;     }     /* open state of first descendant link within a top level         navigation item */     .nav-item > a.open {         background-color: #fff;         border-bottom: none;         z-index: 1;     }     /* sub-navigation panel */     .sub-nav {         position: absolute;         display: none;         top: 2.2em;         margin-top: -1px;         padding: 0.5em 1em;         border: 1px solid #dedede;         background-color: #fff;     }     /* sub-navigation panel open state */     .sub-nav.open {         display: block;     }     /* list of items within sub-navigation panel */     .sub-nav ul {         display: inline-block;         vertical-align: top;         margin: 0 1em 0 0;         padding: 0;     }     /* list item within sub-navigation panel */     .sub-nav li {         display: block;         list-style-type: none;         margin: 0;         padding: 0;     }   Putting it all together, here is the completed example:     <!doctype html>     <html lang=""en"">     <head>     <meta charset=""UTF-8"">     <title>Simple Accessible Mega Menu Example</title>     <style>         /* Rudimentary mega menu CSS for demonstration */             /* mega menu list */         .nav-menu {             display: block;             position: relative;             list-style: none;             margin: 0;             padding: 0;             z-index: 15;         }         /* a top level navigation item in the mega menu */         .nav-item {             list-style: none;             display: inline-block;             padding: 0;             margin: 0;         }         /* first descendant link within a top level navigation item */         .nav-item > a {             position: relative;             display: inline-block;             padding: 0.5em 1em;             margin: 0 0 -1px 0;             border: 1px solid transparent;         }         /* focus/open states of first descendant link within a top level             navigation item */         .nav-item > a:focus,         .nav-item > a.open {             border: 1px solid #dedede;         }         /* open state of first descendant link within a top level             navigation item */         .nav-item > a.open {             background-color: #fff;             border-bottom: none;             z-index: 1;         }         /* sub-navigation panel */         .sub-nav {             position: absolute;             display: none;             top: 2.2em;             margin-top: -1px;             padding: 0.5em 1em;             border: 1px solid #dedede;             background-color: #fff;         }         /* sub-navigation panel open state */         .sub-nav.open {             display: block;         }         /* list of items within sub-navigation panel */         .sub-nav ul {             display: inline-block;             vertical-align: top;             margin: 0 1em 0 0;             padding: 0;         }         /* list item within sub-navigation panel */         .sub-nav li {             display: block;             list-style-type: none;             margin: 0;             padding: 0;         }          </style>     </head>     <body>     <nav>         <ul class=""nav-menu"">             <li class=""nav-item"">                 <a href=""?movie"">Movies</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=0"">Action &amp; Adventure</a></li>                         <li><a href=""?movie&genre=2"">Children &amp; Family</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=7"">Dramas</a></li>                         <li><a href=""?movie&genre=9"">Foreign</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=14"">Musicals</a></li>                         <li><a href=""?movie&genre=15"">Romance</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>             <li class=""nav-item"">                 <a href=""?tv"">TV Shows</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=20"">Classic TV</a></li>                         <li><a href=""?tv&genre=21"">Crime TV</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=27"">Reality TV</a></li>                         <li><a href=""?tv&genre=30"">TV Action</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=33"">TV Dramas</a></li>                         <li><a href=""?tv&genre=34"">TV Horror</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>         </ul>     </nav>          <!-- include jquery -->     <script src=""//code.jquery.com/jquery-1.10.1.min.js""></script>     <!-- include the jquery-accessibleMegaMenu plugin script -->     <script src=""js/jquery-accessibleMegaMenu.js""></script>     <!-- initialize a selector as an accessibleMegaMenu -->     <script>         $(""nav:first"").accessibleMegaMenu({             /* prefix for generated unique id attributes, which are required                 to indicate aria-owns, aria-controls and aria-labelledby */             uuidPrefix: ""accessible-megamenu"",                          /* css class used to define the megamenu styling */             menuClass: ""nav-menu"",                          /* css class for a top-level navigation item in the megamenu */             topNavItemClass: ""nav-item"",                          /* css class for a megamenu panel */             panelClass: ""sub-nav"",                          /* css class for a group of items within a megamenu panel */             panelGroupClass: ""sub-nav-group"",                          /* css class for the hover state */             hoverClass: ""hover"",                          /* css class for the focus state */             focusClass: ""focus"",                          /* css class for the open state */             openClass: ""open""         });     </script>     </body>     </html> About A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. Resources Readme License Apache-2.0 License Releases No releases published Packages 0 No packages published Contributors 7 Languages HTML 71.8% CSS 26.4% JavaScript 1.8% © 2021 GitHub, Inc. Terms Privacy Security Status Docs Contact GitHub Pricing API Training Blog About You can’t perform that action at this time. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."
482943,20210219,github.com,https://github.com/crypto-browserify/crypto-browserify,text/html,text/html,en,"GitHub - crypto-browserify/crypto-browserify: partial implementation of node's `crypto` for the browser Skip to content Sign up Why GitHub? Features → Mobile → Actions → Codespaces → Packages → Security → Code review → Project management → Integrations → GitHub Sponsors → Customer stories → Security → Team Enterprise Explore Explore GitHub → Learn & contribute Topics → Collections → Trending → Learning Lab → Open source guides → Connect with others The ReadME Project → Events → Community forum → GitHub Education → GitHub Stars program → Marketplace Pricing Plans → Compare plans → Contact Sales → Nonprofit → Education → In this repository All GitHub ↵ Jump to ↵ No suggested jump to results In this repository All GitHub ↵ Jump to ↵ In this organization All GitHub ↵ Jump to ↵ In this repository All GitHub ↵ Jump to ↵ Sign in Sign up {{ message }} crypto-browserify / crypto-browserify Watch 21 Star 466 Fork 147 partial implementation of node's `crypto` for the browser MIT License 466 stars 147 forks Star Watch Code Issues 18 Pull requests 6 Actions Projects 0 Wiki Security Insights More Code Issues Pull requests Actions Projects Wiki Security Insights master Switch branches/tags Branches Tags Nothing to show {{ refName }} default View all branches Nothing to show {{ refName }} default View all tags 6 branches 31 tags Go to file Code Clone HTTPS GitHub CLI Use Git or checkout with SVN using the web URL. Work fast with our official CLI. Learn more. Open with GitHub Desktop Download ZIP Launching GitHub Desktop If nothing happens, download GitHub Desktop and try again. Go back Launching GitHub Desktop If nothing happens, download GitHub Desktop and try again. Go back Launching Xcode If nothing happens, download Xcode and try again. Go back Launching Visual Studio If nothing happens, download the GitHub extension for Visual Studio and try again. Go back Latest commit calvinmetcalf fix debian issue (maybe) … 460a13b Feb 9, 2018 fix debian issue (maybe) 460a13b Git stats 362 commits Files Permalink Failed to load latest commit information. Type Name Latest commit message Commit time example add standard 5.0.0 Aug 13, 2015 test fix debian issue (maybe) Feb 9, 2018 .gitignore Add .gitignore Aug 5, 2013 .travis.yml saucelabs aparently only goes back to 7 Oct 19, 2017 .zuul.yml add zuul and browser tests Oct 3, 2015 LICENSE Add MIT license Sep 20, 2013 README.md add privateEncrypt/publicDecrypt to README Dec 14, 2015 index.js add rndom fill Oct 18, 2017 package.json 3.12.0 Nov 3, 2017 View code README.md crypto-browserify A port of node's crypto module to the browser. The goal of this module is to reimplement node's crypto module, in pure javascript so that it can run in the browser. Here is the subset that is currently implemented: createHash (sha1, sha224, sha256, sha384, sha512, md5, rmd160) createHmac (sha1, sha224, sha256, sha384, sha512, md5, rmd160) pbkdf2 pbkdf2Sync randomBytes pseudoRandomBytes createCipher (aes) createDecipher (aes) createDiffieHellman createSign (rsa, ecdsa) createVerify (rsa, ecdsa) createECDH (secp256k1) publicEncrypt/privateDecrypt (rsa) privateEncrypt/publicDecrypt (rsa) todo these features from node's crypto are still unimplemented. createCredentials contributions If you are interested in writing a feature, please implement as a new module, which will be incorporated into crypto-browserify as a dependency. All deps must be compatible with node's crypto (generate example inputs and outputs with node, and save base64 strings inside JSON, so that tests can run in the browser. see sha.js Crypto is extra serious so please do not hesitate to review the code, and post comments if you do. License MIT About partial implementation of node's `crypto` for the browser Resources Readme License MIT License Releases 31 tags Packages 0 No packages published Used by 5.5m + 5,517,586 Contributors 24 + 13 contributors Languages JavaScript 99.1% HTML 0.9% © 2021 GitHub, Inc. Terms Privacy Security Status Docs Contact GitHub Pricing API Training Blog About You can’t perform that action at this time. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."
482946,20210219,github.com,https://github.com/indutny/elliptic/issues,text/html,text/html,en,"Issues · indutny/elliptic · GitHub Skip to content Sign up Why GitHub? Features → Mobile → Actions → Codespaces → Packages → Security → Code review → Project management → Integrations → GitHub Sponsors → Customer stories → Security → Team Enterprise Explore Explore GitHub → Learn & contribute Topics → Collections → Trending → Learning Lab → Open source guides → Connect with others The ReadME Project → Events → Community forum → GitHub Education → GitHub Stars program → Marketplace Pricing Plans → Compare plans → Contact Sales → Nonprofit → Education → In this repository All GitHub ↵ Jump to ↵ No suggested jump to results In this repository All GitHub ↵ Jump to ↵ In this user All GitHub ↵ Jump to ↵ In this repository All GitHub ↵ Jump to ↵ Sign in Sign up {{ message }} indutny / elliptic Watch 50 Star 1.2k Fork 287 Code Issues 68 Pull requests 16 Actions Projects 0 Wiki Security Insights More Code Issues Pull requests Actions Projects Wiki Security Insights Labels 8 Milestones 0 Labels 8 Milestones 0 New issue Have a question about this project? Sign up for a free GitHub account to open an issue and contact its maintainers and the community. Pick a username Email Address Password Sign up for GitHub By clicking “Sign up for GitHub”, you agree to our terms of service and privacy statement. We’ll occasionally send you account related emails. Already on GitHub? Sign in to your account 68 Open 96 Closed 68 Open 96 Closed Author Filter by author author: Filter by this user Label Filter by label Use alt + click/return to exclude labels. Projects Filter by project Milestones Filter by milestone Assignee Filter by who’s assigned Sort Sort by Newest Oldest Most commented Least commented Recently updated Least recently updated Most reactions 👍 👎 😄 🎉 😕 ❤️ 🚀 👀 How to decipher the encrypted message? #245 opened Jan 27, 2021 by istabraq-iot Montgomery Curve25519 is not openssl compatible #243 opened Dec 28, 2020 by jc-lab 3 Curves p384 and p521 produce incorrect results #239 opened Oct 18, 2020 by guidovranken i want to use this library with c# #238 opened Oct 10, 2020 by medozeus Elliptic.js support following curve types: #236 opened Oct 5, 2020 by medozeus The Elliptic package 6.5.2 for Node.js allows ECDSA signature malleability via variations in encoding, leading '\0' bytes, or integer overflows. #235 opened Oct 1, 2020 by bsomeshwer EdDSA: What is a reason to manipulate with bytes? #233 opened Aug 27, 2020 by mahnunchik why use derive method get ECDH key，i got different length #230 opened Jul 10, 2020 by cqupt-yifanwu 4 Why do I generate my local test path in chunk-vendors when packing with NPM #229 opened Jun 22, 2020 by Anthonychen1994 1 TypedArray support ? #228 opened Jun 20, 2020 by dojyorin Is there way to generate PKCS#8 private key from Pem format ECC Private key #225 opened Apr 28, 2020 by sureshreddygovindu Signature validation in python. Prefix configuration? #224 opened Apr 25, 2020 by amrbz is it possible to do assymetric encryption? #223 opened Apr 7, 2020 by maroodb 1 Missing infinity point encoding #218 opened Feb 21, 2020 by catenacyber 1 ECDH P-521 public key point not on curve according to java (clojure) #216 opened Feb 11, 2020 by slhabity 1 how save and load private / publick key in pem or other format #215 opened Jan 27, 2020 by fturiot 2 How to pair client to server BTCPay NodeJS client? #214 opened Jan 21, 2020 by savshit 1 How to pair client to server BTCPay NodeJS client? #213 opened Jan 21, 2020 by savshit curve25519 and BouncyCastle(bc) in c# Different compute shared secret #209 opened Dec 11, 2019 by shamohai 2 Feature: Schnorr signatures #208 opened Dec 11, 2019 by junderw 6 How to define curve secp224k1? #205 opened Nov 15, 2019 by ahzf ec.keyFromPrivate returns a KeyPair with a private key even when receiving a random input #201 opened Oct 2, 2019 by ziccardi 1 secp256k1.createPublicKey is not a function #199 opened Sep 18, 2019 by qy201901 1 Compatibility issue with curve25519-java #198 opened Sep 13, 2019 by c0deguard 6 DeprecationWarning on Buffer #196 opened Sep 11, 2019 by exoego 1 3 Previous 1 2 3 Next Previous Next ProTip! Add no:assignee to see everything that’s not assigned. © 2021 GitHub, Inc. Terms Privacy Security Status Docs Contact GitHub Pricing API Training Blog About You can’t perform that action at this time. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."
482950,20210219,github.com,https://github.com/indutny/elliptic,text/html,text/html,en,"GitHub - indutny/elliptic: Fast Elliptic Curve Cryptography in plain javascript Skip to content Sign up Why GitHub? Features → Mobile → Actions → Codespaces → Packages → Security → Code review → Project management → Integrations → GitHub Sponsors → Customer stories → Security → Team Enterprise Explore Explore GitHub → Learn & contribute Topics → Collections → Trending → Learning Lab → Open source guides → Connect with others The ReadME Project → Events → Community forum → GitHub Education → GitHub Stars program → Marketplace Pricing Plans → Compare plans → Contact Sales → Nonprofit → Education → In this repository All GitHub ↵ Jump to ↵ No suggested jump to results In this repository All GitHub ↵ Jump to ↵ In this user All GitHub ↵ Jump to ↵ In this repository All GitHub ↵ Jump to ↵ Sign in Sign up {{ message }} indutny / elliptic Watch 50 Star 1.2k Fork 287 Fast Elliptic Curve Cryptography in plain javascript 1.2k stars 287 forks Star Watch Code Issues 68 Pull requests 16 Actions Projects 0 Wiki Security Insights More Code Issues Pull requests Actions Projects Wiki Security Insights master Switch branches/tags Branches Tags Nothing to show {{ refName }} default View all branches Nothing to show {{ refName }} default View all tags 2 branches 85 tags Go to file Code Clone HTTPS GitHub CLI Use Git or checkout with SVN using the web URL. Work fast with our official CLI. Learn more. Open with GitHub Desktop Download ZIP Launching GitHub Desktop If nothing happens, download GitHub Desktop and try again. Go back Launching GitHub Desktop If nothing happens, download GitHub Desktop and try again. Go back Launching Xcode If nothing happens, download Xcode and try again. Go back Launching Visual Studio If nothing happens, download the GitHub extension for Visual Studio and try again. Go back Latest commit indutny 6.5.4 … 43ac7f2 Feb 2, 2021 6.5.4 43ac7f2 Git stats 331 commits Files Permalink Failed to load latest commit information. Type Name Latest commit message Commit time benchmarks package: remove Makefile and dist Jan 29, 2016 dist 6.5.4 Feb 2, 2021 lib ec: validate that a point before deriving keys Feb 2, 2021 test ec: validate that a point before deriving keys Feb 2, 2021 .codeclimate.yml test: improvements with Saucelabs/Codeclimate Mar 31, 2016 .eslintignore lib: relint using eslint Aug 2, 2020 .eslintrc.js lib: relint using eslint Aug 2, 2020 .gitignore test: improvements with Saucelabs/Codeclimate Mar 31, 2016 .npmignore npmignore: dist May 20, 2016 .travis.yml travis: really move on Jun 26, 2019 Gruntfile.js grunt: fix standalone build May 25, 2016 README.md readme: update example Mar 23, 2017 package-lock.json 6.5.4 Feb 2, 2021 package.json 6.5.4 Feb 2, 2021 View code README.md Elliptic Fast elliptic-curve cryptography in a plain javascript implementation. NOTE: Please take a look at http://safecurves.cr.yp.to/ before choosing a curve for your cryptography operations. Incentive ECC is much slower than regular RSA cryptography, the JS implementations are even more slower. Benchmarks $ node benchmarks/index.js Benchmarking: sign elliptic#sign x 262 ops/sec ±0.51% (177 runs sampled) eccjs#sign x 55.91 ops/sec ±0.90% (144 runs sampled) ------------------------ Fastest is elliptic#sign ======================== Benchmarking: verify elliptic#verify x 113 ops/sec ±0.50% (166 runs sampled) eccjs#verify x 48.56 ops/sec ±0.36% (125 runs sampled) ------------------------ Fastest is elliptic#verify ======================== Benchmarking: gen elliptic#gen x 294 ops/sec ±0.43% (176 runs sampled) eccjs#gen x 62.25 ops/sec ±0.63% (129 runs sampled) ------------------------ Fastest is elliptic#gen ======================== Benchmarking: ecdh elliptic#ecdh x 136 ops/sec ±0.85% (156 runs sampled) ------------------------ Fastest is elliptic#ecdh ======================== API ECDSA var EC = require('elliptic').ec; // Create and initialize EC context // (better do it once and reuse it) var ec = new EC('secp256k1'); // Generate keys var key = ec.genKeyPair(); // Sign the message's hash (input must be an array, or a hex-string) var msgHash = [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ]; var signature = key.sign(msgHash); // Export DER encoded signature in Array var derSign = signature.toDER(); // Verify signature console.log(key.verify(msgHash, derSign)); // CHECK WITH NO PRIVATE KEY var pubPoint = key.getPublic(); var x = pubPoint.getX(); var y = pubPoint.getY(); // Public Key MUST be either: // 1) '04' + hex string of x + hex string of y; or // 2) object with two hex string properties (x and y); or // 3) object with two buffer properties (x and y) var pub = pubPoint.encode('hex');                                 // case 1 var pub = { x: x.toString('hex'), y: y.toString('hex') };         // case 2 var pub = { x: x.toBuffer(), y: y.toBuffer() };                   // case 3 var pub = { x: x.toArrayLike(Buffer), y: y.toArrayLike(Buffer) }; // case 3 // Import public key var key = ec.keyFromPublic(pub, 'hex'); // Signature MUST be either: // 1) DER-encoded signature as hex-string; or // 2) DER-encoded signature as buffer; or // 3) object with two hex-string properties (r and s); or // 4) object with two buffer properties (r and s) var signature = '3046022100...'; // case 1 var signature = new Buffer('...'); // case 2 var signature = { r: 'b1fc...', s: '9c42...' }; // case 3 // Verify signature console.log(key.verify(msgHash, signature)); EdDSA var EdDSA = require('elliptic').eddsa; // Create and initialize EdDSA context // (better do it once and reuse it) var ec = new EdDSA('ed25519'); // Create key pair from secret var key = ec.keyFromSecret('693e3c...'); // hex string, array or Buffer // Sign the message's hash (input must be an array, or a hex-string) var msgHash = [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ]; var signature = key.sign(msgHash).toHex(); // Verify signature console.log(key.verify(msgHash, signature)); // CHECK WITH NO PRIVATE KEY // Import public key var pub = '0a1af638...'; var key = ec.keyFromPublic(pub, 'hex'); // Verify signature var signature = '70bed1...'; console.log(key.verify(msgHash, signature)); ECDH var EC = require('elliptic').ec; var ec = new EC('curve25519'); // Generate keys var key1 = ec.genKeyPair(); var key2 = ec.genKeyPair(); var shared1 = key1.derive(key2.getPublic()); var shared2 = key2.derive(key1.getPublic()); console.log('Both shared secrets are BN instances'); console.log(shared1.toString(16)); console.log(shared2.toString(16)); three and more members: var EC = require('elliptic').ec; var ec = new EC('curve25519'); var A = ec.genKeyPair(); var B = ec.genKeyPair(); var C = ec.genKeyPair(); var AB = A.getPublic().mul(B.getPrivate()) var BC = B.getPublic().mul(C.getPrivate()) var CA = C.getPublic().mul(A.getPrivate()) var ABC = AB.mul(C.getPrivate()) var BCA = BC.mul(A.getPrivate()) var CAB = CA.mul(B.getPrivate()) console.log(ABC.getX().toString(16)) console.log(BCA.getX().toString(16)) console.log(CAB.getX().toString(16)) NOTE: .derive() returns a BN instance. Supported curves Elliptic.js support following curve types: Short Weierstrass Montgomery Edwards Twisted Edwards Following curve 'presets' are embedded into the library: secp256k1 p192 p224 p256 p384 p521 curve25519 ed25519 NOTE: That curve25519 could not be used for ECDSA, use ed25519 instead. Implementation details ECDSA is using deterministic k value generation as per RFC6979. Most of the curve operations are performed on non-affine coordinates (either projective or extended), various windowing techniques are used for different cases. All operations are performed in reduction context using bn.js, hashing is provided by hash.js Related projects eccrypto: isomorphic implementation of ECDSA, ECDH and ECIES for both browserify and node (uses elliptic for browser and secp256k1-node for node) LICENSE This software is licensed under the MIT License. Copyright Fedor Indutny, 2014. Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the ""Software""), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. About Fast Elliptic Curve Cryptography in plain javascript Resources Readme Releases 85 tags Packages 0 No packages published Used by 5.4m + 5,441,256 Contributors 25 + 14 contributors Languages JavaScript 99.3% HTML 0.7% © 2021 GitHub, Inc. Terms Privacy Security Status Docs Contact GitHub Pricing API Training Blog About You can’t perform that action at this time. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."
485711,20210226,github.com,https://github.com/adobe-accessibility/Accessible-Mega-Menu,text/html,text/html,en,"GitHub - adobe-accessibility/Accessible-Mega-Menu: A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. Skip to content Sign up Why GitHub? Features → Mobile → Actions → Codespaces → Packages → Security → Code review → Project management → Integrations → GitHub Sponsors → Customer stories→ Security → Team Enterprise Explore Explore GitHub → Learn and contribute Topics → Collections → Trending → Learning Lab → Open source guides → Connect with others The ReadME Project → Events → Community forum → GitHub Education → GitHub Stars program → Marketplace Pricing Plans → Compare plans → Contact Sales → Nonprofit → Education → In this repository All GitHub ↵ Jump to ↵ No suggested jump to results In this repository All GitHub ↵ Jump to ↵ In this organization All GitHub ↵ Jump to ↵ In this repository All GitHub ↵ Jump to ↵ Sign in Sign up {{ message }} adobe-accessibility / Accessible-Mega-Menu Notifications Star 574 Fork 194 A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. Apache-2.0 License 574 stars 194 forks Star Notifications Code Issues 28 Pull requests 6 Actions Projects 0 Security Insights More Code Issues Pull requests Actions Projects Security Insights master Switch branches/tags Branches Tags Nothing to show {{ refName }} default View all branches Nothing to show {{ refName }} default View all tags 2 branches 0 tags Go to file Code Clone HTTPS GitHub CLI Use Git or checkout with SVN using the web URL. Work fast with our official CLI. Learn more. Open with GitHub Desktop Download ZIP Launching GitHub Desktop If nothing happens, download GitHub Desktop and try again. Go back Launching GitHub Desktop If nothing happens, download GitHub Desktop and try again. Go back Launching Xcode If nothing happens, download Xcode and try again. Go back Launching Visual Studio If nothing happens, download the GitHub extension for Visual Studio and try again. Go back Latest commit majornista fix evaluation for ChromeVox object … 5c070bc Dec 7, 2020 fix evaluation for ChromeVox object 5c070bc Git stats 39 commits Files Permalink Failed to load latest commit information. Type Name Latest commit message Commit time css Add openOnMouseover setting, and toggleButtonClass for responsive layout May 11, 2018 js fix evaluation for ChromeVox object Dec 7, 2020 third-party/jquery initial commit Aug 26, 2013 LICENSE initial commit Aug 26, 2013 NOTICE initial commit Aug 26, 2013 README.md initial commit Aug 26, 2013 index.html Updating WCAG 2.0 References to WCAG 2.1 (#67) Dec 4, 2020 package.json Updating repo references Jul 8, 2016 View code README.md Accessible Mega Menu ========================= A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. It is modeled after the mega menu on adobe.com but has been simplified for use by others. An brief explanation of our interaction design choices can be found in a blog post at Mega menu accessibility on adobe.com. Content for the links and text within the mega menu comes from the Web Content Accessibility Guidelines (WCAG) 2.0. Keyboard Accessibility The accessible mega menu supports keyboard interaction modeled after the behavior described in the WAI-ARIA Menu or Menu bar (widget) design pattern, however we also try to respect users' general expectations for the behavior of links in a global navigation. To this end, the accessible mega menu implementation permits tab focus on each of the six top-level menu items. When one of the menu items has focus, pressing the Enter key, Spacebar or Down arrow will open the submenu panel, and pressing the Left or Right arrow key will shift focus to the adjacent menu item. Links within the submenu panels are included in the tab order when the panel is open. They can also be navigated with the arrow keys or by typing the first character in the link name, which speeds up keyboard navigation considerably. Pressing the Escape key closes the submenu and restores focus to the parent menu item. Screen Reader Accessibility The accessible mega menu models its use of WAI-ARIA Roles, States, and Properties after those described in the WAI-ARIA Menu or Menu bar (widget) design pattern with some notable exceptions, so that it behaves better with screen reader user expectations for global navigation. We don't use role=""menu"" for the menu container and role=""menuitem"" for each of the links therein, because if we do, assistive technology will no longer interpret the links as links, but instead, as menu items, and the links in our global navigation will no longer show up when a screen reader user executes a shortcut command to bring up a list of links in the page. We also want to maintain the semantic structure of the submenu panels in our mega menu; our links are organized into lists and separated by headings. Omitting role=""menu"" and role=""menuitem"" for the global navigation seems the safer way to go. Usage HTML The HTML structure for the mega menu is a nav element, or any other container element, containing a list. Each list item contains a link which is followed by a div or any other container element which will serve as the pop up panel. The panel can contain any html content; in the following example, each panel contains three lists of links. You can explicitly define groups within the panel, between which a user can navigate quickly using the left and right arrow keys; in the following example, the CSS class .sub-nav-group identifies a navigable group.     <nav>         <ul class=""nav-menu"">             <li class=""nav-item"">                 <a href=""?movie"">Movies</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=0"">Action &amp; Adventure</a></li>                         <li><a href=""?movie&genre=2"">Children &amp; Family</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=7"">Dramas</a></li>                         <li><a href=""?movie&genre=9"">Foreign</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=14"">Musicals</a></li>                         <li><a href=""?movie&genre=15"">Romance</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>             <li class=""nav-item"">                 <a href=""?tv"">TV Shows</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=20"">Classic TV</a></li>                         <li><a href=""?tv&genre=21"">Crime TV</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=27"">Reality TV</a></li>                         <li><a href=""?tv&genre=30"">TV Action</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=33"">TV Dramas</a></li>                         <li><a href=""?tv&genre=34"">TV Horror</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>         </ul>     </nav> By default, accessibleMegaMenu uses the the following CSS classes to define the top-level navigation items, panels, groups within the panels, and the hover, focus, and open states. It also defines a prefix for unique id strings, which are required to indicate the relationship of a top-level navigation item to the panel it controls.     defaults = {         /* unique ID's are required to indicate aria-owns, aria-controls and aria-labelledby */         uuidPrefix: ""accessible-megamenu"",                  /* default css class used to define the megamenu styling */         menuClass: ""accessible-megamenu"",                  /* default css class for a top-level navigation item in the megamenu */         topNavItemClass: ""accessible-megamenu-top-nav-item"",                  /* default css class for a megamenu panel */         panelClass: ""accessible-megamenu-panel"",                  /* default css class for a group of items within a megamenu panel */         panelGroupClass: ""accessible-megamenu-panel-group"",                  /* default css class for the hover state */         hoverClass: ""hover"",                  /* default css class for the focus state */         focusClass: ""focus"",                  /* default css class for the open state */         openClass: ""open""      } You can optionally override the defaults to use the CSS classes you may have already defined for your mega menu. JavaScript Be sure to include jQuery and the jquery-accessibleMegaMenu.js plugin script.     <script src=""//code.jquery.com/jquery-1.10.1.min.js""></script>     <script src=""js/jquery-accessibleMegaMenu.js""></script> The following initializes the first nav element in the document as an accessibleMegaMenu, with optional CSS class overrides.     $(""nav:first"").accessibleMegaMenu({         /* prefix for generated unique id attributes, which are required             to indicate aria-owns, aria-controls and aria-labelledby */         uuidPrefix: ""accessible-megamenu"",                  /* css class used to define the megamenu styling */         menuClass: ""nav-menu"",                  /* css class for a top-level navigation item in the megamenu */         topNavItemClass: ""nav-item"",                  /* css class for a megamenu panel */         panelClass: ""sub-nav"",                  /* css class for a group of items within a megamenu panel */         panelGroupClass: ""sub-nav-group"",                  /* css class for the hover state */         hoverClass: ""hover"",                  /* css class for the focus state */         focusClass: ""focus"",                  /* css class for the open state */         openClass: ""open""     }); CSS AccessibleMegaMenu handles the showing and hiding of panels by adding or removing a CSS class. No inline styles are added to hide elements or create animation between states. Following is some rudimentary CSS for our example which enables the showing/hiding of and the layout of lists panels in the mega menu.     /* mega menu list */     .nav-menu {         display: block;         position: relative;         list-style: none;         margin: 0;         padding: 0;         z-index: 15;     }     /* a top level navigation item in the mega menu */     .nav-item {         list-style: none;         display: inline-block;         padding: 0;         margin: 0;     }     /* first descendant link within a top level navigation item */     .nav-item > a {         position: relative;         display: inline-block;         padding: 0.5em 1em;         margin: 0 0 -1px 0;         border: 1px solid transparent;     }     /* focus/open states of first descendant link within a top level         navigation item */     .nav-item > a:focus,     .nav-item > a.open {         border: 1px solid #dedede;     }     /* open state of first descendant link within a top level         navigation item */     .nav-item > a.open {         background-color: #fff;         border-bottom: none;         z-index: 1;     }     /* sub-navigation panel */     .sub-nav {         position: absolute;         display: none;         top: 2.2em;         margin-top: -1px;         padding: 0.5em 1em;         border: 1px solid #dedede;         background-color: #fff;     }     /* sub-navigation panel open state */     .sub-nav.open {         display: block;     }     /* list of items within sub-navigation panel */     .sub-nav ul {         display: inline-block;         vertical-align: top;         margin: 0 1em 0 0;         padding: 0;     }     /* list item within sub-navigation panel */     .sub-nav li {         display: block;         list-style-type: none;         margin: 0;         padding: 0;     }   Putting it all together, here is the completed example:     <!doctype html>     <html lang=""en"">     <head>     <meta charset=""UTF-8"">     <title>Simple Accessible Mega Menu Example</title>     <style>         /* Rudimentary mega menu CSS for demonstration */             /* mega menu list */         .nav-menu {             display: block;             position: relative;             list-style: none;             margin: 0;             padding: 0;             z-index: 15;         }         /* a top level navigation item in the mega menu */         .nav-item {             list-style: none;             display: inline-block;             padding: 0;             margin: 0;         }         /* first descendant link within a top level navigation item */         .nav-item > a {             position: relative;             display: inline-block;             padding: 0.5em 1em;             margin: 0 0 -1px 0;             border: 1px solid transparent;         }         /* focus/open states of first descendant link within a top level             navigation item */         .nav-item > a:focus,         .nav-item > a.open {             border: 1px solid #dedede;         }         /* open state of first descendant link within a top level             navigation item */         .nav-item > a.open {             background-color: #fff;             border-bottom: none;             z-index: 1;         }         /* sub-navigation panel */         .sub-nav {             position: absolute;             display: none;             top: 2.2em;             margin-top: -1px;             padding: 0.5em 1em;             border: 1px solid #dedede;             background-color: #fff;         }         /* sub-navigation panel open state */         .sub-nav.open {             display: block;         }         /* list of items within sub-navigation panel */         .sub-nav ul {             display: inline-block;             vertical-align: top;             margin: 0 1em 0 0;             padding: 0;         }         /* list item within sub-navigation panel */         .sub-nav li {             display: block;             list-style-type: none;             margin: 0;             padding: 0;         }          </style>     </head>     <body>     <nav>         <ul class=""nav-menu"">             <li class=""nav-item"">                 <a href=""?movie"">Movies</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=0"">Action &amp; Adventure</a></li>                         <li><a href=""?movie&genre=2"">Children &amp; Family</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=7"">Dramas</a></li>                         <li><a href=""?movie&genre=9"">Foreign</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=14"">Musicals</a></li>                         <li><a href=""?movie&genre=15"">Romance</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>             <li class=""nav-item"">                 <a href=""?tv"">TV Shows</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=20"">Classic TV</a></li>                         <li><a href=""?tv&genre=21"">Crime TV</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=27"">Reality TV</a></li>                         <li><a href=""?tv&genre=30"">TV Action</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=33"">TV Dramas</a></li>                         <li><a href=""?tv&genre=34"">TV Horror</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>         </ul>     </nav>          <!-- include jquery -->     <script src=""//code.jquery.com/jquery-1.10.1.min.js""></script>     <!-- include the jquery-accessibleMegaMenu plugin script -->     <script src=""js/jquery-accessibleMegaMenu.js""></script>     <!-- initialize a selector as an accessibleMegaMenu -->     <script>         $(""nav:first"").accessibleMegaMenu({             /* prefix for generated unique id attributes, which are required                 to indicate aria-owns, aria-controls and aria-labelledby */             uuidPrefix: ""accessible-megamenu"",                          /* css class used to define the megamenu styling */             menuClass: ""nav-menu"",                          /* css class for a top-level navigation item in the megamenu */             topNavItemClass: ""nav-item"",                          /* css class for a megamenu panel */             panelClass: ""sub-nav"",                          /* css class for a group of items within a megamenu panel */             panelGroupClass: ""sub-nav-group"",                          /* css class for the hover state */             hoverClass: ""hover"",                          /* css class for the focus state */             focusClass: ""focus"",                          /* css class for the open state */             openClass: ""open""         });     </script>     </body>     </html> About A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. Resources Readme License Apache-2.0 License Releases No releases published Packages 0 No packages published Used by 15 + 7 Contributors 7 Languages HTML 71.8% CSS 26.4% JavaScript 1.8% © 2021 GitHub, Inc. Terms Privacy Security Status Docs Contact GitHub Pricing API Training Blog About You can’t perform that action at this time. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."
495883,20210305,github.com,https://github.com/adobe-accessibility/Accessible-Mega-Menu,text/html,text/html,en,"GitHub - adobe-accessibility/Accessible-Mega-Menu: A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. Skip to content Sign up Why GitHub? Features → Mobile → Actions → Codespaces → Packages → Security → Code review → Project management → Integrations → GitHub Sponsors → Customer stories→ Team Enterprise Explore Explore GitHub → Learn and contribute Topics → Collections → Trending → Learning Lab → Open source guides → Connect with others The ReadME Project → Events → Community forum → GitHub Education → GitHub Stars program → Marketplace Pricing Plans → Compare plans → Contact Sales → Nonprofit → Education → In this repository All GitHub ↵ Jump to ↵ No suggested jump to results In this repository All GitHub ↵ Jump to ↵ In this organization All GitHub ↵ Jump to ↵ In this repository All GitHub ↵ Jump to ↵ Sign in Sign up {{ message }} adobe-accessibility / Accessible-Mega-Menu Notifications Star 575 Fork 194 A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. Apache-2.0 License 575 stars 194 forks Star Notifications Code Issues 28 Pull requests 6 Actions Projects 0 Security Insights More Code Issues Pull requests Actions Projects Security Insights master Switch branches/tags Branches Tags Nothing to show {{ refName }} default View all branches Nothing to show {{ refName }} default View all tags 2 branches 0 tags Go to file Code Clone HTTPS GitHub CLI Use Git or checkout with SVN using the web URL. Work fast with our official CLI. Learn more. Open with GitHub Desktop Download ZIP Launching GitHub Desktop If nothing happens, download GitHub Desktop and try again. Go back Launching GitHub Desktop If nothing happens, download GitHub Desktop and try again. Go back Launching Xcode If nothing happens, download Xcode and try again. Go back Launching Visual Studio If nothing happens, download the GitHub extension for Visual Studio and try again. Go back Latest commit majornista fix evaluation for ChromeVox object … 5c070bc Dec 7, 2020 fix evaluation for ChromeVox object 5c070bc Git stats 39 commits Files Permalink Failed to load latest commit information. Type Name Latest commit message Commit time css Add openOnMouseover setting, and toggleButtonClass for responsive layout May 11, 2018 js fix evaluation for ChromeVox object Dec 7, 2020 third-party/jquery initial commit Aug 26, 2013 LICENSE initial commit Aug 26, 2013 NOTICE initial commit Aug 26, 2013 README.md initial commit Aug 26, 2013 index.html Updating WCAG 2.0 References to WCAG 2.1 (#67) Dec 4, 2020 package.json Updating repo references Jul 8, 2016 View code README.md Accessible Mega Menu ========================= A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. It is modeled after the mega menu on adobe.com but has been simplified for use by others. An brief explanation of our interaction design choices can be found in a blog post at Mega menu accessibility on adobe.com. Content for the links and text within the mega menu comes from the Web Content Accessibility Guidelines (WCAG) 2.0. Keyboard Accessibility The accessible mega menu supports keyboard interaction modeled after the behavior described in the WAI-ARIA Menu or Menu bar (widget) design pattern, however we also try to respect users' general expectations for the behavior of links in a global navigation. To this end, the accessible mega menu implementation permits tab focus on each of the six top-level menu items. When one of the menu items has focus, pressing the Enter key, Spacebar or Down arrow will open the submenu panel, and pressing the Left or Right arrow key will shift focus to the adjacent menu item. Links within the submenu panels are included in the tab order when the panel is open. They can also be navigated with the arrow keys or by typing the first character in the link name, which speeds up keyboard navigation considerably. Pressing the Escape key closes the submenu and restores focus to the parent menu item. Screen Reader Accessibility The accessible mega menu models its use of WAI-ARIA Roles, States, and Properties after those described in the WAI-ARIA Menu or Menu bar (widget) design pattern with some notable exceptions, so that it behaves better with screen reader user expectations for global navigation. We don't use role=""menu"" for the menu container and role=""menuitem"" for each of the links therein, because if we do, assistive technology will no longer interpret the links as links, but instead, as menu items, and the links in our global navigation will no longer show up when a screen reader user executes a shortcut command to bring up a list of links in the page. We also want to maintain the semantic structure of the submenu panels in our mega menu; our links are organized into lists and separated by headings. Omitting role=""menu"" and role=""menuitem"" for the global navigation seems the safer way to go. Usage HTML The HTML structure for the mega menu is a nav element, or any other container element, containing a list. Each list item contains a link which is followed by a div or any other container element which will serve as the pop up panel. The panel can contain any html content; in the following example, each panel contains three lists of links. You can explicitly define groups within the panel, between which a user can navigate quickly using the left and right arrow keys; in the following example, the CSS class .sub-nav-group identifies a navigable group.     <nav>         <ul class=""nav-menu"">             <li class=""nav-item"">                 <a href=""?movie"">Movies</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=0"">Action &amp; Adventure</a></li>                         <li><a href=""?movie&genre=2"">Children &amp; Family</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=7"">Dramas</a></li>                         <li><a href=""?movie&genre=9"">Foreign</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=14"">Musicals</a></li>                         <li><a href=""?movie&genre=15"">Romance</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>             <li class=""nav-item"">                 <a href=""?tv"">TV Shows</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=20"">Classic TV</a></li>                         <li><a href=""?tv&genre=21"">Crime TV</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=27"">Reality TV</a></li>                         <li><a href=""?tv&genre=30"">TV Action</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=33"">TV Dramas</a></li>                         <li><a href=""?tv&genre=34"">TV Horror</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>         </ul>     </nav> By default, accessibleMegaMenu uses the the following CSS classes to define the top-level navigation items, panels, groups within the panels, and the hover, focus, and open states. It also defines a prefix for unique id strings, which are required to indicate the relationship of a top-level navigation item to the panel it controls.     defaults = {         /* unique ID's are required to indicate aria-owns, aria-controls and aria-labelledby */         uuidPrefix: ""accessible-megamenu"",                  /* default css class used to define the megamenu styling */         menuClass: ""accessible-megamenu"",                  /* default css class for a top-level navigation item in the megamenu */         topNavItemClass: ""accessible-megamenu-top-nav-item"",                  /* default css class for a megamenu panel */         panelClass: ""accessible-megamenu-panel"",                  /* default css class for a group of items within a megamenu panel */         panelGroupClass: ""accessible-megamenu-panel-group"",                  /* default css class for the hover state */         hoverClass: ""hover"",                  /* default css class for the focus state */         focusClass: ""focus"",                  /* default css class for the open state */         openClass: ""open""      } You can optionally override the defaults to use the CSS classes you may have already defined for your mega menu. JavaScript Be sure to include jQuery and the jquery-accessibleMegaMenu.js plugin script.     <script src=""//code.jquery.com/jquery-1.10.1.min.js""></script>     <script src=""js/jquery-accessibleMegaMenu.js""></script> The following initializes the first nav element in the document as an accessibleMegaMenu, with optional CSS class overrides.     $(""nav:first"").accessibleMegaMenu({         /* prefix for generated unique id attributes, which are required             to indicate aria-owns, aria-controls and aria-labelledby */         uuidPrefix: ""accessible-megamenu"",                  /* css class used to define the megamenu styling */         menuClass: ""nav-menu"",                  /* css class for a top-level navigation item in the megamenu */         topNavItemClass: ""nav-item"",                  /* css class for a megamenu panel */         panelClass: ""sub-nav"",                  /* css class for a group of items within a megamenu panel */         panelGroupClass: ""sub-nav-group"",                  /* css class for the hover state */         hoverClass: ""hover"",                  /* css class for the focus state */         focusClass: ""focus"",                  /* css class for the open state */         openClass: ""open""     }); CSS AccessibleMegaMenu handles the showing and hiding of panels by adding or removing a CSS class. No inline styles are added to hide elements or create animation between states. Following is some rudimentary CSS for our example which enables the showing/hiding of and the layout of lists panels in the mega menu.     /* mega menu list */     .nav-menu {         display: block;         position: relative;         list-style: none;         margin: 0;         padding: 0;         z-index: 15;     }     /* a top level navigation item in the mega menu */     .nav-item {         list-style: none;         display: inline-block;         padding: 0;         margin: 0;     }     /* first descendant link within a top level navigation item */     .nav-item > a {         position: relative;         display: inline-block;         padding: 0.5em 1em;         margin: 0 0 -1px 0;         border: 1px solid transparent;     }     /* focus/open states of first descendant link within a top level         navigation item */     .nav-item > a:focus,     .nav-item > a.open {         border: 1px solid #dedede;     }     /* open state of first descendant link within a top level         navigation item */     .nav-item > a.open {         background-color: #fff;         border-bottom: none;         z-index: 1;     }     /* sub-navigation panel */     .sub-nav {         position: absolute;         display: none;         top: 2.2em;         margin-top: -1px;         padding: 0.5em 1em;         border: 1px solid #dedede;         background-color: #fff;     }     /* sub-navigation panel open state */     .sub-nav.open {         display: block;     }     /* list of items within sub-navigation panel */     .sub-nav ul {         display: inline-block;         vertical-align: top;         margin: 0 1em 0 0;         padding: 0;     }     /* list item within sub-navigation panel */     .sub-nav li {         display: block;         list-style-type: none;         margin: 0;         padding: 0;     }   Putting it all together, here is the completed example:     <!doctype html>     <html lang=""en"">     <head>     <meta charset=""UTF-8"">     <title>Simple Accessible Mega Menu Example</title>     <style>         /* Rudimentary mega menu CSS for demonstration */             /* mega menu list */         .nav-menu {             display: block;             position: relative;             list-style: none;             margin: 0;             padding: 0;             z-index: 15;         }         /* a top level navigation item in the mega menu */         .nav-item {             list-style: none;             display: inline-block;             padding: 0;             margin: 0;         }         /* first descendant link within a top level navigation item */         .nav-item > a {             position: relative;             display: inline-block;             padding: 0.5em 1em;             margin: 0 0 -1px 0;             border: 1px solid transparent;         }         /* focus/open states of first descendant link within a top level             navigation item */         .nav-item > a:focus,         .nav-item > a.open {             border: 1px solid #dedede;         }         /* open state of first descendant link within a top level             navigation item */         .nav-item > a.open {             background-color: #fff;             border-bottom: none;             z-index: 1;         }         /* sub-navigation panel */         .sub-nav {             position: absolute;             display: none;             top: 2.2em;             margin-top: -1px;             padding: 0.5em 1em;             border: 1px solid #dedede;             background-color: #fff;         }         /* sub-navigation panel open state */         .sub-nav.open {             display: block;         }         /* list of items within sub-navigation panel */         .sub-nav ul {             display: inline-block;             vertical-align: top;             margin: 0 1em 0 0;             padding: 0;         }         /* list item within sub-navigation panel */         .sub-nav li {             display: block;             list-style-type: none;             margin: 0;             padding: 0;         }          </style>     </head>     <body>     <nav>         <ul class=""nav-menu"">             <li class=""nav-item"">                 <a href=""?movie"">Movies</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=0"">Action &amp; Adventure</a></li>                         <li><a href=""?movie&genre=2"">Children &amp; Family</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=7"">Dramas</a></li>                         <li><a href=""?movie&genre=9"">Foreign</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=14"">Musicals</a></li>                         <li><a href=""?movie&genre=15"">Romance</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>             <li class=""nav-item"">                 <a href=""?tv"">TV Shows</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=20"">Classic TV</a></li>                         <li><a href=""?tv&genre=21"">Crime TV</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=27"">Reality TV</a></li>                         <li><a href=""?tv&genre=30"">TV Action</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=33"">TV Dramas</a></li>                         <li><a href=""?tv&genre=34"">TV Horror</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>         </ul>     </nav>          <!-- include jquery -->     <script src=""//code.jquery.com/jquery-1.10.1.min.js""></script>     <!-- include the jquery-accessibleMegaMenu plugin script -->     <script src=""js/jquery-accessibleMegaMenu.js""></script>     <!-- initialize a selector as an accessibleMegaMenu -->     <script>         $(""nav:first"").accessibleMegaMenu({             /* prefix for generated unique id attributes, which are required                 to indicate aria-owns, aria-controls and aria-labelledby */             uuidPrefix: ""accessible-megamenu"",                          /* css class used to define the megamenu styling */             menuClass: ""nav-menu"",                          /* css class for a top-level navigation item in the megamenu */             topNavItemClass: ""nav-item"",                          /* css class for a megamenu panel */             panelClass: ""sub-nav"",                          /* css class for a group of items within a megamenu panel */             panelGroupClass: ""sub-nav-group"",                          /* css class for the hover state */             hoverClass: ""hover"",                          /* css class for the focus state */             focusClass: ""focus"",                          /* css class for the open state */             openClass: ""open""         });     </script>     </body>     </html> About A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. Resources Readme License Apache-2.0 License Releases No releases published Packages 0 No packages published Used by 15 + 7 Contributors 7 Languages HTML 71.8% CSS 26.4% JavaScript 1.8% © 2021 GitHub, Inc. Terms Privacy Security Status Docs Contact GitHub Pricing API Training Blog About You can’t perform that action at this time. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."
505809,20210305,github.com,https://github.com/crypto-browserify/crypto-browserify,text/html,text/html,en,"GitHub - crypto-browserify/crypto-browserify: partial implementation of node's `crypto` for the browser Skip to content Sign up Why GitHub? Features → Mobile → Actions → Codespaces → Packages → Security → Code review → Project management → Integrations → GitHub Sponsors → Customer stories→ Team Enterprise Explore Explore GitHub → Learn and contribute Topics → Collections → Trending → Learning Lab → Open source guides → Connect with others The ReadME Project → Events → Community forum → GitHub Education → GitHub Stars program → Marketplace Pricing Plans → Compare plans → Contact Sales → Nonprofit → Education → In this repository All GitHub ↵ Jump to ↵ No suggested jump to results In this repository All GitHub ↵ Jump to ↵ In this organization All GitHub ↵ Jump to ↵ In this repository All GitHub ↵ Jump to ↵ Sign in Sign up {{ message }} crypto-browserify / crypto-browserify Notifications Star 468 Fork 150 partial implementation of node's `crypto` for the browser MIT License 468 stars 150 forks Star Notifications Code Issues 19 Pull requests 6 Actions Projects 0 Wiki Security Insights More Code Issues Pull requests Actions Projects Wiki Security Insights master Switch branches/tags Branches Tags Nothing to show {{ refName }} default View all branches Nothing to show {{ refName }} default View all tags 6 branches 31 tags Go to file Code Clone HTTPS GitHub CLI Use Git or checkout with SVN using the web URL. Work fast with our official CLI. Learn more. Open with GitHub Desktop Download ZIP Launching GitHub Desktop If nothing happens, download GitHub Desktop and try again. Go back Launching GitHub Desktop If nothing happens, download GitHub Desktop and try again. Go back Launching Xcode If nothing happens, download Xcode and try again. Go back Launching Visual Studio If nothing happens, download the GitHub extension for Visual Studio and try again. Go back Latest commit calvinmetcalf fix debian issue (maybe) … 460a13b Feb 9, 2018 fix debian issue (maybe) 460a13b Git stats 362 commits Files Permalink Failed to load latest commit information. Type Name Latest commit message Commit time example add standard 5.0.0 Aug 13, 2015 test fix debian issue (maybe) Feb 9, 2018 .gitignore Add .gitignore Aug 5, 2013 .travis.yml saucelabs aparently only goes back to 7 Oct 19, 2017 .zuul.yml add zuul and browser tests Oct 3, 2015 LICENSE Add MIT license Sep 20, 2013 README.md add privateEncrypt/publicDecrypt to README Dec 14, 2015 index.js add rndom fill Oct 18, 2017 package.json 3.12.0 Nov 3, 2017 View code README.md crypto-browserify A port of node's crypto module to the browser. The goal of this module is to reimplement node's crypto module, in pure javascript so that it can run in the browser. Here is the subset that is currently implemented: createHash (sha1, sha224, sha256, sha384, sha512, md5, rmd160) createHmac (sha1, sha224, sha256, sha384, sha512, md5, rmd160) pbkdf2 pbkdf2Sync randomBytes pseudoRandomBytes createCipher (aes) createDecipher (aes) createDiffieHellman createSign (rsa, ecdsa) createVerify (rsa, ecdsa) createECDH (secp256k1) publicEncrypt/privateDecrypt (rsa) privateEncrypt/publicDecrypt (rsa) todo these features from node's crypto are still unimplemented. createCredentials contributions If you are interested in writing a feature, please implement as a new module, which will be incorporated into crypto-browserify as a dependency. All deps must be compatible with node's crypto (generate example inputs and outputs with node, and save base64 strings inside JSON, so that tests can run in the browser. see sha.js Crypto is extra serious so please do not hesitate to review the code, and post comments if you do. License MIT About partial implementation of node's `crypto` for the browser Resources Readme License MIT License Releases 31 tags Packages 0 No packages published Used by 5.6m + 5,588,575 Contributors 24 + 13 contributors Languages JavaScript 99.1% HTML 0.9% © 2021 GitHub, Inc. Terms Privacy Security Status Docs Contact GitHub Pricing API Training Blog About You can’t perform that action at this time. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."
505810,20210305,github.com,https://github.com/indutny/elliptic/issues,text/html,text/html,en,"Issues · indutny/elliptic · GitHub Skip to content Sign up Why GitHub? Features → Mobile → Actions → Codespaces → Packages → Security → Code review → Project management → Integrations → GitHub Sponsors → Customer stories→ Team Enterprise Explore Explore GitHub → Learn and contribute Topics → Collections → Trending → Learning Lab → Open source guides → Connect with others The ReadME Project → Events → Community forum → GitHub Education → GitHub Stars program → Marketplace Pricing Plans → Compare plans → Contact Sales → Nonprofit → Education → In this repository All GitHub ↵ Jump to ↵ No suggested jump to results In this repository All GitHub ↵ Jump to ↵ In this user All GitHub ↵ Jump to ↵ In this repository All GitHub ↵ Jump to ↵ Sign in Sign up {{ message }} indutny / elliptic Notifications Star 1.2k Fork 290 Code Issues 71 Pull requests 17 Actions Projects 0 Wiki Security Insights More Code Issues Pull requests Actions Projects Wiki Security Insights Labels 8 Milestones 0 Labels 8 Milestones 0 New issue Have a question about this project? Sign up for a free GitHub account to open an issue and contact its maintainers and the community. Pick a username Email Address Password Sign up for GitHub By clicking “Sign up for GitHub”, you agree to our terms of service and privacy statement. We’ll occasionally send you account related emails. Already on GitHub? Sign in to your account 71 Open 96 Closed 71 Open 96 Closed Author Filter by author author: Filter by this user Label Filter by label Use alt + click/return to exclude labels. Projects Filter by project Milestones Filter by milestone Assignee Filter by who’s assigned Sort Sort by Newest Oldest Most commented Least commented Recently updated Least recently updated Most reactions 👍 👎 😄 🎉 😕 ❤️ 🚀 👀 EDDSA.decodePoint should fails on ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff #250 opened Mar 3, 2021 by mahnunchik 12 Add endian argument to bn.js toString method #249 opened Mar 2, 2021 by mahnunchik EDDSA decodePoint doesn't support Buffer as argument #248 opened Mar 2, 2021 by mahnunchik How to decipher the encrypted message? #245 opened Jan 27, 2021 by istabraq-iot Montgomery Curve25519 is not openssl compatible #243 opened Dec 28, 2020 by jc-lab 3 Curves p384 and p521 produce incorrect results #239 opened Oct 18, 2020 by guidovranken i want to use this library with c# #238 opened Oct 10, 2020 by medozeus Elliptic.js support following curve types: #236 opened Oct 5, 2020 by medozeus The Elliptic package 6.5.2 for Node.js allows ECDSA signature malleability via variations in encoding, leading '\0' bytes, or integer overflows. #235 opened Oct 1, 2020 by bsomeshwer EdDSA: What is a reason to manipulate with bytes? #233 opened Aug 27, 2020 by mahnunchik why use derive method get ECDH key，i got different length #230 opened Jul 10, 2020 by cqupt-yifanwu 4 Why do I generate my local test path in chunk-vendors when packing with NPM #229 opened Jun 22, 2020 by Anthonychen1994 1 TypedArray support ? #228 opened Jun 20, 2020 by dojyorin Is there way to generate PKCS#8 private key from Pem format ECC Private key #225 opened Apr 28, 2020 by sureshreddygovindu Signature validation in python. Prefix configuration? #224 opened Apr 25, 2020 by amrbz is it possible to do assymetric encryption? #223 opened Apr 7, 2020 by maroodb 1 Missing infinity point encoding #218 opened Feb 21, 2020 by catenacyber 1 ECDH P-521 public key point not on curve according to java (clojure) #216 opened Feb 11, 2020 by slhabity 1 how save and load private / publick key in pem or other format #215 opened Jan 27, 2020 by fturiot 2 How to pair client to server BTCPay NodeJS client? #214 opened Jan 21, 2020 by savshit 1 How to pair client to server BTCPay NodeJS client? #213 opened Jan 21, 2020 by savshit curve25519 and BouncyCastle(bc) in c# Different compute shared secret #209 opened Dec 11, 2019 by shamohai 2 Feature: Schnorr signatures #208 opened Dec 11, 2019 by junderw 6 How to define curve secp224k1? #205 opened Nov 15, 2019 by ahzf ec.keyFromPrivate returns a KeyPair with a private key even when receiving a random input #201 opened Oct 2, 2019 by ziccardi 1 Previous 1 2 3 Next Previous Next ProTip! Find all open issues with in progress development work with linked:pr. © 2021 GitHub, Inc. Terms Privacy Security Status Docs Contact GitHub Pricing API Training Blog About You can’t perform that action at this time. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."
505811,20210305,github.com,https://github.com/indutny/elliptic,text/html,text/html,en,"GitHub - indutny/elliptic: Fast Elliptic Curve Cryptography in plain javascript Skip to content Sign up Why GitHub? Features → Mobile → Actions → Codespaces → Packages → Security → Code review → Project management → Integrations → GitHub Sponsors → Customer stories→ Team Enterprise Explore Explore GitHub → Learn and contribute Topics → Collections → Trending → Learning Lab → Open source guides → Connect with others The ReadME Project → Events → Community forum → GitHub Education → GitHub Stars program → Marketplace Pricing Plans → Compare plans → Contact Sales → Nonprofit → Education → In this repository All GitHub ↵ Jump to ↵ No suggested jump to results In this repository All GitHub ↵ Jump to ↵ In this user All GitHub ↵ Jump to ↵ In this repository All GitHub ↵ Jump to ↵ Sign in Sign up {{ message }} indutny / elliptic Notifications Star 1.2k Fork 290 Fast Elliptic Curve Cryptography in plain javascript 1.2k stars 290 forks Star Notifications Code Issues 71 Pull requests 17 Actions Projects 0 Wiki Security Insights More Code Issues Pull requests Actions Projects Wiki Security Insights master Switch branches/tags Branches Tags Nothing to show {{ refName }} default View all branches Nothing to show {{ refName }} default View all tags 2 branches 85 tags Go to file Code Clone HTTPS GitHub CLI Use Git or checkout with SVN using the web URL. Work fast with our official CLI. Learn more. Open with GitHub Desktop Download ZIP Launching GitHub Desktop If nothing happens, download GitHub Desktop and try again. Go back Launching GitHub Desktop If nothing happens, download GitHub Desktop and try again. Go back Launching Xcode If nothing happens, download Xcode and try again. Go back Launching Visual Studio If nothing happens, download the GitHub extension for Visual Studio and try again. Go back Latest commit indutny 6.5.4 … 43ac7f2 Feb 2, 2021 6.5.4 43ac7f2 Git stats 331 commits Files Permalink Failed to load latest commit information. Type Name Latest commit message Commit time benchmarks package: remove Makefile and dist Jan 29, 2016 dist 6.5.4 Feb 2, 2021 lib ec: validate that a point before deriving keys Feb 2, 2021 test ec: validate that a point before deriving keys Feb 2, 2021 .codeclimate.yml test: improvements with Saucelabs/Codeclimate Mar 31, 2016 .eslintignore lib: relint using eslint Aug 2, 2020 .eslintrc.js lib: relint using eslint Aug 2, 2020 .gitignore test: improvements with Saucelabs/Codeclimate Mar 31, 2016 .npmignore npmignore: dist May 20, 2016 .travis.yml travis: really move on Jun 26, 2019 Gruntfile.js grunt: fix standalone build May 25, 2016 README.md readme: update example Mar 23, 2017 package-lock.json 6.5.4 Feb 2, 2021 package.json 6.5.4 Feb 2, 2021 View code README.md Elliptic Fast elliptic-curve cryptography in a plain javascript implementation. NOTE: Please take a look at http://safecurves.cr.yp.to/ before choosing a curve for your cryptography operations. Incentive ECC is much slower than regular RSA cryptography, the JS implementations are even more slower. Benchmarks $ node benchmarks/index.js Benchmarking: sign elliptic#sign x 262 ops/sec ±0.51% (177 runs sampled) eccjs#sign x 55.91 ops/sec ±0.90% (144 runs sampled) ------------------------ Fastest is elliptic#sign ======================== Benchmarking: verify elliptic#verify x 113 ops/sec ±0.50% (166 runs sampled) eccjs#verify x 48.56 ops/sec ±0.36% (125 runs sampled) ------------------------ Fastest is elliptic#verify ======================== Benchmarking: gen elliptic#gen x 294 ops/sec ±0.43% (176 runs sampled) eccjs#gen x 62.25 ops/sec ±0.63% (129 runs sampled) ------------------------ Fastest is elliptic#gen ======================== Benchmarking: ecdh elliptic#ecdh x 136 ops/sec ±0.85% (156 runs sampled) ------------------------ Fastest is elliptic#ecdh ======================== API ECDSA var EC = require('elliptic').ec; // Create and initialize EC context // (better do it once and reuse it) var ec = new EC('secp256k1'); // Generate keys var key = ec.genKeyPair(); // Sign the message's hash (input must be an array, or a hex-string) var msgHash = [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ]; var signature = key.sign(msgHash); // Export DER encoded signature in Array var derSign = signature.toDER(); // Verify signature console.log(key.verify(msgHash, derSign)); // CHECK WITH NO PRIVATE KEY var pubPoint = key.getPublic(); var x = pubPoint.getX(); var y = pubPoint.getY(); // Public Key MUST be either: // 1) '04' + hex string of x + hex string of y; or // 2) object with two hex string properties (x and y); or // 3) object with two buffer properties (x and y) var pub = pubPoint.encode('hex');                                 // case 1 var pub = { x: x.toString('hex'), y: y.toString('hex') };         // case 2 var pub = { x: x.toBuffer(), y: y.toBuffer() };                   // case 3 var pub = { x: x.toArrayLike(Buffer), y: y.toArrayLike(Buffer) }; // case 3 // Import public key var key = ec.keyFromPublic(pub, 'hex'); // Signature MUST be either: // 1) DER-encoded signature as hex-string; or // 2) DER-encoded signature as buffer; or // 3) object with two hex-string properties (r and s); or // 4) object with two buffer properties (r and s) var signature = '3046022100...'; // case 1 var signature = new Buffer('...'); // case 2 var signature = { r: 'b1fc...', s: '9c42...' }; // case 3 // Verify signature console.log(key.verify(msgHash, signature)); EdDSA var EdDSA = require('elliptic').eddsa; // Create and initialize EdDSA context // (better do it once and reuse it) var ec = new EdDSA('ed25519'); // Create key pair from secret var key = ec.keyFromSecret('693e3c...'); // hex string, array or Buffer // Sign the message's hash (input must be an array, or a hex-string) var msgHash = [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ]; var signature = key.sign(msgHash).toHex(); // Verify signature console.log(key.verify(msgHash, signature)); // CHECK WITH NO PRIVATE KEY // Import public key var pub = '0a1af638...'; var key = ec.keyFromPublic(pub, 'hex'); // Verify signature var signature = '70bed1...'; console.log(key.verify(msgHash, signature)); ECDH var EC = require('elliptic').ec; var ec = new EC('curve25519'); // Generate keys var key1 = ec.genKeyPair(); var key2 = ec.genKeyPair(); var shared1 = key1.derive(key2.getPublic()); var shared2 = key2.derive(key1.getPublic()); console.log('Both shared secrets are BN instances'); console.log(shared1.toString(16)); console.log(shared2.toString(16)); three and more members: var EC = require('elliptic').ec; var ec = new EC('curve25519'); var A = ec.genKeyPair(); var B = ec.genKeyPair(); var C = ec.genKeyPair(); var AB = A.getPublic().mul(B.getPrivate()) var BC = B.getPublic().mul(C.getPrivate()) var CA = C.getPublic().mul(A.getPrivate()) var ABC = AB.mul(C.getPrivate()) var BCA = BC.mul(A.getPrivate()) var CAB = CA.mul(B.getPrivate()) console.log(ABC.getX().toString(16)) console.log(BCA.getX().toString(16)) console.log(CAB.getX().toString(16)) NOTE: .derive() returns a BN instance. Supported curves Elliptic.js support following curve types: Short Weierstrass Montgomery Edwards Twisted Edwards Following curve 'presets' are embedded into the library: secp256k1 p192 p224 p256 p384 p521 curve25519 ed25519 NOTE: That curve25519 could not be used for ECDSA, use ed25519 instead. Implementation details ECDSA is using deterministic k value generation as per RFC6979. Most of the curve operations are performed on non-affine coordinates (either projective or extended), various windowing techniques are used for different cases. All operations are performed in reduction context using bn.js, hashing is provided by hash.js Related projects eccrypto: isomorphic implementation of ECDSA, ECDH and ECIES for both browserify and node (uses elliptic for browser and secp256k1-node for node) LICENSE This software is licensed under the MIT License. Copyright Fedor Indutny, 2014. Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the ""Software""), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. About Fast Elliptic Curve Cryptography in plain javascript Resources Readme Releases 85 tags Packages 0 No packages published Used by 5.5m + 5,511,858 Contributors 25 + 14 contributors Languages JavaScript 99.3% HTML 0.7% © 2021 GitHub, Inc. Terms Privacy Security Status Docs Contact GitHub Pricing API Training Blog About You can’t perform that action at this time. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."
506307,20210312,github.com,https://github.com/adobe-accessibility/Accessible-Mega-Menu,text/html,text/html,en,"GitHub - adobe-accessibility/Accessible-Mega-Menu: A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. Skip to content Sign up Sign up Why GitHub? Features → Mobile → Actions → Codespaces → Packages → Security → Code review → Project management → Integrations → GitHub Sponsors → Customer stories→ Team Enterprise Explore Explore GitHub → Learn and contribute Topics → Collections → Trending → Learning Lab → Open source guides → Connect with others The ReadME Project → Events → Community forum → GitHub Education → GitHub Stars program → Marketplace Pricing Plans → Compare plans → Contact Sales → Nonprofit → Education → In this repository All GitHub ↵ Jump to ↵ No suggested jump to results In this repository All GitHub ↵ Jump to ↵ In this organization All GitHub ↵ Jump to ↵ In this repository All GitHub ↵ Jump to ↵ Sign in Sign up Sign up {{ message }} adobe-accessibility / Accessible-Mega-Menu Notifications Star 575 Fork 195 A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. Apache-2.0 License 575 stars 195 forks Star Notifications Code Issues 28 Pull requests 6 Actions Projects 0 Security Insights More Code Issues Pull requests Actions Projects Security Insights master Switch branches/tags Branches Tags Nothing to show {{ refName }} default View all branches Nothing to show {{ refName }} default View all tags 2 branches 0 tags Go to file Code Clone HTTPS GitHub CLI Use Git or checkout with SVN using the web URL. Work fast with our official CLI. Learn more. Open with GitHub Desktop Download ZIP Launching GitHub Desktop If nothing happens, download GitHub Desktop and try again. Go back Launching GitHub Desktop If nothing happens, download GitHub Desktop and try again. Go back Launching Xcode If nothing happens, download Xcode and try again. Go back Launching Visual Studio If nothing happens, download the GitHub extension for Visual Studio and try again. Go back Latest commit majornista fix evaluation for ChromeVox object … 5c070bc Dec 7, 2020 fix evaluation for ChromeVox object 5c070bc Git stats 39 commits Files Permalink Failed to load latest commit information. Type Name Latest commit message Commit time css js third-party/jquery LICENSE NOTICE README.md index.html package.json View code README.md Accessible Mega Menu ========================= A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. It is modeled after the mega menu on adobe.com but has been simplified for use by others. An brief explanation of our interaction design choices can be found in a blog post at Mega menu accessibility on adobe.com. Content for the links and text within the mega menu comes from the Web Content Accessibility Guidelines (WCAG) 2.0. Keyboard Accessibility The accessible mega menu supports keyboard interaction modeled after the behavior described in the WAI-ARIA Menu or Menu bar (widget) design pattern, however we also try to respect users' general expectations for the behavior of links in a global navigation. To this end, the accessible mega menu implementation permits tab focus on each of the six top-level menu items. When one of the menu items has focus, pressing the Enter key, Spacebar or Down arrow will open the submenu panel, and pressing the Left or Right arrow key will shift focus to the adjacent menu item. Links within the submenu panels are included in the tab order when the panel is open. They can also be navigated with the arrow keys or by typing the first character in the link name, which speeds up keyboard navigation considerably. Pressing the Escape key closes the submenu and restores focus to the parent menu item. Screen Reader Accessibility The accessible mega menu models its use of WAI-ARIA Roles, States, and Properties after those described in the WAI-ARIA Menu or Menu bar (widget) design pattern with some notable exceptions, so that it behaves better with screen reader user expectations for global navigation. We don't use role=""menu"" for the menu container and role=""menuitem"" for each of the links therein, because if we do, assistive technology will no longer interpret the links as links, but instead, as menu items, and the links in our global navigation will no longer show up when a screen reader user executes a shortcut command to bring up a list of links in the page. We also want to maintain the semantic structure of the submenu panels in our mega menu; our links are organized into lists and separated by headings. Omitting role=""menu"" and role=""menuitem"" for the global navigation seems the safer way to go. Usage HTML The HTML structure for the mega menu is a nav element, or any other container element, containing a list. Each list item contains a link which is followed by a div or any other container element which will serve as the pop up panel. The panel can contain any html content; in the following example, each panel contains three lists of links. You can explicitly define groups within the panel, between which a user can navigate quickly using the left and right arrow keys; in the following example, the CSS class .sub-nav-group identifies a navigable group.     <nav>         <ul class=""nav-menu"">             <li class=""nav-item"">                 <a href=""?movie"">Movies</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=0"">Action &amp; Adventure</a></li>                         <li><a href=""?movie&genre=2"">Children &amp; Family</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=7"">Dramas</a></li>                         <li><a href=""?movie&genre=9"">Foreign</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=14"">Musicals</a></li>                         <li><a href=""?movie&genre=15"">Romance</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>             <li class=""nav-item"">                 <a href=""?tv"">TV Shows</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=20"">Classic TV</a></li>                         <li><a href=""?tv&genre=21"">Crime TV</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=27"">Reality TV</a></li>                         <li><a href=""?tv&genre=30"">TV Action</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=33"">TV Dramas</a></li>                         <li><a href=""?tv&genre=34"">TV Horror</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>         </ul>     </nav> By default, accessibleMegaMenu uses the the following CSS classes to define the top-level navigation items, panels, groups within the panels, and the hover, focus, and open states. It also defines a prefix for unique id strings, which are required to indicate the relationship of a top-level navigation item to the panel it controls.     defaults = {         /* unique ID's are required to indicate aria-owns, aria-controls and aria-labelledby */         uuidPrefix: ""accessible-megamenu"",                  /* default css class used to define the megamenu styling */         menuClass: ""accessible-megamenu"",                  /* default css class for a top-level navigation item in the megamenu */         topNavItemClass: ""accessible-megamenu-top-nav-item"",                  /* default css class for a megamenu panel */         panelClass: ""accessible-megamenu-panel"",                  /* default css class for a group of items within a megamenu panel */         panelGroupClass: ""accessible-megamenu-panel-group"",                  /* default css class for the hover state */         hoverClass: ""hover"",                  /* default css class for the focus state */         focusClass: ""focus"",                  /* default css class for the open state */         openClass: ""open""      } You can optionally override the defaults to use the CSS classes you may have already defined for your mega menu. JavaScript Be sure to include jQuery and the jquery-accessibleMegaMenu.js plugin script.     <script src=""//code.jquery.com/jquery-1.10.1.min.js""></script>     <script src=""js/jquery-accessibleMegaMenu.js""></script> The following initializes the first nav element in the document as an accessibleMegaMenu, with optional CSS class overrides.     $(""nav:first"").accessibleMegaMenu({         /* prefix for generated unique id attributes, which are required             to indicate aria-owns, aria-controls and aria-labelledby */         uuidPrefix: ""accessible-megamenu"",                  /* css class used to define the megamenu styling */         menuClass: ""nav-menu"",                  /* css class for a top-level navigation item in the megamenu */         topNavItemClass: ""nav-item"",                  /* css class for a megamenu panel */         panelClass: ""sub-nav"",                  /* css class for a group of items within a megamenu panel */         panelGroupClass: ""sub-nav-group"",                  /* css class for the hover state */         hoverClass: ""hover"",                  /* css class for the focus state */         focusClass: ""focus"",                  /* css class for the open state */         openClass: ""open""     }); CSS AccessibleMegaMenu handles the showing and hiding of panels by adding or removing a CSS class. No inline styles are added to hide elements or create animation between states. Following is some rudimentary CSS for our example which enables the showing/hiding of and the layout of lists panels in the mega menu.     /* mega menu list */     .nav-menu {         display: block;         position: relative;         list-style: none;         margin: 0;         padding: 0;         z-index: 15;     }     /* a top level navigation item in the mega menu */     .nav-item {         list-style: none;         display: inline-block;         padding: 0;         margin: 0;     }     /* first descendant link within a top level navigation item */     .nav-item > a {         position: relative;         display: inline-block;         padding: 0.5em 1em;         margin: 0 0 -1px 0;         border: 1px solid transparent;     }     /* focus/open states of first descendant link within a top level         navigation item */     .nav-item > a:focus,     .nav-item > a.open {         border: 1px solid #dedede;     }     /* open state of first descendant link within a top level         navigation item */     .nav-item > a.open {         background-color: #fff;         border-bottom: none;         z-index: 1;     }     /* sub-navigation panel */     .sub-nav {         position: absolute;         display: none;         top: 2.2em;         margin-top: -1px;         padding: 0.5em 1em;         border: 1px solid #dedede;         background-color: #fff;     }     /* sub-navigation panel open state */     .sub-nav.open {         display: block;     }     /* list of items within sub-navigation panel */     .sub-nav ul {         display: inline-block;         vertical-align: top;         margin: 0 1em 0 0;         padding: 0;     }     /* list item within sub-navigation panel */     .sub-nav li {         display: block;         list-style-type: none;         margin: 0;         padding: 0;     }   Putting it all together, here is the completed example:     <!doctype html>     <html lang=""en"">     <head>     <meta charset=""UTF-8"">     <title>Simple Accessible Mega Menu Example</title>     <style>         /* Rudimentary mega menu CSS for demonstration */             /* mega menu list */         .nav-menu {             display: block;             position: relative;             list-style: none;             margin: 0;             padding: 0;             z-index: 15;         }         /* a top level navigation item in the mega menu */         .nav-item {             list-style: none;             display: inline-block;             padding: 0;             margin: 0;         }         /* first descendant link within a top level navigation item */         .nav-item > a {             position: relative;             display: inline-block;             padding: 0.5em 1em;             margin: 0 0 -1px 0;             border: 1px solid transparent;         }         /* focus/open states of first descendant link within a top level             navigation item */         .nav-item > a:focus,         .nav-item > a.open {             border: 1px solid #dedede;         }         /* open state of first descendant link within a top level             navigation item */         .nav-item > a.open {             background-color: #fff;             border-bottom: none;             z-index: 1;         }         /* sub-navigation panel */         .sub-nav {             position: absolute;             display: none;             top: 2.2em;             margin-top: -1px;             padding: 0.5em 1em;             border: 1px solid #dedede;             background-color: #fff;         }         /* sub-navigation panel open state */         .sub-nav.open {             display: block;         }         /* list of items within sub-navigation panel */         .sub-nav ul {             display: inline-block;             vertical-align: top;             margin: 0 1em 0 0;             padding: 0;         }         /* list item within sub-navigation panel */         .sub-nav li {             display: block;             list-style-type: none;             margin: 0;             padding: 0;         }          </style>     </head>     <body>     <nav>         <ul class=""nav-menu"">             <li class=""nav-item"">                 <a href=""?movie"">Movies</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=0"">Action &amp; Adventure</a></li>                         <li><a href=""?movie&genre=2"">Children &amp; Family</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=7"">Dramas</a></li>                         <li><a href=""?movie&genre=9"">Foreign</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=14"">Musicals</a></li>                         <li><a href=""?movie&genre=15"">Romance</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>             <li class=""nav-item"">                 <a href=""?tv"">TV Shows</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=20"">Classic TV</a></li>                         <li><a href=""?tv&genre=21"">Crime TV</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=27"">Reality TV</a></li>                         <li><a href=""?tv&genre=30"">TV Action</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=33"">TV Dramas</a></li>                         <li><a href=""?tv&genre=34"">TV Horror</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>         </ul>     </nav>          <!-- include jquery -->     <script src=""//code.jquery.com/jquery-1.10.1.min.js""></script>     <!-- include the jquery-accessibleMegaMenu plugin script -->     <script src=""js/jquery-accessibleMegaMenu.js""></script>     <!-- initialize a selector as an accessibleMegaMenu -->     <script>         $(""nav:first"").accessibleMegaMenu({             /* prefix for generated unique id attributes, which are required                 to indicate aria-owns, aria-controls and aria-labelledby */             uuidPrefix: ""accessible-megamenu"",                          /* css class used to define the megamenu styling */             menuClass: ""nav-menu"",                          /* css class for a top-level navigation item in the megamenu */             topNavItemClass: ""nav-item"",                          /* css class for a megamenu panel */             panelClass: ""sub-nav"",                          /* css class for a group of items within a megamenu panel */             panelGroupClass: ""sub-nav-group"",                          /* css class for the hover state */             hoverClass: ""hover"",                          /* css class for the focus state */             focusClass: ""focus"",                          /* css class for the open state */             openClass: ""open""         });     </script>     </body>     </html> About A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. Resources Readme License Apache-2.0 License Releases No releases published Packages 0 No packages published Used by 15 + 7 Contributors 7 Languages HTML 71.8% CSS 26.4% JavaScript 1.8% © 2021 GitHub, Inc. Terms Privacy Security Status Docs Contact GitHub Pricing API Training Blog About You can’t perform that action at this time. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."
515913,20210312,github.com,https://github.com/crypto-browserify/crypto-browserify,text/html,text/html,en,"GitHub - crypto-browserify/crypto-browserify: partial implementation of node's `crypto` for the browser Skip to content Sign up Sign up Why GitHub? Features → Mobile → Actions → Codespaces → Packages → Security → Code review → Project management → Integrations → GitHub Sponsors → Customer stories→ Team Enterprise Explore Explore GitHub → Learn and contribute Topics → Collections → Trending → Learning Lab → Open source guides → Connect with others The ReadME Project → Events → Community forum → GitHub Education → GitHub Stars program → Marketplace Pricing Plans → Compare plans → Contact Sales → Nonprofit → Education → In this repository All GitHub ↵ Jump to ↵ No suggested jump to results In this repository All GitHub ↵ Jump to ↵ In this organization All GitHub ↵ Jump to ↵ In this repository All GitHub ↵ Jump to ↵ Sign in Sign up Sign up {{ message }} crypto-browserify / crypto-browserify Notifications Star 468 Fork 151 partial implementation of node's `crypto` for the browser MIT License 468 stars 151 forks Star Notifications Code Issues 19 Pull requests 6 Actions Projects 0 Wiki Security Insights More Code Issues Pull requests Actions Projects Wiki Security Insights master Switch branches/tags Branches Tags Nothing to show {{ refName }} default View all branches Nothing to show {{ refName }} default View all tags 6 branches 31 tags Go to file Code Clone HTTPS GitHub CLI Use Git or checkout with SVN using the web URL. Work fast with our official CLI. Learn more. Open with GitHub Desktop Download ZIP Launching GitHub Desktop If nothing happens, download GitHub Desktop and try again. Go back Launching GitHub Desktop If nothing happens, download GitHub Desktop and try again. Go back Launching Xcode If nothing happens, download Xcode and try again. Go back Launching Visual Studio If nothing happens, download the GitHub extension for Visual Studio and try again. Go back Latest commit calvinmetcalf fix debian issue (maybe) … 460a13b Feb 9, 2018 fix debian issue (maybe) 460a13b Git stats 362 commits Files Permalink Failed to load latest commit information. Type Name Latest commit message Commit time example add standard 5.0.0 Aug 13, 2015 test fix debian issue (maybe) Feb 9, 2018 .gitignore Add .gitignore Aug 5, 2013 .travis.yml saucelabs aparently only goes back to 7 Oct 19, 2017 .zuul.yml add zuul and browser tests Oct 3, 2015 LICENSE Add MIT license Sep 20, 2013 README.md add privateEncrypt/publicDecrypt to README Dec 14, 2015 index.js add rndom fill Oct 18, 2017 package.json 3.12.0 Nov 3, 2017 View code README.md crypto-browserify A port of node's crypto module to the browser. The goal of this module is to reimplement node's crypto module, in pure javascript so that it can run in the browser. Here is the subset that is currently implemented: createHash (sha1, sha224, sha256, sha384, sha512, md5, rmd160) createHmac (sha1, sha224, sha256, sha384, sha512, md5, rmd160) pbkdf2 pbkdf2Sync randomBytes pseudoRandomBytes createCipher (aes) createDecipher (aes) createDiffieHellman createSign (rsa, ecdsa) createVerify (rsa, ecdsa) createECDH (secp256k1) publicEncrypt/privateDecrypt (rsa) privateEncrypt/publicDecrypt (rsa) todo these features from node's crypto are still unimplemented. createCredentials contributions If you are interested in writing a feature, please implement as a new module, which will be incorporated into crypto-browserify as a dependency. All deps must be compatible with node's crypto (generate example inputs and outputs with node, and save base64 strings inside JSON, so that tests can run in the browser. see sha.js Crypto is extra serious so please do not hesitate to review the code, and post comments if you do. License MIT About partial implementation of node's `crypto` for the browser Resources Readme License MIT License Releases 31 tags Packages 0 No packages published Used by 5.6m + 5,623,380 Contributors 24 + 13 contributors Languages JavaScript 99.1% HTML 0.9% © 2021 GitHub, Inc. Terms Privacy Security Status Docs Contact GitHub Pricing API Training Blog About You can’t perform that action at this time. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."
515917,20210312,github.com,https://github.com/indutny/elliptic/issues,text/html,text/html,en,"Issues · indutny/elliptic · GitHub Skip to content Sign up Sign up Why GitHub? Features → Mobile → Actions → Codespaces → Packages → Security → Code review → Project management → Integrations → GitHub Sponsors → Customer stories→ Team Enterprise Explore Explore GitHub → Learn and contribute Topics → Collections → Trending → Learning Lab → Open source guides → Connect with others The ReadME Project → Events → Community forum → GitHub Education → GitHub Stars program → Marketplace Pricing Plans → Compare plans → Contact Sales → Nonprofit → Education → In this repository All GitHub ↵ Jump to ↵ No suggested jump to results In this repository All GitHub ↵ Jump to ↵ In this user All GitHub ↵ Jump to ↵ In this repository All GitHub ↵ Jump to ↵ Sign in Sign up Sign up {{ message }} indutny / elliptic Notifications Star 1.2k Fork 292 Code Issues 72 Pull requests 17 Actions Projects 0 Wiki Security Insights More Code Issues Pull requests Actions Projects Wiki Security Insights Labels 8 Milestones 0 Labels 8 Milestones 0 New issue Have a question about this project? Sign up for a free GitHub account to open an issue and contact its maintainers and the community. Pick a username Email Address Password Sign up for GitHub By clicking “Sign up for GitHub”, you agree to our terms of service and privacy statement. We’ll occasionally send you account related emails. Already on GitHub? Sign in to your account 72 Open 96 Closed 72 Open 96 Closed Author Filter by author author: Filter by this user Label Filter by label Use alt + click/return to exclude labels. Projects Filter by project Milestones Filter by milestone Assignee Filter by who’s assigned Sort Sort by Newest Oldest Most commented Least commented Recently updated Least recently updated Most reactions 👍 👎 😄 🎉 😕 ❤️ 🚀 👀 Sad state #251 opened Mar 11, 2021 by berkus EDDSA.decodePoint should fails on ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff #250 opened Mar 3, 2021 by mahnunchik 12 Add endian argument to bn.js toString method #249 opened Mar 2, 2021 by mahnunchik EDDSA decodePoint doesn't support Buffer as argument #248 opened Mar 2, 2021 by mahnunchik How to decipher the encrypted message? #245 opened Jan 27, 2021 by istabraq-iot Montgomery Curve25519 is not openssl compatible #243 opened Dec 28, 2020 by jc-lab 3 Curves p384 and p521 produce incorrect results #239 opened Oct 18, 2020 by guidovranken i want to use this library with c# #238 opened Oct 10, 2020 by medozeus Elliptic.js support following curve types: #236 opened Oct 5, 2020 by medozeus The Elliptic package 6.5.2 for Node.js allows ECDSA signature malleability via variations in encoding, leading '\0' bytes, or integer overflows. #235 opened Oct 1, 2020 by bsomeshwer EdDSA: What is a reason to manipulate with bytes? #233 opened Aug 27, 2020 by mahnunchik why use derive method get ECDH key，i got different length #230 opened Jul 10, 2020 by cqupt-yifanwu 4 Why do I generate my local test path in chunk-vendors when packing with NPM #229 opened Jun 22, 2020 by Anthonychen1994 1 TypedArray support ? #228 opened Jun 20, 2020 by dojyorin Is there way to generate PKCS#8 private key from Pem format ECC Private key #225 opened Apr 28, 2020 by sureshreddygovindu Signature validation in python. Prefix configuration? #224 opened Apr 25, 2020 by amrbz is it possible to do assymetric encryption? #223 opened Apr 7, 2020 by maroodb 1 Missing infinity point encoding #218 opened Feb 21, 2020 by catenacyber 1 ECDH P-521 public key point not on curve according to java (clojure) #216 opened Feb 11, 2020 by slhabity 1 how save and load private / publick key in pem or other format #215 opened Jan 27, 2020 by fturiot 2 How to pair client to server BTCPay NodeJS client? #214 opened Jan 21, 2020 by savshit 1 How to pair client to server BTCPay NodeJS client? #213 opened Jan 21, 2020 by savshit curve25519 and BouncyCastle(bc) in c# Different compute shared secret #209 opened Dec 11, 2019 by shamohai 2 Feature: Schnorr signatures #208 opened Dec 11, 2019 by junderw 6 How to define curve secp224k1? #205 opened Nov 15, 2019 by ahzf Previous 1 2 3 Next Previous Next ProTip! Updated in the last three days: updated:>2021-03-09. © 2021 GitHub, Inc. Terms Privacy Security Status Docs Contact GitHub Pricing API Training Blog About You can’t perform that action at this time. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."
515919,20210312,github.com,https://github.com/indutny/elliptic,text/html,text/html,en,"GitHub - indutny/elliptic: Fast Elliptic Curve Cryptography in plain javascript Skip to content Sign up Sign up Why GitHub? Features → Mobile → Actions → Codespaces → Packages → Security → Code review → Project management → Integrations → GitHub Sponsors → Customer stories→ Team Enterprise Explore Explore GitHub → Learn and contribute Topics → Collections → Trending → Learning Lab → Open source guides → Connect with others The ReadME Project → Events → Community forum → GitHub Education → GitHub Stars program → Marketplace Pricing Plans → Compare plans → Contact Sales → Nonprofit → Education → In this repository All GitHub ↵ Jump to ↵ No suggested jump to results In this repository All GitHub ↵ Jump to ↵ In this user All GitHub ↵ Jump to ↵ In this repository All GitHub ↵ Jump to ↵ Sign in Sign up Sign up {{ message }} indutny / elliptic Notifications Star 1.2k Fork 292 Fast Elliptic Curve Cryptography in plain javascript 1.2k stars 292 forks Star Notifications Code Issues 72 Pull requests 17 Actions Projects 0 Wiki Security Insights More Code Issues Pull requests Actions Projects Wiki Security Insights master Switch branches/tags Branches Tags Nothing to show {{ refName }} default View all branches Nothing to show {{ refName }} default View all tags 2 branches 85 tags Go to file Code Clone HTTPS GitHub CLI Use Git or checkout with SVN using the web URL. Work fast with our official CLI. Learn more. Open with GitHub Desktop Download ZIP Launching GitHub Desktop If nothing happens, download GitHub Desktop and try again. Go back Launching GitHub Desktop If nothing happens, download GitHub Desktop and try again. Go back Launching Xcode If nothing happens, download Xcode and try again. Go back Launching Visual Studio If nothing happens, download the GitHub extension for Visual Studio and try again. Go back Latest commit indutny 6.5.4 … 43ac7f2 Feb 2, 2021 6.5.4 43ac7f2 Git stats 331 commits Files Permalink Failed to load latest commit information. Type Name Latest commit message Commit time benchmarks package: remove Makefile and dist Jan 29, 2016 dist 6.5.4 Feb 2, 2021 lib ec: validate that a point before deriving keys Feb 2, 2021 test ec: validate that a point before deriving keys Feb 2, 2021 .codeclimate.yml test: improvements with Saucelabs/Codeclimate Mar 31, 2016 .eslintignore lib: relint using eslint Aug 2, 2020 .eslintrc.js lib: relint using eslint Aug 2, 2020 .gitignore test: improvements with Saucelabs/Codeclimate Mar 31, 2016 .npmignore npmignore: dist May 20, 2016 .travis.yml travis: really move on Jun 26, 2019 Gruntfile.js grunt: fix standalone build May 25, 2016 README.md readme: update example Mar 23, 2017 package-lock.json 6.5.4 Feb 2, 2021 package.json 6.5.4 Feb 2, 2021 View code README.md Elliptic Fast elliptic-curve cryptography in a plain javascript implementation. NOTE: Please take a look at http://safecurves.cr.yp.to/ before choosing a curve for your cryptography operations. Incentive ECC is much slower than regular RSA cryptography, the JS implementations are even more slower. Benchmarks $ node benchmarks/index.js Benchmarking: sign elliptic#sign x 262 ops/sec ±0.51% (177 runs sampled) eccjs#sign x 55.91 ops/sec ±0.90% (144 runs sampled) ------------------------ Fastest is elliptic#sign ======================== Benchmarking: verify elliptic#verify x 113 ops/sec ±0.50% (166 runs sampled) eccjs#verify x 48.56 ops/sec ±0.36% (125 runs sampled) ------------------------ Fastest is elliptic#verify ======================== Benchmarking: gen elliptic#gen x 294 ops/sec ±0.43% (176 runs sampled) eccjs#gen x 62.25 ops/sec ±0.63% (129 runs sampled) ------------------------ Fastest is elliptic#gen ======================== Benchmarking: ecdh elliptic#ecdh x 136 ops/sec ±0.85% (156 runs sampled) ------------------------ Fastest is elliptic#ecdh ======================== API ECDSA var EC = require('elliptic').ec; // Create and initialize EC context // (better do it once and reuse it) var ec = new EC('secp256k1'); // Generate keys var key = ec.genKeyPair(); // Sign the message's hash (input must be an array, or a hex-string) var msgHash = [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ]; var signature = key.sign(msgHash); // Export DER encoded signature in Array var derSign = signature.toDER(); // Verify signature console.log(key.verify(msgHash, derSign)); // CHECK WITH NO PRIVATE KEY var pubPoint = key.getPublic(); var x = pubPoint.getX(); var y = pubPoint.getY(); // Public Key MUST be either: // 1) '04' + hex string of x + hex string of y; or // 2) object with two hex string properties (x and y); or // 3) object with two buffer properties (x and y) var pub = pubPoint.encode('hex');                                 // case 1 var pub = { x: x.toString('hex'), y: y.toString('hex') };         // case 2 var pub = { x: x.toBuffer(), y: y.toBuffer() };                   // case 3 var pub = { x: x.toArrayLike(Buffer), y: y.toArrayLike(Buffer) }; // case 3 // Import public key var key = ec.keyFromPublic(pub, 'hex'); // Signature MUST be either: // 1) DER-encoded signature as hex-string; or // 2) DER-encoded signature as buffer; or // 3) object with two hex-string properties (r and s); or // 4) object with two buffer properties (r and s) var signature = '3046022100...'; // case 1 var signature = new Buffer('...'); // case 2 var signature = { r: 'b1fc...', s: '9c42...' }; // case 3 // Verify signature console.log(key.verify(msgHash, signature)); EdDSA var EdDSA = require('elliptic').eddsa; // Create and initialize EdDSA context // (better do it once and reuse it) var ec = new EdDSA('ed25519'); // Create key pair from secret var key = ec.keyFromSecret('693e3c...'); // hex string, array or Buffer // Sign the message's hash (input must be an array, or a hex-string) var msgHash = [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ]; var signature = key.sign(msgHash).toHex(); // Verify signature console.log(key.verify(msgHash, signature)); // CHECK WITH NO PRIVATE KEY // Import public key var pub = '0a1af638...'; var key = ec.keyFromPublic(pub, 'hex'); // Verify signature var signature = '70bed1...'; console.log(key.verify(msgHash, signature)); ECDH var EC = require('elliptic').ec; var ec = new EC('curve25519'); // Generate keys var key1 = ec.genKeyPair(); var key2 = ec.genKeyPair(); var shared1 = key1.derive(key2.getPublic()); var shared2 = key2.derive(key1.getPublic()); console.log('Both shared secrets are BN instances'); console.log(shared1.toString(16)); console.log(shared2.toString(16)); three and more members: var EC = require('elliptic').ec; var ec = new EC('curve25519'); var A = ec.genKeyPair(); var B = ec.genKeyPair(); var C = ec.genKeyPair(); var AB = A.getPublic().mul(B.getPrivate()) var BC = B.getPublic().mul(C.getPrivate()) var CA = C.getPublic().mul(A.getPrivate()) var ABC = AB.mul(C.getPrivate()) var BCA = BC.mul(A.getPrivate()) var CAB = CA.mul(B.getPrivate()) console.log(ABC.getX().toString(16)) console.log(BCA.getX().toString(16)) console.log(CAB.getX().toString(16)) NOTE: .derive() returns a BN instance. Supported curves Elliptic.js support following curve types: Short Weierstrass Montgomery Edwards Twisted Edwards Following curve 'presets' are embedded into the library: secp256k1 p192 p224 p256 p384 p521 curve25519 ed25519 NOTE: That curve25519 could not be used for ECDSA, use ed25519 instead. Implementation details ECDSA is using deterministic k value generation as per RFC6979. Most of the curve operations are performed on non-affine coordinates (either projective or extended), various windowing techniques are used for different cases. All operations are performed in reduction context using bn.js, hashing is provided by hash.js Related projects eccrypto: isomorphic implementation of ECDSA, ECDH and ECIES for both browserify and node (uses elliptic for browser and secp256k1-node for node) LICENSE This software is licensed under the MIT License. Copyright Fedor Indutny, 2014. Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the ""Software""), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. About Fast Elliptic Curve Cryptography in plain javascript Resources Readme Releases 85 tags Packages 0 No packages published Used by 5.5m + 5,545,513 Contributors 25 + 14 contributors Languages JavaScript 99.3% HTML 0.7% © 2021 GitHub, Inc. Terms Privacy Security Status Docs Contact GitHub Pricing API Training Blog About You can’t perform that action at this time. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."
516398,20210319,github.com,https://github.com/adobe-accessibility/Accessible-Mega-Menu,text/html,text/html,en,"GitHub - adobe-accessibility/Accessible-Mega-Menu: A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. Skip to content Sign up Sign up Why GitHub? Features → Mobile → Actions → Codespaces → Packages → Security → Code review → Project management → Integrations → GitHub Sponsors → Customer stories→ Team Enterprise Explore Explore GitHub → Learn and contribute Topics → Collections → Trending → Learning Lab → Open source guides → Connect with others The ReadME Project → Events → Community forum → GitHub Education → GitHub Stars program → Marketplace Pricing Plans → Compare plans → Contact Sales → Education → In this repository All GitHub ↵ Jump to ↵ No suggested jump to results In this repository All GitHub ↵ Jump to ↵ In this organization All GitHub ↵ Jump to ↵ In this repository All GitHub ↵ Jump to ↵ Sign in Sign up Sign up {{ message }} adobe-accessibility / Accessible-Mega-Menu Notifications Star 576 Fork 195 A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. Apache-2.0 License 576 stars 195 forks Star Notifications Code Issues 28 Pull requests 6 Actions Projects 0 Security Insights More Code Issues Pull requests Actions Projects Security Insights master Switch branches/tags Branches Tags Nothing to show {{ refName }} default View all branches Nothing to show {{ refName }} default View all tags 2 branches 0 tags Go to file Code Clone HTTPS GitHub CLI Use Git or checkout with SVN using the web URL. Work fast with our official CLI. Learn more. Open with GitHub Desktop Download ZIP Launching GitHub Desktop If nothing happens, download GitHub Desktop and try again. Go back Launching GitHub Desktop If nothing happens, download GitHub Desktop and try again. Go back Launching Xcode If nothing happens, download Xcode and try again. Go back Launching Visual Studio If nothing happens, download the GitHub extension for Visual Studio and try again. Go back Latest commit majornista fix evaluation for ChromeVox object … 5c070bc Dec 7, 2020 fix evaluation for ChromeVox object 5c070bc Git stats 39 commits Files Permalink Failed to load latest commit information. Type Name Latest commit message Commit time css Add openOnMouseover setting, and toggleButtonClass for responsive layout May 11, 2018 js fix evaluation for ChromeVox object Dec 7, 2020 third-party/jquery initial commit Aug 26, 2013 LICENSE initial commit Aug 26, 2013 NOTICE initial commit Aug 26, 2013 README.md initial commit Aug 26, 2013 index.html Updating WCAG 2.0 References to WCAG 2.1 (#67) Dec 4, 2020 package.json Updating repo references Jul 8, 2016 View code README.md Accessible Mega Menu ========================= A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. It is modeled after the mega menu on adobe.com but has been simplified for use by others. An brief explanation of our interaction design choices can be found in a blog post at Mega menu accessibility on adobe.com. Content for the links and text within the mega menu comes from the Web Content Accessibility Guidelines (WCAG) 2.0. Keyboard Accessibility The accessible mega menu supports keyboard interaction modeled after the behavior described in the WAI-ARIA Menu or Menu bar (widget) design pattern, however we also try to respect users' general expectations for the behavior of links in a global navigation. To this end, the accessible mega menu implementation permits tab focus on each of the six top-level menu items. When one of the menu items has focus, pressing the Enter key, Spacebar or Down arrow will open the submenu panel, and pressing the Left or Right arrow key will shift focus to the adjacent menu item. Links within the submenu panels are included in the tab order when the panel is open. They can also be navigated with the arrow keys or by typing the first character in the link name, which speeds up keyboard navigation considerably. Pressing the Escape key closes the submenu and restores focus to the parent menu item. Screen Reader Accessibility The accessible mega menu models its use of WAI-ARIA Roles, States, and Properties after those described in the WAI-ARIA Menu or Menu bar (widget) design pattern with some notable exceptions, so that it behaves better with screen reader user expectations for global navigation. We don't use role=""menu"" for the menu container and role=""menuitem"" for each of the links therein, because if we do, assistive technology will no longer interpret the links as links, but instead, as menu items, and the links in our global navigation will no longer show up when a screen reader user executes a shortcut command to bring up a list of links in the page. We also want to maintain the semantic structure of the submenu panels in our mega menu; our links are organized into lists and separated by headings. Omitting role=""menu"" and role=""menuitem"" for the global navigation seems the safer way to go. Usage HTML The HTML structure for the mega menu is a nav element, or any other container element, containing a list. Each list item contains a link which is followed by a div or any other container element which will serve as the pop up panel. The panel can contain any html content; in the following example, each panel contains three lists of links. You can explicitly define groups within the panel, between which a user can navigate quickly using the left and right arrow keys; in the following example, the CSS class .sub-nav-group identifies a navigable group.     <nav>         <ul class=""nav-menu"">             <li class=""nav-item"">                 <a href=""?movie"">Movies</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=0"">Action &amp; Adventure</a></li>                         <li><a href=""?movie&genre=2"">Children &amp; Family</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=7"">Dramas</a></li>                         <li><a href=""?movie&genre=9"">Foreign</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=14"">Musicals</a></li>                         <li><a href=""?movie&genre=15"">Romance</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>             <li class=""nav-item"">                 <a href=""?tv"">TV Shows</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=20"">Classic TV</a></li>                         <li><a href=""?tv&genre=21"">Crime TV</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=27"">Reality TV</a></li>                         <li><a href=""?tv&genre=30"">TV Action</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=33"">TV Dramas</a></li>                         <li><a href=""?tv&genre=34"">TV Horror</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>         </ul>     </nav> By default, accessibleMegaMenu uses the the following CSS classes to define the top-level navigation items, panels, groups within the panels, and the hover, focus, and open states. It also defines a prefix for unique id strings, which are required to indicate the relationship of a top-level navigation item to the panel it controls.     defaults = {         /* unique ID's are required to indicate aria-owns, aria-controls and aria-labelledby */         uuidPrefix: ""accessible-megamenu"",                  /* default css class used to define the megamenu styling */         menuClass: ""accessible-megamenu"",                  /* default css class for a top-level navigation item in the megamenu */         topNavItemClass: ""accessible-megamenu-top-nav-item"",                  /* default css class for a megamenu panel */         panelClass: ""accessible-megamenu-panel"",                  /* default css class for a group of items within a megamenu panel */         panelGroupClass: ""accessible-megamenu-panel-group"",                  /* default css class for the hover state */         hoverClass: ""hover"",                  /* default css class for the focus state */         focusClass: ""focus"",                  /* default css class for the open state */         openClass: ""open""      } You can optionally override the defaults to use the CSS classes you may have already defined for your mega menu. JavaScript Be sure to include jQuery and the jquery-accessibleMegaMenu.js plugin script.     <script src=""//code.jquery.com/jquery-1.10.1.min.js""></script>     <script src=""js/jquery-accessibleMegaMenu.js""></script> The following initializes the first nav element in the document as an accessibleMegaMenu, with optional CSS class overrides.     $(""nav:first"").accessibleMegaMenu({         /* prefix for generated unique id attributes, which are required             to indicate aria-owns, aria-controls and aria-labelledby */         uuidPrefix: ""accessible-megamenu"",                  /* css class used to define the megamenu styling */         menuClass: ""nav-menu"",                  /* css class for a top-level navigation item in the megamenu */         topNavItemClass: ""nav-item"",                  /* css class for a megamenu panel */         panelClass: ""sub-nav"",                  /* css class for a group of items within a megamenu panel */         panelGroupClass: ""sub-nav-group"",                  /* css class for the hover state */         hoverClass: ""hover"",                  /* css class for the focus state */         focusClass: ""focus"",                  /* css class for the open state */         openClass: ""open""     }); CSS AccessibleMegaMenu handles the showing and hiding of panels by adding or removing a CSS class. No inline styles are added to hide elements or create animation between states. Following is some rudimentary CSS for our example which enables the showing/hiding of and the layout of lists panels in the mega menu.     /* mega menu list */     .nav-menu {         display: block;         position: relative;         list-style: none;         margin: 0;         padding: 0;         z-index: 15;     }     /* a top level navigation item in the mega menu */     .nav-item {         list-style: none;         display: inline-block;         padding: 0;         margin: 0;     }     /* first descendant link within a top level navigation item */     .nav-item > a {         position: relative;         display: inline-block;         padding: 0.5em 1em;         margin: 0 0 -1px 0;         border: 1px solid transparent;     }     /* focus/open states of first descendant link within a top level         navigation item */     .nav-item > a:focus,     .nav-item > a.open {         border: 1px solid #dedede;     }     /* open state of first descendant link within a top level         navigation item */     .nav-item > a.open {         background-color: #fff;         border-bottom: none;         z-index: 1;     }     /* sub-navigation panel */     .sub-nav {         position: absolute;         display: none;         top: 2.2em;         margin-top: -1px;         padding: 0.5em 1em;         border: 1px solid #dedede;         background-color: #fff;     }     /* sub-navigation panel open state */     .sub-nav.open {         display: block;     }     /* list of items within sub-navigation panel */     .sub-nav ul {         display: inline-block;         vertical-align: top;         margin: 0 1em 0 0;         padding: 0;     }     /* list item within sub-navigation panel */     .sub-nav li {         display: block;         list-style-type: none;         margin: 0;         padding: 0;     }   Putting it all together, here is the completed example:     <!doctype html>     <html lang=""en"">     <head>     <meta charset=""UTF-8"">     <title>Simple Accessible Mega Menu Example</title>     <style>         /* Rudimentary mega menu CSS for demonstration */             /* mega menu list */         .nav-menu {             display: block;             position: relative;             list-style: none;             margin: 0;             padding: 0;             z-index: 15;         }         /* a top level navigation item in the mega menu */         .nav-item {             list-style: none;             display: inline-block;             padding: 0;             margin: 0;         }         /* first descendant link within a top level navigation item */         .nav-item > a {             position: relative;             display: inline-block;             padding: 0.5em 1em;             margin: 0 0 -1px 0;             border: 1px solid transparent;         }         /* focus/open states of first descendant link within a top level             navigation item */         .nav-item > a:focus,         .nav-item > a.open {             border: 1px solid #dedede;         }         /* open state of first descendant link within a top level             navigation item */         .nav-item > a.open {             background-color: #fff;             border-bottom: none;             z-index: 1;         }         /* sub-navigation panel */         .sub-nav {             position: absolute;             display: none;             top: 2.2em;             margin-top: -1px;             padding: 0.5em 1em;             border: 1px solid #dedede;             background-color: #fff;         }         /* sub-navigation panel open state */         .sub-nav.open {             display: block;         }         /* list of items within sub-navigation panel */         .sub-nav ul {             display: inline-block;             vertical-align: top;             margin: 0 1em 0 0;             padding: 0;         }         /* list item within sub-navigation panel */         .sub-nav li {             display: block;             list-style-type: none;             margin: 0;             padding: 0;         }          </style>     </head>     <body>     <nav>         <ul class=""nav-menu"">             <li class=""nav-item"">                 <a href=""?movie"">Movies</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=0"">Action &amp; Adventure</a></li>                         <li><a href=""?movie&genre=2"">Children &amp; Family</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=7"">Dramas</a></li>                         <li><a href=""?movie&genre=9"">Foreign</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=14"">Musicals</a></li>                         <li><a href=""?movie&genre=15"">Romance</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>             <li class=""nav-item"">                 <a href=""?tv"">TV Shows</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=20"">Classic TV</a></li>                         <li><a href=""?tv&genre=21"">Crime TV</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=27"">Reality TV</a></li>                         <li><a href=""?tv&genre=30"">TV Action</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=33"">TV Dramas</a></li>                         <li><a href=""?tv&genre=34"">TV Horror</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>         </ul>     </nav>          <!-- include jquery -->     <script src=""//code.jquery.com/jquery-1.10.1.min.js""></script>     <!-- include the jquery-accessibleMegaMenu plugin script -->     <script src=""js/jquery-accessibleMegaMenu.js""></script>     <!-- initialize a selector as an accessibleMegaMenu -->     <script>         $(""nav:first"").accessibleMegaMenu({             /* prefix for generated unique id attributes, which are required                 to indicate aria-owns, aria-controls and aria-labelledby */             uuidPrefix: ""accessible-megamenu"",                          /* css class used to define the megamenu styling */             menuClass: ""nav-menu"",                          /* css class for a top-level navigation item in the megamenu */             topNavItemClass: ""nav-item"",                          /* css class for a megamenu panel */             panelClass: ""sub-nav"",                          /* css class for a group of items within a megamenu panel */             panelGroupClass: ""sub-nav-group"",                          /* css class for the hover state */             hoverClass: ""hover"",                          /* css class for the focus state */             focusClass: ""focus"",                          /* css class for the open state */             openClass: ""open""         });     </script>     </body>     </html> About A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. Resources Readme License Apache-2.0 License Releases No releases published Packages 0 No packages published Used by 15 + 7 Contributors 7 Languages HTML 71.8% CSS 26.4% JavaScript 1.8% © 2021 GitHub, Inc. Terms Privacy Security Status Docs Contact GitHub Pricing API Training Blog About You can’t perform that action at this time. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."
525896,20210319,github.com,https://github.com/crypto-browserify/crypto-browserify,text/html,text/html,en,"GitHub - crypto-browserify/crypto-browserify: partial implementation of node's `crypto` for the browser Skip to content Sign up Sign up Why GitHub? Features → Mobile → Actions → Codespaces → Packages → Security → Code review → Project management → Integrations → GitHub Sponsors → Customer stories→ Team Enterprise Explore Explore GitHub → Learn and contribute Topics → Collections → Trending → Learning Lab → Open source guides → Connect with others The ReadME Project → Events → Community forum → GitHub Education → GitHub Stars program → Marketplace Pricing Plans → Compare plans → Contact Sales → Education → In this repository All GitHub ↵ Jump to ↵ No suggested jump to results In this repository All GitHub ↵ Jump to ↵ In this organization All GitHub ↵ Jump to ↵ In this repository All GitHub ↵ Jump to ↵ Sign in Sign up Sign up {{ message }} crypto-browserify / crypto-browserify Notifications Star 470 Fork 152 partial implementation of node's `crypto` for the browser MIT License 470 stars 152 forks Star Notifications Code Issues 19 Pull requests 6 Actions Projects 0 Wiki Security Insights More Code Issues Pull requests Actions Projects Wiki Security Insights master Switch branches/tags Branches Tags Nothing to show {{ refName }} default View all branches Nothing to show {{ refName }} default View all tags 6 branches 31 tags Go to file Code Clone HTTPS GitHub CLI Use Git or checkout with SVN using the web URL. Work fast with our official CLI. Learn more. Open with GitHub Desktop Download ZIP Launching GitHub Desktop If nothing happens, download GitHub Desktop and try again. Go back Launching GitHub Desktop If nothing happens, download GitHub Desktop and try again. Go back Launching Xcode If nothing happens, download Xcode and try again. Go back Launching Visual Studio If nothing happens, download the GitHub extension for Visual Studio and try again. Go back Latest commit calvinmetcalf fix debian issue (maybe) … 460a13b Feb 9, 2018 fix debian issue (maybe) 460a13b Git stats 362 commits Files Permalink Failed to load latest commit information. Type Name Latest commit message Commit time example add standard 5.0.0 Aug 13, 2015 test fix debian issue (maybe) Feb 9, 2018 .gitignore Add .gitignore Aug 5, 2013 .travis.yml saucelabs aparently only goes back to 7 Oct 19, 2017 .zuul.yml add zuul and browser tests Oct 3, 2015 LICENSE Add MIT license Sep 20, 2013 README.md add privateEncrypt/publicDecrypt to README Dec 14, 2015 index.js add rndom fill Oct 18, 2017 package.json 3.12.0 Nov 3, 2017 View code README.md crypto-browserify A port of node's crypto module to the browser. The goal of this module is to reimplement node's crypto module, in pure javascript so that it can run in the browser. Here is the subset that is currently implemented: createHash (sha1, sha224, sha256, sha384, sha512, md5, rmd160) createHmac (sha1, sha224, sha256, sha384, sha512, md5, rmd160) pbkdf2 pbkdf2Sync randomBytes pseudoRandomBytes createCipher (aes) createDecipher (aes) createDiffieHellman createSign (rsa, ecdsa) createVerify (rsa, ecdsa) createECDH (secp256k1) publicEncrypt/privateDecrypt (rsa) privateEncrypt/publicDecrypt (rsa) todo these features from node's crypto are still unimplemented. createCredentials contributions If you are interested in writing a feature, please implement as a new module, which will be incorporated into crypto-browserify as a dependency. All deps must be compatible with node's crypto (generate example inputs and outputs with node, and save base64 strings inside JSON, so that tests can run in the browser. see sha.js Crypto is extra serious so please do not hesitate to review the code, and post comments if you do. License MIT About partial implementation of node's `crypto` for the browser Resources Readme License MIT License Releases 31 tags Packages 0 No packages published Used by 5.7m + 5,660,694 Contributors 24 + 13 contributors Languages JavaScript 99.1% HTML 0.9% © 2021 GitHub, Inc. Terms Privacy Security Status Docs Contact GitHub Pricing API Training Blog About You can’t perform that action at this time. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."
525898,20210319,github.com,https://github.com/indutny/elliptic/issues,text/html,text/html,en,"Issues · indutny/elliptic · GitHub Skip to content Sign up Sign up Why GitHub? Features → Mobile → Actions → Codespaces → Packages → Security → Code review → Project management → Integrations → GitHub Sponsors → Customer stories→ Team Enterprise Explore Explore GitHub → Learn and contribute Topics → Collections → Trending → Learning Lab → Open source guides → Connect with others The ReadME Project → Events → Community forum → GitHub Education → GitHub Stars program → Marketplace Pricing Plans → Compare plans → Contact Sales → Education → In this repository All GitHub ↵ Jump to ↵ No suggested jump to results In this repository All GitHub ↵ Jump to ↵ In this user All GitHub ↵ Jump to ↵ In this repository All GitHub ↵ Jump to ↵ Sign in Sign up Sign up {{ message }} indutny / elliptic Notifications Star 1.2k Fork 295 Code Issues 73 Pull requests 18 Actions Projects 0 Wiki Security Insights More Code Issues Pull requests Actions Projects Wiki Security Insights Labels 8 Milestones 0 Labels 8 Milestones 0 New issue Have a question about this project? Sign up for a free GitHub account to open an issue and contact its maintainers and the community. Pick a username Email Address Password Sign up for GitHub By clicking “Sign up for GitHub”, you agree to our terms of service and privacy statement. We’ll occasionally send you account related emails. Already on GitHub? Sign in to your account 73 Open 97 Closed 73 Open 97 Closed Author Filter by author author: Filter by this user Label Filter by label Use alt + click/return to exclude labels. Projects Filter by project Milestones Filter by milestone Assignee Filter by who’s assigned Sort Sort by Newest Oldest Most commented Least commented Recently updated Least recently updated Most reactions 👍 👎 😄 🎉 😕 ❤️ 🚀 👀 EDDSA.decodeInt should fails or reduce by dafault? #254 opened Mar 18, 2021 by mahnunchik Sad state #251 opened Mar 11, 2021 by berkus EDDSA.decodePoint should fails on ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff #250 opened Mar 3, 2021 by mahnunchik 14 Add endian argument to bn.js toString method #249 opened Mar 2, 2021 by mahnunchik EDDSA decodePoint doesn't support Buffer as argument #248 opened Mar 2, 2021 by mahnunchik How to decipher the encrypted message? #245 opened Jan 27, 2021 by istabraq-iot Montgomery Curve25519 is not openssl compatible #243 opened Dec 28, 2020 by jc-lab 3 Curves p384 and p521 produce incorrect results #239 opened Oct 18, 2020 by guidovranken i want to use this library with c# #238 opened Oct 10, 2020 by medozeus Elliptic.js support following curve types: #236 opened Oct 5, 2020 by medozeus The Elliptic package 6.5.2 for Node.js allows ECDSA signature malleability via variations in encoding, leading '\0' bytes, or integer overflows. #235 opened Oct 1, 2020 by bsomeshwer EdDSA: What is a reason to manipulate with bytes? #233 opened Aug 27, 2020 by mahnunchik why use derive method get ECDH key，i got different length #230 opened Jul 10, 2020 by cqupt-yifanwu 4 Why do I generate my local test path in chunk-vendors when packing with NPM #229 opened Jun 22, 2020 by Anthonychen1994 1 TypedArray support ? #228 opened Jun 20, 2020 by dojyorin Is there way to generate PKCS#8 private key from Pem format ECC Private key #225 opened Apr 28, 2020 by sureshreddygovindu Signature validation in python. Prefix configuration? #224 opened Apr 25, 2020 by amrbz is it possible to do assymetric encryption? #223 opened Apr 7, 2020 by maroodb 1 Missing infinity point encoding #218 opened Feb 21, 2020 by catenacyber 1 ECDH P-521 public key point not on curve according to java (clojure) #216 opened Feb 11, 2020 by slhabity 1 how save and load private / publick key in pem or other format #215 opened Jan 27, 2020 by fturiot 2 How to pair client to server BTCPay NodeJS client? #214 opened Jan 21, 2020 by savshit 1 How to pair client to server BTCPay NodeJS client? #213 opened Jan 21, 2020 by savshit curve25519 and BouncyCastle(bc) in c# Different compute shared secret #209 opened Dec 11, 2019 by shamohai 2 Feature: Schnorr signatures #208 opened Dec 11, 2019 by junderw 6 Previous 1 2 3 Next Previous Next ProTip! Mix and match filters to narrow down what you’re looking for. © 2021 GitHub, Inc. Terms Privacy Security Status Docs Contact GitHub Pricing API Training Blog About You can’t perform that action at this time. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."
525947,20210319,github.com,https://github.com/indutny/elliptic,text/html,text/html,en,"GitHub - indutny/elliptic: Fast Elliptic Curve Cryptography in plain javascript Skip to content Sign up Sign up Why GitHub? Features → Mobile → Actions → Codespaces → Packages → Security → Code review → Project management → Integrations → GitHub Sponsors → Customer stories→ Team Enterprise Explore Explore GitHub → Learn and contribute Topics → Collections → Trending → Learning Lab → Open source guides → Connect with others The ReadME Project → Events → Community forum → GitHub Education → GitHub Stars program → Marketplace Pricing Plans → Compare plans → Contact Sales → Education → In this repository All GitHub ↵ Jump to ↵ No suggested jump to results In this repository All GitHub ↵ Jump to ↵ In this user All GitHub ↵ Jump to ↵ In this repository All GitHub ↵ Jump to ↵ Sign in Sign up Sign up {{ message }} indutny / elliptic Notifications Star 1.2k Fork 295 Fast Elliptic Curve Cryptography in plain javascript 1.2k stars 295 forks Star Notifications Code Issues 73 Pull requests 18 Actions Projects 0 Wiki Security Insights More Code Issues Pull requests Actions Projects Wiki Security Insights master Switch branches/tags Branches Tags Nothing to show {{ refName }} default View all branches Nothing to show {{ refName }} default View all tags 2 branches 85 tags Go to file Code Clone HTTPS GitHub CLI Use Git or checkout with SVN using the web URL. Work fast with our official CLI. Learn more. Open with GitHub Desktop Download ZIP Launching GitHub Desktop If nothing happens, download GitHub Desktop and try again. Go back Launching GitHub Desktop If nothing happens, download GitHub Desktop and try again. Go back Launching Xcode If nothing happens, download Xcode and try again. Go back Launching Visual Studio If nothing happens, download the GitHub extension for Visual Studio and try again. Go back Latest commit indutny 6.5.4 … 43ac7f2 Feb 2, 2021 6.5.4 43ac7f2 Git stats 331 commits Files Permalink Failed to load latest commit information. Type Name Latest commit message Commit time benchmarks package: remove Makefile and dist Jan 29, 2016 dist 6.5.4 Feb 2, 2021 lib ec: validate that a point before deriving keys Feb 2, 2021 test ec: validate that a point before deriving keys Feb 2, 2021 .codeclimate.yml test: improvements with Saucelabs/Codeclimate Mar 31, 2016 .eslintignore lib: relint using eslint Aug 2, 2020 .eslintrc.js lib: relint using eslint Aug 2, 2020 .gitignore test: improvements with Saucelabs/Codeclimate Mar 31, 2016 .npmignore npmignore: dist May 20, 2016 .travis.yml travis: really move on Jun 26, 2019 Gruntfile.js grunt: fix standalone build May 25, 2016 README.md readme: update example Mar 23, 2017 package-lock.json 6.5.4 Feb 2, 2021 package.json 6.5.4 Feb 2, 2021 View code README.md Elliptic Fast elliptic-curve cryptography in a plain javascript implementation. NOTE: Please take a look at http://safecurves.cr.yp.to/ before choosing a curve for your cryptography operations. Incentive ECC is much slower than regular RSA cryptography, the JS implementations are even more slower. Benchmarks $ node benchmarks/index.js Benchmarking: sign elliptic#sign x 262 ops/sec ±0.51% (177 runs sampled) eccjs#sign x 55.91 ops/sec ±0.90% (144 runs sampled) ------------------------ Fastest is elliptic#sign ======================== Benchmarking: verify elliptic#verify x 113 ops/sec ±0.50% (166 runs sampled) eccjs#verify x 48.56 ops/sec ±0.36% (125 runs sampled) ------------------------ Fastest is elliptic#verify ======================== Benchmarking: gen elliptic#gen x 294 ops/sec ±0.43% (176 runs sampled) eccjs#gen x 62.25 ops/sec ±0.63% (129 runs sampled) ------------------------ Fastest is elliptic#gen ======================== Benchmarking: ecdh elliptic#ecdh x 136 ops/sec ±0.85% (156 runs sampled) ------------------------ Fastest is elliptic#ecdh ======================== API ECDSA var EC = require('elliptic').ec; // Create and initialize EC context // (better do it once and reuse it) var ec = new EC('secp256k1'); // Generate keys var key = ec.genKeyPair(); // Sign the message's hash (input must be an array, or a hex-string) var msgHash = [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ]; var signature = key.sign(msgHash); // Export DER encoded signature in Array var derSign = signature.toDER(); // Verify signature console.log(key.verify(msgHash, derSign)); // CHECK WITH NO PRIVATE KEY var pubPoint = key.getPublic(); var x = pubPoint.getX(); var y = pubPoint.getY(); // Public Key MUST be either: // 1) '04' + hex string of x + hex string of y; or // 2) object with two hex string properties (x and y); or // 3) object with two buffer properties (x and y) var pub = pubPoint.encode('hex');                                 // case 1 var pub = { x: x.toString('hex'), y: y.toString('hex') };         // case 2 var pub = { x: x.toBuffer(), y: y.toBuffer() };                   // case 3 var pub = { x: x.toArrayLike(Buffer), y: y.toArrayLike(Buffer) }; // case 3 // Import public key var key = ec.keyFromPublic(pub, 'hex'); // Signature MUST be either: // 1) DER-encoded signature as hex-string; or // 2) DER-encoded signature as buffer; or // 3) object with two hex-string properties (r and s); or // 4) object with two buffer properties (r and s) var signature = '3046022100...'; // case 1 var signature = new Buffer('...'); // case 2 var signature = { r: 'b1fc...', s: '9c42...' }; // case 3 // Verify signature console.log(key.verify(msgHash, signature)); EdDSA var EdDSA = require('elliptic').eddsa; // Create and initialize EdDSA context // (better do it once and reuse it) var ec = new EdDSA('ed25519'); // Create key pair from secret var key = ec.keyFromSecret('693e3c...'); // hex string, array or Buffer // Sign the message's hash (input must be an array, or a hex-string) var msgHash = [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ]; var signature = key.sign(msgHash).toHex(); // Verify signature console.log(key.verify(msgHash, signature)); // CHECK WITH NO PRIVATE KEY // Import public key var pub = '0a1af638...'; var key = ec.keyFromPublic(pub, 'hex'); // Verify signature var signature = '70bed1...'; console.log(key.verify(msgHash, signature)); ECDH var EC = require('elliptic').ec; var ec = new EC('curve25519'); // Generate keys var key1 = ec.genKeyPair(); var key2 = ec.genKeyPair(); var shared1 = key1.derive(key2.getPublic()); var shared2 = key2.derive(key1.getPublic()); console.log('Both shared secrets are BN instances'); console.log(shared1.toString(16)); console.log(shared2.toString(16)); three and more members: var EC = require('elliptic').ec; var ec = new EC('curve25519'); var A = ec.genKeyPair(); var B = ec.genKeyPair(); var C = ec.genKeyPair(); var AB = A.getPublic().mul(B.getPrivate()) var BC = B.getPublic().mul(C.getPrivate()) var CA = C.getPublic().mul(A.getPrivate()) var ABC = AB.mul(C.getPrivate()) var BCA = BC.mul(A.getPrivate()) var CAB = CA.mul(B.getPrivate()) console.log(ABC.getX().toString(16)) console.log(BCA.getX().toString(16)) console.log(CAB.getX().toString(16)) NOTE: .derive() returns a BN instance. Supported curves Elliptic.js support following curve types: Short Weierstrass Montgomery Edwards Twisted Edwards Following curve 'presets' are embedded into the library: secp256k1 p192 p224 p256 p384 p521 curve25519 ed25519 NOTE: That curve25519 could not be used for ECDSA, use ed25519 instead. Implementation details ECDSA is using deterministic k value generation as per RFC6979. Most of the curve operations are performed on non-affine coordinates (either projective or extended), various windowing techniques are used for different cases. All operations are performed in reduction context using bn.js, hashing is provided by hash.js Related projects eccrypto: isomorphic implementation of ECDSA, ECDH and ECIES for both browserify and node (uses elliptic for browser and secp256k1-node for node) LICENSE This software is licensed under the MIT License. Copyright Fedor Indutny, 2014. Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the ""Software""), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. About Fast Elliptic Curve Cryptography in plain javascript Resources Readme Releases 85 tags Packages 0 No packages published Used by 5.6m + 5,569,233 Contributors 25 + 14 contributors Languages JavaScript 99.3% HTML 0.7% © 2021 GitHub, Inc. Terms Privacy Security Status Docs Contact GitHub Pricing API Training Blog About You can’t perform that action at this time. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."
526514,20210326,github.com,https://github.com/adobe-accessibility/Accessible-Mega-Menu,text/html,text/html,en,"GitHub - adobe-accessibility/Accessible-Mega-Menu: A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. Skip to content Sign up Sign up Why GitHub? Features → Mobile → Actions → Codespaces → Packages → Security → Code review → Project management → Integrations → GitHub Sponsors → Customer stories→ Team Enterprise Explore Explore GitHub → Learn and contribute Topics → Collections → Trending → Learning Lab → Open source guides → Connect with others The ReadME Project → Events → Community forum → GitHub Education → GitHub Stars program → Marketplace Pricing Plans → Compare plans → Contact Sales → Education → In this repository All GitHub ↵ Jump to ↵ No suggested jump to results In this repository All GitHub ↵ Jump to ↵ In this organization All GitHub ↵ Jump to ↵ In this repository All GitHub ↵ Jump to ↵ Sign in Sign up Sign up {{ message }} adobe-accessibility / Accessible-Mega-Menu Notifications Star 576 Fork 196 A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. Apache-2.0 License 576 stars 196 forks Star Notifications Code Issues 28 Pull requests 6 Actions Projects 0 Security Insights More Code Issues Pull requests Actions Projects Security Insights master Switch branches/tags Branches Tags Nothing to show {{ refName }} default View all branches Nothing to show {{ refName }} default View all tags 2 branches 0 tags Go to file Code Clone HTTPS GitHub CLI Use Git or checkout with SVN using the web URL. Work fast with our official CLI. Learn more. Open with GitHub Desktop Download ZIP Launching GitHub Desktop If nothing happens, download GitHub Desktop and try again. Go back Launching GitHub Desktop If nothing happens, download GitHub Desktop and try again. Go back Launching Xcode If nothing happens, download Xcode and try again. Go back Launching Visual Studio If nothing happens, download the GitHub extension for Visual Studio and try again. Go back Latest commit Git stats 39 commits Files Permalink Failed to load latest commit information. Type Name Latest commit message Commit time css Add openOnMouseover setting, and toggleButtonClass for responsive layout May 11, 2018 js fix evaluation for ChromeVox object Dec 7, 2020 third-party/jquery initial commit Aug 26, 2013 LICENSE initial commit Aug 26, 2013 NOTICE initial commit Aug 26, 2013 README.md initial commit Aug 26, 2013 index.html Updating WCAG 2.0 References to WCAG 2.1 (#67) Dec 4, 2020 package.json Updating repo references Jul 8, 2016 View code Accessible Mega Menu Keyboard Accessibility Screen Reader Accessibility Usage HTML JavaScript CSS README.md Accessible Mega Menu ========================= A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. It is modeled after the mega menu on adobe.com but has been simplified for use by others. An brief explanation of our interaction design choices can be found in a blog post at Mega menu accessibility on adobe.com. Content for the links and text within the mega menu comes from the Web Content Accessibility Guidelines (WCAG) 2.0. Keyboard Accessibility The accessible mega menu supports keyboard interaction modeled after the behavior described in the WAI-ARIA Menu or Menu bar (widget) design pattern, however we also try to respect users' general expectations for the behavior of links in a global navigation. To this end, the accessible mega menu implementation permits tab focus on each of the six top-level menu items. When one of the menu items has focus, pressing the Enter key, Spacebar or Down arrow will open the submenu panel, and pressing the Left or Right arrow key will shift focus to the adjacent menu item. Links within the submenu panels are included in the tab order when the panel is open. They can also be navigated with the arrow keys or by typing the first character in the link name, which speeds up keyboard navigation considerably. Pressing the Escape key closes the submenu and restores focus to the parent menu item. Screen Reader Accessibility The accessible mega menu models its use of WAI-ARIA Roles, States, and Properties after those described in the WAI-ARIA Menu or Menu bar (widget) design pattern with some notable exceptions, so that it behaves better with screen reader user expectations for global navigation. We don't use role=""menu"" for the menu container and role=""menuitem"" for each of the links therein, because if we do, assistive technology will no longer interpret the links as links, but instead, as menu items, and the links in our global navigation will no longer show up when a screen reader user executes a shortcut command to bring up a list of links in the page. We also want to maintain the semantic structure of the submenu panels in our mega menu; our links are organized into lists and separated by headings. Omitting role=""menu"" and role=""menuitem"" for the global navigation seems the safer way to go. Usage HTML The HTML structure for the mega menu is a nav element, or any other container element, containing a list. Each list item contains a link which is followed by a div or any other container element which will serve as the pop up panel. The panel can contain any html content; in the following example, each panel contains three lists of links. You can explicitly define groups within the panel, between which a user can navigate quickly using the left and right arrow keys; in the following example, the CSS class .sub-nav-group identifies a navigable group.     <nav>         <ul class=""nav-menu"">             <li class=""nav-item"">                 <a href=""?movie"">Movies</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=0"">Action &amp; Adventure</a></li>                         <li><a href=""?movie&genre=2"">Children &amp; Family</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=7"">Dramas</a></li>                         <li><a href=""?movie&genre=9"">Foreign</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=14"">Musicals</a></li>                         <li><a href=""?movie&genre=15"">Romance</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>             <li class=""nav-item"">                 <a href=""?tv"">TV Shows</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=20"">Classic TV</a></li>                         <li><a href=""?tv&genre=21"">Crime TV</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=27"">Reality TV</a></li>                         <li><a href=""?tv&genre=30"">TV Action</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=33"">TV Dramas</a></li>                         <li><a href=""?tv&genre=34"">TV Horror</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>         </ul>     </nav> By default, accessibleMegaMenu uses the the following CSS classes to define the top-level navigation items, panels, groups within the panels, and the hover, focus, and open states. It also defines a prefix for unique id strings, which are required to indicate the relationship of a top-level navigation item to the panel it controls.     defaults = {         /* unique ID's are required to indicate aria-owns, aria-controls and aria-labelledby */         uuidPrefix: ""accessible-megamenu"",                  /* default css class used to define the megamenu styling */         menuClass: ""accessible-megamenu"",                  /* default css class for a top-level navigation item in the megamenu */         topNavItemClass: ""accessible-megamenu-top-nav-item"",                  /* default css class for a megamenu panel */         panelClass: ""accessible-megamenu-panel"",                  /* default css class for a group of items within a megamenu panel */         panelGroupClass: ""accessible-megamenu-panel-group"",                  /* default css class for the hover state */         hoverClass: ""hover"",                  /* default css class for the focus state */         focusClass: ""focus"",                  /* default css class for the open state */         openClass: ""open""      } You can optionally override the defaults to use the CSS classes you may have already defined for your mega menu. JavaScript Be sure to include jQuery and the jquery-accessibleMegaMenu.js plugin script.     <script src=""//code.jquery.com/jquery-1.10.1.min.js""></script>     <script src=""js/jquery-accessibleMegaMenu.js""></script> The following initializes the first nav element in the document as an accessibleMegaMenu, with optional CSS class overrides.     $(""nav:first"").accessibleMegaMenu({         /* prefix for generated unique id attributes, which are required             to indicate aria-owns, aria-controls and aria-labelledby */         uuidPrefix: ""accessible-megamenu"",                  /* css class used to define the megamenu styling */         menuClass: ""nav-menu"",                  /* css class for a top-level navigation item in the megamenu */         topNavItemClass: ""nav-item"",                  /* css class for a megamenu panel */         panelClass: ""sub-nav"",                  /* css class for a group of items within a megamenu panel */         panelGroupClass: ""sub-nav-group"",                  /* css class for the hover state */         hoverClass: ""hover"",                  /* css class for the focus state */         focusClass: ""focus"",                  /* css class for the open state */         openClass: ""open""     }); CSS AccessibleMegaMenu handles the showing and hiding of panels by adding or removing a CSS class. No inline styles are added to hide elements or create animation between states. Following is some rudimentary CSS for our example which enables the showing/hiding of and the layout of lists panels in the mega menu.     /* mega menu list */     .nav-menu {         display: block;         position: relative;         list-style: none;         margin: 0;         padding: 0;         z-index: 15;     }     /* a top level navigation item in the mega menu */     .nav-item {         list-style: none;         display: inline-block;         padding: 0;         margin: 0;     }     /* first descendant link within a top level navigation item */     .nav-item > a {         position: relative;         display: inline-block;         padding: 0.5em 1em;         margin: 0 0 -1px 0;         border: 1px solid transparent;     }     /* focus/open states of first descendant link within a top level         navigation item */     .nav-item > a:focus,     .nav-item > a.open {         border: 1px solid #dedede;     }     /* open state of first descendant link within a top level         navigation item */     .nav-item > a.open {         background-color: #fff;         border-bottom: none;         z-index: 1;     }     /* sub-navigation panel */     .sub-nav {         position: absolute;         display: none;         top: 2.2em;         margin-top: -1px;         padding: 0.5em 1em;         border: 1px solid #dedede;         background-color: #fff;     }     /* sub-navigation panel open state */     .sub-nav.open {         display: block;     }     /* list of items within sub-navigation panel */     .sub-nav ul {         display: inline-block;         vertical-align: top;         margin: 0 1em 0 0;         padding: 0;     }     /* list item within sub-navigation panel */     .sub-nav li {         display: block;         list-style-type: none;         margin: 0;         padding: 0;     }   Putting it all together, here is the completed example:     <!doctype html>     <html lang=""en"">     <head>     <meta charset=""UTF-8"">     <title>Simple Accessible Mega Menu Example</title>     <style>         /* Rudimentary mega menu CSS for demonstration */             /* mega menu list */         .nav-menu {             display: block;             position: relative;             list-style: none;             margin: 0;             padding: 0;             z-index: 15;         }         /* a top level navigation item in the mega menu */         .nav-item {             list-style: none;             display: inline-block;             padding: 0;             margin: 0;         }         /* first descendant link within a top level navigation item */         .nav-item > a {             position: relative;             display: inline-block;             padding: 0.5em 1em;             margin: 0 0 -1px 0;             border: 1px solid transparent;         }         /* focus/open states of first descendant link within a top level             navigation item */         .nav-item > a:focus,         .nav-item > a.open {             border: 1px solid #dedede;         }         /* open state of first descendant link within a top level             navigation item */         .nav-item > a.open {             background-color: #fff;             border-bottom: none;             z-index: 1;         }         /* sub-navigation panel */         .sub-nav {             position: absolute;             display: none;             top: 2.2em;             margin-top: -1px;             padding: 0.5em 1em;             border: 1px solid #dedede;             background-color: #fff;         }         /* sub-navigation panel open state */         .sub-nav.open {             display: block;         }         /* list of items within sub-navigation panel */         .sub-nav ul {             display: inline-block;             vertical-align: top;             margin: 0 1em 0 0;             padding: 0;         }         /* list item within sub-navigation panel */         .sub-nav li {             display: block;             list-style-type: none;             margin: 0;             padding: 0;         }          </style>     </head>     <body>     <nav>         <ul class=""nav-menu"">             <li class=""nav-item"">                 <a href=""?movie"">Movies</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=0"">Action &amp; Adventure</a></li>                         <li><a href=""?movie&genre=2"">Children &amp; Family</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=7"">Dramas</a></li>                         <li><a href=""?movie&genre=9"">Foreign</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=14"">Musicals</a></li>                         <li><a href=""?movie&genre=15"">Romance</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>             <li class=""nav-item"">                 <a href=""?tv"">TV Shows</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=20"">Classic TV</a></li>                         <li><a href=""?tv&genre=21"">Crime TV</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=27"">Reality TV</a></li>                         <li><a href=""?tv&genre=30"">TV Action</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=33"">TV Dramas</a></li>                         <li><a href=""?tv&genre=34"">TV Horror</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>         </ul>     </nav>          <!-- include jquery -->     <script src=""//code.jquery.com/jquery-1.10.1.min.js""></script>     <!-- include the jquery-accessibleMegaMenu plugin script -->     <script src=""js/jquery-accessibleMegaMenu.js""></script>     <!-- initialize a selector as an accessibleMegaMenu -->     <script>         $(""nav:first"").accessibleMegaMenu({             /* prefix for generated unique id attributes, which are required                 to indicate aria-owns, aria-controls and aria-labelledby */             uuidPrefix: ""accessible-megamenu"",                          /* css class used to define the megamenu styling */             menuClass: ""nav-menu"",                          /* css class for a top-level navigation item in the megamenu */             topNavItemClass: ""nav-item"",                          /* css class for a megamenu panel */             panelClass: ""sub-nav"",                          /* css class for a group of items within a megamenu panel */             panelGroupClass: ""sub-nav-group"",                          /* css class for the hover state */             hoverClass: ""hover"",                          /* css class for the focus state */             focusClass: ""focus"",                          /* css class for the open state */             openClass: ""open""         });     </script>     </body>     </html> About A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. Resources Readme License Apache-2.0 License Releases No releases published Packages 0 No packages published Used by 15 + 7 Contributors 7 Languages HTML 71.8% CSS 26.4% JavaScript 1.8% © 2021 GitHub, Inc. Terms Privacy Security Status Docs Contact GitHub Pricing API Training Blog About You can’t perform that action at this time. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."
534990,20210326,github.com,https://github.com/crypto-browserify/crypto-browserify,text/html,text/html,en,"GitHub - crypto-browserify/crypto-browserify: partial implementation of node's `crypto` for the browser Skip to content Sign up Sign up Why GitHub? Features → Mobile → Actions → Codespaces → Packages → Security → Code review → Project management → Integrations → GitHub Sponsors → Customer stories→ Team Enterprise Explore Explore GitHub → Learn and contribute Topics → Collections → Trending → Learning Lab → Open source guides → Connect with others The ReadME Project → Events → Community forum → GitHub Education → GitHub Stars program → Marketplace Pricing Plans → Compare plans → Contact Sales → Education → In this repository All GitHub ↵ Jump to ↵ No suggested jump to results In this repository All GitHub ↵ Jump to ↵ In this organization All GitHub ↵ Jump to ↵ In this repository All GitHub ↵ Jump to ↵ Sign in Sign up Sign up {{ message }} crypto-browserify / crypto-browserify Notifications Star 471 Fork 153 partial implementation of node's `crypto` for the browser MIT License 471 stars 153 forks Star Notifications Code Issues 19 Pull requests 6 Actions Projects 0 Wiki Security Insights More Code Issues Pull requests Actions Projects Wiki Security Insights master Switch branches/tags Branches Tags Nothing to show {{ refName }} default View all branches Nothing to show {{ refName }} default View all tags 6 branches 31 tags Go to file Code Clone HTTPS GitHub CLI Use Git or checkout with SVN using the web URL. Work fast with our official CLI. Learn more. Open with GitHub Desktop Download ZIP Launching GitHub Desktop If nothing happens, download GitHub Desktop and try again. Go back Launching GitHub Desktop If nothing happens, download GitHub Desktop and try again. Go back Launching Xcode If nothing happens, download Xcode and try again. Go back Launching Visual Studio If nothing happens, download the GitHub extension for Visual Studio and try again. Go back Latest commit calvinmetcalf fix debian issue (maybe) … 460a13b Feb 9, 2018 fix debian issue (maybe) 460a13b Git stats 362 commits Files Permalink Failed to load latest commit information. Type Name Latest commit message Commit time example add standard 5.0.0 Aug 13, 2015 test fix debian issue (maybe) Feb 9, 2018 .gitignore Add .gitignore Aug 5, 2013 .travis.yml saucelabs aparently only goes back to 7 Oct 19, 2017 .zuul.yml add zuul and browser tests Oct 3, 2015 LICENSE Add MIT license Sep 20, 2013 README.md add privateEncrypt/publicDecrypt to README Dec 14, 2015 index.js add rndom fill Oct 18, 2017 package.json 3.12.0 Nov 3, 2017 View code crypto-browserify todo contributions License README.md crypto-browserify A port of node's crypto module to the browser. The goal of this module is to reimplement node's crypto module, in pure javascript so that it can run in the browser. Here is the subset that is currently implemented: createHash (sha1, sha224, sha256, sha384, sha512, md5, rmd160) createHmac (sha1, sha224, sha256, sha384, sha512, md5, rmd160) pbkdf2 pbkdf2Sync randomBytes pseudoRandomBytes createCipher (aes) createDecipher (aes) createDiffieHellman createSign (rsa, ecdsa) createVerify (rsa, ecdsa) createECDH (secp256k1) publicEncrypt/privateDecrypt (rsa) privateEncrypt/publicDecrypt (rsa) todo these features from node's crypto are still unimplemented. createCredentials contributions If you are interested in writing a feature, please implement as a new module, which will be incorporated into crypto-browserify as a dependency. All deps must be compatible with node's crypto (generate example inputs and outputs with node, and save base64 strings inside JSON, so that tests can run in the browser. see sha.js Crypto is extra serious so please do not hesitate to review the code, and post comments if you do. License MIT About partial implementation of node's `crypto` for the browser Resources Readme License MIT License Releases 31 tags Packages 0 No packages published Used by 5.7m + 5,684,997 Contributors 24 + 13 contributors Languages JavaScript 99.1% HTML 0.9% © 2021 GitHub, Inc. Terms Privacy Security Status Docs Contact GitHub Pricing API Training Blog About You can’t perform that action at this time. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."
534991,20210326,github.com,https://github.com/indutny/elliptic/issues,text/html,text/html,en,"Issues · indutny/elliptic · GitHub Skip to content Sign up Sign up Why GitHub? Features → Mobile → Actions → Codespaces → Packages → Security → Code review → Project management → Integrations → GitHub Sponsors → Customer stories→ Team Enterprise Explore Explore GitHub → Learn and contribute Topics → Collections → Trending → Learning Lab → Open source guides → Connect with others The ReadME Project → Events → Community forum → GitHub Education → GitHub Stars program → Marketplace Pricing Plans → Compare plans → Contact Sales → Education → In this repository All GitHub ↵ Jump to ↵ No suggested jump to results In this repository All GitHub ↵ Jump to ↵ In this user All GitHub ↵ Jump to ↵ In this repository All GitHub ↵ Jump to ↵ Sign in Sign up Sign up {{ message }} indutny / elliptic Notifications Star 1.2k Fork 295 Code Issues 73 Pull requests 18 Actions Projects 0 Wiki Security Insights More Code Issues Pull requests Actions Projects Wiki Security Insights Labels 8 Milestones 0 Labels 8 Milestones 0 New issue Have a question about this project? Sign up for a free GitHub account to open an issue and contact its maintainers and the community. Pick a username Email Address Password Sign up for GitHub By clicking “Sign up for GitHub”, you agree to our terms of service and privacy statement. We’ll occasionally send you account related emails. Already on GitHub? Sign in to your account 73 Open 97 Closed 73 Open 97 Closed Author Filter by author author: Filter by this user Label Filter by label Use alt + click/return to exclude labels. Projects Filter by project Milestones Filter by milestone Assignee Filter by who’s assigned Sort Sort by Newest Oldest Most commented Least commented Recently updated Least recently updated Most reactions 👍 👎 😄 🎉 😕 ❤️ 🚀 👀 EDDSA.decodeInt should fails or reduce by dafault? #254 opened Mar 18, 2021 by mahnunchik Sad state #251 opened Mar 11, 2021 by berkus EDDSA.decodePoint should fails on ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff #250 opened Mar 3, 2021 by mahnunchik 14 Add endian argument to bn.js toString method #249 opened Mar 2, 2021 by mahnunchik EDDSA decodePoint doesn't support Buffer as argument #248 opened Mar 2, 2021 by mahnunchik How to decipher the encrypted message? #245 opened Jan 27, 2021 by istabraq-iot Montgomery Curve25519 is not openssl compatible #243 opened Dec 28, 2020 by jc-lab 3 Curves p384 and p521 produce incorrect results #239 opened Oct 18, 2020 by guidovranken i want to use this library with c# #238 opened Oct 10, 2020 by medozeus Elliptic.js support following curve types: #236 opened Oct 5, 2020 by medozeus The Elliptic package 6.5.2 for Node.js allows ECDSA signature malleability via variations in encoding, leading '\0' bytes, or integer overflows. #235 opened Oct 1, 2020 by bsomeshwer EdDSA: What is a reason to manipulate with bytes? #233 opened Aug 27, 2020 by mahnunchik why use derive method get ECDH key，i got different length #230 opened Jul 10, 2020 by cqupt-yifanwu 4 Why do I generate my local test path in chunk-vendors when packing with NPM #229 opened Jun 22, 2020 by Anthonychen1994 1 TypedArray support ? #228 opened Jun 20, 2020 by dojyorin Is there way to generate PKCS#8 private key from Pem format ECC Private key #225 opened Apr 28, 2020 by sureshreddygovindu Signature validation in python. Prefix configuration? #224 opened Apr 25, 2020 by amrbz is it possible to do assymetric encryption? #223 opened Apr 7, 2020 by maroodb 1 Missing infinity point encoding #218 opened Feb 21, 2020 by catenacyber 1 ECDH P-521 public key point not on curve according to java (clojure) #216 opened Feb 11, 2020 by slhabity 1 how save and load private / publick key in pem or other format #215 opened Jan 27, 2020 by fturiot 2 How to pair client to server BTCPay NodeJS client? #214 opened Jan 21, 2020 by savshit 1 How to pair client to server BTCPay NodeJS client? #213 opened Jan 21, 2020 by savshit curve25519 and BouncyCastle(bc) in c# Different compute shared secret #209 opened Dec 11, 2019 by shamohai 2 Feature: Schnorr signatures #208 opened Dec 11, 2019 by junderw 6 Previous 1 2 3 Next Previous Next ProTip! Find all open issues with in progress development work with linked:pr. © 2021 GitHub, Inc. Terms Privacy Security Status Docs Contact GitHub Pricing API Training Blog About You can’t perform that action at this time. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."
534993,20210326,github.com,https://github.com/indutny/elliptic,text/html,text/html,en,"GitHub - indutny/elliptic: Fast Elliptic Curve Cryptography in plain javascript Skip to content Sign up Sign up Why GitHub? Features → Mobile → Actions → Codespaces → Packages → Security → Code review → Project management → Integrations → GitHub Sponsors → Customer stories→ Team Enterprise Explore Explore GitHub → Learn and contribute Topics → Collections → Trending → Learning Lab → Open source guides → Connect with others The ReadME Project → Events → Community forum → GitHub Education → GitHub Stars program → Marketplace Pricing Plans → Compare plans → Contact Sales → Education → In this repository All GitHub ↵ Jump to ↵ No suggested jump to results In this repository All GitHub ↵ Jump to ↵ In this user All GitHub ↵ Jump to ↵ In this repository All GitHub ↵ Jump to ↵ Sign in Sign up Sign up {{ message }} indutny / elliptic Notifications Star 1.2k Fork 295 Fast Elliptic Curve Cryptography in plain javascript 1.2k stars 295 forks Star Notifications Code Issues 73 Pull requests 18 Actions Projects 0 Wiki Security Insights More Code Issues Pull requests Actions Projects Wiki Security Insights master Switch branches/tags Branches Tags Nothing to show {{ refName }} default View all branches Nothing to show {{ refName }} default View all tags 2 branches 85 tags Go to file Code Clone HTTPS GitHub CLI Use Git or checkout with SVN using the web URL. Work fast with our official CLI. Learn more. Open with GitHub Desktop Download ZIP Launching GitHub Desktop If nothing happens, download GitHub Desktop and try again. Go back Launching GitHub Desktop If nothing happens, download GitHub Desktop and try again. Go back Launching Xcode If nothing happens, download Xcode and try again. Go back Launching Visual Studio If nothing happens, download the GitHub extension for Visual Studio and try again. Go back Latest commit indutny 6.5.4 … 43ac7f2 Feb 3, 2021 6.5.4 43ac7f2 Git stats 331 commits Files Permalink Failed to load latest commit information. Type Name Latest commit message Commit time benchmarks dist lib test .codeclimate.yml .eslintignore .eslintrc.js .gitignore .npmignore .travis.yml Gruntfile.js README.md package-lock.json package.json View code Elliptic Incentive Benchmarks API ECDSA EdDSA ECDH Supported curves Implementation details Related projects LICENSE README.md Elliptic Fast elliptic-curve cryptography in a plain javascript implementation. NOTE: Please take a look at http://safecurves.cr.yp.to/ before choosing a curve for your cryptography operations. Incentive ECC is much slower than regular RSA cryptography, the JS implementations are even more slower. Benchmarks $ node benchmarks/index.js Benchmarking: sign elliptic#sign x 262 ops/sec ±0.51% (177 runs sampled) eccjs#sign x 55.91 ops/sec ±0.90% (144 runs sampled) ------------------------ Fastest is elliptic#sign ======================== Benchmarking: verify elliptic#verify x 113 ops/sec ±0.50% (166 runs sampled) eccjs#verify x 48.56 ops/sec ±0.36% (125 runs sampled) ------------------------ Fastest is elliptic#verify ======================== Benchmarking: gen elliptic#gen x 294 ops/sec ±0.43% (176 runs sampled) eccjs#gen x 62.25 ops/sec ±0.63% (129 runs sampled) ------------------------ Fastest is elliptic#gen ======================== Benchmarking: ecdh elliptic#ecdh x 136 ops/sec ±0.85% (156 runs sampled) ------------------------ Fastest is elliptic#ecdh ======================== API ECDSA var EC = require('elliptic').ec; // Create and initialize EC context // (better do it once and reuse it) var ec = new EC('secp256k1'); // Generate keys var key = ec.genKeyPair(); // Sign the message's hash (input must be an array, or a hex-string) var msgHash = [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ]; var signature = key.sign(msgHash); // Export DER encoded signature in Array var derSign = signature.toDER(); // Verify signature console.log(key.verify(msgHash, derSign)); // CHECK WITH NO PRIVATE KEY var pubPoint = key.getPublic(); var x = pubPoint.getX(); var y = pubPoint.getY(); // Public Key MUST be either: // 1) '04' + hex string of x + hex string of y; or // 2) object with two hex string properties (x and y); or // 3) object with two buffer properties (x and y) var pub = pubPoint.encode('hex');                                 // case 1 var pub = { x: x.toString('hex'), y: y.toString('hex') };         // case 2 var pub = { x: x.toBuffer(), y: y.toBuffer() };                   // case 3 var pub = { x: x.toArrayLike(Buffer), y: y.toArrayLike(Buffer) }; // case 3 // Import public key var key = ec.keyFromPublic(pub, 'hex'); // Signature MUST be either: // 1) DER-encoded signature as hex-string; or // 2) DER-encoded signature as buffer; or // 3) object with two hex-string properties (r and s); or // 4) object with two buffer properties (r and s) var signature = '3046022100...'; // case 1 var signature = new Buffer('...'); // case 2 var signature = { r: 'b1fc...', s: '9c42...' }; // case 3 // Verify signature console.log(key.verify(msgHash, signature)); EdDSA var EdDSA = require('elliptic').eddsa; // Create and initialize EdDSA context // (better do it once and reuse it) var ec = new EdDSA('ed25519'); // Create key pair from secret var key = ec.keyFromSecret('693e3c...'); // hex string, array or Buffer // Sign the message's hash (input must be an array, or a hex-string) var msgHash = [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ]; var signature = key.sign(msgHash).toHex(); // Verify signature console.log(key.verify(msgHash, signature)); // CHECK WITH NO PRIVATE KEY // Import public key var pub = '0a1af638...'; var key = ec.keyFromPublic(pub, 'hex'); // Verify signature var signature = '70bed1...'; console.log(key.verify(msgHash, signature)); ECDH var EC = require('elliptic').ec; var ec = new EC('curve25519'); // Generate keys var key1 = ec.genKeyPair(); var key2 = ec.genKeyPair(); var shared1 = key1.derive(key2.getPublic()); var shared2 = key2.derive(key1.getPublic()); console.log('Both shared secrets are BN instances'); console.log(shared1.toString(16)); console.log(shared2.toString(16)); three and more members: var EC = require('elliptic').ec; var ec = new EC('curve25519'); var A = ec.genKeyPair(); var B = ec.genKeyPair(); var C = ec.genKeyPair(); var AB = A.getPublic().mul(B.getPrivate()) var BC = B.getPublic().mul(C.getPrivate()) var CA = C.getPublic().mul(A.getPrivate()) var ABC = AB.mul(C.getPrivate()) var BCA = BC.mul(A.getPrivate()) var CAB = CA.mul(B.getPrivate()) console.log(ABC.getX().toString(16)) console.log(BCA.getX().toString(16)) console.log(CAB.getX().toString(16)) NOTE: .derive() returns a BN instance. Supported curves Elliptic.js support following curve types: Short Weierstrass Montgomery Edwards Twisted Edwards Following curve 'presets' are embedded into the library: secp256k1 p192 p224 p256 p384 p521 curve25519 ed25519 NOTE: That curve25519 could not be used for ECDSA, use ed25519 instead. Implementation details ECDSA is using deterministic k value generation as per RFC6979. Most of the curve operations are performed on non-affine coordinates (either projective or extended), various windowing techniques are used for different cases. All operations are performed in reduction context using bn.js, hashing is provided by hash.js Related projects eccrypto: isomorphic implementation of ECDSA, ECDH and ECIES for both browserify and node (uses elliptic for browser and secp256k1-node for node) LICENSE This software is licensed under the MIT License. Copyright Fedor Indutny, 2014. Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the ""Software""), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. About Fast Elliptic Curve Cryptography in plain javascript Resources Readme Releases 85 tags Packages 0 No packages published Used by 5.6m + 5,608,770 Contributors 25 + 14 contributors Languages JavaScript 99.3% HTML 0.7% © 2021 GitHub, Inc. Terms Privacy Security Status Docs Contact GitHub Pricing API Training Blog About You can’t perform that action at this time. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."
535540,20210402,github.com,https://github.com/adobe-accessibility/Accessible-Mega-Menu,text/html,text/html,en,"GitHub - adobe-accessibility/Accessible-Mega-Menu: A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. Skip to content Sign up Sign up Why GitHub? Features → Mobile → Actions → Codespaces → Packages → Security → Code review → Project management → Integrations → GitHub Sponsors → Customer stories→ Team Enterprise Explore Explore GitHub → Learn and contribute Topics → Collections → Trending → Learning Lab → Open source guides → Connect with others The ReadME Project → Events → Community forum → GitHub Education → GitHub Stars program → Marketplace Pricing Plans → Compare plans → Contact Sales → Education → In this repository All GitHub ↵ Jump to ↵ No suggested jump to results In this repository All GitHub ↵ Jump to ↵ In this organization All GitHub ↵ Jump to ↵ In this repository All GitHub ↵ Jump to ↵ Sign in Sign up Sign up {{ message }} adobe-accessibility / Accessible-Mega-Menu Notifications Star 576 Fork 197 A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. Apache-2.0 License 576 stars 197 forks Star Notifications Code Issues 28 Pull requests 6 Actions Projects 0 Security Insights More Code Issues Pull requests Actions Projects Security Insights master Switch branches/tags Branches Tags Nothing to show {{ refName }} default View all branches Nothing to show {{ refName }} default View all tags 2 branches 0 tags Go to file Code Clone HTTPS GitHub CLI Use Git or checkout with SVN using the web URL. Work fast with our official CLI. Learn more. Open with GitHub Desktop Download ZIP Launching GitHub Desktop If nothing happens, download GitHub Desktop and try again. Go back Launching GitHub Desktop If nothing happens, download GitHub Desktop and try again. Go back Launching Xcode If nothing happens, download Xcode and try again. Go back Launching Visual Studio If nothing happens, download the GitHub extension for Visual Studio and try again. Go back Latest commit majornista fix evaluation for ChromeVox object … 5c070bc Dec 7, 2020 fix evaluation for ChromeVox object 5c070bc Git stats 39 commits Files Permalink Failed to load latest commit information. Type Name Latest commit message Commit time css Add openOnMouseover setting, and toggleButtonClass for responsive layout May 11, 2018 js fix evaluation for ChromeVox object Dec 7, 2020 third-party/jquery initial commit Aug 26, 2013 LICENSE initial commit Aug 26, 2013 NOTICE initial commit Aug 26, 2013 README.md initial commit Aug 26, 2013 index.html Updating WCAG 2.0 References to WCAG 2.1 (#67) Dec 4, 2020 package.json Updating repo references Jul 8, 2016 View code Accessible Mega Menu Keyboard Accessibility Screen Reader Accessibility Usage HTML JavaScript CSS README.md Accessible Mega Menu ========================= A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. It is modeled after the mega menu on adobe.com but has been simplified for use by others. An brief explanation of our interaction design choices can be found in a blog post at Mega menu accessibility on adobe.com. Content for the links and text within the mega menu comes from the Web Content Accessibility Guidelines (WCAG) 2.0. Keyboard Accessibility The accessible mega menu supports keyboard interaction modeled after the behavior described in the WAI-ARIA Menu or Menu bar (widget) design pattern, however we also try to respect users' general expectations for the behavior of links in a global navigation. To this end, the accessible mega menu implementation permits tab focus on each of the six top-level menu items. When one of the menu items has focus, pressing the Enter key, Spacebar or Down arrow will open the submenu panel, and pressing the Left or Right arrow key will shift focus to the adjacent menu item. Links within the submenu panels are included in the tab order when the panel is open. They can also be navigated with the arrow keys or by typing the first character in the link name, which speeds up keyboard navigation considerably. Pressing the Escape key closes the submenu and restores focus to the parent menu item. Screen Reader Accessibility The accessible mega menu models its use of WAI-ARIA Roles, States, and Properties after those described in the WAI-ARIA Menu or Menu bar (widget) design pattern with some notable exceptions, so that it behaves better with screen reader user expectations for global navigation. We don't use role=""menu"" for the menu container and role=""menuitem"" for each of the links therein, because if we do, assistive technology will no longer interpret the links as links, but instead, as menu items, and the links in our global navigation will no longer show up when a screen reader user executes a shortcut command to bring up a list of links in the page. We also want to maintain the semantic structure of the submenu panels in our mega menu; our links are organized into lists and separated by headings. Omitting role=""menu"" and role=""menuitem"" for the global navigation seems the safer way to go. Usage HTML The HTML structure for the mega menu is a nav element, or any other container element, containing a list. Each list item contains a link which is followed by a div or any other container element which will serve as the pop up panel. The panel can contain any html content; in the following example, each panel contains three lists of links. You can explicitly define groups within the panel, between which a user can navigate quickly using the left and right arrow keys; in the following example, the CSS class .sub-nav-group identifies a navigable group.     <nav>         <ul class=""nav-menu"">             <li class=""nav-item"">                 <a href=""?movie"">Movies</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=0"">Action &amp; Adventure</a></li>                         <li><a href=""?movie&genre=2"">Children &amp; Family</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=7"">Dramas</a></li>                         <li><a href=""?movie&genre=9"">Foreign</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=14"">Musicals</a></li>                         <li><a href=""?movie&genre=15"">Romance</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>             <li class=""nav-item"">                 <a href=""?tv"">TV Shows</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=20"">Classic TV</a></li>                         <li><a href=""?tv&genre=21"">Crime TV</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=27"">Reality TV</a></li>                         <li><a href=""?tv&genre=30"">TV Action</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=33"">TV Dramas</a></li>                         <li><a href=""?tv&genre=34"">TV Horror</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>         </ul>     </nav> By default, accessibleMegaMenu uses the the following CSS classes to define the top-level navigation items, panels, groups within the panels, and the hover, focus, and open states. It also defines a prefix for unique id strings, which are required to indicate the relationship of a top-level navigation item to the panel it controls.     defaults = {         /* unique ID's are required to indicate aria-owns, aria-controls and aria-labelledby */         uuidPrefix: ""accessible-megamenu"",                  /* default css class used to define the megamenu styling */         menuClass: ""accessible-megamenu"",                  /* default css class for a top-level navigation item in the megamenu */         topNavItemClass: ""accessible-megamenu-top-nav-item"",                  /* default css class for a megamenu panel */         panelClass: ""accessible-megamenu-panel"",                  /* default css class for a group of items within a megamenu panel */         panelGroupClass: ""accessible-megamenu-panel-group"",                  /* default css class for the hover state */         hoverClass: ""hover"",                  /* default css class for the focus state */         focusClass: ""focus"",                  /* default css class for the open state */         openClass: ""open""      } You can optionally override the defaults to use the CSS classes you may have already defined for your mega menu. JavaScript Be sure to include jQuery and the jquery-accessibleMegaMenu.js plugin script.     <script src=""//code.jquery.com/jquery-1.10.1.min.js""></script>     <script src=""js/jquery-accessibleMegaMenu.js""></script> The following initializes the first nav element in the document as an accessibleMegaMenu, with optional CSS class overrides.     $(""nav:first"").accessibleMegaMenu({         /* prefix for generated unique id attributes, which are required             to indicate aria-owns, aria-controls and aria-labelledby */         uuidPrefix: ""accessible-megamenu"",                  /* css class used to define the megamenu styling */         menuClass: ""nav-menu"",                  /* css class for a top-level navigation item in the megamenu */         topNavItemClass: ""nav-item"",                  /* css class for a megamenu panel */         panelClass: ""sub-nav"",                  /* css class for a group of items within a megamenu panel */         panelGroupClass: ""sub-nav-group"",                  /* css class for the hover state */         hoverClass: ""hover"",                  /* css class for the focus state */         focusClass: ""focus"",                  /* css class for the open state */         openClass: ""open""     }); CSS AccessibleMegaMenu handles the showing and hiding of panels by adding or removing a CSS class. No inline styles are added to hide elements or create animation between states. Following is some rudimentary CSS for our example which enables the showing/hiding of and the layout of lists panels in the mega menu.     /* mega menu list */     .nav-menu {         display: block;         position: relative;         list-style: none;         margin: 0;         padding: 0;         z-index: 15;     }     /* a top level navigation item in the mega menu */     .nav-item {         list-style: none;         display: inline-block;         padding: 0;         margin: 0;     }     /* first descendant link within a top level navigation item */     .nav-item > a {         position: relative;         display: inline-block;         padding: 0.5em 1em;         margin: 0 0 -1px 0;         border: 1px solid transparent;     }     /* focus/open states of first descendant link within a top level         navigation item */     .nav-item > a:focus,     .nav-item > a.open {         border: 1px solid #dedede;     }     /* open state of first descendant link within a top level         navigation item */     .nav-item > a.open {         background-color: #fff;         border-bottom: none;         z-index: 1;     }     /* sub-navigation panel */     .sub-nav {         position: absolute;         display: none;         top: 2.2em;         margin-top: -1px;         padding: 0.5em 1em;         border: 1px solid #dedede;         background-color: #fff;     }     /* sub-navigation panel open state */     .sub-nav.open {         display: block;     }     /* list of items within sub-navigation panel */     .sub-nav ul {         display: inline-block;         vertical-align: top;         margin: 0 1em 0 0;         padding: 0;     }     /* list item within sub-navigation panel */     .sub-nav li {         display: block;         list-style-type: none;         margin: 0;         padding: 0;     }   Putting it all together, here is the completed example:     <!doctype html>     <html lang=""en"">     <head>     <meta charset=""UTF-8"">     <title>Simple Accessible Mega Menu Example</title>     <style>         /* Rudimentary mega menu CSS for demonstration */             /* mega menu list */         .nav-menu {             display: block;             position: relative;             list-style: none;             margin: 0;             padding: 0;             z-index: 15;         }         /* a top level navigation item in the mega menu */         .nav-item {             list-style: none;             display: inline-block;             padding: 0;             margin: 0;         }         /* first descendant link within a top level navigation item */         .nav-item > a {             position: relative;             display: inline-block;             padding: 0.5em 1em;             margin: 0 0 -1px 0;             border: 1px solid transparent;         }         /* focus/open states of first descendant link within a top level             navigation item */         .nav-item > a:focus,         .nav-item > a.open {             border: 1px solid #dedede;         }         /* open state of first descendant link within a top level             navigation item */         .nav-item > a.open {             background-color: #fff;             border-bottom: none;             z-index: 1;         }         /* sub-navigation panel */         .sub-nav {             position: absolute;             display: none;             top: 2.2em;             margin-top: -1px;             padding: 0.5em 1em;             border: 1px solid #dedede;             background-color: #fff;         }         /* sub-navigation panel open state */         .sub-nav.open {             display: block;         }         /* list of items within sub-navigation panel */         .sub-nav ul {             display: inline-block;             vertical-align: top;             margin: 0 1em 0 0;             padding: 0;         }         /* list item within sub-navigation panel */         .sub-nav li {             display: block;             list-style-type: none;             margin: 0;             padding: 0;         }          </style>     </head>     <body>     <nav>         <ul class=""nav-menu"">             <li class=""nav-item"">                 <a href=""?movie"">Movies</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=0"">Action &amp; Adventure</a></li>                         <li><a href=""?movie&genre=2"">Children &amp; Family</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=7"">Dramas</a></li>                         <li><a href=""?movie&genre=9"">Foreign</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=14"">Musicals</a></li>                         <li><a href=""?movie&genre=15"">Romance</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>             <li class=""nav-item"">                 <a href=""?tv"">TV Shows</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=20"">Classic TV</a></li>                         <li><a href=""?tv&genre=21"">Crime TV</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=27"">Reality TV</a></li>                         <li><a href=""?tv&genre=30"">TV Action</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=33"">TV Dramas</a></li>                         <li><a href=""?tv&genre=34"">TV Horror</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>         </ul>     </nav>          <!-- include jquery -->     <script src=""//code.jquery.com/jquery-1.10.1.min.js""></script>     <!-- include the jquery-accessibleMegaMenu plugin script -->     <script src=""js/jquery-accessibleMegaMenu.js""></script>     <!-- initialize a selector as an accessibleMegaMenu -->     <script>         $(""nav:first"").accessibleMegaMenu({             /* prefix for generated unique id attributes, which are required                 to indicate aria-owns, aria-controls and aria-labelledby */             uuidPrefix: ""accessible-megamenu"",                          /* css class used to define the megamenu styling */             menuClass: ""nav-menu"",                          /* css class for a top-level navigation item in the megamenu */             topNavItemClass: ""nav-item"",                          /* css class for a megamenu panel */             panelClass: ""sub-nav"",                          /* css class for a group of items within a megamenu panel */             panelGroupClass: ""sub-nav-group"",                          /* css class for the hover state */             hoverClass: ""hover"",                          /* css class for the focus state */             focusClass: ""focus"",                          /* css class for the open state */             openClass: ""open""         });     </script>     </body>     </html> About A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. Resources Readme License Apache-2.0 License Releases No releases published Packages 0 No packages published Used by 15 + 7 Contributors 7 Languages HTML 71.8% CSS 26.4% JavaScript 1.8% © 2021 GitHub, Inc. Terms Privacy Security Status Docs Contact GitHub Pricing API Training Blog About You can’t perform that action at this time. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."
543201,20210402,github.com,https://github.com/crypto-browserify/crypto-browserify,text/html,text/html,en,"GitHub - crypto-browserify/crypto-browserify: partial implementation of node's `crypto` for the browser Skip to content Sign up Sign up Why GitHub? Features → Mobile → Actions → Codespaces → Packages → Security → Code review → Project management → Integrations → GitHub Sponsors → Customer stories→ Team Enterprise Explore Explore GitHub → Learn and contribute Topics → Collections → Trending → Learning Lab → Open source guides → Connect with others The ReadME Project → Events → Community forum → GitHub Education → GitHub Stars program → Marketplace Pricing Plans → Compare plans → Contact Sales → Education → In this repository All GitHub ↵ Jump to ↵ No suggested jump to results In this repository All GitHub ↵ Jump to ↵ In this organization All GitHub ↵ Jump to ↵ In this repository All GitHub ↵ Jump to ↵ Sign in Sign up Sign up {{ message }} crypto-browserify / crypto-browserify Notifications Star 472 Fork 153 partial implementation of node's `crypto` for the browser MIT License 472 stars 153 forks Star Notifications Code Issues 19 Pull requests 6 Actions Projects 0 Wiki Security Insights More Code Issues Pull requests Actions Projects Wiki Security Insights master Switch branches/tags Branches Tags Nothing to show {{ refName }} default View all branches Nothing to show {{ refName }} default View all tags 6 branches 31 tags Go to file Code Clone HTTPS GitHub CLI Use Git or checkout with SVN using the web URL. Work fast with our official CLI. Learn more. Open with GitHub Desktop Download ZIP Launching GitHub Desktop If nothing happens, download GitHub Desktop and try again. Go back Launching GitHub Desktop If nothing happens, download GitHub Desktop and try again. Go back Launching Xcode If nothing happens, download Xcode and try again. Go back Launching Visual Studio If nothing happens, download the GitHub extension for Visual Studio and try again. Go back Latest commit calvinmetcalf fix debian issue (maybe) … 460a13b Feb 9, 2018 fix debian issue (maybe) 460a13b Git stats 362 commits Files Permalink Failed to load latest commit information. Type Name Latest commit message Commit time example test .gitignore .travis.yml .zuul.yml LICENSE README.md index.js package.json View code crypto-browserify todo contributions License README.md crypto-browserify A port of node's crypto module to the browser. The goal of this module is to reimplement node's crypto module, in pure javascript so that it can run in the browser. Here is the subset that is currently implemented: createHash (sha1, sha224, sha256, sha384, sha512, md5, rmd160) createHmac (sha1, sha224, sha256, sha384, sha512, md5, rmd160) pbkdf2 pbkdf2Sync randomBytes pseudoRandomBytes createCipher (aes) createDecipher (aes) createDiffieHellman createSign (rsa, ecdsa) createVerify (rsa, ecdsa) createECDH (secp256k1) publicEncrypt/privateDecrypt (rsa) privateEncrypt/publicDecrypt (rsa) todo these features from node's crypto are still unimplemented. createCredentials contributions If you are interested in writing a feature, please implement as a new module, which will be incorporated into crypto-browserify as a dependency. All deps must be compatible with node's crypto (generate example inputs and outputs with node, and save base64 strings inside JSON, so that tests can run in the browser. see sha.js Crypto is extra serious so please do not hesitate to review the code, and post comments if you do. License MIT About partial implementation of node's `crypto` for the browser Resources Readme License MIT License Releases 31 tags Packages 0 No packages published Used by 5.7m + 5,712,078 Contributors 24 + 13 contributors Languages JavaScript 99.1% HTML 0.9% © 2021 GitHub, Inc. Terms Privacy Security Status Docs Contact GitHub Pricing API Training Blog About You can’t perform that action at this time. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."
543204,20210402,github.com,https://github.com/indutny/elliptic/issues,text/html,text/html,en,"Issues · indutny/elliptic · GitHub Skip to content Sign up Sign up Why GitHub? Features → Mobile → Actions → Codespaces → Packages → Security → Code review → Project management → Integrations → GitHub Sponsors → Customer stories→ Team Enterprise Explore Explore GitHub → Learn and contribute Topics → Collections → Trending → Learning Lab → Open source guides → Connect with others The ReadME Project → Events → Community forum → GitHub Education → GitHub Stars program → Marketplace Pricing Plans → Compare plans → Contact Sales → Education → In this repository All GitHub ↵ Jump to ↵ No suggested jump to results In this repository All GitHub ↵ Jump to ↵ In this user All GitHub ↵ Jump to ↵ In this repository All GitHub ↵ Jump to ↵ Sign in Sign up Sign up {{ message }} indutny / elliptic Notifications Star 1.2k Fork 297 Code Issues 74 Pull requests 18 Actions Projects 0 Wiki Security Insights More Code Issues Pull requests Actions Projects Wiki Security Insights Labels 8 Milestones 0 Labels 8 Milestones 0 New issue Have a question about this project? Sign up for a free GitHub account to open an issue and contact its maintainers and the community. Pick a username Email Address Password Sign up for GitHub By clicking “Sign up for GitHub”, you agree to our terms of service and privacy statement. We’ll occasionally send you account related emails. Already on GitHub? Sign in to your account 74 Open 97 Closed 74 Open 97 Closed Author Filter by author author: Filter by this user Label Filter by label Use alt + click/return to exclude labels. Projects Filter by project Milestones Filter by milestone Assignee Filter by who’s assigned Sort Sort by Newest Oldest Most commented Least commented Recently updated Least recently updated Most reactions 👍 👎 😄 🎉 😕 ❤️ 🚀 👀 How to use keys with crypto.subtle #255 opened Apr 1, 2021 by DominicTobias-b1 EDDSA.decodeInt should fails or reduce by dafault? #254 opened Mar 18, 2021 by mahnunchik Sad state #251 opened Mar 11, 2021 by berkus EDDSA.decodePoint should fails on ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff #250 opened Mar 3, 2021 by mahnunchik 14 Add endian argument to bn.js toString method #249 opened Mar 2, 2021 by mahnunchik EDDSA decodePoint doesn't support Buffer as argument #248 opened Mar 2, 2021 by mahnunchik How to decipher the encrypted message? #245 opened Jan 27, 2021 by istabraq-iot Montgomery Curve25519 is not openssl compatible #243 opened Dec 28, 2020 by jc-lab 3 Curves p384 and p521 produce incorrect results #239 opened Oct 18, 2020 by guidovranken i want to use this library with c# #238 opened Oct 10, 2020 by medozeus Elliptic.js support following curve types: #236 opened Oct 5, 2020 by medozeus The Elliptic package 6.5.2 for Node.js allows ECDSA signature malleability via variations in encoding, leading '\0' bytes, or integer overflows. #235 opened Oct 1, 2020 by bsomeshwer EdDSA: What is a reason to manipulate with bytes? #233 opened Aug 27, 2020 by mahnunchik why use derive method get ECDH key，i got different length #230 opened Jul 10, 2020 by cqupt-yifanwu 4 Why do I generate my local test path in chunk-vendors when packing with NPM #229 opened Jun 22, 2020 by Anthonychen1994 1 TypedArray support ? #228 opened Jun 20, 2020 by dojyorin Is there way to generate PKCS#8 private key from Pem format ECC Private key #225 opened Apr 28, 2020 by sureshreddygovindu Signature validation in python. Prefix configuration? #224 opened Apr 25, 2020 by amrbz is it possible to do assymetric encryption? #223 opened Apr 7, 2020 by maroodb 1 Missing infinity point encoding #218 opened Feb 21, 2020 by catenacyber 1 ECDH P-521 public key point not on curve according to java (clojure) #216 opened Feb 11, 2020 by slhabity 1 how save and load private / publick key in pem or other format #215 opened Jan 27, 2020 by fturiot 2 How to pair client to server BTCPay NodeJS client? #214 opened Jan 21, 2020 by savshit 1 How to pair client to server BTCPay NodeJS client? #213 opened Jan 21, 2020 by savshit curve25519 and BouncyCastle(bc) in c# Different compute shared secret #209 opened Dec 11, 2019 by shamohai 2 Previous 1 2 3 Next Previous Next ProTip! Adding no:label will show everything without a label. © 2021 GitHub, Inc. Terms Privacy Security Status Docs Contact GitHub Pricing API Training Blog About You can’t perform that action at this time. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."
543206,20210402,github.com,https://github.com/indutny/elliptic,text/html,text/html,en,"GitHub - indutny/elliptic: Fast Elliptic Curve Cryptography in plain javascript Skip to content Sign up Sign up Why GitHub? Features → Mobile → Actions → Codespaces → Packages → Security → Code review → Project management → Integrations → GitHub Sponsors → Customer stories→ Team Enterprise Explore Explore GitHub → Learn and contribute Topics → Collections → Trending → Learning Lab → Open source guides → Connect with others The ReadME Project → Events → Community forum → GitHub Education → GitHub Stars program → Marketplace Pricing Plans → Compare plans → Contact Sales → Education → In this repository All GitHub ↵ Jump to ↵ No suggested jump to results In this repository All GitHub ↵ Jump to ↵ In this user All GitHub ↵ Jump to ↵ In this repository All GitHub ↵ Jump to ↵ Sign in Sign up Sign up {{ message }} indutny / elliptic Notifications Star 1.2k Fork 297 Fast Elliptic Curve Cryptography in plain javascript 1.2k stars 297 forks Star Notifications Code Issues 74 Pull requests 18 Actions Projects 0 Wiki Security Insights More Code Issues Pull requests Actions Projects Wiki Security Insights master Switch branches/tags Branches Tags Nothing to show {{ refName }} default View all branches Nothing to show {{ refName }} default View all tags 2 branches 85 tags Go to file Code Clone HTTPS GitHub CLI Use Git or checkout with SVN using the web URL. Work fast with our official CLI. Learn more. Open with GitHub Desktop Download ZIP Launching GitHub Desktop If nothing happens, download GitHub Desktop and try again. Go back Launching GitHub Desktop If nothing happens, download GitHub Desktop and try again. Go back Launching Xcode If nothing happens, download Xcode and try again. Go back Launching Visual Studio If nothing happens, download the GitHub extension for Visual Studio and try again. Go back Latest commit indutny 6.5.4 … 43ac7f2 Feb 2, 2021 6.5.4 43ac7f2 Git stats 331 commits Files Permalink Failed to load latest commit information. Type Name Latest commit message Commit time benchmarks package: remove Makefile and dist Jan 29, 2016 dist 6.5.4 Feb 2, 2021 lib ec: validate that a point before deriving keys Feb 2, 2021 test ec: validate that a point before deriving keys Feb 2, 2021 .codeclimate.yml test: improvements with Saucelabs/Codeclimate Mar 31, 2016 .eslintignore lib: relint using eslint Aug 2, 2020 .eslintrc.js lib: relint using eslint Aug 2, 2020 .gitignore test: improvements with Saucelabs/Codeclimate Mar 31, 2016 .npmignore npmignore: dist May 20, 2016 .travis.yml travis: really move on Jun 26, 2019 Gruntfile.js grunt: fix standalone build May 25, 2016 README.md readme: update example Mar 23, 2017 package-lock.json 6.5.4 Feb 2, 2021 package.json 6.5.4 Feb 2, 2021 View code Elliptic Incentive Benchmarks API ECDSA EdDSA ECDH Supported curves Implementation details Related projects LICENSE README.md Elliptic Fast elliptic-curve cryptography in a plain javascript implementation. NOTE: Please take a look at http://safecurves.cr.yp.to/ before choosing a curve for your cryptography operations. Incentive ECC is much slower than regular RSA cryptography, the JS implementations are even more slower. Benchmarks $ node benchmarks/index.js Benchmarking: sign elliptic#sign x 262 ops/sec ±0.51% (177 runs sampled) eccjs#sign x 55.91 ops/sec ±0.90% (144 runs sampled) ------------------------ Fastest is elliptic#sign ======================== Benchmarking: verify elliptic#verify x 113 ops/sec ±0.50% (166 runs sampled) eccjs#verify x 48.56 ops/sec ±0.36% (125 runs sampled) ------------------------ Fastest is elliptic#verify ======================== Benchmarking: gen elliptic#gen x 294 ops/sec ±0.43% (176 runs sampled) eccjs#gen x 62.25 ops/sec ±0.63% (129 runs sampled) ------------------------ Fastest is elliptic#gen ======================== Benchmarking: ecdh elliptic#ecdh x 136 ops/sec ±0.85% (156 runs sampled) ------------------------ Fastest is elliptic#ecdh ======================== API ECDSA var EC = require('elliptic').ec; // Create and initialize EC context // (better do it once and reuse it) var ec = new EC('secp256k1'); // Generate keys var key = ec.genKeyPair(); // Sign the message's hash (input must be an array, or a hex-string) var msgHash = [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ]; var signature = key.sign(msgHash); // Export DER encoded signature in Array var derSign = signature.toDER(); // Verify signature console.log(key.verify(msgHash, derSign)); // CHECK WITH NO PRIVATE KEY var pubPoint = key.getPublic(); var x = pubPoint.getX(); var y = pubPoint.getY(); // Public Key MUST be either: // 1) '04' + hex string of x + hex string of y; or // 2) object with two hex string properties (x and y); or // 3) object with two buffer properties (x and y) var pub = pubPoint.encode('hex');                                 // case 1 var pub = { x: x.toString('hex'), y: y.toString('hex') };         // case 2 var pub = { x: x.toBuffer(), y: y.toBuffer() };                   // case 3 var pub = { x: x.toArrayLike(Buffer), y: y.toArrayLike(Buffer) }; // case 3 // Import public key var key = ec.keyFromPublic(pub, 'hex'); // Signature MUST be either: // 1) DER-encoded signature as hex-string; or // 2) DER-encoded signature as buffer; or // 3) object with two hex-string properties (r and s); or // 4) object with two buffer properties (r and s) var signature = '3046022100...'; // case 1 var signature = new Buffer('...'); // case 2 var signature = { r: 'b1fc...', s: '9c42...' }; // case 3 // Verify signature console.log(key.verify(msgHash, signature)); EdDSA var EdDSA = require('elliptic').eddsa; // Create and initialize EdDSA context // (better do it once and reuse it) var ec = new EdDSA('ed25519'); // Create key pair from secret var key = ec.keyFromSecret('693e3c...'); // hex string, array or Buffer // Sign the message's hash (input must be an array, or a hex-string) var msgHash = [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ]; var signature = key.sign(msgHash).toHex(); // Verify signature console.log(key.verify(msgHash, signature)); // CHECK WITH NO PRIVATE KEY // Import public key var pub = '0a1af638...'; var key = ec.keyFromPublic(pub, 'hex'); // Verify signature var signature = '70bed1...'; console.log(key.verify(msgHash, signature)); ECDH var EC = require('elliptic').ec; var ec = new EC('curve25519'); // Generate keys var key1 = ec.genKeyPair(); var key2 = ec.genKeyPair(); var shared1 = key1.derive(key2.getPublic()); var shared2 = key2.derive(key1.getPublic()); console.log('Both shared secrets are BN instances'); console.log(shared1.toString(16)); console.log(shared2.toString(16)); three and more members: var EC = require('elliptic').ec; var ec = new EC('curve25519'); var A = ec.genKeyPair(); var B = ec.genKeyPair(); var C = ec.genKeyPair(); var AB = A.getPublic().mul(B.getPrivate()) var BC = B.getPublic().mul(C.getPrivate()) var CA = C.getPublic().mul(A.getPrivate()) var ABC = AB.mul(C.getPrivate()) var BCA = BC.mul(A.getPrivate()) var CAB = CA.mul(B.getPrivate()) console.log(ABC.getX().toString(16)) console.log(BCA.getX().toString(16)) console.log(CAB.getX().toString(16)) NOTE: .derive() returns a BN instance. Supported curves Elliptic.js support following curve types: Short Weierstrass Montgomery Edwards Twisted Edwards Following curve 'presets' are embedded into the library: secp256k1 p192 p224 p256 p384 p521 curve25519 ed25519 NOTE: That curve25519 could not be used for ECDSA, use ed25519 instead. Implementation details ECDSA is using deterministic k value generation as per RFC6979. Most of the curve operations are performed on non-affine coordinates (either projective or extended), various windowing techniques are used for different cases. All operations are performed in reduction context using bn.js, hashing is provided by hash.js Related projects eccrypto: isomorphic implementation of ECDSA, ECDH and ECIES for both browserify and node (uses elliptic for browser and secp256k1-node for node) LICENSE This software is licensed under the MIT License. Copyright Fedor Indutny, 2014. Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the ""Software""), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. About Fast Elliptic Curve Cryptography in plain javascript Resources Readme Releases 85 tags Packages 0 No packages published Used by 5.6m + 5,635,993 Contributors 25 + 14 contributors Languages JavaScript 99.3% HTML 0.7% © 2021 GitHub, Inc. Terms Privacy Security Status Docs Contact GitHub Pricing API Training Blog About You can’t perform that action at this time. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."
546090,20210409,github.com,https://github.com/adobe-accessibility/Accessible-Mega-Menu,text/html,text/html,en,"GitHub - adobe-accessibility/Accessible-Mega-Menu: A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. Skip to content Sign up Sign up Why GitHub? Features → Mobile → Actions → Codespaces → Packages → Security → Code review → Project management → Integrations → GitHub Sponsors → Customer stories→ Team Enterprise Explore Explore GitHub → Learn and contribute Topics → Collections → Trending → Learning Lab → Open source guides → Connect with others The ReadME Project → Events → Community forum → GitHub Education → GitHub Stars program → Marketplace Pricing Plans → Compare plans → Contact Sales → Education → In this repository All GitHub ↵ Jump to ↵ No suggested jump to results In this repository All GitHub ↵ Jump to ↵ In this organization All GitHub ↵ Jump to ↵ In this repository All GitHub ↵ Jump to ↵ Sign in Sign up Sign up {{ message }} adobe-accessibility / Accessible-Mega-Menu Notifications Star 577 Fork 197 A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. Apache-2.0 License 577 stars 197 forks Star Notifications Code Issues 28 Pull requests 6 Actions Projects 0 Security Insights More Code Issues Pull requests Actions Projects Security Insights master Switch branches/tags Branches Tags Nothing to show {{ refName }} default View all branches Nothing to show {{ refName }} default View all tags 2 branches 0 tags Go to file Code Clone HTTPS GitHub CLI Use Git or checkout with SVN using the web URL. Work fast with our official CLI. Learn more. Open with GitHub Desktop Download ZIP Launching GitHub Desktop If nothing happens, download GitHub Desktop and try again. Go back Launching GitHub Desktop If nothing happens, download GitHub Desktop and try again. Go back Launching Xcode If nothing happens, download Xcode and try again. Go back Launching Visual Studio If nothing happens, download the GitHub extension for Visual Studio and try again. Go back Latest commit Git stats 39 commits Files Permalink Failed to load latest commit information. Type Name Latest commit message Commit time css js third-party/jquery LICENSE NOTICE README.md index.html package.json View code Accessible Mega Menu Keyboard Accessibility Screen Reader Accessibility Usage HTML JavaScript CSS README.md Accessible Mega Menu ========================= A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. It is modeled after the mega menu on adobe.com but has been simplified for use by others. An brief explanation of our interaction design choices can be found in a blog post at Mega menu accessibility on adobe.com. Content for the links and text within the mega menu comes from the Web Content Accessibility Guidelines (WCAG) 2.0. Keyboard Accessibility The accessible mega menu supports keyboard interaction modeled after the behavior described in the WAI-ARIA Menu or Menu bar (widget) design pattern, however we also try to respect users' general expectations for the behavior of links in a global navigation. To this end, the accessible mega menu implementation permits tab focus on each of the six top-level menu items. When one of the menu items has focus, pressing the Enter key, Spacebar or Down arrow will open the submenu panel, and pressing the Left or Right arrow key will shift focus to the adjacent menu item. Links within the submenu panels are included in the tab order when the panel is open. They can also be navigated with the arrow keys or by typing the first character in the link name, which speeds up keyboard navigation considerably. Pressing the Escape key closes the submenu and restores focus to the parent menu item. Screen Reader Accessibility The accessible mega menu models its use of WAI-ARIA Roles, States, and Properties after those described in the WAI-ARIA Menu or Menu bar (widget) design pattern with some notable exceptions, so that it behaves better with screen reader user expectations for global navigation. We don't use role=""menu"" for the menu container and role=""menuitem"" for each of the links therein, because if we do, assistive technology will no longer interpret the links as links, but instead, as menu items, and the links in our global navigation will no longer show up when a screen reader user executes a shortcut command to bring up a list of links in the page. We also want to maintain the semantic structure of the submenu panels in our mega menu; our links are organized into lists and separated by headings. Omitting role=""menu"" and role=""menuitem"" for the global navigation seems the safer way to go. Usage HTML The HTML structure for the mega menu is a nav element, or any other container element, containing a list. Each list item contains a link which is followed by a div or any other container element which will serve as the pop up panel. The panel can contain any html content; in the following example, each panel contains three lists of links. You can explicitly define groups within the panel, between which a user can navigate quickly using the left and right arrow keys; in the following example, the CSS class .sub-nav-group identifies a navigable group.     <nav>         <ul class=""nav-menu"">             <li class=""nav-item"">                 <a href=""?movie"">Movies</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=0"">Action &amp; Adventure</a></li>                         <li><a href=""?movie&genre=2"">Children &amp; Family</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=7"">Dramas</a></li>                         <li><a href=""?movie&genre=9"">Foreign</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=14"">Musicals</a></li>                         <li><a href=""?movie&genre=15"">Romance</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>             <li class=""nav-item"">                 <a href=""?tv"">TV Shows</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=20"">Classic TV</a></li>                         <li><a href=""?tv&genre=21"">Crime TV</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=27"">Reality TV</a></li>                         <li><a href=""?tv&genre=30"">TV Action</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=33"">TV Dramas</a></li>                         <li><a href=""?tv&genre=34"">TV Horror</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>         </ul>     </nav> By default, accessibleMegaMenu uses the the following CSS classes to define the top-level navigation items, panels, groups within the panels, and the hover, focus, and open states. It also defines a prefix for unique id strings, which are required to indicate the relationship of a top-level navigation item to the panel it controls.     defaults = {         /* unique ID's are required to indicate aria-owns, aria-controls and aria-labelledby */         uuidPrefix: ""accessible-megamenu"",                  /* default css class used to define the megamenu styling */         menuClass: ""accessible-megamenu"",                  /* default css class for a top-level navigation item in the megamenu */         topNavItemClass: ""accessible-megamenu-top-nav-item"",                  /* default css class for a megamenu panel */         panelClass: ""accessible-megamenu-panel"",                  /* default css class for a group of items within a megamenu panel */         panelGroupClass: ""accessible-megamenu-panel-group"",                  /* default css class for the hover state */         hoverClass: ""hover"",                  /* default css class for the focus state */         focusClass: ""focus"",                  /* default css class for the open state */         openClass: ""open""      } You can optionally override the defaults to use the CSS classes you may have already defined for your mega menu. JavaScript Be sure to include jQuery and the jquery-accessibleMegaMenu.js plugin script.     <script src=""//code.jquery.com/jquery-1.10.1.min.js""></script>     <script src=""js/jquery-accessibleMegaMenu.js""></script> The following initializes the first nav element in the document as an accessibleMegaMenu, with optional CSS class overrides.     $(""nav:first"").accessibleMegaMenu({         /* prefix for generated unique id attributes, which are required             to indicate aria-owns, aria-controls and aria-labelledby */         uuidPrefix: ""accessible-megamenu"",                  /* css class used to define the megamenu styling */         menuClass: ""nav-menu"",                  /* css class for a top-level navigation item in the megamenu */         topNavItemClass: ""nav-item"",                  /* css class for a megamenu panel */         panelClass: ""sub-nav"",                  /* css class for a group of items within a megamenu panel */         panelGroupClass: ""sub-nav-group"",                  /* css class for the hover state */         hoverClass: ""hover"",                  /* css class for the focus state */         focusClass: ""focus"",                  /* css class for the open state */         openClass: ""open""     }); CSS AccessibleMegaMenu handles the showing and hiding of panels by adding or removing a CSS class. No inline styles are added to hide elements or create animation between states. Following is some rudimentary CSS for our example which enables the showing/hiding of and the layout of lists panels in the mega menu.     /* mega menu list */     .nav-menu {         display: block;         position: relative;         list-style: none;         margin: 0;         padding: 0;         z-index: 15;     }     /* a top level navigation item in the mega menu */     .nav-item {         list-style: none;         display: inline-block;         padding: 0;         margin: 0;     }     /* first descendant link within a top level navigation item */     .nav-item > a {         position: relative;         display: inline-block;         padding: 0.5em 1em;         margin: 0 0 -1px 0;         border: 1px solid transparent;     }     /* focus/open states of first descendant link within a top level         navigation item */     .nav-item > a:focus,     .nav-item > a.open {         border: 1px solid #dedede;     }     /* open state of first descendant link within a top level         navigation item */     .nav-item > a.open {         background-color: #fff;         border-bottom: none;         z-index: 1;     }     /* sub-navigation panel */     .sub-nav {         position: absolute;         display: none;         top: 2.2em;         margin-top: -1px;         padding: 0.5em 1em;         border: 1px solid #dedede;         background-color: #fff;     }     /* sub-navigation panel open state */     .sub-nav.open {         display: block;     }     /* list of items within sub-navigation panel */     .sub-nav ul {         display: inline-block;         vertical-align: top;         margin: 0 1em 0 0;         padding: 0;     }     /* list item within sub-navigation panel */     .sub-nav li {         display: block;         list-style-type: none;         margin: 0;         padding: 0;     }   Putting it all together, here is the completed example:     <!doctype html>     <html lang=""en"">     <head>     <meta charset=""UTF-8"">     <title>Simple Accessible Mega Menu Example</title>     <style>         /* Rudimentary mega menu CSS for demonstration */             /* mega menu list */         .nav-menu {             display: block;             position: relative;             list-style: none;             margin: 0;             padding: 0;             z-index: 15;         }         /* a top level navigation item in the mega menu */         .nav-item {             list-style: none;             display: inline-block;             padding: 0;             margin: 0;         }         /* first descendant link within a top level navigation item */         .nav-item > a {             position: relative;             display: inline-block;             padding: 0.5em 1em;             margin: 0 0 -1px 0;             border: 1px solid transparent;         }         /* focus/open states of first descendant link within a top level             navigation item */         .nav-item > a:focus,         .nav-item > a.open {             border: 1px solid #dedede;         }         /* open state of first descendant link within a top level             navigation item */         .nav-item > a.open {             background-color: #fff;             border-bottom: none;             z-index: 1;         }         /* sub-navigation panel */         .sub-nav {             position: absolute;             display: none;             top: 2.2em;             margin-top: -1px;             padding: 0.5em 1em;             border: 1px solid #dedede;             background-color: #fff;         }         /* sub-navigation panel open state */         .sub-nav.open {             display: block;         }         /* list of items within sub-navigation panel */         .sub-nav ul {             display: inline-block;             vertical-align: top;             margin: 0 1em 0 0;             padding: 0;         }         /* list item within sub-navigation panel */         .sub-nav li {             display: block;             list-style-type: none;             margin: 0;             padding: 0;         }          </style>     </head>     <body>     <nav>         <ul class=""nav-menu"">             <li class=""nav-item"">                 <a href=""?movie"">Movies</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=0"">Action &amp; Adventure</a></li>                         <li><a href=""?movie&genre=2"">Children &amp; Family</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=7"">Dramas</a></li>                         <li><a href=""?movie&genre=9"">Foreign</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=14"">Musicals</a></li>                         <li><a href=""?movie&genre=15"">Romance</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>             <li class=""nav-item"">                 <a href=""?tv"">TV Shows</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=20"">Classic TV</a></li>                         <li><a href=""?tv&genre=21"">Crime TV</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=27"">Reality TV</a></li>                         <li><a href=""?tv&genre=30"">TV Action</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=33"">TV Dramas</a></li>                         <li><a href=""?tv&genre=34"">TV Horror</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>         </ul>     </nav>          <!-- include jquery -->     <script src=""//code.jquery.com/jquery-1.10.1.min.js""></script>     <!-- include the jquery-accessibleMegaMenu plugin script -->     <script src=""js/jquery-accessibleMegaMenu.js""></script>     <!-- initialize a selector as an accessibleMegaMenu -->     <script>         $(""nav:first"").accessibleMegaMenu({             /* prefix for generated unique id attributes, which are required                 to indicate aria-owns, aria-controls and aria-labelledby */             uuidPrefix: ""accessible-megamenu"",                          /* css class used to define the megamenu styling */             menuClass: ""nav-menu"",                          /* css class for a top-level navigation item in the megamenu */             topNavItemClass: ""nav-item"",                          /* css class for a megamenu panel */             panelClass: ""sub-nav"",                          /* css class for a group of items within a megamenu panel */             panelGroupClass: ""sub-nav-group"",                          /* css class for the hover state */             hoverClass: ""hover"",                          /* css class for the focus state */             focusClass: ""focus"",                          /* css class for the open state */             openClass: ""open""         });     </script>     </body>     </html> About A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. Resources Readme License Apache-2.0 License Releases No releases published Packages 0 No packages published Used by 15 + 7 Contributors 7 Languages HTML 71.8% CSS 26.4% JavaScript 1.8% © 2021 GitHub, Inc. Terms Privacy Security Status Docs Contact GitHub Pricing API Training Blog About You can’t perform that action at this time. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."
556165,20210409,github.com,https://github.com/crypto-browserify/crypto-browserify,text/html,text/html,en,"GitHub - crypto-browserify/crypto-browserify: partial implementation of node's `crypto` for the browser Skip to content Sign up Sign up Why GitHub? Features → Mobile → Actions → Codespaces → Packages → Security → Code review → Project management → Integrations → GitHub Sponsors → Customer stories→ Team Enterprise Explore Explore GitHub → Learn and contribute Topics → Collections → Trending → Learning Lab → Open source guides → Connect with others The ReadME Project → Events → Community forum → GitHub Education → GitHub Stars program → Marketplace Pricing Plans → Compare plans → Contact Sales → Education → In this repository All GitHub ↵ Jump to ↵ No suggested jump to results In this repository All GitHub ↵ Jump to ↵ In this organization All GitHub ↵ Jump to ↵ In this repository All GitHub ↵ Jump to ↵ Sign in Sign up Sign up {{ message }} crypto-browserify / crypto-browserify Notifications Star 472 Fork 153 partial implementation of node's `crypto` for the browser MIT License 472 stars 153 forks Star Notifications Code Issues 19 Pull requests 6 Actions Projects 0 Wiki Security Insights More Code Issues Pull requests Actions Projects Wiki Security Insights master Switch branches/tags Branches Tags Nothing to show {{ refName }} default View all branches Nothing to show {{ refName }} default View all tags 6 branches 31 tags Go to file Code Clone HTTPS GitHub CLI Use Git or checkout with SVN using the web URL. Work fast with our official CLI. Learn more. Open with GitHub Desktop Download ZIP Launching GitHub Desktop If nothing happens, download GitHub Desktop and try again. Go back Launching GitHub Desktop If nothing happens, download GitHub Desktop and try again. Go back Launching Xcode If nothing happens, download Xcode and try again. Go back Launching Visual Studio If nothing happens, download the GitHub extension for Visual Studio and try again. Go back Latest commit calvinmetcalf fix debian issue (maybe) … 460a13b Feb 9, 2018 fix debian issue (maybe) 460a13b Git stats 362 commits Files Permalink Failed to load latest commit information. Type Name Latest commit message Commit time example add standard 5.0.0 Aug 13, 2015 test fix debian issue (maybe) Feb 9, 2018 .gitignore Add .gitignore Aug 5, 2013 .travis.yml saucelabs aparently only goes back to 7 Oct 19, 2017 .zuul.yml add zuul and browser tests Oct 3, 2015 LICENSE Add MIT license Sep 20, 2013 README.md add privateEncrypt/publicDecrypt to README Dec 14, 2015 index.js add rndom fill Oct 18, 2017 package.json 3.12.0 Nov 3, 2017 View code crypto-browserify todo contributions License README.md crypto-browserify A port of node's crypto module to the browser. The goal of this module is to reimplement node's crypto module, in pure javascript so that it can run in the browser. Here is the subset that is currently implemented: createHash (sha1, sha224, sha256, sha384, sha512, md5, rmd160) createHmac (sha1, sha224, sha256, sha384, sha512, md5, rmd160) pbkdf2 pbkdf2Sync randomBytes pseudoRandomBytes createCipher (aes) createDecipher (aes) createDiffieHellman createSign (rsa, ecdsa) createVerify (rsa, ecdsa) createECDH (secp256k1) publicEncrypt/privateDecrypt (rsa) privateEncrypt/publicDecrypt (rsa) todo these features from node's crypto are still unimplemented. createCredentials contributions If you are interested in writing a feature, please implement as a new module, which will be incorporated into crypto-browserify as a dependency. All deps must be compatible with node's crypto (generate example inputs and outputs with node, and save base64 strings inside JSON, so that tests can run in the browser. see sha.js Crypto is extra serious so please do not hesitate to review the code, and post comments if you do. License MIT About partial implementation of node's `crypto` for the browser Resources Readme License MIT License Releases 31 tags Packages 0 No packages published Used by 5.8m + 5,751,394 Contributors 24 + 13 contributors Languages JavaScript 99.1% HTML 0.9% © 2021 GitHub, Inc. Terms Privacy Security Status Docs Contact GitHub Pricing API Training Blog About You can’t perform that action at this time. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."
556167,20210409,github.com,https://github.com/indutny/elliptic/issues,text/html,text/html,en,"Issues · indutny/elliptic · GitHub Skip to content Sign up Sign up Why GitHub? Features → Mobile → Actions → Codespaces → Packages → Security → Code review → Project management → Integrations → GitHub Sponsors → Customer stories→ Team Enterprise Explore Explore GitHub → Learn and contribute Topics → Collections → Trending → Learning Lab → Open source guides → Connect with others The ReadME Project → Events → Community forum → GitHub Education → GitHub Stars program → Marketplace Pricing Plans → Compare plans → Contact Sales → Education → In this repository All GitHub ↵ Jump to ↵ No suggested jump to results In this repository All GitHub ↵ Jump to ↵ In this user All GitHub ↵ Jump to ↵ In this repository All GitHub ↵ Jump to ↵ Sign in Sign up Sign up {{ message }} indutny / elliptic Notifications Star 1.2k Fork 297 Code Issues 74 Pull requests 19 Actions Projects 0 Wiki Security Insights More Code Issues Pull requests Actions Projects Wiki Security Insights Labels 8 Milestones 0 Labels 8 Milestones 0 New issue Have a question about this project? Sign up for a free GitHub account to open an issue and contact its maintainers and the community. Pick a username Email Address Password Sign up for GitHub By clicking “Sign up for GitHub”, you agree to our terms of service and privacy statement. We’ll occasionally send you account related emails. Already on GitHub? Sign in to your account 74 Open 97 Closed 74 Open 97 Closed Author Filter by author author: Filter by this user Label Filter by label Use alt + click/return to exclude labels. Projects Filter by project Milestones Filter by milestone Assignee Filter by who’s assigned Sort Sort by Newest Oldest Most commented Least commented Recently updated Least recently updated Most reactions 👍 👎 😄 🎉 😕 ❤️ 🚀 👀 How to use keys with crypto.subtle #255 opened Apr 1, 2021 by DominicTobias-b1 EDDSA.decodeInt should fails or reduce by dafault? #254 opened Mar 18, 2021 by mahnunchik Sad state #251 opened Mar 11, 2021 by berkus EDDSA.decodePoint should fails on ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff #250 opened Mar 3, 2021 by mahnunchik 14 Add endian argument to bn.js toString method #249 opened Mar 2, 2021 by mahnunchik EDDSA decodePoint doesn't support Buffer as argument #248 opened Mar 2, 2021 by mahnunchik How to decipher the encrypted message? #245 opened Jan 27, 2021 by istabraq-iot Montgomery Curve25519 is not openssl compatible #243 opened Dec 28, 2020 by jc-lab 4 Curves p384 and p521 produce incorrect results #239 opened Oct 18, 2020 by guidovranken i want to use this library with c# #238 opened Oct 10, 2020 by medozeus Elliptic.js support following curve types: #236 opened Oct 5, 2020 by medozeus The Elliptic package 6.5.2 for Node.js allows ECDSA signature malleability via variations in encoding, leading '\0' bytes, or integer overflows. #235 opened Oct 1, 2020 by bsomeshwer EdDSA: What is a reason to manipulate with bytes? #233 opened Aug 27, 2020 by mahnunchik why use derive method get ECDH key，i got different length #230 opened Jul 10, 2020 by cqupt-yifanwu 4 Why do I generate my local test path in chunk-vendors when packing with NPM #229 opened Jun 22, 2020 by Anthonychen1994 1 TypedArray support ? #228 opened Jun 20, 2020 by dojyorin Is there way to generate PKCS#8 private key from Pem format ECC Private key #225 opened Apr 28, 2020 by sureshreddygovindu Signature validation in python. Prefix configuration? #224 opened Apr 25, 2020 by amrbz is it possible to do assymetric encryption? #223 opened Apr 7, 2020 by maroodb 1 Missing infinity point encoding #218 opened Feb 21, 2020 by catenacyber 1 ECDH P-521 public key point not on curve according to java (clojure) #216 opened Feb 11, 2020 by slhabity 1 how save and load private / publick key in pem or other format #215 opened Jan 27, 2020 by fturiot 2 How to pair client to server BTCPay NodeJS client? #214 opened Jan 21, 2020 by savshit 1 How to pair client to server BTCPay NodeJS client? #213 opened Jan 21, 2020 by savshit curve25519 and BouncyCastle(bc) in c# Different compute shared secret #209 opened Dec 11, 2019 by shamohai 2 Previous 1 2 3 Next Previous Next ProTip! Adding no:label will show everything without a label. © 2021 GitHub, Inc. Terms Privacy Security Status Docs Contact GitHub Pricing API Training Blog About You can’t perform that action at this time. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."
556168,20210409,github.com,https://github.com/indutny/elliptic,text/html,text/html,en,"GitHub - indutny/elliptic: Fast Elliptic Curve Cryptography in plain javascript Skip to content Sign up Sign up Why GitHub? Features → Mobile → Actions → Codespaces → Packages → Security → Code review → Project management → Integrations → GitHub Sponsors → Customer stories→ Team Enterprise Explore Explore GitHub → Learn and contribute Topics → Collections → Trending → Learning Lab → Open source guides → Connect with others The ReadME Project → Events → Community forum → GitHub Education → GitHub Stars program → Marketplace Pricing Plans → Compare plans → Contact Sales → Education → In this repository All GitHub ↵ Jump to ↵ No suggested jump to results In this repository All GitHub ↵ Jump to ↵ In this user All GitHub ↵ Jump to ↵ In this repository All GitHub ↵ Jump to ↵ Sign in Sign up Sign up {{ message }} indutny / elliptic Notifications Star 1.2k Fork 297 Fast Elliptic Curve Cryptography in plain javascript 1.2k stars 297 forks Star Notifications Code Issues 74 Pull requests 19 Actions Projects 0 Wiki Security Insights More Code Issues Pull requests Actions Projects Wiki Security Insights master Switch branches/tags Branches Tags Nothing to show {{ refName }} default View all branches Nothing to show {{ refName }} default View all tags 2 branches 85 tags Go to file Code Clone HTTPS GitHub CLI Use Git or checkout with SVN using the web URL. Work fast with our official CLI. Learn more. Open with GitHub Desktop Download ZIP Launching GitHub Desktop If nothing happens, download GitHub Desktop and try again. Go back Launching GitHub Desktop If nothing happens, download GitHub Desktop and try again. Go back Launching Xcode If nothing happens, download Xcode and try again. Go back Launching Visual Studio If nothing happens, download the GitHub extension for Visual Studio and try again. Go back Latest commit indutny 6.5.4 … 43ac7f2 Feb 2, 2021 6.5.4 43ac7f2 Git stats 331 commits Files Permalink Failed to load latest commit information. Type Name Latest commit message Commit time benchmarks package: remove Makefile and dist Jan 29, 2016 dist 6.5.4 Feb 2, 2021 lib ec: validate that a point before deriving keys Feb 2, 2021 test ec: validate that a point before deriving keys Feb 2, 2021 .codeclimate.yml test: improvements with Saucelabs/Codeclimate Mar 31, 2016 .eslintignore lib: relint using eslint Aug 2, 2020 .eslintrc.js lib: relint using eslint Aug 2, 2020 .gitignore test: improvements with Saucelabs/Codeclimate Mar 31, 2016 .npmignore npmignore: dist May 20, 2016 .travis.yml travis: really move on Jun 26, 2019 Gruntfile.js grunt: fix standalone build May 25, 2016 README.md readme: update example Mar 23, 2017 package-lock.json 6.5.4 Feb 2, 2021 package.json 6.5.4 Feb 2, 2021 View code Elliptic Incentive Benchmarks API ECDSA EdDSA ECDH Supported curves Implementation details Related projects LICENSE README.md Elliptic Fast elliptic-curve cryptography in a plain javascript implementation. NOTE: Please take a look at http://safecurves.cr.yp.to/ before choosing a curve for your cryptography operations. Incentive ECC is much slower than regular RSA cryptography, the JS implementations are even more slower. Benchmarks $ node benchmarks/index.js Benchmarking: sign elliptic#sign x 262 ops/sec ±0.51% (177 runs sampled) eccjs#sign x 55.91 ops/sec ±0.90% (144 runs sampled) ------------------------ Fastest is elliptic#sign ======================== Benchmarking: verify elliptic#verify x 113 ops/sec ±0.50% (166 runs sampled) eccjs#verify x 48.56 ops/sec ±0.36% (125 runs sampled) ------------------------ Fastest is elliptic#verify ======================== Benchmarking: gen elliptic#gen x 294 ops/sec ±0.43% (176 runs sampled) eccjs#gen x 62.25 ops/sec ±0.63% (129 runs sampled) ------------------------ Fastest is elliptic#gen ======================== Benchmarking: ecdh elliptic#ecdh x 136 ops/sec ±0.85% (156 runs sampled) ------------------------ Fastest is elliptic#ecdh ======================== API ECDSA var EC = require('elliptic').ec; // Create and initialize EC context // (better do it once and reuse it) var ec = new EC('secp256k1'); // Generate keys var key = ec.genKeyPair(); // Sign the message's hash (input must be an array, or a hex-string) var msgHash = [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ]; var signature = key.sign(msgHash); // Export DER encoded signature in Array var derSign = signature.toDER(); // Verify signature console.log(key.verify(msgHash, derSign)); // CHECK WITH NO PRIVATE KEY var pubPoint = key.getPublic(); var x = pubPoint.getX(); var y = pubPoint.getY(); // Public Key MUST be either: // 1) '04' + hex string of x + hex string of y; or // 2) object with two hex string properties (x and y); or // 3) object with two buffer properties (x and y) var pub = pubPoint.encode('hex');                                 // case 1 var pub = { x: x.toString('hex'), y: y.toString('hex') };         // case 2 var pub = { x: x.toBuffer(), y: y.toBuffer() };                   // case 3 var pub = { x: x.toArrayLike(Buffer), y: y.toArrayLike(Buffer) }; // case 3 // Import public key var key = ec.keyFromPublic(pub, 'hex'); // Signature MUST be either: // 1) DER-encoded signature as hex-string; or // 2) DER-encoded signature as buffer; or // 3) object with two hex-string properties (r and s); or // 4) object with two buffer properties (r and s) var signature = '3046022100...'; // case 1 var signature = new Buffer('...'); // case 2 var signature = { r: 'b1fc...', s: '9c42...' }; // case 3 // Verify signature console.log(key.verify(msgHash, signature)); EdDSA var EdDSA = require('elliptic').eddsa; // Create and initialize EdDSA context // (better do it once and reuse it) var ec = new EdDSA('ed25519'); // Create key pair from secret var key = ec.keyFromSecret('693e3c...'); // hex string, array or Buffer // Sign the message's hash (input must be an array, or a hex-string) var msgHash = [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ]; var signature = key.sign(msgHash).toHex(); // Verify signature console.log(key.verify(msgHash, signature)); // CHECK WITH NO PRIVATE KEY // Import public key var pub = '0a1af638...'; var key = ec.keyFromPublic(pub, 'hex'); // Verify signature var signature = '70bed1...'; console.log(key.verify(msgHash, signature)); ECDH var EC = require('elliptic').ec; var ec = new EC('curve25519'); // Generate keys var key1 = ec.genKeyPair(); var key2 = ec.genKeyPair(); var shared1 = key1.derive(key2.getPublic()); var shared2 = key2.derive(key1.getPublic()); console.log('Both shared secrets are BN instances'); console.log(shared1.toString(16)); console.log(shared2.toString(16)); three and more members: var EC = require('elliptic').ec; var ec = new EC('curve25519'); var A = ec.genKeyPair(); var B = ec.genKeyPair(); var C = ec.genKeyPair(); var AB = A.getPublic().mul(B.getPrivate()) var BC = B.getPublic().mul(C.getPrivate()) var CA = C.getPublic().mul(A.getPrivate()) var ABC = AB.mul(C.getPrivate()) var BCA = BC.mul(A.getPrivate()) var CAB = CA.mul(B.getPrivate()) console.log(ABC.getX().toString(16)) console.log(BCA.getX().toString(16)) console.log(CAB.getX().toString(16)) NOTE: .derive() returns a BN instance. Supported curves Elliptic.js support following curve types: Short Weierstrass Montgomery Edwards Twisted Edwards Following curve 'presets' are embedded into the library: secp256k1 p192 p224 p256 p384 p521 curve25519 ed25519 NOTE: That curve25519 could not be used for ECDSA, use ed25519 instead. Implementation details ECDSA is using deterministic k value generation as per RFC6979. Most of the curve operations are performed on non-affine coordinates (either projective or extended), various windowing techniques are used for different cases. All operations are performed in reduction context using bn.js, hashing is provided by hash.js Related projects eccrypto: isomorphic implementation of ECDSA, ECDH and ECIES for both browserify and node (uses elliptic for browser and secp256k1-node for node) LICENSE This software is licensed under the MIT License. Copyright Fedor Indutny, 2014. Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the ""Software""), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. About Fast Elliptic Curve Cryptography in plain javascript Resources Readme Releases 85 tags Packages 0 No packages published Used by 5.7m + 5,661,895 Contributors 25 + 14 contributors Languages JavaScript 99.3% HTML 0.7% © 2021 GitHub, Inc. Terms Privacy Security Status Docs Contact GitHub Pricing API Training Blog About You can’t perform that action at this time. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."
556756,20210416,github.com,https://github.com/adobe-accessibility/Accessible-Mega-Menu,text/html,text/html,en,"GitHub - adobe-accessibility/Accessible-Mega-Menu: A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. Skip to content Sign up Sign up Why GitHub? Features → Mobile → Actions → Codespaces → Packages → Security → Code review → Project management → Integrations → GitHub Sponsors → Customer stories→ Team Enterprise Explore Explore GitHub → Learn and contribute Topics → Collections → Trending → Learning Lab → Open source guides → Connect with others The ReadME Project → Events → Community forum → GitHub Education → GitHub Stars program → Marketplace Pricing Plans → Compare plans → Contact Sales → Education → In this repository All GitHub ↵ Jump to ↵ No suggested jump to results In this repository All GitHub ↵ Jump to ↵ In this organization All GitHub ↵ Jump to ↵ In this repository All GitHub ↵ Jump to ↵ Sign in Sign up Sign up {{ message }} adobe-accessibility / Accessible-Mega-Menu Notifications Star 577 Fork 197 A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. Apache-2.0 License 577 stars 197 forks Star Notifications Code Issues 28 Pull requests 6 Actions Projects 0 Security Insights More Code Issues Pull requests Actions Projects Security Insights master Switch branches/tags Branches Tags Nothing to show {{ refName }} default View all branches Nothing to show {{ refName }} default View all tags 2 branches 0 tags Go to file Code Clone HTTPS GitHub CLI Use Git or checkout with SVN using the web URL. Work fast with our official CLI. Learn more. Open with GitHub Desktop Download ZIP Launching GitHub Desktop If nothing happens, download GitHub Desktop and try again. Go back Launching GitHub Desktop If nothing happens, download GitHub Desktop and try again. Go back Launching Xcode If nothing happens, download Xcode and try again. Go back Launching Visual Studio If nothing happens, download the GitHub extension for Visual Studio and try again. Go back Latest commit Git stats 39 commits Files Permalink Failed to load latest commit information. Type Name Latest commit message Commit time css js third-party/jquery LICENSE NOTICE README.md index.html package.json View code Accessible Mega Menu Keyboard Accessibility Screen Reader Accessibility Usage HTML JavaScript CSS README.md Accessible Mega Menu ========================= A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. It is modeled after the mega menu on adobe.com but has been simplified for use by others. An brief explanation of our interaction design choices can be found in a blog post at Mega menu accessibility on adobe.com. Content for the links and text within the mega menu comes from the Web Content Accessibility Guidelines (WCAG) 2.0. Keyboard Accessibility The accessible mega menu supports keyboard interaction modeled after the behavior described in the WAI-ARIA Menu or Menu bar (widget) design pattern, however we also try to respect users' general expectations for the behavior of links in a global navigation. To this end, the accessible mega menu implementation permits tab focus on each of the six top-level menu items. When one of the menu items has focus, pressing the Enter key, Spacebar or Down arrow will open the submenu panel, and pressing the Left or Right arrow key will shift focus to the adjacent menu item. Links within the submenu panels are included in the tab order when the panel is open. They can also be navigated with the arrow keys or by typing the first character in the link name, which speeds up keyboard navigation considerably. Pressing the Escape key closes the submenu and restores focus to the parent menu item. Screen Reader Accessibility The accessible mega menu models its use of WAI-ARIA Roles, States, and Properties after those described in the WAI-ARIA Menu or Menu bar (widget) design pattern with some notable exceptions, so that it behaves better with screen reader user expectations for global navigation. We don't use role=""menu"" for the menu container and role=""menuitem"" for each of the links therein, because if we do, assistive technology will no longer interpret the links as links, but instead, as menu items, and the links in our global navigation will no longer show up when a screen reader user executes a shortcut command to bring up a list of links in the page. We also want to maintain the semantic structure of the submenu panels in our mega menu; our links are organized into lists and separated by headings. Omitting role=""menu"" and role=""menuitem"" for the global navigation seems the safer way to go. Usage HTML The HTML structure for the mega menu is a nav element, or any other container element, containing a list. Each list item contains a link which is followed by a div or any other container element which will serve as the pop up panel. The panel can contain any html content; in the following example, each panel contains three lists of links. You can explicitly define groups within the panel, between which a user can navigate quickly using the left and right arrow keys; in the following example, the CSS class .sub-nav-group identifies a navigable group.     <nav>         <ul class=""nav-menu"">             <li class=""nav-item"">                 <a href=""?movie"">Movies</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=0"">Action &amp; Adventure</a></li>                         <li><a href=""?movie&genre=2"">Children &amp; Family</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=7"">Dramas</a></li>                         <li><a href=""?movie&genre=9"">Foreign</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=14"">Musicals</a></li>                         <li><a href=""?movie&genre=15"">Romance</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>             <li class=""nav-item"">                 <a href=""?tv"">TV Shows</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=20"">Classic TV</a></li>                         <li><a href=""?tv&genre=21"">Crime TV</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=27"">Reality TV</a></li>                         <li><a href=""?tv&genre=30"">TV Action</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=33"">TV Dramas</a></li>                         <li><a href=""?tv&genre=34"">TV Horror</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>         </ul>     </nav> By default, accessibleMegaMenu uses the the following CSS classes to define the top-level navigation items, panels, groups within the panels, and the hover, focus, and open states. It also defines a prefix for unique id strings, which are required to indicate the relationship of a top-level navigation item to the panel it controls.     defaults = {         /* unique ID's are required to indicate aria-owns, aria-controls and aria-labelledby */         uuidPrefix: ""accessible-megamenu"",                  /* default css class used to define the megamenu styling */         menuClass: ""accessible-megamenu"",                  /* default css class for a top-level navigation item in the megamenu */         topNavItemClass: ""accessible-megamenu-top-nav-item"",                  /* default css class for a megamenu panel */         panelClass: ""accessible-megamenu-panel"",                  /* default css class for a group of items within a megamenu panel */         panelGroupClass: ""accessible-megamenu-panel-group"",                  /* default css class for the hover state */         hoverClass: ""hover"",                  /* default css class for the focus state */         focusClass: ""focus"",                  /* default css class for the open state */         openClass: ""open""      } You can optionally override the defaults to use the CSS classes you may have already defined for your mega menu. JavaScript Be sure to include jQuery and the jquery-accessibleMegaMenu.js plugin script.     <script src=""//code.jquery.com/jquery-1.10.1.min.js""></script>     <script src=""js/jquery-accessibleMegaMenu.js""></script> The following initializes the first nav element in the document as an accessibleMegaMenu, with optional CSS class overrides.     $(""nav:first"").accessibleMegaMenu({         /* prefix for generated unique id attributes, which are required             to indicate aria-owns, aria-controls and aria-labelledby */         uuidPrefix: ""accessible-megamenu"",                  /* css class used to define the megamenu styling */         menuClass: ""nav-menu"",                  /* css class for a top-level navigation item in the megamenu */         topNavItemClass: ""nav-item"",                  /* css class for a megamenu panel */         panelClass: ""sub-nav"",                  /* css class for a group of items within a megamenu panel */         panelGroupClass: ""sub-nav-group"",                  /* css class for the hover state */         hoverClass: ""hover"",                  /* css class for the focus state */         focusClass: ""focus"",                  /* css class for the open state */         openClass: ""open""     }); CSS AccessibleMegaMenu handles the showing and hiding of panels by adding or removing a CSS class. No inline styles are added to hide elements or create animation between states. Following is some rudimentary CSS for our example which enables the showing/hiding of and the layout of lists panels in the mega menu.     /* mega menu list */     .nav-menu {         display: block;         position: relative;         list-style: none;         margin: 0;         padding: 0;         z-index: 15;     }     /* a top level navigation item in the mega menu */     .nav-item {         list-style: none;         display: inline-block;         padding: 0;         margin: 0;     }     /* first descendant link within a top level navigation item */     .nav-item > a {         position: relative;         display: inline-block;         padding: 0.5em 1em;         margin: 0 0 -1px 0;         border: 1px solid transparent;     }     /* focus/open states of first descendant link within a top level         navigation item */     .nav-item > a:focus,     .nav-item > a.open {         border: 1px solid #dedede;     }     /* open state of first descendant link within a top level         navigation item */     .nav-item > a.open {         background-color: #fff;         border-bottom: none;         z-index: 1;     }     /* sub-navigation panel */     .sub-nav {         position: absolute;         display: none;         top: 2.2em;         margin-top: -1px;         padding: 0.5em 1em;         border: 1px solid #dedede;         background-color: #fff;     }     /* sub-navigation panel open state */     .sub-nav.open {         display: block;     }     /* list of items within sub-navigation panel */     .sub-nav ul {         display: inline-block;         vertical-align: top;         margin: 0 1em 0 0;         padding: 0;     }     /* list item within sub-navigation panel */     .sub-nav li {         display: block;         list-style-type: none;         margin: 0;         padding: 0;     }   Putting it all together, here is the completed example:     <!doctype html>     <html lang=""en"">     <head>     <meta charset=""UTF-8"">     <title>Simple Accessible Mega Menu Example</title>     <style>         /* Rudimentary mega menu CSS for demonstration */             /* mega menu list */         .nav-menu {             display: block;             position: relative;             list-style: none;             margin: 0;             padding: 0;             z-index: 15;         }         /* a top level navigation item in the mega menu */         .nav-item {             list-style: none;             display: inline-block;             padding: 0;             margin: 0;         }         /* first descendant link within a top level navigation item */         .nav-item > a {             position: relative;             display: inline-block;             padding: 0.5em 1em;             margin: 0 0 -1px 0;             border: 1px solid transparent;         }         /* focus/open states of first descendant link within a top level             navigation item */         .nav-item > a:focus,         .nav-item > a.open {             border: 1px solid #dedede;         }         /* open state of first descendant link within a top level             navigation item */         .nav-item > a.open {             background-color: #fff;             border-bottom: none;             z-index: 1;         }         /* sub-navigation panel */         .sub-nav {             position: absolute;             display: none;             top: 2.2em;             margin-top: -1px;             padding: 0.5em 1em;             border: 1px solid #dedede;             background-color: #fff;         }         /* sub-navigation panel open state */         .sub-nav.open {             display: block;         }         /* list of items within sub-navigation panel */         .sub-nav ul {             display: inline-block;             vertical-align: top;             margin: 0 1em 0 0;             padding: 0;         }         /* list item within sub-navigation panel */         .sub-nav li {             display: block;             list-style-type: none;             margin: 0;             padding: 0;         }          </style>     </head>     <body>     <nav>         <ul class=""nav-menu"">             <li class=""nav-item"">                 <a href=""?movie"">Movies</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=0"">Action &amp; Adventure</a></li>                         <li><a href=""?movie&genre=2"">Children &amp; Family</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=7"">Dramas</a></li>                         <li><a href=""?movie&genre=9"">Foreign</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=14"">Musicals</a></li>                         <li><a href=""?movie&genre=15"">Romance</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>             <li class=""nav-item"">                 <a href=""?tv"">TV Shows</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=20"">Classic TV</a></li>                         <li><a href=""?tv&genre=21"">Crime TV</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=27"">Reality TV</a></li>                         <li><a href=""?tv&genre=30"">TV Action</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=33"">TV Dramas</a></li>                         <li><a href=""?tv&genre=34"">TV Horror</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>         </ul>     </nav>          <!-- include jquery -->     <script src=""//code.jquery.com/jquery-1.10.1.min.js""></script>     <!-- include the jquery-accessibleMegaMenu plugin script -->     <script src=""js/jquery-accessibleMegaMenu.js""></script>     <!-- initialize a selector as an accessibleMegaMenu -->     <script>         $(""nav:first"").accessibleMegaMenu({             /* prefix for generated unique id attributes, which are required                 to indicate aria-owns, aria-controls and aria-labelledby */             uuidPrefix: ""accessible-megamenu"",                          /* css class used to define the megamenu styling */             menuClass: ""nav-menu"",                          /* css class for a top-level navigation item in the megamenu */             topNavItemClass: ""nav-item"",                          /* css class for a megamenu panel */             panelClass: ""sub-nav"",                          /* css class for a group of items within a megamenu panel */             panelGroupClass: ""sub-nav-group"",                          /* css class for the hover state */             hoverClass: ""hover"",                          /* css class for the focus state */             focusClass: ""focus"",                          /* css class for the open state */             openClass: ""open""         });     </script>     </body>     </html> About A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. Resources Readme License Apache-2.0 License Releases No releases published Packages 0 No packages published Contributors 7 Languages HTML 71.8% CSS 26.4% JavaScript 1.8% © 2021 GitHub, Inc. Terms Privacy Security Status Docs Contact GitHub Pricing API Training Blog About You can’t perform that action at this time. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."
561596,20210416,github.com,https://github.com/crypto-browserify/crypto-browserify,text/html,text/html,en,"GitHub - crypto-browserify/crypto-browserify: partial implementation of node's `crypto` for the browser Skip to content Sign up Sign up Why GitHub? Features → Mobile → Actions → Codespaces → Packages → Security → Code review → Project management → Integrations → GitHub Sponsors → Customer stories→ Team Enterprise Explore Explore GitHub → Learn and contribute Topics → Collections → Trending → Learning Lab → Open source guides → Connect with others The ReadME Project → Events → Community forum → GitHub Education → GitHub Stars program → Marketplace Pricing Plans → Compare plans → Contact Sales → Education → In this repository All GitHub ↵ Jump to ↵ No suggested jump to results In this repository All GitHub ↵ Jump to ↵ In this organization All GitHub ↵ Jump to ↵ In this repository All GitHub ↵ Jump to ↵ Sign in Sign up Sign up {{ message }} crypto-browserify / crypto-browserify Notifications Star 472 Fork 154 partial implementation of node's `crypto` for the browser MIT License 472 stars 154 forks Star Notifications Code Issues 19 Pull requests 6 Actions Projects 0 Wiki Security Insights More Code Issues Pull requests Actions Projects Wiki Security Insights master Switch branches/tags Branches Tags Nothing to show {{ refName }} default View all branches Nothing to show {{ refName }} default View all tags 6 branches 31 tags Go to file Code Clone HTTPS GitHub CLI Use Git or checkout with SVN using the web URL. Work fast with our official CLI. Learn more. Open with GitHub Desktop Download ZIP Launching GitHub Desktop If nothing happens, download GitHub Desktop and try again. Go back Launching GitHub Desktop If nothing happens, download GitHub Desktop and try again. Go back Launching Xcode If nothing happens, download Xcode and try again. Go back Launching Visual Studio If nothing happens, download the GitHub extension for Visual Studio and try again. Go back Latest commit calvinmetcalf fix debian issue (maybe) … 460a13b Feb 9, 2018 fix debian issue (maybe) 460a13b Git stats 362 commits Files Permalink Failed to load latest commit information. Type Name Latest commit message Commit time example add standard 5.0.0 Aug 13, 2015 test fix debian issue (maybe) Feb 9, 2018 .gitignore Add .gitignore Aug 5, 2013 .travis.yml saucelabs aparently only goes back to 7 Oct 19, 2017 .zuul.yml add zuul and browser tests Oct 3, 2015 LICENSE Add MIT license Sep 20, 2013 README.md add privateEncrypt/publicDecrypt to README Dec 14, 2015 index.js add rndom fill Oct 18, 2017 package.json 3.12.0 Nov 3, 2017 View code crypto-browserify todo contributions License README.md crypto-browserify A port of node's crypto module to the browser. The goal of this module is to reimplement node's crypto module, in pure javascript so that it can run in the browser. Here is the subset that is currently implemented: createHash (sha1, sha224, sha256, sha384, sha512, md5, rmd160) createHmac (sha1, sha224, sha256, sha384, sha512, md5, rmd160) pbkdf2 pbkdf2Sync randomBytes pseudoRandomBytes createCipher (aes) createDecipher (aes) createDiffieHellman createSign (rsa, ecdsa) createVerify (rsa, ecdsa) createECDH (secp256k1) publicEncrypt/privateDecrypt (rsa) privateEncrypt/publicDecrypt (rsa) todo these features from node's crypto are still unimplemented. createCredentials contributions If you are interested in writing a feature, please implement as a new module, which will be incorporated into crypto-browserify as a dependency. All deps must be compatible with node's crypto (generate example inputs and outputs with node, and save base64 strings inside JSON, so that tests can run in the browser. see sha.js Crypto is extra serious so please do not hesitate to review the code, and post comments if you do. License MIT About partial implementation of node's `crypto` for the browser Resources Readme License MIT License Releases 31 tags Packages 0 No packages published Used by 5.8m + 5,776,304 Contributors 24 + 13 contributors Languages JavaScript 99.1% HTML 0.9% © 2021 GitHub, Inc. Terms Privacy Security Status Docs Contact GitHub Pricing API Training Blog About You can’t perform that action at this time. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."
561597,20210416,github.com,https://github.com/indutny/elliptic/issues,text/html,text/html,en,"Issues · indutny/elliptic · GitHub Skip to content Sign up Sign up Why GitHub? Features → Mobile → Actions → Codespaces → Packages → Security → Code review → Project management → Integrations → GitHub Sponsors → Customer stories→ Team Enterprise Explore Explore GitHub → Learn and contribute Topics → Collections → Trending → Learning Lab → Open source guides → Connect with others The ReadME Project → Events → Community forum → GitHub Education → GitHub Stars program → Marketplace Pricing Plans → Compare plans → Contact Sales → Education → In this repository All GitHub ↵ Jump to ↵ No suggested jump to results In this repository All GitHub ↵ Jump to ↵ In this user All GitHub ↵ Jump to ↵ In this repository All GitHub ↵ Jump to ↵ Sign in Sign up Sign up {{ message }} indutny / elliptic Notifications Star 1.2k Fork 298 Code Issues 74 Pull requests 19 Actions Projects 0 Wiki Security Insights More Code Issues Pull requests Actions Projects Wiki Security Insights Labels 8 Milestones 0 Labels 8 Milestones 0 New issue Have a question about this project? Sign up for a free GitHub account to open an issue and contact its maintainers and the community. Pick a username Email Address Password Sign up for GitHub By clicking “Sign up for GitHub”, you agree to our terms of service and privacy statement. We’ll occasionally send you account related emails. Already on GitHub? Sign in to your account 74 Open 97 Closed 74 Open 97 Closed Author Filter by author author: Filter by this user Label Filter by label Use alt + click/return to exclude labels. Projects Filter by project Milestones Filter by milestone Assignee Filter by who’s assigned Sort Sort by Newest Oldest Most commented Least commented Recently updated Least recently updated Most reactions 👍 👎 😄 🎉 😕 ❤️ 🚀 👀 How to use keys with crypto.subtle #255 opened Apr 1, 2021 by DominicTobias-b1 EDDSA.decodeInt should fails or reduce by dafault? #254 opened Mar 18, 2021 by mahnunchik Sad state #251 opened Mar 11, 2021 by berkus EDDSA.decodePoint should fails on ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff #250 opened Mar 3, 2021 by mahnunchik 14 Add endian argument to bn.js toString method #249 opened Mar 2, 2021 by mahnunchik EDDSA decodePoint doesn't support Buffer as argument #248 opened Mar 2, 2021 by mahnunchik How to decipher the encrypted message? #245 opened Jan 27, 2021 by istabraq-iot Montgomery Curve25519 is not openssl compatible #243 opened Dec 28, 2020 by jc-lab 4 Curves p384 and p521 produce incorrect results #239 opened Oct 18, 2020 by guidovranken i want to use this library with c# #238 opened Oct 10, 2020 by medozeus Elliptic.js support following curve types: #236 opened Oct 5, 2020 by medozeus The Elliptic package 6.5.2 for Node.js allows ECDSA signature malleability via variations in encoding, leading '\0' bytes, or integer overflows. #235 opened Oct 1, 2020 by bsomeshwer EdDSA: What is a reason to manipulate with bytes? #233 opened Aug 27, 2020 by mahnunchik why use derive method get ECDH key，i got different length #230 opened Jul 10, 2020 by cqupt-yifanwu 4 Why do I generate my local test path in chunk-vendors when packing with NPM #229 opened Jun 22, 2020 by Anthonychen1994 1 TypedArray support ? #228 opened Jun 20, 2020 by dojyorin Is there way to generate PKCS#8 private key from Pem format ECC Private key #225 opened Apr 28, 2020 by sureshreddygovindu Signature validation in python. Prefix configuration? #224 opened Apr 25, 2020 by amrbz is it possible to do assymetric encryption? #223 opened Apr 7, 2020 by maroodb 1 Missing infinity point encoding #218 opened Feb 21, 2020 by catenacyber 1 ECDH P-521 public key point not on curve according to java (clojure) #216 opened Feb 11, 2020 by slhabity 1 how save and load private / publick key in pem or other format #215 opened Jan 27, 2020 by fturiot 2 How to pair client to server BTCPay NodeJS client? #214 opened Jan 21, 2020 by savshit 1 How to pair client to server BTCPay NodeJS client? #213 opened Jan 21, 2020 by savshit curve25519 and BouncyCastle(bc) in c# Different compute shared secret #209 opened Dec 11, 2019 by shamohai 2 Previous 1 2 3 Next Previous Next ProTip! What’s not been updated in a month: updated:<2021-03-16. © 2021 GitHub, Inc. Terms Privacy Security Status Docs Contact GitHub Pricing API Training Blog About You can’t perform that action at this time. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."
561598,20210416,github.com,https://github.com/indutny/elliptic,text/html,text/html,en,"GitHub - indutny/elliptic: Fast Elliptic Curve Cryptography in plain javascript Skip to content Sign up Sign up Why GitHub? Features → Mobile → Actions → Codespaces → Packages → Security → Code review → Project management → Integrations → GitHub Sponsors → Customer stories→ Team Enterprise Explore Explore GitHub → Learn and contribute Topics → Collections → Trending → Learning Lab → Open source guides → Connect with others The ReadME Project → Events → Community forum → GitHub Education → GitHub Stars program → Marketplace Pricing Plans → Compare plans → Contact Sales → Education → In this repository All GitHub ↵ Jump to ↵ No suggested jump to results In this repository All GitHub ↵ Jump to ↵ In this user All GitHub ↵ Jump to ↵ In this repository All GitHub ↵ Jump to ↵ Sign in Sign up Sign up {{ message }} indutny / elliptic Notifications Star 1.2k Fork 298 Fast Elliptic Curve Cryptography in plain javascript 1.2k stars 298 forks Star Notifications Code Issues 74 Pull requests 19 Actions Projects 0 Wiki Security Insights More Code Issues Pull requests Actions Projects Wiki Security Insights master Switch branches/tags Branches Tags Nothing to show {{ refName }} default View all branches Nothing to show {{ refName }} default View all tags 2 branches 85 tags Go to file Code Clone HTTPS GitHub CLI Use Git or checkout with SVN using the web URL. Work fast with our official CLI. Learn more. Open with GitHub Desktop Download ZIP Launching GitHub Desktop If nothing happens, download GitHub Desktop and try again. Go back Launching GitHub Desktop If nothing happens, download GitHub Desktop and try again. Go back Launching Xcode If nothing happens, download Xcode and try again. Go back Launching Visual Studio If nothing happens, download the GitHub extension for Visual Studio and try again. Go back Latest commit indutny 6.5.4 … 43ac7f2 Feb 3, 2021 6.5.4 43ac7f2 Git stats 331 commits Files Permalink Failed to load latest commit information. Type Name Latest commit message Commit time benchmarks package: remove Makefile and dist Jan 29, 2016 dist 6.5.4 Feb 2, 2021 lib ec: validate that a point before deriving keys Feb 2, 2021 test ec: validate that a point before deriving keys Feb 2, 2021 .codeclimate.yml test: improvements with Saucelabs/Codeclimate Mar 31, 2016 .eslintignore lib: relint using eslint Aug 2, 2020 .eslintrc.js lib: relint using eslint Aug 2, 2020 .gitignore test: improvements with Saucelabs/Codeclimate Mar 31, 2016 .npmignore npmignore: dist May 20, 2016 .travis.yml travis: really move on Jun 26, 2019 Gruntfile.js grunt: fix standalone build May 25, 2016 README.md readme: update example Mar 23, 2017 package-lock.json 6.5.4 Feb 2, 2021 package.json 6.5.4 Feb 2, 2021 View code Elliptic Incentive Benchmarks API ECDSA EdDSA ECDH Supported curves Implementation details Related projects LICENSE README.md Elliptic Fast elliptic-curve cryptography in a plain javascript implementation. NOTE: Please take a look at http://safecurves.cr.yp.to/ before choosing a curve for your cryptography operations. Incentive ECC is much slower than regular RSA cryptography, the JS implementations are even more slower. Benchmarks $ node benchmarks/index.js Benchmarking: sign elliptic#sign x 262 ops/sec ±0.51% (177 runs sampled) eccjs#sign x 55.91 ops/sec ±0.90% (144 runs sampled) ------------------------ Fastest is elliptic#sign ======================== Benchmarking: verify elliptic#verify x 113 ops/sec ±0.50% (166 runs sampled) eccjs#verify x 48.56 ops/sec ±0.36% (125 runs sampled) ------------------------ Fastest is elliptic#verify ======================== Benchmarking: gen elliptic#gen x 294 ops/sec ±0.43% (176 runs sampled) eccjs#gen x 62.25 ops/sec ±0.63% (129 runs sampled) ------------------------ Fastest is elliptic#gen ======================== Benchmarking: ecdh elliptic#ecdh x 136 ops/sec ±0.85% (156 runs sampled) ------------------------ Fastest is elliptic#ecdh ======================== API ECDSA var EC = require('elliptic').ec; // Create and initialize EC context // (better do it once and reuse it) var ec = new EC('secp256k1'); // Generate keys var key = ec.genKeyPair(); // Sign the message's hash (input must be an array, or a hex-string) var msgHash = [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ]; var signature = key.sign(msgHash); // Export DER encoded signature in Array var derSign = signature.toDER(); // Verify signature console.log(key.verify(msgHash, derSign)); // CHECK WITH NO PRIVATE KEY var pubPoint = key.getPublic(); var x = pubPoint.getX(); var y = pubPoint.getY(); // Public Key MUST be either: // 1) '04' + hex string of x + hex string of y; or // 2) object with two hex string properties (x and y); or // 3) object with two buffer properties (x and y) var pub = pubPoint.encode('hex');                                 // case 1 var pub = { x: x.toString('hex'), y: y.toString('hex') };         // case 2 var pub = { x: x.toBuffer(), y: y.toBuffer() };                   // case 3 var pub = { x: x.toArrayLike(Buffer), y: y.toArrayLike(Buffer) }; // case 3 // Import public key var key = ec.keyFromPublic(pub, 'hex'); // Signature MUST be either: // 1) DER-encoded signature as hex-string; or // 2) DER-encoded signature as buffer; or // 3) object with two hex-string properties (r and s); or // 4) object with two buffer properties (r and s) var signature = '3046022100...'; // case 1 var signature = new Buffer('...'); // case 2 var signature = { r: 'b1fc...', s: '9c42...' }; // case 3 // Verify signature console.log(key.verify(msgHash, signature)); EdDSA var EdDSA = require('elliptic').eddsa; // Create and initialize EdDSA context // (better do it once and reuse it) var ec = new EdDSA('ed25519'); // Create key pair from secret var key = ec.keyFromSecret('693e3c...'); // hex string, array or Buffer // Sign the message's hash (input must be an array, or a hex-string) var msgHash = [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ]; var signature = key.sign(msgHash).toHex(); // Verify signature console.log(key.verify(msgHash, signature)); // CHECK WITH NO PRIVATE KEY // Import public key var pub = '0a1af638...'; var key = ec.keyFromPublic(pub, 'hex'); // Verify signature var signature = '70bed1...'; console.log(key.verify(msgHash, signature)); ECDH var EC = require('elliptic').ec; var ec = new EC('curve25519'); // Generate keys var key1 = ec.genKeyPair(); var key2 = ec.genKeyPair(); var shared1 = key1.derive(key2.getPublic()); var shared2 = key2.derive(key1.getPublic()); console.log('Both shared secrets are BN instances'); console.log(shared1.toString(16)); console.log(shared2.toString(16)); three and more members: var EC = require('elliptic').ec; var ec = new EC('curve25519'); var A = ec.genKeyPair(); var B = ec.genKeyPair(); var C = ec.genKeyPair(); var AB = A.getPublic().mul(B.getPrivate()) var BC = B.getPublic().mul(C.getPrivate()) var CA = C.getPublic().mul(A.getPrivate()) var ABC = AB.mul(C.getPrivate()) var BCA = BC.mul(A.getPrivate()) var CAB = CA.mul(B.getPrivate()) console.log(ABC.getX().toString(16)) console.log(BCA.getX().toString(16)) console.log(CAB.getX().toString(16)) NOTE: .derive() returns a BN instance. Supported curves Elliptic.js support following curve types: Short Weierstrass Montgomery Edwards Twisted Edwards Following curve 'presets' are embedded into the library: secp256k1 p192 p224 p256 p384 p521 curve25519 ed25519 NOTE: That curve25519 could not be used for ECDSA, use ed25519 instead. Implementation details ECDSA is using deterministic k value generation as per RFC6979. Most of the curve operations are performed on non-affine coordinates (either projective or extended), various windowing techniques are used for different cases. All operations are performed in reduction context using bn.js, hashing is provided by hash.js Related projects eccrypto: isomorphic implementation of ECDSA, ECDH and ECIES for both browserify and node (uses elliptic for browser and secp256k1-node for node) LICENSE This software is licensed under the MIT License. Copyright Fedor Indutny, 2014. Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the ""Software""), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. About Fast Elliptic Curve Cryptography in plain javascript Resources Readme Releases 85 tags Packages 0 No packages published Used by 5.7m + 5,700,891 Contributors 25 + 14 contributors Languages JavaScript 99.3% HTML 0.7% © 2021 GitHub, Inc. Terms Privacy Security Status Docs Contact GitHub Pricing API Training Blog About You can’t perform that action at this time. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."
566949,20210423,github.com,https://github.com/adobe-accessibility/Accessible-Mega-Menu,text/html,text/html,en,"GitHub - adobe-accessibility/Accessible-Mega-Menu: A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. Skip to content Sign up Sign up Why GitHub? Features → Mobile → Actions → Codespaces → Packages → Security → Code review → Project management → Integrations → GitHub Sponsors → Customer stories→ Team Enterprise Explore Explore GitHub → Learn and contribute Topics → Collections → Trending → Learning Lab → Open source guides → Connect with others The ReadME Project → Events → Community forum → GitHub Education → GitHub Stars program → Marketplace Pricing Plans → Compare plans → Contact Sales → Education → In this repository All GitHub ↵ Jump to ↵ No suggested jump to results In this repository All GitHub ↵ Jump to ↵ In this organization All GitHub ↵ Jump to ↵ In this repository All GitHub ↵ Jump to ↵ Sign in Sign up Sign up {{ message }} adobe-accessibility / Accessible-Mega-Menu Notifications Star 577 Fork 197 A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. Apache-2.0 License 577 stars 197 forks Star Notifications Code Issues 28 Pull requests 6 Actions Projects 0 Security Insights More Code Issues Pull requests Actions Projects Security Insights master Switch branches/tags Branches Tags Nothing to show {{ refName }} default View all branches Nothing to show {{ refName }} default View all tags 2 branches 0 tags Go to file Code Clone HTTPS GitHub CLI Use Git or checkout with SVN using the web URL. Work fast with our official CLI. Learn more. Open with GitHub Desktop Download ZIP Launching GitHub Desktop If nothing happens, download GitHub Desktop and try again. Go back Launching GitHub Desktop If nothing happens, download GitHub Desktop and try again. Go back Launching Xcode If nothing happens, download Xcode and try again. Go back Launching Visual Studio If nothing happens, download the GitHub extension for Visual Studio and try again. Go back Latest commit majornista fix evaluation for ChromeVox object … 5c070bc Dec 7, 2020 fix evaluation for ChromeVox object 5c070bc Git stats 39 commits Files Permalink Failed to load latest commit information. Type Name Latest commit message Commit time css Add openOnMouseover setting, and toggleButtonClass for responsive layout May 11, 2018 js fix evaluation for ChromeVox object Dec 7, 2020 third-party/jquery initial commit Aug 26, 2013 LICENSE initial commit Aug 26, 2013 NOTICE initial commit Aug 26, 2013 README.md initial commit Aug 26, 2013 index.html Updating WCAG 2.0 References to WCAG 2.1 (#67) Dec 4, 2020 package.json Updating repo references Jul 8, 2016 View code Accessible Mega Menu Keyboard Accessibility Screen Reader Accessibility Usage HTML JavaScript CSS README.md Accessible Mega Menu ========================= A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. It is modeled after the mega menu on adobe.com but has been simplified for use by others. An brief explanation of our interaction design choices can be found in a blog post at Mega menu accessibility on adobe.com. Content for the links and text within the mega menu comes from the Web Content Accessibility Guidelines (WCAG) 2.0. Keyboard Accessibility The accessible mega menu supports keyboard interaction modeled after the behavior described in the WAI-ARIA Menu or Menu bar (widget) design pattern, however we also try to respect users' general expectations for the behavior of links in a global navigation. To this end, the accessible mega menu implementation permits tab focus on each of the six top-level menu items. When one of the menu items has focus, pressing the Enter key, Spacebar or Down arrow will open the submenu panel, and pressing the Left or Right arrow key will shift focus to the adjacent menu item. Links within the submenu panels are included in the tab order when the panel is open. They can also be navigated with the arrow keys or by typing the first character in the link name, which speeds up keyboard navigation considerably. Pressing the Escape key closes the submenu and restores focus to the parent menu item. Screen Reader Accessibility The accessible mega menu models its use of WAI-ARIA Roles, States, and Properties after those described in the WAI-ARIA Menu or Menu bar (widget) design pattern with some notable exceptions, so that it behaves better with screen reader user expectations for global navigation. We don't use role=""menu"" for the menu container and role=""menuitem"" for each of the links therein, because if we do, assistive technology will no longer interpret the links as links, but instead, as menu items, and the links in our global navigation will no longer show up when a screen reader user executes a shortcut command to bring up a list of links in the page. We also want to maintain the semantic structure of the submenu panels in our mega menu; our links are organized into lists and separated by headings. Omitting role=""menu"" and role=""menuitem"" for the global navigation seems the safer way to go. Usage HTML The HTML structure for the mega menu is a nav element, or any other container element, containing a list. Each list item contains a link which is followed by a div or any other container element which will serve as the pop up panel. The panel can contain any html content; in the following example, each panel contains three lists of links. You can explicitly define groups within the panel, between which a user can navigate quickly using the left and right arrow keys; in the following example, the CSS class .sub-nav-group identifies a navigable group.     <nav>         <ul class=""nav-menu"">             <li class=""nav-item"">                 <a href=""?movie"">Movies</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=0"">Action &amp; Adventure</a></li>                         <li><a href=""?movie&genre=2"">Children &amp; Family</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=7"">Dramas</a></li>                         <li><a href=""?movie&genre=9"">Foreign</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=14"">Musicals</a></li>                         <li><a href=""?movie&genre=15"">Romance</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>             <li class=""nav-item"">                 <a href=""?tv"">TV Shows</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=20"">Classic TV</a></li>                         <li><a href=""?tv&genre=21"">Crime TV</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=27"">Reality TV</a></li>                         <li><a href=""?tv&genre=30"">TV Action</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=33"">TV Dramas</a></li>                         <li><a href=""?tv&genre=34"">TV Horror</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>         </ul>     </nav> By default, accessibleMegaMenu uses the the following CSS classes to define the top-level navigation items, panels, groups within the panels, and the hover, focus, and open states. It also defines a prefix for unique id strings, which are required to indicate the relationship of a top-level navigation item to the panel it controls.     defaults = {         /* unique ID's are required to indicate aria-owns, aria-controls and aria-labelledby */         uuidPrefix: ""accessible-megamenu"",                  /* default css class used to define the megamenu styling */         menuClass: ""accessible-megamenu"",                  /* default css class for a top-level navigation item in the megamenu */         topNavItemClass: ""accessible-megamenu-top-nav-item"",                  /* default css class for a megamenu panel */         panelClass: ""accessible-megamenu-panel"",                  /* default css class for a group of items within a megamenu panel */         panelGroupClass: ""accessible-megamenu-panel-group"",                  /* default css class for the hover state */         hoverClass: ""hover"",                  /* default css class for the focus state */         focusClass: ""focus"",                  /* default css class for the open state */         openClass: ""open""      } You can optionally override the defaults to use the CSS classes you may have already defined for your mega menu. JavaScript Be sure to include jQuery and the jquery-accessibleMegaMenu.js plugin script.     <script src=""//code.jquery.com/jquery-1.10.1.min.js""></script>     <script src=""js/jquery-accessibleMegaMenu.js""></script> The following initializes the first nav element in the document as an accessibleMegaMenu, with optional CSS class overrides.     $(""nav:first"").accessibleMegaMenu({         /* prefix for generated unique id attributes, which are required             to indicate aria-owns, aria-controls and aria-labelledby */         uuidPrefix: ""accessible-megamenu"",                  /* css class used to define the megamenu styling */         menuClass: ""nav-menu"",                  /* css class for a top-level navigation item in the megamenu */         topNavItemClass: ""nav-item"",                  /* css class for a megamenu panel */         panelClass: ""sub-nav"",                  /* css class for a group of items within a megamenu panel */         panelGroupClass: ""sub-nav-group"",                  /* css class for the hover state */         hoverClass: ""hover"",                  /* css class for the focus state */         focusClass: ""focus"",                  /* css class for the open state */         openClass: ""open""     }); CSS AccessibleMegaMenu handles the showing and hiding of panels by adding or removing a CSS class. No inline styles are added to hide elements or create animation between states. Following is some rudimentary CSS for our example which enables the showing/hiding of and the layout of lists panels in the mega menu.     /* mega menu list */     .nav-menu {         display: block;         position: relative;         list-style: none;         margin: 0;         padding: 0;         z-index: 15;     }     /* a top level navigation item in the mega menu */     .nav-item {         list-style: none;         display: inline-block;         padding: 0;         margin: 0;     }     /* first descendant link within a top level navigation item */     .nav-item > a {         position: relative;         display: inline-block;         padding: 0.5em 1em;         margin: 0 0 -1px 0;         border: 1px solid transparent;     }     /* focus/open states of first descendant link within a top level         navigation item */     .nav-item > a:focus,     .nav-item > a.open {         border: 1px solid #dedede;     }     /* open state of first descendant link within a top level         navigation item */     .nav-item > a.open {         background-color: #fff;         border-bottom: none;         z-index: 1;     }     /* sub-navigation panel */     .sub-nav {         position: absolute;         display: none;         top: 2.2em;         margin-top: -1px;         padding: 0.5em 1em;         border: 1px solid #dedede;         background-color: #fff;     }     /* sub-navigation panel open state */     .sub-nav.open {         display: block;     }     /* list of items within sub-navigation panel */     .sub-nav ul {         display: inline-block;         vertical-align: top;         margin: 0 1em 0 0;         padding: 0;     }     /* list item within sub-navigation panel */     .sub-nav li {         display: block;         list-style-type: none;         margin: 0;         padding: 0;     }   Putting it all together, here is the completed example:     <!doctype html>     <html lang=""en"">     <head>     <meta charset=""UTF-8"">     <title>Simple Accessible Mega Menu Example</title>     <style>         /* Rudimentary mega menu CSS for demonstration */             /* mega menu list */         .nav-menu {             display: block;             position: relative;             list-style: none;             margin: 0;             padding: 0;             z-index: 15;         }         /* a top level navigation item in the mega menu */         .nav-item {             list-style: none;             display: inline-block;             padding: 0;             margin: 0;         }         /* first descendant link within a top level navigation item */         .nav-item > a {             position: relative;             display: inline-block;             padding: 0.5em 1em;             margin: 0 0 -1px 0;             border: 1px solid transparent;         }         /* focus/open states of first descendant link within a top level             navigation item */         .nav-item > a:focus,         .nav-item > a.open {             border: 1px solid #dedede;         }         /* open state of first descendant link within a top level             navigation item */         .nav-item > a.open {             background-color: #fff;             border-bottom: none;             z-index: 1;         }         /* sub-navigation panel */         .sub-nav {             position: absolute;             display: none;             top: 2.2em;             margin-top: -1px;             padding: 0.5em 1em;             border: 1px solid #dedede;             background-color: #fff;         }         /* sub-navigation panel open state */         .sub-nav.open {             display: block;         }         /* list of items within sub-navigation panel */         .sub-nav ul {             display: inline-block;             vertical-align: top;             margin: 0 1em 0 0;             padding: 0;         }         /* list item within sub-navigation panel */         .sub-nav li {             display: block;             list-style-type: none;             margin: 0;             padding: 0;         }          </style>     </head>     <body>     <nav>         <ul class=""nav-menu"">             <li class=""nav-item"">                 <a href=""?movie"">Movies</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=0"">Action &amp; Adventure</a></li>                         <li><a href=""?movie&genre=2"">Children &amp; Family</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=7"">Dramas</a></li>                         <li><a href=""?movie&genre=9"">Foreign</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=14"">Musicals</a></li>                         <li><a href=""?movie&genre=15"">Romance</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>             <li class=""nav-item"">                 <a href=""?tv"">TV Shows</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=20"">Classic TV</a></li>                         <li><a href=""?tv&genre=21"">Crime TV</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=27"">Reality TV</a></li>                         <li><a href=""?tv&genre=30"">TV Action</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=33"">TV Dramas</a></li>                         <li><a href=""?tv&genre=34"">TV Horror</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>         </ul>     </nav>          <!-- include jquery -->     <script src=""//code.jquery.com/jquery-1.10.1.min.js""></script>     <!-- include the jquery-accessibleMegaMenu plugin script -->     <script src=""js/jquery-accessibleMegaMenu.js""></script>     <!-- initialize a selector as an accessibleMegaMenu -->     <script>         $(""nav:first"").accessibleMegaMenu({             /* prefix for generated unique id attributes, which are required                 to indicate aria-owns, aria-controls and aria-labelledby */             uuidPrefix: ""accessible-megamenu"",                          /* css class used to define the megamenu styling */             menuClass: ""nav-menu"",                          /* css class for a top-level navigation item in the megamenu */             topNavItemClass: ""nav-item"",                          /* css class for a megamenu panel */             panelClass: ""sub-nav"",                          /* css class for a group of items within a megamenu panel */             panelGroupClass: ""sub-nav-group"",                          /* css class for the hover state */             hoverClass: ""hover"",                          /* css class for the focus state */             focusClass: ""focus"",                          /* css class for the open state */             openClass: ""open""         });     </script>     </body>     </html> About A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. Resources Readme License Apache-2.0 License Releases No releases published Packages 0 No packages published Used by 15 + 7 Contributors 7 Languages HTML 71.8% CSS 26.4% JavaScript 1.8% © 2021 GitHub, Inc. Terms Privacy Security Status Docs Contact GitHub Pricing API Training Blog About You can’t perform that action at this time. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."
574349,20210423,github.com,https://github.com/crypto-browserify/crypto-browserify,text/html,text/html,en,"GitHub - crypto-browserify/crypto-browserify: partial implementation of node's `crypto` for the browser Skip to content Sign up Sign up Why GitHub? Features → Mobile → Actions → Codespaces → Packages → Security → Code review → Project management → Integrations → GitHub Sponsors → Customer stories→ Team Enterprise Explore Explore GitHub → Learn and contribute Topics → Collections → Trending → Learning Lab → Open source guides → Connect with others The ReadME Project → Events → Community forum → GitHub Education → GitHub Stars program → Marketplace Pricing Plans → Compare plans → Contact Sales → Education → In this repository All GitHub ↵ Jump to ↵ No suggested jump to results In this repository All GitHub ↵ Jump to ↵ In this organization All GitHub ↵ Jump to ↵ In this repository All GitHub ↵ Jump to ↵ Sign in Sign up Sign up {{ message }} crypto-browserify / crypto-browserify Notifications Star 474 Fork 155 partial implementation of node's `crypto` for the browser MIT License 474 stars 155 forks Star Notifications Code Issues 19 Pull requests 6 Actions Projects 0 Wiki Security Insights More Code Issues Pull requests Actions Projects Wiki Security Insights master Switch branches/tags Branches Tags Nothing to show {{ refName }} default View all branches Nothing to show {{ refName }} default View all tags 6 branches 31 tags Go to file Code Clone HTTPS GitHub CLI Use Git or checkout with SVN using the web URL. Work fast with our official CLI. Learn more. Open with GitHub Desktop Download ZIP Launching GitHub Desktop If nothing happens, download GitHub Desktop and try again. Go back Launching GitHub Desktop If nothing happens, download GitHub Desktop and try again. Go back Launching Xcode If nothing happens, download Xcode and try again. Go back Launching Visual Studio If nothing happens, download the GitHub extension for Visual Studio and try again. Go back Latest commit calvinmetcalf fix debian issue (maybe) … 460a13b Feb 9, 2018 fix debian issue (maybe) 460a13b Git stats 362 commits Files Permalink Failed to load latest commit information. Type Name Latest commit message Commit time example add standard 5.0.0 Aug 13, 2015 test fix debian issue (maybe) Feb 9, 2018 .gitignore Add .gitignore Aug 5, 2013 .travis.yml saucelabs aparently only goes back to 7 Oct 19, 2017 .zuul.yml add zuul and browser tests Oct 3, 2015 LICENSE Add MIT license Sep 20, 2013 README.md add privateEncrypt/publicDecrypt to README Dec 14, 2015 index.js add rndom fill Oct 18, 2017 package.json 3.12.0 Nov 3, 2017 View code crypto-browserify todo contributions License README.md crypto-browserify A port of node's crypto module to the browser. The goal of this module is to reimplement node's crypto module, in pure javascript so that it can run in the browser. Here is the subset that is currently implemented: createHash (sha1, sha224, sha256, sha384, sha512, md5, rmd160) createHmac (sha1, sha224, sha256, sha384, sha512, md5, rmd160) pbkdf2 pbkdf2Sync randomBytes pseudoRandomBytes createCipher (aes) createDecipher (aes) createDiffieHellman createSign (rsa, ecdsa) createVerify (rsa, ecdsa) createECDH (secp256k1) publicEncrypt/privateDecrypt (rsa) privateEncrypt/publicDecrypt (rsa) todo these features from node's crypto are still unimplemented. createCredentials contributions If you are interested in writing a feature, please implement as a new module, which will be incorporated into crypto-browserify as a dependency. All deps must be compatible with node's crypto (generate example inputs and outputs with node, and save base64 strings inside JSON, so that tests can run in the browser. see sha.js Crypto is extra serious so please do not hesitate to review the code, and post comments if you do. License MIT About partial implementation of node's `crypto` for the browser Resources Readme License MIT License Releases 31 tags Packages 0 No packages published Used by 5.8m + 5,815,713 Contributors 24 + 13 contributors Languages JavaScript 99.1% HTML 0.9% © 2021 GitHub, Inc. Terms Privacy Security Status Docs Contact GitHub Pricing API Training Blog About You can’t perform that action at this time. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."
574352,20210423,github.com,https://github.com/indutny/elliptic/issues,text/html,text/html,en,"Issues · indutny/elliptic · GitHub Skip to content Sign up Sign up Why GitHub? Features → Mobile → Actions → Codespaces → Packages → Security → Code review → Project management → Integrations → GitHub Sponsors → Customer stories→ Team Enterprise Explore Explore GitHub → Learn and contribute Topics → Collections → Trending → Learning Lab → Open source guides → Connect with others The ReadME Project → Events → Community forum → GitHub Education → GitHub Stars program → Marketplace Pricing Plans → Compare plans → Contact Sales → Education → In this repository All GitHub ↵ Jump to ↵ No suggested jump to results In this repository All GitHub ↵ Jump to ↵ In this user All GitHub ↵ Jump to ↵ In this repository All GitHub ↵ Jump to ↵ Sign in Sign up Sign up {{ message }} indutny / elliptic Notifications Star 1.2k Fork 301 Code Issues 74 Pull requests 19 Actions Projects 0 Wiki Security Insights More Code Issues Pull requests Actions Projects Wiki Security Insights Labels 8 Milestones 0 Labels 8 Milestones 0 New issue Have a question about this project? Sign up for a free GitHub account to open an issue and contact its maintainers and the community. Pick a username Email Address Password Sign up for GitHub By clicking “Sign up for GitHub”, you agree to our terms of service and privacy statement. We’ll occasionally send you account related emails. Already on GitHub? Sign in to your account 74 Open 97 Closed 74 Open 97 Closed Author Filter by author author: Filter by this user Label Filter by label Use alt + click/return to exclude labels. Projects Filter by project Milestones Filter by milestone Assignee Filter by who’s assigned Sort Sort by Newest Oldest Most commented Least commented Recently updated Least recently updated Most reactions 👍 👎 😄 🎉 😕 ❤️ 🚀 👀 How to use keys with crypto.subtle #255 opened Apr 1, 2021 by DominicTobias-b1 EDDSA.decodeInt should fails or reduce by dafault? #254 opened Mar 18, 2021 by mahnunchik Sad state #251 opened Mar 11, 2021 by berkus EDDSA.decodePoint should fails on ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff #250 opened Mar 3, 2021 by mahnunchik 14 Add endian argument to bn.js toString method #249 opened Mar 2, 2021 by mahnunchik EDDSA decodePoint doesn't support Buffer as argument #248 opened Mar 2, 2021 by mahnunchik How to decipher the encrypted message? #245 opened Jan 27, 2021 by istabraq-iot Montgomery Curve25519 is not openssl compatible #243 opened Dec 28, 2020 by jc-lab 4 Curves p384 and p521 produce incorrect results #239 opened Oct 18, 2020 by guidovranken i want to use this library with c# #238 opened Oct 10, 2020 by medozeus Elliptic.js support following curve types: #236 opened Oct 5, 2020 by medozeus The Elliptic package 6.5.2 for Node.js allows ECDSA signature malleability via variations in encoding, leading '\0' bytes, or integer overflows. #235 opened Oct 1, 2020 by bsomeshwer EdDSA: What is a reason to manipulate with bytes? #233 opened Aug 27, 2020 by mahnunchik why use derive method get ECDH key，i got different length #230 opened Jul 10, 2020 by cqupt-yifanwu 4 Why do I generate my local test path in chunk-vendors when packing with NPM #229 opened Jun 22, 2020 by Anthonychen1994 1 TypedArray support ? #228 opened Jun 20, 2020 by dojyorin Is there way to generate PKCS#8 private key from Pem format ECC Private key #225 opened Apr 28, 2020 by sureshreddygovindu Signature validation in python. Prefix configuration? #224 opened Apr 25, 2020 by amrbz is it possible to do assymetric encryption? #223 opened Apr 7, 2020 by maroodb 1 Missing infinity point encoding #218 opened Feb 21, 2020 by catenacyber 1 ECDH P-521 public key point not on curve according to java (clojure) #216 opened Feb 11, 2020 by slhabity 1 how save and load private / publick key in pem or other format #215 opened Jan 27, 2020 by fturiot 2 How to pair client to server BTCPay NodeJS client? #214 opened Jan 21, 2020 by savshit 1 How to pair client to server BTCPay NodeJS client? #213 opened Jan 21, 2020 by savshit curve25519 and BouncyCastle(bc) in c# Different compute shared secret #209 opened Dec 11, 2019 by shamohai 2 Previous 1 2 3 Next Previous Next ProTip! Adding no:label will show everything without a label. © 2021 GitHub, Inc. Terms Privacy Security Status Docs Contact GitHub Pricing API Training Blog About You can’t perform that action at this time. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."
574356,20210423,github.com,https://github.com/indutny/elliptic,text/html,text/html,en,"GitHub - indutny/elliptic: Fast Elliptic Curve Cryptography in plain javascript Skip to content Sign up Sign up Why GitHub? Features → Mobile → Actions → Codespaces → Packages → Security → Code review → Project management → Integrations → GitHub Sponsors → Customer stories→ Team Enterprise Explore Explore GitHub → Learn and contribute Topics → Collections → Trending → Learning Lab → Open source guides → Connect with others The ReadME Project → Events → Community forum → GitHub Education → GitHub Stars program → Marketplace Pricing Plans → Compare plans → Contact Sales → Education → In this repository All GitHub ↵ Jump to ↵ No suggested jump to results In this repository All GitHub ↵ Jump to ↵ In this user All GitHub ↵ Jump to ↵ In this repository All GitHub ↵ Jump to ↵ Sign in Sign up Sign up {{ message }} indutny / elliptic Notifications Star 1.2k Fork 301 Fast Elliptic Curve Cryptography in plain javascript 1.2k stars 301 forks Star Notifications Code Issues 74 Pull requests 19 Actions Projects 0 Wiki Security Insights More Code Issues Pull requests Actions Projects Wiki Security Insights master Switch branches/tags Branches Tags Nothing to show {{ refName }} default View all branches Nothing to show {{ refName }} default View all tags 2 branches 85 tags Go to file Code Clone HTTPS GitHub CLI Use Git or checkout with SVN using the web URL. Work fast with our official CLI. Learn more. Open with GitHub Desktop Download ZIP Launching GitHub Desktop If nothing happens, download GitHub Desktop and try again. Go back Launching GitHub Desktop If nothing happens, download GitHub Desktop and try again. Go back Launching Xcode If nothing happens, download Xcode and try again. Go back Launching Visual Studio If nothing happens, download the GitHub extension for Visual Studio and try again. Go back Latest commit indutny 6.5.4 … 43ac7f2 Feb 2, 2021 6.5.4 43ac7f2 Git stats 331 commits Files Permalink Failed to load latest commit information. Type Name Latest commit message Commit time benchmarks dist lib test .codeclimate.yml .eslintignore .eslintrc.js .gitignore .npmignore .travis.yml Gruntfile.js README.md package-lock.json package.json View code Elliptic Incentive Benchmarks API ECDSA EdDSA ECDH Supported curves Implementation details Related projects LICENSE README.md Elliptic Fast elliptic-curve cryptography in a plain javascript implementation. NOTE: Please take a look at http://safecurves.cr.yp.to/ before choosing a curve for your cryptography operations. Incentive ECC is much slower than regular RSA cryptography, the JS implementations are even more slower. Benchmarks $ node benchmarks/index.js Benchmarking: sign elliptic#sign x 262 ops/sec ±0.51% (177 runs sampled) eccjs#sign x 55.91 ops/sec ±0.90% (144 runs sampled) ------------------------ Fastest is elliptic#sign ======================== Benchmarking: verify elliptic#verify x 113 ops/sec ±0.50% (166 runs sampled) eccjs#verify x 48.56 ops/sec ±0.36% (125 runs sampled) ------------------------ Fastest is elliptic#verify ======================== Benchmarking: gen elliptic#gen x 294 ops/sec ±0.43% (176 runs sampled) eccjs#gen x 62.25 ops/sec ±0.63% (129 runs sampled) ------------------------ Fastest is elliptic#gen ======================== Benchmarking: ecdh elliptic#ecdh x 136 ops/sec ±0.85% (156 runs sampled) ------------------------ Fastest is elliptic#ecdh ======================== API ECDSA var EC = require('elliptic').ec; // Create and initialize EC context // (better do it once and reuse it) var ec = new EC('secp256k1'); // Generate keys var key = ec.genKeyPair(); // Sign the message's hash (input must be an array, or a hex-string) var msgHash = [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ]; var signature = key.sign(msgHash); // Export DER encoded signature in Array var derSign = signature.toDER(); // Verify signature console.log(key.verify(msgHash, derSign)); // CHECK WITH NO PRIVATE KEY var pubPoint = key.getPublic(); var x = pubPoint.getX(); var y = pubPoint.getY(); // Public Key MUST be either: // 1) '04' + hex string of x + hex string of y; or // 2) object with two hex string properties (x and y); or // 3) object with two buffer properties (x and y) var pub = pubPoint.encode('hex');                                 // case 1 var pub = { x: x.toString('hex'), y: y.toString('hex') };         // case 2 var pub = { x: x.toBuffer(), y: y.toBuffer() };                   // case 3 var pub = { x: x.toArrayLike(Buffer), y: y.toArrayLike(Buffer) }; // case 3 // Import public key var key = ec.keyFromPublic(pub, 'hex'); // Signature MUST be either: // 1) DER-encoded signature as hex-string; or // 2) DER-encoded signature as buffer; or // 3) object with two hex-string properties (r and s); or // 4) object with two buffer properties (r and s) var signature = '3046022100...'; // case 1 var signature = new Buffer('...'); // case 2 var signature = { r: 'b1fc...', s: '9c42...' }; // case 3 // Verify signature console.log(key.verify(msgHash, signature)); EdDSA var EdDSA = require('elliptic').eddsa; // Create and initialize EdDSA context // (better do it once and reuse it) var ec = new EdDSA('ed25519'); // Create key pair from secret var key = ec.keyFromSecret('693e3c...'); // hex string, array or Buffer // Sign the message's hash (input must be an array, or a hex-string) var msgHash = [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ]; var signature = key.sign(msgHash).toHex(); // Verify signature console.log(key.verify(msgHash, signature)); // CHECK WITH NO PRIVATE KEY // Import public key var pub = '0a1af638...'; var key = ec.keyFromPublic(pub, 'hex'); // Verify signature var signature = '70bed1...'; console.log(key.verify(msgHash, signature)); ECDH var EC = require('elliptic').ec; var ec = new EC('curve25519'); // Generate keys var key1 = ec.genKeyPair(); var key2 = ec.genKeyPair(); var shared1 = key1.derive(key2.getPublic()); var shared2 = key2.derive(key1.getPublic()); console.log('Both shared secrets are BN instances'); console.log(shared1.toString(16)); console.log(shared2.toString(16)); three and more members: var EC = require('elliptic').ec; var ec = new EC('curve25519'); var A = ec.genKeyPair(); var B = ec.genKeyPair(); var C = ec.genKeyPair(); var AB = A.getPublic().mul(B.getPrivate()) var BC = B.getPublic().mul(C.getPrivate()) var CA = C.getPublic().mul(A.getPrivate()) var ABC = AB.mul(C.getPrivate()) var BCA = BC.mul(A.getPrivate()) var CAB = CA.mul(B.getPrivate()) console.log(ABC.getX().toString(16)) console.log(BCA.getX().toString(16)) console.log(CAB.getX().toString(16)) NOTE: .derive() returns a BN instance. Supported curves Elliptic.js support following curve types: Short Weierstrass Montgomery Edwards Twisted Edwards Following curve 'presets' are embedded into the library: secp256k1 p192 p224 p256 p384 p521 curve25519 ed25519 NOTE: That curve25519 could not be used for ECDSA, use ed25519 instead. Implementation details ECDSA is using deterministic k value generation as per RFC6979. Most of the curve operations are performed on non-affine coordinates (either projective or extended), various windowing techniques are used for different cases. All operations are performed in reduction context using bn.js, hashing is provided by hash.js Related projects eccrypto: isomorphic implementation of ECDSA, ECDH and ECIES for both browserify and node (uses elliptic for browser and secp256k1-node for node) LICENSE This software is licensed under the MIT License. Copyright Fedor Indutny, 2014. Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the ""Software""), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. About Fast Elliptic Curve Cryptography in plain javascript Resources Readme Releases 85 tags Packages 0 No packages published Contributors 25 + 14 contributors Languages JavaScript 99.3% HTML 0.7% © 2021 GitHub, Inc. Terms Privacy Security Status Docs Contact GitHub Pricing API Training Blog About You can’t perform that action at this time. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."
577255,20210430,github.com,https://github.com/adobe-accessibility/Accessible-Mega-Menu,text/html,text/html,en,"GitHub - adobe-accessibility/Accessible-Mega-Menu: A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. Skip to content Sign up Sign up Why GitHub? Features → Mobile → Actions → Codespaces → Packages → Security → Code review → Project management → Integrations → GitHub Sponsors → Customer stories→ Team Enterprise Explore Explore GitHub → Learn and contribute Topics → Collections → Trending → Learning Lab → Open source guides → Connect with others The ReadME Project → Events → Community forum → GitHub Education → GitHub Stars program → Marketplace Pricing Plans → Compare plans → Contact Sales → Education → In this repository All GitHub ↵ Jump to ↵ No suggested jump to results In this repository All GitHub ↵ Jump to ↵ In this organization All GitHub ↵ Jump to ↵ In this repository All GitHub ↵ Jump to ↵ Sign in Sign up Sign up {{ message }} adobe-accessibility / Accessible-Mega-Menu Notifications Star 577 Fork 197 A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. Apache-2.0 License 577 stars 197 forks Star Notifications Code Issues 28 Pull requests 6 Actions Projects 0 Wiki Security Insights More Code Issues Pull requests Actions Projects Wiki Security Insights master Switch branches/tags Branches Tags Nothing to show {{ refName }} default View all branches Nothing to show {{ refName }} default View all tags 2 branches 0 tags Go to file Code Clone HTTPS GitHub CLI Use Git or checkout with SVN using the web URL. Work fast with our official CLI. Learn more. Open with GitHub Desktop Download ZIP Launching GitHub Desktop If nothing happens, download GitHub Desktop and try again. Go back Launching GitHub Desktop If nothing happens, download GitHub Desktop and try again. Go back Launching Xcode If nothing happens, download Xcode and try again. Go back Launching Visual Studio If nothing happens, download the GitHub extension for Visual Studio and try again. Go back Latest commit majornista fix evaluation for ChromeVox object … 5c070bc Dec 7, 2020 fix evaluation for ChromeVox object 5c070bc Git stats 39 commits Files Permalink Failed to load latest commit information. Type Name Latest commit message Commit time css Add openOnMouseover setting, and toggleButtonClass for responsive layout May 11, 2018 js fix evaluation for ChromeVox object Dec 7, 2020 third-party/jquery initial commit Aug 26, 2013 LICENSE initial commit Aug 26, 2013 NOTICE initial commit Aug 26, 2013 README.md initial commit Aug 26, 2013 index.html Updating WCAG 2.0 References to WCAG 2.1 (#67) Dec 4, 2020 package.json Updating repo references Jul 8, 2016 View code Accessible Mega Menu Keyboard Accessibility Screen Reader Accessibility Usage HTML JavaScript CSS README.md Accessible Mega Menu ========================= A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. It is modeled after the mega menu on adobe.com but has been simplified for use by others. An brief explanation of our interaction design choices can be found in a blog post at Mega menu accessibility on adobe.com. Content for the links and text within the mega menu comes from the Web Content Accessibility Guidelines (WCAG) 2.0. Keyboard Accessibility The accessible mega menu supports keyboard interaction modeled after the behavior described in the WAI-ARIA Menu or Menu bar (widget) design pattern, however we also try to respect users' general expectations for the behavior of links in a global navigation. To this end, the accessible mega menu implementation permits tab focus on each of the six top-level menu items. When one of the menu items has focus, pressing the Enter key, Spacebar or Down arrow will open the submenu panel, and pressing the Left or Right arrow key will shift focus to the adjacent menu item. Links within the submenu panels are included in the tab order when the panel is open. They can also be navigated with the arrow keys or by typing the first character in the link name, which speeds up keyboard navigation considerably. Pressing the Escape key closes the submenu and restores focus to the parent menu item. Screen Reader Accessibility The accessible mega menu models its use of WAI-ARIA Roles, States, and Properties after those described in the WAI-ARIA Menu or Menu bar (widget) design pattern with some notable exceptions, so that it behaves better with screen reader user expectations for global navigation. We don't use role=""menu"" for the menu container and role=""menuitem"" for each of the links therein, because if we do, assistive technology will no longer interpret the links as links, but instead, as menu items, and the links in our global navigation will no longer show up when a screen reader user executes a shortcut command to bring up a list of links in the page. We also want to maintain the semantic structure of the submenu panels in our mega menu; our links are organized into lists and separated by headings. Omitting role=""menu"" and role=""menuitem"" for the global navigation seems the safer way to go. Usage HTML The HTML structure for the mega menu is a nav element, or any other container element, containing a list. Each list item contains a link which is followed by a div or any other container element which will serve as the pop up panel. The panel can contain any html content; in the following example, each panel contains three lists of links. You can explicitly define groups within the panel, between which a user can navigate quickly using the left and right arrow keys; in the following example, the CSS class .sub-nav-group identifies a navigable group.     <nav>         <ul class=""nav-menu"">             <li class=""nav-item"">                 <a href=""?movie"">Movies</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=0"">Action &amp; Adventure</a></li>                         <li><a href=""?movie&genre=2"">Children &amp; Family</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=7"">Dramas</a></li>                         <li><a href=""?movie&genre=9"">Foreign</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=14"">Musicals</a></li>                         <li><a href=""?movie&genre=15"">Romance</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>             <li class=""nav-item"">                 <a href=""?tv"">TV Shows</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=20"">Classic TV</a></li>                         <li><a href=""?tv&genre=21"">Crime TV</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=27"">Reality TV</a></li>                         <li><a href=""?tv&genre=30"">TV Action</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=33"">TV Dramas</a></li>                         <li><a href=""?tv&genre=34"">TV Horror</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>         </ul>     </nav> By default, accessibleMegaMenu uses the the following CSS classes to define the top-level navigation items, panels, groups within the panels, and the hover, focus, and open states. It also defines a prefix for unique id strings, which are required to indicate the relationship of a top-level navigation item to the panel it controls.     defaults = {         /* unique ID's are required to indicate aria-owns, aria-controls and aria-labelledby */         uuidPrefix: ""accessible-megamenu"",                  /* default css class used to define the megamenu styling */         menuClass: ""accessible-megamenu"",                  /* default css class for a top-level navigation item in the megamenu */         topNavItemClass: ""accessible-megamenu-top-nav-item"",                  /* default css class for a megamenu panel */         panelClass: ""accessible-megamenu-panel"",                  /* default css class for a group of items within a megamenu panel */         panelGroupClass: ""accessible-megamenu-panel-group"",                  /* default css class for the hover state */         hoverClass: ""hover"",                  /* default css class for the focus state */         focusClass: ""focus"",                  /* default css class for the open state */         openClass: ""open""      } You can optionally override the defaults to use the CSS classes you may have already defined for your mega menu. JavaScript Be sure to include jQuery and the jquery-accessibleMegaMenu.js plugin script.     <script src=""//code.jquery.com/jquery-1.10.1.min.js""></script>     <script src=""js/jquery-accessibleMegaMenu.js""></script> The following initializes the first nav element in the document as an accessibleMegaMenu, with optional CSS class overrides.     $(""nav:first"").accessibleMegaMenu({         /* prefix for generated unique id attributes, which are required             to indicate aria-owns, aria-controls and aria-labelledby */         uuidPrefix: ""accessible-megamenu"",                  /* css class used to define the megamenu styling */         menuClass: ""nav-menu"",                  /* css class for a top-level navigation item in the megamenu */         topNavItemClass: ""nav-item"",                  /* css class for a megamenu panel */         panelClass: ""sub-nav"",                  /* css class for a group of items within a megamenu panel */         panelGroupClass: ""sub-nav-group"",                  /* css class for the hover state */         hoverClass: ""hover"",                  /* css class for the focus state */         focusClass: ""focus"",                  /* css class for the open state */         openClass: ""open""     }); CSS AccessibleMegaMenu handles the showing and hiding of panels by adding or removing a CSS class. No inline styles are added to hide elements or create animation between states. Following is some rudimentary CSS for our example which enables the showing/hiding of and the layout of lists panels in the mega menu.     /* mega menu list */     .nav-menu {         display: block;         position: relative;         list-style: none;         margin: 0;         padding: 0;         z-index: 15;     }     /* a top level navigation item in the mega menu */     .nav-item {         list-style: none;         display: inline-block;         padding: 0;         margin: 0;     }     /* first descendant link within a top level navigation item */     .nav-item > a {         position: relative;         display: inline-block;         padding: 0.5em 1em;         margin: 0 0 -1px 0;         border: 1px solid transparent;     }     /* focus/open states of first descendant link within a top level         navigation item */     .nav-item > a:focus,     .nav-item > a.open {         border: 1px solid #dedede;     }     /* open state of first descendant link within a top level         navigation item */     .nav-item > a.open {         background-color: #fff;         border-bottom: none;         z-index: 1;     }     /* sub-navigation panel */     .sub-nav {         position: absolute;         display: none;         top: 2.2em;         margin-top: -1px;         padding: 0.5em 1em;         border: 1px solid #dedede;         background-color: #fff;     }     /* sub-navigation panel open state */     .sub-nav.open {         display: block;     }     /* list of items within sub-navigation panel */     .sub-nav ul {         display: inline-block;         vertical-align: top;         margin: 0 1em 0 0;         padding: 0;     }     /* list item within sub-navigation panel */     .sub-nav li {         display: block;         list-style-type: none;         margin: 0;         padding: 0;     }   Putting it all together, here is the completed example:     <!doctype html>     <html lang=""en"">     <head>     <meta charset=""UTF-8"">     <title>Simple Accessible Mega Menu Example</title>     <style>         /* Rudimentary mega menu CSS for demonstration */             /* mega menu list */         .nav-menu {             display: block;             position: relative;             list-style: none;             margin: 0;             padding: 0;             z-index: 15;         }         /* a top level navigation item in the mega menu */         .nav-item {             list-style: none;             display: inline-block;             padding: 0;             margin: 0;         }         /* first descendant link within a top level navigation item */         .nav-item > a {             position: relative;             display: inline-block;             padding: 0.5em 1em;             margin: 0 0 -1px 0;             border: 1px solid transparent;         }         /* focus/open states of first descendant link within a top level             navigation item */         .nav-item > a:focus,         .nav-item > a.open {             border: 1px solid #dedede;         }         /* open state of first descendant link within a top level             navigation item */         .nav-item > a.open {             background-color: #fff;             border-bottom: none;             z-index: 1;         }         /* sub-navigation panel */         .sub-nav {             position: absolute;             display: none;             top: 2.2em;             margin-top: -1px;             padding: 0.5em 1em;             border: 1px solid #dedede;             background-color: #fff;         }         /* sub-navigation panel open state */         .sub-nav.open {             display: block;         }         /* list of items within sub-navigation panel */         .sub-nav ul {             display: inline-block;             vertical-align: top;             margin: 0 1em 0 0;             padding: 0;         }         /* list item within sub-navigation panel */         .sub-nav li {             display: block;             list-style-type: none;             margin: 0;             padding: 0;         }          </style>     </head>     <body>     <nav>         <ul class=""nav-menu"">             <li class=""nav-item"">                 <a href=""?movie"">Movies</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=0"">Action &amp; Adventure</a></li>                         <li><a href=""?movie&genre=2"">Children &amp; Family</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=7"">Dramas</a></li>                         <li><a href=""?movie&genre=9"">Foreign</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=14"">Musicals</a></li>                         <li><a href=""?movie&genre=15"">Romance</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>             <li class=""nav-item"">                 <a href=""?tv"">TV Shows</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=20"">Classic TV</a></li>                         <li><a href=""?tv&genre=21"">Crime TV</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=27"">Reality TV</a></li>                         <li><a href=""?tv&genre=30"">TV Action</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=33"">TV Dramas</a></li>                         <li><a href=""?tv&genre=34"">TV Horror</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>         </ul>     </nav>          <!-- include jquery -->     <script src=""//code.jquery.com/jquery-1.10.1.min.js""></script>     <!-- include the jquery-accessibleMegaMenu plugin script -->     <script src=""js/jquery-accessibleMegaMenu.js""></script>     <!-- initialize a selector as an accessibleMegaMenu -->     <script>         $(""nav:first"").accessibleMegaMenu({             /* prefix for generated unique id attributes, which are required                 to indicate aria-owns, aria-controls and aria-labelledby */             uuidPrefix: ""accessible-megamenu"",                          /* css class used to define the megamenu styling */             menuClass: ""nav-menu"",                          /* css class for a top-level navigation item in the megamenu */             topNavItemClass: ""nav-item"",                          /* css class for a megamenu panel */             panelClass: ""sub-nav"",                          /* css class for a group of items within a megamenu panel */             panelGroupClass: ""sub-nav-group"",                          /* css class for the hover state */             hoverClass: ""hover"",                          /* css class for the focus state */             focusClass: ""focus"",                          /* css class for the open state */             openClass: ""open""         });     </script>     </body>     </html> About A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. Resources Readme License Apache-2.0 License Releases No releases published Packages 0 No packages published Contributors 7 Languages HTML 71.8% CSS 26.4% JavaScript 1.8% © 2021 GitHub, Inc. Terms Privacy Security Status Docs Contact GitHub Pricing API Training Blog About You can’t perform that action at this time. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."
587054,20210430,github.com,https://github.com/crypto-browserify/crypto-browserify,text/html,text/html,en,"GitHub - crypto-browserify/crypto-browserify: partial implementation of node's `crypto` for the browser Skip to content Sign up Sign up Why GitHub? Features → Mobile → Actions → Codespaces → Packages → Security → Code review → Project management → Integrations → GitHub Sponsors → Customer stories→ Team Enterprise Explore Explore GitHub → Learn and contribute Topics → Collections → Trending → Learning Lab → Open source guides → Connect with others The ReadME Project → Events → Community forum → GitHub Education → GitHub Stars program → Marketplace Pricing Plans → Compare plans → Contact Sales → Education → In this repository All GitHub ↵ Jump to ↵ No suggested jump to results In this repository All GitHub ↵ Jump to ↵ In this organization All GitHub ↵ Jump to ↵ In this repository All GitHub ↵ Jump to ↵ Sign in Sign up Sign up {{ message }} crypto-browserify / crypto-browserify Notifications Star 474 Fork 155 partial implementation of node's `crypto` for the browser MIT License 474 stars 155 forks Star Notifications Code Issues 19 Pull requests 6 Actions Projects 0 Wiki Security Insights More Code Issues Pull requests Actions Projects Wiki Security Insights master Switch branches/tags Branches Tags Nothing to show {{ refName }} default View all branches Nothing to show {{ refName }} default View all tags 6 branches 31 tags Go to file Code Clone HTTPS GitHub CLI Use Git or checkout with SVN using the web URL. Work fast with our official CLI. Learn more. Open with GitHub Desktop Download ZIP Launching GitHub Desktop If nothing happens, download GitHub Desktop and try again. Go back Launching GitHub Desktop If nothing happens, download GitHub Desktop and try again. Go back Launching Xcode If nothing happens, download Xcode and try again. Go back Launching Visual Studio If nothing happens, download the GitHub extension for Visual Studio and try again. Go back Latest commit calvinmetcalf fix debian issue (maybe) … 460a13b Feb 9, 2018 fix debian issue (maybe) 460a13b Git stats 362 commits Files Permalink Failed to load latest commit information. Type Name Latest commit message Commit time example add standard 5.0.0 Aug 13, 2015 test fix debian issue (maybe) Feb 9, 2018 .gitignore Add .gitignore Aug 5, 2013 .travis.yml saucelabs aparently only goes back to 7 Oct 19, 2017 .zuul.yml add zuul and browser tests Oct 3, 2015 LICENSE Add MIT license Sep 20, 2013 README.md add privateEncrypt/publicDecrypt to README Dec 14, 2015 index.js add rndom fill Oct 18, 2017 package.json 3.12.0 Nov 3, 2017 View code crypto-browserify todo contributions License README.md crypto-browserify A port of node's crypto module to the browser. The goal of this module is to reimplement node's crypto module, in pure javascript so that it can run in the browser. Here is the subset that is currently implemented: createHash (sha1, sha224, sha256, sha384, sha512, md5, rmd160) createHmac (sha1, sha224, sha256, sha384, sha512, md5, rmd160) pbkdf2 pbkdf2Sync randomBytes pseudoRandomBytes createCipher (aes) createDecipher (aes) createDiffieHellman createSign (rsa, ecdsa) createVerify (rsa, ecdsa) createECDH (secp256k1) publicEncrypt/privateDecrypt (rsa) privateEncrypt/publicDecrypt (rsa) todo these features from node's crypto are still unimplemented. createCredentials contributions If you are interested in writing a feature, please implement as a new module, which will be incorporated into crypto-browserify as a dependency. All deps must be compatible with node's crypto (generate example inputs and outputs with node, and save base64 strings inside JSON, so that tests can run in the browser. see sha.js Crypto is extra serious so please do not hesitate to review the code, and post comments if you do. License MIT About partial implementation of node's `crypto` for the browser Resources Readme License MIT License Releases 31 tags Packages 0 No packages published Used by 5.8m + 5,847,137 Contributors 24 + 13 contributors Languages JavaScript 99.1% HTML 0.9% © 2021 GitHub, Inc. Terms Privacy Security Status Docs Contact GitHub Pricing API Training Blog About You can’t perform that action at this time. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."
587056,20210430,github.com,https://github.com/indutny/elliptic/issues,text/html,text/html,en,"Issues · indutny/elliptic · GitHub Skip to content Sign up Sign up Why GitHub? Features → Mobile → Actions → Codespaces → Packages → Security → Code review → Project management → Integrations → GitHub Sponsors → Customer stories→ Team Enterprise Explore Explore GitHub → Learn and contribute Topics → Collections → Trending → Learning Lab → Open source guides → Connect with others The ReadME Project → Events → Community forum → GitHub Education → GitHub Stars program → Marketplace Pricing Plans → Compare plans → Contact Sales → Education → In this repository All GitHub ↵ Jump to ↵ No suggested jump to results In this repository All GitHub ↵ Jump to ↵ In this user All GitHub ↵ Jump to ↵ In this repository All GitHub ↵ Jump to ↵ Sign in Sign up Sign up {{ message }} indutny / elliptic Notifications Star 1.2k Fork 301 Code Issues 75 Pull requests 19 Actions Projects 0 Wiki Security Insights More Code Issues Pull requests Actions Projects Wiki Security Insights Labels 8 Milestones 0 Labels 8 Milestones 0 New issue Have a question about this project? Sign up for a free GitHub account to open an issue and contact its maintainers and the community. Pick a username Email Address Password Sign up for GitHub By clicking “Sign up for GitHub”, you agree to our terms of service and privacy statement. We’ll occasionally send you account related emails. Already on GitHub? Sign in to your account 75 Open 97 Closed 75 Open 97 Closed Author Filter by author author: Filter by this user Label Filter by label Use alt + click/return to exclude labels. Projects Filter by project Milestones Filter by milestone Assignee Filter by who’s assigned Sort Sort by Newest Oldest Most commented Least commented Recently updated Least recently updated Most reactions 👍 👎 😄 🎉 😕 ❤️ 🚀 👀 deriving private key from public key #257 opened Apr 27, 2021 by madhav-madhusoodanan How to use keys with crypto.subtle #255 opened Apr 1, 2021 by DominicTobias-b1 EDDSA.decodeInt should fails or reduce by dafault? #254 opened Mar 18, 2021 by mahnunchik Sad state #251 opened Mar 11, 2021 by berkus EDDSA.decodePoint should fails on ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff #250 opened Mar 3, 2021 by mahnunchik 15 Add endian argument to bn.js toString method #249 opened Mar 2, 2021 by mahnunchik EDDSA decodePoint doesn't support Buffer as argument #248 opened Mar 2, 2021 by mahnunchik How to decipher the encrypted message? #245 opened Jan 27, 2021 by istabraq-iot Montgomery Curve25519 is not openssl compatible #243 opened Dec 28, 2020 by jc-lab 4 Curves p384 and p521 produce incorrect results #239 opened Oct 18, 2020 by guidovranken i want to use this library with c# #238 opened Oct 10, 2020 by medozeus Elliptic.js support following curve types: #236 opened Oct 5, 2020 by medozeus The Elliptic package 6.5.2 for Node.js allows ECDSA signature malleability via variations in encoding, leading '\0' bytes, or integer overflows. #235 opened Oct 1, 2020 by bsomeshwer EdDSA: What is a reason to manipulate with bytes? #233 opened Aug 27, 2020 by mahnunchik why use derive method get ECDH key，i got different length #230 opened Jul 10, 2020 by cqupt-yifanwu 4 Why do I generate my local test path in chunk-vendors when packing with NPM #229 opened Jun 22, 2020 by Anthonychen1994 1 TypedArray support ? #228 opened Jun 20, 2020 by dojyorin Is there way to generate PKCS#8 private key from Pem format ECC Private key #225 opened Apr 28, 2020 by sureshreddygovindu Signature validation in python. Prefix configuration? #224 opened Apr 25, 2020 by amrbz is it possible to do assymetric encryption? #223 opened Apr 7, 2020 by maroodb 1 Missing infinity point encoding #218 opened Feb 21, 2020 by catenacyber 1 ECDH P-521 public key point not on curve according to java (clojure) #216 opened Feb 11, 2020 by slhabity 1 how save and load private / publick key in pem or other format #215 opened Jan 27, 2020 by fturiot 2 How to pair client to server BTCPay NodeJS client? #214 opened Jan 21, 2020 by savshit 1 How to pair client to server BTCPay NodeJS client? #213 opened Jan 21, 2020 by savshit Previous 1 2 3 Next Previous Next ProTip! Type g p on any issue or pull request to go back to the pull request listing page. © 2021 GitHub, Inc. Terms Privacy Security Status Docs Contact GitHub Pricing API Training Blog About You can’t perform that action at this time. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."
587058,20210430,github.com,https://github.com/indutny/elliptic,text/html,text/html,en,"GitHub - indutny/elliptic: Fast Elliptic Curve Cryptography in plain javascript Skip to content Sign up Sign up Why GitHub? Features → Mobile → Actions → Codespaces → Packages → Security → Code review → Project management → Integrations → GitHub Sponsors → Customer stories→ Team Enterprise Explore Explore GitHub → Learn and contribute Topics → Collections → Trending → Learning Lab → Open source guides → Connect with others The ReadME Project → Events → Community forum → GitHub Education → GitHub Stars program → Marketplace Pricing Plans → Compare plans → Contact Sales → Education → In this repository All GitHub ↵ Jump to ↵ No suggested jump to results In this repository All GitHub ↵ Jump to ↵ In this user All GitHub ↵ Jump to ↵ In this repository All GitHub ↵ Jump to ↵ Sign in Sign up Sign up {{ message }} indutny / elliptic Notifications Star 1.2k Fork 301 Fast Elliptic Curve Cryptography in plain javascript 1.2k stars 301 forks Star Notifications Code Issues 75 Pull requests 19 Actions Projects 0 Wiki Security Insights More Code Issues Pull requests Actions Projects Wiki Security Insights master Switch branches/tags Branches Tags Nothing to show {{ refName }} default View all branches Nothing to show {{ refName }} default View all tags 2 branches 85 tags Go to file Code Clone HTTPS GitHub CLI Use Git or checkout with SVN using the web URL. Work fast with our official CLI. Learn more. Open with GitHub Desktop Download ZIP Launching GitHub Desktop If nothing happens, download GitHub Desktop and try again. Go back Launching GitHub Desktop If nothing happens, download GitHub Desktop and try again. Go back Launching Xcode If nothing happens, download Xcode and try again. Go back Launching Visual Studio If nothing happens, download the GitHub extension for Visual Studio and try again. Go back Latest commit indutny 6.5.4 … 43ac7f2 Feb 2, 2021 6.5.4 43ac7f2 Git stats 331 commits Files Permalink Failed to load latest commit information. Type Name Latest commit message Commit time benchmarks package: remove Makefile and dist Jan 29, 2016 dist 6.5.4 Feb 2, 2021 lib ec: validate that a point before deriving keys Feb 2, 2021 test ec: validate that a point before deriving keys Feb 2, 2021 .codeclimate.yml test: improvements with Saucelabs/Codeclimate Mar 31, 2016 .eslintignore lib: relint using eslint Aug 2, 2020 .eslintrc.js lib: relint using eslint Aug 2, 2020 .gitignore test: improvements with Saucelabs/Codeclimate Mar 31, 2016 .npmignore npmignore: dist May 20, 2016 .travis.yml travis: really move on Jun 26, 2019 Gruntfile.js grunt: fix standalone build May 25, 2016 README.md readme: update example Mar 23, 2017 package-lock.json 6.5.4 Feb 2, 2021 package.json 6.5.4 Feb 2, 2021 View code Elliptic Incentive Benchmarks API ECDSA EdDSA ECDH Supported curves Implementation details Related projects LICENSE README.md Elliptic Fast elliptic-curve cryptography in a plain javascript implementation. NOTE: Please take a look at http://safecurves.cr.yp.to/ before choosing a curve for your cryptography operations. Incentive ECC is much slower than regular RSA cryptography, the JS implementations are even more slower. Benchmarks $ node benchmarks/index.js Benchmarking: sign elliptic#sign x 262 ops/sec ±0.51% (177 runs sampled) eccjs#sign x 55.91 ops/sec ±0.90% (144 runs sampled) ------------------------ Fastest is elliptic#sign ======================== Benchmarking: verify elliptic#verify x 113 ops/sec ±0.50% (166 runs sampled) eccjs#verify x 48.56 ops/sec ±0.36% (125 runs sampled) ------------------------ Fastest is elliptic#verify ======================== Benchmarking: gen elliptic#gen x 294 ops/sec ±0.43% (176 runs sampled) eccjs#gen x 62.25 ops/sec ±0.63% (129 runs sampled) ------------------------ Fastest is elliptic#gen ======================== Benchmarking: ecdh elliptic#ecdh x 136 ops/sec ±0.85% (156 runs sampled) ------------------------ Fastest is elliptic#ecdh ======================== API ECDSA var EC = require('elliptic').ec; // Create and initialize EC context // (better do it once and reuse it) var ec = new EC('secp256k1'); // Generate keys var key = ec.genKeyPair(); // Sign the message's hash (input must be an array, or a hex-string) var msgHash = [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ]; var signature = key.sign(msgHash); // Export DER encoded signature in Array var derSign = signature.toDER(); // Verify signature console.log(key.verify(msgHash, derSign)); // CHECK WITH NO PRIVATE KEY var pubPoint = key.getPublic(); var x = pubPoint.getX(); var y = pubPoint.getY(); // Public Key MUST be either: // 1) '04' + hex string of x + hex string of y; or // 2) object with two hex string properties (x and y); or // 3) object with two buffer properties (x and y) var pub = pubPoint.encode('hex');                                 // case 1 var pub = { x: x.toString('hex'), y: y.toString('hex') };         // case 2 var pub = { x: x.toBuffer(), y: y.toBuffer() };                   // case 3 var pub = { x: x.toArrayLike(Buffer), y: y.toArrayLike(Buffer) }; // case 3 // Import public key var key = ec.keyFromPublic(pub, 'hex'); // Signature MUST be either: // 1) DER-encoded signature as hex-string; or // 2) DER-encoded signature as buffer; or // 3) object with two hex-string properties (r and s); or // 4) object with two buffer properties (r and s) var signature = '3046022100...'; // case 1 var signature = new Buffer('...'); // case 2 var signature = { r: 'b1fc...', s: '9c42...' }; // case 3 // Verify signature console.log(key.verify(msgHash, signature)); EdDSA var EdDSA = require('elliptic').eddsa; // Create and initialize EdDSA context // (better do it once and reuse it) var ec = new EdDSA('ed25519'); // Create key pair from secret var key = ec.keyFromSecret('693e3c...'); // hex string, array or Buffer // Sign the message's hash (input must be an array, or a hex-string) var msgHash = [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ]; var signature = key.sign(msgHash).toHex(); // Verify signature console.log(key.verify(msgHash, signature)); // CHECK WITH NO PRIVATE KEY // Import public key var pub = '0a1af638...'; var key = ec.keyFromPublic(pub, 'hex'); // Verify signature var signature = '70bed1...'; console.log(key.verify(msgHash, signature)); ECDH var EC = require('elliptic').ec; var ec = new EC('curve25519'); // Generate keys var key1 = ec.genKeyPair(); var key2 = ec.genKeyPair(); var shared1 = key1.derive(key2.getPublic()); var shared2 = key2.derive(key1.getPublic()); console.log('Both shared secrets are BN instances'); console.log(shared1.toString(16)); console.log(shared2.toString(16)); three and more members: var EC = require('elliptic').ec; var ec = new EC('curve25519'); var A = ec.genKeyPair(); var B = ec.genKeyPair(); var C = ec.genKeyPair(); var AB = A.getPublic().mul(B.getPrivate()) var BC = B.getPublic().mul(C.getPrivate()) var CA = C.getPublic().mul(A.getPrivate()) var ABC = AB.mul(C.getPrivate()) var BCA = BC.mul(A.getPrivate()) var CAB = CA.mul(B.getPrivate()) console.log(ABC.getX().toString(16)) console.log(BCA.getX().toString(16)) console.log(CAB.getX().toString(16)) NOTE: .derive() returns a BN instance. Supported curves Elliptic.js support following curve types: Short Weierstrass Montgomery Edwards Twisted Edwards Following curve 'presets' are embedded into the library: secp256k1 p192 p224 p256 p384 p521 curve25519 ed25519 NOTE: That curve25519 could not be used for ECDSA, use ed25519 instead. Implementation details ECDSA is using deterministic k value generation as per RFC6979. Most of the curve operations are performed on non-affine coordinates (either projective or extended), various windowing techniques are used for different cases. All operations are performed in reduction context using bn.js, hashing is provided by hash.js Related projects eccrypto: isomorphic implementation of ECDSA, ECDH and ECIES for both browserify and node (uses elliptic for browser and secp256k1-node for node) LICENSE This software is licensed under the MIT License. Copyright Fedor Indutny, 2014. Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the ""Software""), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. About Fast Elliptic Curve Cryptography in plain javascript Resources Readme Releases 85 tags Packages 0 No packages published Used by 5.8m + 5,764,429 Contributors 25 + 14 contributors Languages JavaScript 99.3% HTML 0.7% © 2021 GitHub, Inc. Terms Privacy Security Status Docs Contact GitHub Pricing API Training Blog About You can’t perform that action at this time. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."
587625,20210507,github.com,https://github.com/adobe-accessibility/Accessible-Mega-Menu,text/html,text/html,en,"GitHub - adobe-accessibility/Accessible-Mega-Menu: A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. Skip to content Sign up Why GitHub? Features → Mobile → Actions → Codespaces → Packages → Security → Code review → Project management → Integrations → GitHub Sponsors → Customer stories→ Team Enterprise Explore Explore GitHub → Learn and contribute Topics → Collections → Trending → Learning Lab → Open source guides → Connect with others The ReadME Project → Events → Community forum → GitHub Education → GitHub Stars program → Marketplace Pricing Plans → Compare plans → Contact Sales → Education → In this repository All GitHub ↵ Jump to ↵ No suggested jump to results In this repository All GitHub ↵ Jump to ↵ In this organization All GitHub ↵ Jump to ↵ In this repository All GitHub ↵ Jump to ↵ Sign in Sign up {{ message }} adobe-accessibility / Accessible-Mega-Menu Notifications Star 578 Fork 198 A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. Apache-2.0 License 578 stars 198 forks Star Notifications Code Issues 28 Pull requests 6 Actions Projects 0 Wiki Security Insights More Code Issues Pull requests Actions Projects Wiki Security Insights master Switch branches/tags Branches Tags Nothing to show {{ refName }} default View all branches Nothing to show {{ refName }} default View all tags 2 branches 0 tags Code Clone HTTPS GitHub CLI Use Git or checkout with SVN using the web URL. Work fast with our official CLI. Learn more. Open with GitHub Desktop Download ZIP Launching GitHub Desktop If nothing happens, download GitHub Desktop and try again. Go back Launching GitHub Desktop If nothing happens, download GitHub Desktop and try again. Go back Launching Xcode If nothing happens, download Xcode and try again. Go back Launching Visual Studio If nothing happens, download the GitHub extension for Visual Studio and try again. Go back Latest commit majornista fix evaluation for ChromeVox object … 5c070bc Dec 7, 2020 fix evaluation for ChromeVox object 5c070bc Git stats 39 commits Files Permalink Failed to load latest commit information. Type Name Latest commit message Commit time css Add openOnMouseover setting, and toggleButtonClass for responsive layout May 11, 2018 js fix evaluation for ChromeVox object Dec 7, 2020 third-party/jquery initial commit Aug 26, 2013 LICENSE initial commit Aug 26, 2013 NOTICE initial commit Aug 26, 2013 README.md initial commit Aug 26, 2013 index.html Updating WCAG 2.0 References to WCAG 2.1 (#67) Dec 4, 2020 package.json Updating repo references Jul 8, 2016 View code Accessible Mega Menu Keyboard Accessibility Screen Reader Accessibility Usage HTML JavaScript CSS README.md Accessible Mega Menu ========================= A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. It is modeled after the mega menu on adobe.com but has been simplified for use by others. An brief explanation of our interaction design choices can be found in a blog post at Mega menu accessibility on adobe.com. Content for the links and text within the mega menu comes from the Web Content Accessibility Guidelines (WCAG) 2.0. Keyboard Accessibility The accessible mega menu supports keyboard interaction modeled after the behavior described in the WAI-ARIA Menu or Menu bar (widget) design pattern, however we also try to respect users' general expectations for the behavior of links in a global navigation. To this end, the accessible mega menu implementation permits tab focus on each of the six top-level menu items. When one of the menu items has focus, pressing the Enter key, Spacebar or Down arrow will open the submenu panel, and pressing the Left or Right arrow key will shift focus to the adjacent menu item. Links within the submenu panels are included in the tab order when the panel is open. They can also be navigated with the arrow keys or by typing the first character in the link name, which speeds up keyboard navigation considerably. Pressing the Escape key closes the submenu and restores focus to the parent menu item. Screen Reader Accessibility The accessible mega menu models its use of WAI-ARIA Roles, States, and Properties after those described in the WAI-ARIA Menu or Menu bar (widget) design pattern with some notable exceptions, so that it behaves better with screen reader user expectations for global navigation. We don't use role=""menu"" for the menu container and role=""menuitem"" for each of the links therein, because if we do, assistive technology will no longer interpret the links as links, but instead, as menu items, and the links in our global navigation will no longer show up when a screen reader user executes a shortcut command to bring up a list of links in the page. We also want to maintain the semantic structure of the submenu panels in our mega menu; our links are organized into lists and separated by headings. Omitting role=""menu"" and role=""menuitem"" for the global navigation seems the safer way to go. Usage HTML The HTML structure for the mega menu is a nav element, or any other container element, containing a list. Each list item contains a link which is followed by a div or any other container element which will serve as the pop up panel. The panel can contain any html content; in the following example, each panel contains three lists of links. You can explicitly define groups within the panel, between which a user can navigate quickly using the left and right arrow keys; in the following example, the CSS class .sub-nav-group identifies a navigable group.     <nav>         <ul class=""nav-menu"">             <li class=""nav-item"">                 <a href=""?movie"">Movies</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=0"">Action &amp; Adventure</a></li>                         <li><a href=""?movie&genre=2"">Children &amp; Family</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=7"">Dramas</a></li>                         <li><a href=""?movie&genre=9"">Foreign</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=14"">Musicals</a></li>                         <li><a href=""?movie&genre=15"">Romance</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>             <li class=""nav-item"">                 <a href=""?tv"">TV Shows</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=20"">Classic TV</a></li>                         <li><a href=""?tv&genre=21"">Crime TV</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=27"">Reality TV</a></li>                         <li><a href=""?tv&genre=30"">TV Action</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=33"">TV Dramas</a></li>                         <li><a href=""?tv&genre=34"">TV Horror</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>         </ul>     </nav> By default, accessibleMegaMenu uses the the following CSS classes to define the top-level navigation items, panels, groups within the panels, and the hover, focus, and open states. It also defines a prefix for unique id strings, which are required to indicate the relationship of a top-level navigation item to the panel it controls.     defaults = {         /* unique ID's are required to indicate aria-owns, aria-controls and aria-labelledby */         uuidPrefix: ""accessible-megamenu"",                  /* default css class used to define the megamenu styling */         menuClass: ""accessible-megamenu"",                  /* default css class for a top-level navigation item in the megamenu */         topNavItemClass: ""accessible-megamenu-top-nav-item"",                  /* default css class for a megamenu panel */         panelClass: ""accessible-megamenu-panel"",                  /* default css class for a group of items within a megamenu panel */         panelGroupClass: ""accessible-megamenu-panel-group"",                  /* default css class for the hover state */         hoverClass: ""hover"",                  /* default css class for the focus state */         focusClass: ""focus"",                  /* default css class for the open state */         openClass: ""open""      } You can optionally override the defaults to use the CSS classes you may have already defined for your mega menu. JavaScript Be sure to include jQuery and the jquery-accessibleMegaMenu.js plugin script.     <script src=""//code.jquery.com/jquery-1.10.1.min.js""></script>     <script src=""js/jquery-accessibleMegaMenu.js""></script> The following initializes the first nav element in the document as an accessibleMegaMenu, with optional CSS class overrides.     $(""nav:first"").accessibleMegaMenu({         /* prefix for generated unique id attributes, which are required             to indicate aria-owns, aria-controls and aria-labelledby */         uuidPrefix: ""accessible-megamenu"",                  /* css class used to define the megamenu styling */         menuClass: ""nav-menu"",                  /* css class for a top-level navigation item in the megamenu */         topNavItemClass: ""nav-item"",                  /* css class for a megamenu panel */         panelClass: ""sub-nav"",                  /* css class for a group of items within a megamenu panel */         panelGroupClass: ""sub-nav-group"",                  /* css class for the hover state */         hoverClass: ""hover"",                  /* css class for the focus state */         focusClass: ""focus"",                  /* css class for the open state */         openClass: ""open""     }); CSS AccessibleMegaMenu handles the showing and hiding of panels by adding or removing a CSS class. No inline styles are added to hide elements or create animation between states. Following is some rudimentary CSS for our example which enables the showing/hiding of and the layout of lists panels in the mega menu.     /* mega menu list */     .nav-menu {         display: block;         position: relative;         list-style: none;         margin: 0;         padding: 0;         z-index: 15;     }     /* a top level navigation item in the mega menu */     .nav-item {         list-style: none;         display: inline-block;         padding: 0;         margin: 0;     }     /* first descendant link within a top level navigation item */     .nav-item > a {         position: relative;         display: inline-block;         padding: 0.5em 1em;         margin: 0 0 -1px 0;         border: 1px solid transparent;     }     /* focus/open states of first descendant link within a top level         navigation item */     .nav-item > a:focus,     .nav-item > a.open {         border: 1px solid #dedede;     }     /* open state of first descendant link within a top level         navigation item */     .nav-item > a.open {         background-color: #fff;         border-bottom: none;         z-index: 1;     }     /* sub-navigation panel */     .sub-nav {         position: absolute;         display: none;         top: 2.2em;         margin-top: -1px;         padding: 0.5em 1em;         border: 1px solid #dedede;         background-color: #fff;     }     /* sub-navigation panel open state */     .sub-nav.open {         display: block;     }     /* list of items within sub-navigation panel */     .sub-nav ul {         display: inline-block;         vertical-align: top;         margin: 0 1em 0 0;         padding: 0;     }     /* list item within sub-navigation panel */     .sub-nav li {         display: block;         list-style-type: none;         margin: 0;         padding: 0;     }   Putting it all together, here is the completed example:     <!doctype html>     <html lang=""en"">     <head>     <meta charset=""UTF-8"">     <title>Simple Accessible Mega Menu Example</title>     <style>         /* Rudimentary mega menu CSS for demonstration */             /* mega menu list */         .nav-menu {             display: block;             position: relative;             list-style: none;             margin: 0;             padding: 0;             z-index: 15;         }         /* a top level navigation item in the mega menu */         .nav-item {             list-style: none;             display: inline-block;             padding: 0;             margin: 0;         }         /* first descendant link within a top level navigation item */         .nav-item > a {             position: relative;             display: inline-block;             padding: 0.5em 1em;             margin: 0 0 -1px 0;             border: 1px solid transparent;         }         /* focus/open states of first descendant link within a top level             navigation item */         .nav-item > a:focus,         .nav-item > a.open {             border: 1px solid #dedede;         }         /* open state of first descendant link within a top level             navigation item */         .nav-item > a.open {             background-color: #fff;             border-bottom: none;             z-index: 1;         }         /* sub-navigation panel */         .sub-nav {             position: absolute;             display: none;             top: 2.2em;             margin-top: -1px;             padding: 0.5em 1em;             border: 1px solid #dedede;             background-color: #fff;         }         /* sub-navigation panel open state */         .sub-nav.open {             display: block;         }         /* list of items within sub-navigation panel */         .sub-nav ul {             display: inline-block;             vertical-align: top;             margin: 0 1em 0 0;             padding: 0;         }         /* list item within sub-navigation panel */         .sub-nav li {             display: block;             list-style-type: none;             margin: 0;             padding: 0;         }          </style>     </head>     <body>     <nav>         <ul class=""nav-menu"">             <li class=""nav-item"">                 <a href=""?movie"">Movies</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=0"">Action &amp; Adventure</a></li>                         <li><a href=""?movie&genre=2"">Children &amp; Family</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=7"">Dramas</a></li>                         <li><a href=""?movie&genre=9"">Foreign</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=14"">Musicals</a></li>                         <li><a href=""?movie&genre=15"">Romance</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>             <li class=""nav-item"">                 <a href=""?tv"">TV Shows</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=20"">Classic TV</a></li>                         <li><a href=""?tv&genre=21"">Crime TV</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=27"">Reality TV</a></li>                         <li><a href=""?tv&genre=30"">TV Action</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=33"">TV Dramas</a></li>                         <li><a href=""?tv&genre=34"">TV Horror</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>         </ul>     </nav>          <!-- include jquery -->     <script src=""//code.jquery.com/jquery-1.10.1.min.js""></script>     <!-- include the jquery-accessibleMegaMenu plugin script -->     <script src=""js/jquery-accessibleMegaMenu.js""></script>     <!-- initialize a selector as an accessibleMegaMenu -->     <script>         $(""nav:first"").accessibleMegaMenu({             /* prefix for generated unique id attributes, which are required                 to indicate aria-owns, aria-controls and aria-labelledby */             uuidPrefix: ""accessible-megamenu"",                          /* css class used to define the megamenu styling */             menuClass: ""nav-menu"",                          /* css class for a top-level navigation item in the megamenu */             topNavItemClass: ""nav-item"",                          /* css class for a megamenu panel */             panelClass: ""sub-nav"",                          /* css class for a group of items within a megamenu panel */             panelGroupClass: ""sub-nav-group"",                          /* css class for the hover state */             hoverClass: ""hover"",                          /* css class for the focus state */             focusClass: ""focus"",                          /* css class for the open state */             openClass: ""open""         });     </script>     </body>     </html> About A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. Resources Readme License Apache-2.0 License Releases No releases published Packages 0 No packages published Used by 15 + 7 Contributors 7 Languages HTML 71.8% CSS 26.4% JavaScript 1.8% © 2021 GitHub, Inc. Terms Privacy Security Status Docs Contact GitHub Pricing API Training Blog About You can’t perform that action at this time. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."
597776,20210507,github.com,https://github.com/crypto-browserify/crypto-browserify,text/html,text/html,en,"GitHub - crypto-browserify/crypto-browserify: partial implementation of node's `crypto` for the browser Skip to content Sign up Why GitHub? Features → Mobile → Actions → Codespaces → Packages → Security → Code review → Project management → Integrations → GitHub Sponsors → Customer stories→ Team Enterprise Explore Explore GitHub → Learn and contribute Topics → Collections → Trending → Learning Lab → Open source guides → Connect with others The ReadME Project → Events → Community forum → GitHub Education → GitHub Stars program → Marketplace Pricing Plans → Compare plans → Contact Sales → Education → In this repository All GitHub ↵ Jump to ↵ No suggested jump to results In this repository All GitHub ↵ Jump to ↵ In this organization All GitHub ↵ Jump to ↵ In this repository All GitHub ↵ Jump to ↵ Sign in Sign up {{ message }} crypto-browserify / crypto-browserify Notifications Star 474 Fork 155 partial implementation of node's `crypto` for the browser MIT License 474 stars 155 forks Star Notifications Code Issues 19 Pull requests 6 Actions Projects 0 Wiki Security Insights More Code Issues Pull requests Actions Projects Wiki Security Insights master Switch branches/tags Branches Tags Nothing to show {{ refName }} default View all branches Nothing to show {{ refName }} default View all tags 6 branches 31 tags Code Clone HTTPS GitHub CLI Use Git or checkout with SVN using the web URL. Work fast with our official CLI. Learn more. Open with GitHub Desktop Download ZIP Launching GitHub Desktop If nothing happens, download GitHub Desktop and try again. Go back Launching GitHub Desktop If nothing happens, download GitHub Desktop and try again. Go back Launching Xcode If nothing happens, download Xcode and try again. Go back Launching Visual Studio If nothing happens, download the GitHub extension for Visual Studio and try again. Go back Latest commit Git stats 362 commits Files Permalink Failed to load latest commit information. Type Name Latest commit message Commit time example add standard 5.0.0 Aug 13, 2015 test fix debian issue (maybe) Feb 9, 2018 .gitignore Add .gitignore Aug 5, 2013 .travis.yml saucelabs aparently only goes back to 7 Oct 19, 2017 .zuul.yml add zuul and browser tests Oct 3, 2015 LICENSE Add MIT license Sep 20, 2013 README.md add privateEncrypt/publicDecrypt to README Dec 14, 2015 index.js add rndom fill Oct 18, 2017 package.json 3.12.0 Nov 3, 2017 View code crypto-browserify todo contributions License README.md crypto-browserify A port of node's crypto module to the browser. The goal of this module is to reimplement node's crypto module, in pure javascript so that it can run in the browser. Here is the subset that is currently implemented: createHash (sha1, sha224, sha256, sha384, sha512, md5, rmd160) createHmac (sha1, sha224, sha256, sha384, sha512, md5, rmd160) pbkdf2 pbkdf2Sync randomBytes pseudoRandomBytes createCipher (aes) createDecipher (aes) createDiffieHellman createSign (rsa, ecdsa) createVerify (rsa, ecdsa) createECDH (secp256k1) publicEncrypt/privateDecrypt (rsa) privateEncrypt/publicDecrypt (rsa) todo these features from node's crypto are still unimplemented. createCredentials contributions If you are interested in writing a feature, please implement as a new module, which will be incorporated into crypto-browserify as a dependency. All deps must be compatible with node's crypto (generate example inputs and outputs with node, and save base64 strings inside JSON, so that tests can run in the browser. see sha.js Crypto is extra serious so please do not hesitate to review the code, and post comments if you do. License MIT About partial implementation of node's `crypto` for the browser Resources Readme License MIT License Releases 31 tags Packages 0 No packages published Used by 5.9m + 5,877,974 Contributors 24 + 13 contributors Languages JavaScript 99.1% HTML 0.9% © 2021 GitHub, Inc. Terms Privacy Security Status Docs Contact GitHub Pricing API Training Blog About You can’t perform that action at this time. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."
597777,20210507,github.com,https://github.com/indutny/elliptic/issues,text/html,text/html,en,"Issues · indutny/elliptic · GitHub Skip to content Sign up Why GitHub? Features → Mobile → Actions → Codespaces → Packages → Security → Code review → Project management → Integrations → GitHub Sponsors → Customer stories→ Team Enterprise Explore Explore GitHub → Learn and contribute Topics → Collections → Trending → Learning Lab → Open source guides → Connect with others The ReadME Project → Events → Community forum → GitHub Education → GitHub Stars program → Marketplace Pricing Plans → Compare plans → Contact Sales → Education → In this repository All GitHub ↵ Jump to ↵ No suggested jump to results In this repository All GitHub ↵ Jump to ↵ In this user All GitHub ↵ Jump to ↵ In this repository All GitHub ↵ Jump to ↵ Sign in Sign up {{ message }} indutny / elliptic Notifications Star 1.2k Fork 303 Code Issues 75 Pull requests 19 Actions Projects 0 Wiki Security Insights More Code Issues Pull requests Actions Projects Wiki Security Insights Labels 8 Milestones 0 Labels 8 Milestones 0 New issue Have a question about this project? Sign up for a free GitHub account to open an issue and contact its maintainers and the community. Pick a username Email Address Password Sign up for GitHub By clicking “Sign up for GitHub”, you agree to our terms of service and privacy statement. We’ll occasionally send you account related emails. Already on GitHub? Sign in to your account 75 Open 97 Closed 75 Open 97 Closed Author Filter by author author: Filter by this user Label Filter by label Use alt + click/return to exclude labels. Projects Filter by project Milestones Filter by milestone Assignee Filter by who’s assigned Sort Sort by Newest Oldest Most commented Least commented Recently updated Least recently updated Most reactions 👍 👎 😄 🎉 😕 ❤️ 🚀 👀 deriving private key from public key #257 opened Apr 27, 2021 by madhav-madhusoodanan How to use keys with crypto.subtle #255 opened Apr 1, 2021 by DominicTobias-b1 EDDSA.decodeInt should fails or reduce by dafault? #254 opened Mar 18, 2021 by mahnunchik Sad state #251 opened Mar 11, 2021 by berkus EDDSA.decodePoint should fails on ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff #250 opened Mar 3, 2021 by mahnunchik 15 Add endian argument to bn.js toString method #249 opened Mar 2, 2021 by mahnunchik EDDSA decodePoint doesn't support Buffer as argument #248 opened Mar 2, 2021 by mahnunchik How to decipher the encrypted message? #245 opened Jan 27, 2021 by istabraq-iot Montgomery Curve25519 is not openssl compatible #243 opened Dec 28, 2020 by jc-lab 4 Curves p384 and p521 produce incorrect results #239 opened Oct 18, 2020 by guidovranken i want to use this library with c# #238 opened Oct 10, 2020 by medozeus Elliptic.js support following curve types: #236 opened Oct 5, 2020 by medozeus The Elliptic package 6.5.2 for Node.js allows ECDSA signature malleability via variations in encoding, leading '\0' bytes, or integer overflows. #235 opened Oct 1, 2020 by bsomeshwer EdDSA: What is a reason to manipulate with bytes? #233 opened Aug 27, 2020 by mahnunchik why use derive method get ECDH key，i got different length #230 opened Jul 10, 2020 by cqupt-yifanwu 4 Why do I generate my local test path in chunk-vendors when packing with NPM #229 opened Jun 22, 2020 by Anthonychen1994 1 TypedArray support ? #228 opened Jun 20, 2020 by dojyorin Is there way to generate PKCS#8 private key from Pem format ECC Private key #225 opened Apr 28, 2020 by sureshreddygovindu Signature validation in python. Prefix configuration? #224 opened Apr 25, 2020 by amrbz is it possible to do assymetric encryption? #223 opened Apr 7, 2020 by maroodb 1 Missing infinity point encoding #218 opened Feb 21, 2020 by catenacyber 1 ECDH P-521 public key point not on curve according to java (clojure) #216 opened Feb 11, 2020 by slhabity 1 how save and load private / publick key in pem or other format #215 opened Jan 27, 2020 by fturiot 2 How to pair client to server BTCPay NodeJS client? #214 opened Jan 21, 2020 by savshit 1 How to pair client to server BTCPay NodeJS client? #213 opened Jan 21, 2020 by savshit Previous 1 2 3 Next Previous Next ProTip! Mix and match filters to narrow down what you’re looking for. © 2021 GitHub, Inc. Terms Privacy Security Status Docs Contact GitHub Pricing API Training Blog About You can’t perform that action at this time. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."
597778,20210507,github.com,https://github.com/indutny/elliptic,text/html,text/html,en,"GitHub - indutny/elliptic: Fast Elliptic Curve Cryptography in plain javascript Skip to content Sign up Why GitHub? Features → Mobile → Actions → Codespaces → Packages → Security → Code review → Project management → Integrations → GitHub Sponsors → Customer stories→ Team Enterprise Explore Explore GitHub → Learn and contribute Topics → Collections → Trending → Learning Lab → Open source guides → Connect with others The ReadME Project → Events → Community forum → GitHub Education → GitHub Stars program → Marketplace Pricing Plans → Compare plans → Contact Sales → Education → In this repository All GitHub ↵ Jump to ↵ No suggested jump to results In this repository All GitHub ↵ Jump to ↵ In this user All GitHub ↵ Jump to ↵ In this repository All GitHub ↵ Jump to ↵ Sign in Sign up {{ message }} indutny / elliptic Notifications Star 1.2k Fork 303 Fast Elliptic Curve Cryptography in plain javascript 1.2k stars 303 forks Star Notifications Code Issues 75 Pull requests 19 Actions Projects 0 Wiki Security Insights More Code Issues Pull requests Actions Projects Wiki Security Insights master Switch branches/tags Branches Tags Nothing to show {{ refName }} default View all branches Nothing to show {{ refName }} default View all tags 2 branches 85 tags Code Clone HTTPS GitHub CLI Use Git or checkout with SVN using the web URL. Work fast with our official CLI. Learn more. Open with GitHub Desktop Download ZIP Launching GitHub Desktop If nothing happens, download GitHub Desktop and try again. Go back Launching GitHub Desktop If nothing happens, download GitHub Desktop and try again. Go back Launching Xcode If nothing happens, download Xcode and try again. Go back Launching Visual Studio If nothing happens, download the GitHub extension for Visual Studio and try again. Go back Latest commit indutny 6.5.4 … 43ac7f2 Feb 2, 2021 6.5.4 43ac7f2 Git stats 331 commits Files Permalink Failed to load latest commit information. Type Name Latest commit message Commit time benchmarks package: remove Makefile and dist Jan 29, 2016 dist 6.5.4 Feb 2, 2021 lib ec: validate that a point before deriving keys Feb 2, 2021 test ec: validate that a point before deriving keys Feb 2, 2021 .codeclimate.yml test: improvements with Saucelabs/Codeclimate Mar 31, 2016 .eslintignore lib: relint using eslint Aug 2, 2020 .eslintrc.js lib: relint using eslint Aug 2, 2020 .gitignore test: improvements with Saucelabs/Codeclimate Mar 31, 2016 .npmignore npmignore: dist May 20, 2016 .travis.yml travis: really move on Jun 26, 2019 Gruntfile.js grunt: fix standalone build May 25, 2016 README.md readme: update example Mar 23, 2017 package-lock.json 6.5.4 Feb 2, 2021 package.json 6.5.4 Feb 2, 2021 View code Elliptic Incentive Benchmarks API ECDSA EdDSA ECDH Supported curves Implementation details Related projects LICENSE README.md Elliptic Fast elliptic-curve cryptography in a plain javascript implementation. NOTE: Please take a look at http://safecurves.cr.yp.to/ before choosing a curve for your cryptography operations. Incentive ECC is much slower than regular RSA cryptography, the JS implementations are even more slower. Benchmarks $ node benchmarks/index.js Benchmarking: sign elliptic#sign x 262 ops/sec ±0.51% (177 runs sampled) eccjs#sign x 55.91 ops/sec ±0.90% (144 runs sampled) ------------------------ Fastest is elliptic#sign ======================== Benchmarking: verify elliptic#verify x 113 ops/sec ±0.50% (166 runs sampled) eccjs#verify x 48.56 ops/sec ±0.36% (125 runs sampled) ------------------------ Fastest is elliptic#verify ======================== Benchmarking: gen elliptic#gen x 294 ops/sec ±0.43% (176 runs sampled) eccjs#gen x 62.25 ops/sec ±0.63% (129 runs sampled) ------------------------ Fastest is elliptic#gen ======================== Benchmarking: ecdh elliptic#ecdh x 136 ops/sec ±0.85% (156 runs sampled) ------------------------ Fastest is elliptic#ecdh ======================== API ECDSA var EC = require('elliptic').ec; // Create and initialize EC context // (better do it once and reuse it) var ec = new EC('secp256k1'); // Generate keys var key = ec.genKeyPair(); // Sign the message's hash (input must be an array, or a hex-string) var msgHash = [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ]; var signature = key.sign(msgHash); // Export DER encoded signature in Array var derSign = signature.toDER(); // Verify signature console.log(key.verify(msgHash, derSign)); // CHECK WITH NO PRIVATE KEY var pubPoint = key.getPublic(); var x = pubPoint.getX(); var y = pubPoint.getY(); // Public Key MUST be either: // 1) '04' + hex string of x + hex string of y; or // 2) object with two hex string properties (x and y); or // 3) object with two buffer properties (x and y) var pub = pubPoint.encode('hex');                                 // case 1 var pub = { x: x.toString('hex'), y: y.toString('hex') };         // case 2 var pub = { x: x.toBuffer(), y: y.toBuffer() };                   // case 3 var pub = { x: x.toArrayLike(Buffer), y: y.toArrayLike(Buffer) }; // case 3 // Import public key var key = ec.keyFromPublic(pub, 'hex'); // Signature MUST be either: // 1) DER-encoded signature as hex-string; or // 2) DER-encoded signature as buffer; or // 3) object with two hex-string properties (r and s); or // 4) object with two buffer properties (r and s) var signature = '3046022100...'; // case 1 var signature = new Buffer('...'); // case 2 var signature = { r: 'b1fc...', s: '9c42...' }; // case 3 // Verify signature console.log(key.verify(msgHash, signature)); EdDSA var EdDSA = require('elliptic').eddsa; // Create and initialize EdDSA context // (better do it once and reuse it) var ec = new EdDSA('ed25519'); // Create key pair from secret var key = ec.keyFromSecret('693e3c...'); // hex string, array or Buffer // Sign the message's hash (input must be an array, or a hex-string) var msgHash = [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ]; var signature = key.sign(msgHash).toHex(); // Verify signature console.log(key.verify(msgHash, signature)); // CHECK WITH NO PRIVATE KEY // Import public key var pub = '0a1af638...'; var key = ec.keyFromPublic(pub, 'hex'); // Verify signature var signature = '70bed1...'; console.log(key.verify(msgHash, signature)); ECDH var EC = require('elliptic').ec; var ec = new EC('curve25519'); // Generate keys var key1 = ec.genKeyPair(); var key2 = ec.genKeyPair(); var shared1 = key1.derive(key2.getPublic()); var shared2 = key2.derive(key1.getPublic()); console.log('Both shared secrets are BN instances'); console.log(shared1.toString(16)); console.log(shared2.toString(16)); three and more members: var EC = require('elliptic').ec; var ec = new EC('curve25519'); var A = ec.genKeyPair(); var B = ec.genKeyPair(); var C = ec.genKeyPair(); var AB = A.getPublic().mul(B.getPrivate()) var BC = B.getPublic().mul(C.getPrivate()) var CA = C.getPublic().mul(A.getPrivate()) var ABC = AB.mul(C.getPrivate()) var BCA = BC.mul(A.getPrivate()) var CAB = CA.mul(B.getPrivate()) console.log(ABC.getX().toString(16)) console.log(BCA.getX().toString(16)) console.log(CAB.getX().toString(16)) NOTE: .derive() returns a BN instance. Supported curves Elliptic.js support following curve types: Short Weierstrass Montgomery Edwards Twisted Edwards Following curve 'presets' are embedded into the library: secp256k1 p192 p224 p256 p384 p521 curve25519 ed25519 NOTE: That curve25519 could not be used for ECDSA, use ed25519 instead. Implementation details ECDSA is using deterministic k value generation as per RFC6979. Most of the curve operations are performed on non-affine coordinates (either projective or extended), various windowing techniques are used for different cases. All operations are performed in reduction context using bn.js, hashing is provided by hash.js Related projects eccrypto: isomorphic implementation of ECDSA, ECDH and ECIES for both browserify and node (uses elliptic for browser and secp256k1-node for node) LICENSE This software is licensed under the MIT License. Copyright Fedor Indutny, 2014. Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the ""Software""), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. About Fast Elliptic Curve Cryptography in plain javascript Resources Readme Releases 85 tags Packages 0 No packages published Used by 5.8m + 5,797,080 Contributors 25 + 14 contributors Languages JavaScript 99.3% HTML 0.7% © 2021 GitHub, Inc. Terms Privacy Security Status Docs Contact GitHub Pricing API Training Blog About You can’t perform that action at this time. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."
598355,20210514,github.com,https://github.com/adobe-accessibility/Accessible-Mega-Menu,text/html,text/html,en,"GitHub - adobe-accessibility/Accessible-Mega-Menu: A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. Skip to content Sign up Why GitHub? Features → Mobile → Actions → Codespaces → Packages → Security → Code review → Project management → Integrations → GitHub Sponsors → Customer stories→ Team Enterprise Explore Explore GitHub → Learn and contribute Topics → Collections → Trending → Learning Lab → Open source guides → Connect with others The ReadME Project → Events → Community forum → GitHub Education → GitHub Stars program → Marketplace Pricing Plans → Compare plans → Contact Sales → Education → In this repository All GitHub ↵ Jump to ↵ No suggested jump to results In this repository All GitHub ↵ Jump to ↵ In this organization All GitHub ↵ Jump to ↵ In this repository All GitHub ↵ Jump to ↵ Sign in Sign up {{ message }} adobe-accessibility / Accessible-Mega-Menu Notifications Star 578 Fork 198 A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. Apache-2.0 License 578 stars 198 forks Star Notifications Code Issues 28 Pull requests 6 Actions Projects 0 Wiki Security Insights More Code Issues Pull requests Actions Projects Wiki Security Insights master Switch branches/tags Branches Tags Could not load branches Nothing to show {{ refName }} default View all branches Could not load tags Nothing to show {{ refName }} default View all tags 2 branches 0 tags Code Clone HTTPS GitHub CLI Use Git or checkout with SVN using the web URL. Work fast with our official CLI. Learn more. Open with GitHub Desktop Download ZIP Launching GitHub Desktop If nothing happens, download GitHub Desktop and try again. Go back Launching GitHub Desktop If nothing happens, download GitHub Desktop and try again. Go back Launching Xcode If nothing happens, download Xcode and try again. Go back Launching Visual Studio If nothing happens, download the GitHub extension for Visual Studio and try again. Go back Latest commit majornista fix evaluation for ChromeVox object … 5c070bc Dec 7, 2020 fix evaluation for ChromeVox object 5c070bc Git stats 39 commits Files Permalink Failed to load latest commit information. Type Name Latest commit message Commit time css Add openOnMouseover setting, and toggleButtonClass for responsive layout May 11, 2018 js fix evaluation for ChromeVox object Dec 7, 2020 third-party/jquery initial commit Aug 26, 2013 LICENSE initial commit Aug 26, 2013 NOTICE initial commit Aug 26, 2013 README.md initial commit Aug 26, 2013 index.html Updating WCAG 2.0 References to WCAG 2.1 (#67) Dec 4, 2020 package.json Updating repo references Jul 8, 2016 View code Accessible Mega Menu Keyboard Accessibility Screen Reader Accessibility Usage HTML JavaScript CSS README.md Accessible Mega Menu ========================= A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. It is modeled after the mega menu on adobe.com but has been simplified for use by others. An brief explanation of our interaction design choices can be found in a blog post at Mega menu accessibility on adobe.com. Content for the links and text within the mega menu comes from the Web Content Accessibility Guidelines (WCAG) 2.0. Keyboard Accessibility The accessible mega menu supports keyboard interaction modeled after the behavior described in the WAI-ARIA Menu or Menu bar (widget) design pattern, however we also try to respect users' general expectations for the behavior of links in a global navigation. To this end, the accessible mega menu implementation permits tab focus on each of the six top-level menu items. When one of the menu items has focus, pressing the Enter key, Spacebar or Down arrow will open the submenu panel, and pressing the Left or Right arrow key will shift focus to the adjacent menu item. Links within the submenu panels are included in the tab order when the panel is open. They can also be navigated with the arrow keys or by typing the first character in the link name, which speeds up keyboard navigation considerably. Pressing the Escape key closes the submenu and restores focus to the parent menu item. Screen Reader Accessibility The accessible mega menu models its use of WAI-ARIA Roles, States, and Properties after those described in the WAI-ARIA Menu or Menu bar (widget) design pattern with some notable exceptions, so that it behaves better with screen reader user expectations for global navigation. We don't use role=""menu"" for the menu container and role=""menuitem"" for each of the links therein, because if we do, assistive technology will no longer interpret the links as links, but instead, as menu items, and the links in our global navigation will no longer show up when a screen reader user executes a shortcut command to bring up a list of links in the page. We also want to maintain the semantic structure of the submenu panels in our mega menu; our links are organized into lists and separated by headings. Omitting role=""menu"" and role=""menuitem"" for the global navigation seems the safer way to go. Usage HTML The HTML structure for the mega menu is a nav element, or any other container element, containing a list. Each list item contains a link which is followed by a div or any other container element which will serve as the pop up panel. The panel can contain any html content; in the following example, each panel contains three lists of links. You can explicitly define groups within the panel, between which a user can navigate quickly using the left and right arrow keys; in the following example, the CSS class .sub-nav-group identifies a navigable group.     <nav>         <ul class=""nav-menu"">             <li class=""nav-item"">                 <a href=""?movie"">Movies</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=0"">Action &amp; Adventure</a></li>                         <li><a href=""?movie&genre=2"">Children &amp; Family</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=7"">Dramas</a></li>                         <li><a href=""?movie&genre=9"">Foreign</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=14"">Musicals</a></li>                         <li><a href=""?movie&genre=15"">Romance</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>             <li class=""nav-item"">                 <a href=""?tv"">TV Shows</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=20"">Classic TV</a></li>                         <li><a href=""?tv&genre=21"">Crime TV</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=27"">Reality TV</a></li>                         <li><a href=""?tv&genre=30"">TV Action</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=33"">TV Dramas</a></li>                         <li><a href=""?tv&genre=34"">TV Horror</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>         </ul>     </nav> By default, accessibleMegaMenu uses the the following CSS classes to define the top-level navigation items, panels, groups within the panels, and the hover, focus, and open states. It also defines a prefix for unique id strings, which are required to indicate the relationship of a top-level navigation item to the panel it controls.     defaults = {         /* unique ID's are required to indicate aria-owns, aria-controls and aria-labelledby */         uuidPrefix: ""accessible-megamenu"",                  /* default css class used to define the megamenu styling */         menuClass: ""accessible-megamenu"",                  /* default css class for a top-level navigation item in the megamenu */         topNavItemClass: ""accessible-megamenu-top-nav-item"",                  /* default css class for a megamenu panel */         panelClass: ""accessible-megamenu-panel"",                  /* default css class for a group of items within a megamenu panel */         panelGroupClass: ""accessible-megamenu-panel-group"",                  /* default css class for the hover state */         hoverClass: ""hover"",                  /* default css class for the focus state */         focusClass: ""focus"",                  /* default css class for the open state */         openClass: ""open""      } You can optionally override the defaults to use the CSS classes you may have already defined for your mega menu. JavaScript Be sure to include jQuery and the jquery-accessibleMegaMenu.js plugin script.     <script src=""//code.jquery.com/jquery-1.10.1.min.js""></script>     <script src=""js/jquery-accessibleMegaMenu.js""></script> The following initializes the first nav element in the document as an accessibleMegaMenu, with optional CSS class overrides.     $(""nav:first"").accessibleMegaMenu({         /* prefix for generated unique id attributes, which are required             to indicate aria-owns, aria-controls and aria-labelledby */         uuidPrefix: ""accessible-megamenu"",                  /* css class used to define the megamenu styling */         menuClass: ""nav-menu"",                  /* css class for a top-level navigation item in the megamenu */         topNavItemClass: ""nav-item"",                  /* css class for a megamenu panel */         panelClass: ""sub-nav"",                  /* css class for a group of items within a megamenu panel */         panelGroupClass: ""sub-nav-group"",                  /* css class for the hover state */         hoverClass: ""hover"",                  /* css class for the focus state */         focusClass: ""focus"",                  /* css class for the open state */         openClass: ""open""     }); CSS AccessibleMegaMenu handles the showing and hiding of panels by adding or removing a CSS class. No inline styles are added to hide elements or create animation between states. Following is some rudimentary CSS for our example which enables the showing/hiding of and the layout of lists panels in the mega menu.     /* mega menu list */     .nav-menu {         display: block;         position: relative;         list-style: none;         margin: 0;         padding: 0;         z-index: 15;     }     /* a top level navigation item in the mega menu */     .nav-item {         list-style: none;         display: inline-block;         padding: 0;         margin: 0;     }     /* first descendant link within a top level navigation item */     .nav-item > a {         position: relative;         display: inline-block;         padding: 0.5em 1em;         margin: 0 0 -1px 0;         border: 1px solid transparent;     }     /* focus/open states of first descendant link within a top level         navigation item */     .nav-item > a:focus,     .nav-item > a.open {         border: 1px solid #dedede;     }     /* open state of first descendant link within a top level         navigation item */     .nav-item > a.open {         background-color: #fff;         border-bottom: none;         z-index: 1;     }     /* sub-navigation panel */     .sub-nav {         position: absolute;         display: none;         top: 2.2em;         margin-top: -1px;         padding: 0.5em 1em;         border: 1px solid #dedede;         background-color: #fff;     }     /* sub-navigation panel open state */     .sub-nav.open {         display: block;     }     /* list of items within sub-navigation panel */     .sub-nav ul {         display: inline-block;         vertical-align: top;         margin: 0 1em 0 0;         padding: 0;     }     /* list item within sub-navigation panel */     .sub-nav li {         display: block;         list-style-type: none;         margin: 0;         padding: 0;     }   Putting it all together, here is the completed example:     <!doctype html>     <html lang=""en"">     <head>     <meta charset=""UTF-8"">     <title>Simple Accessible Mega Menu Example</title>     <style>         /* Rudimentary mega menu CSS for demonstration */             /* mega menu list */         .nav-menu {             display: block;             position: relative;             list-style: none;             margin: 0;             padding: 0;             z-index: 15;         }         /* a top level navigation item in the mega menu */         .nav-item {             list-style: none;             display: inline-block;             padding: 0;             margin: 0;         }         /* first descendant link within a top level navigation item */         .nav-item > a {             position: relative;             display: inline-block;             padding: 0.5em 1em;             margin: 0 0 -1px 0;             border: 1px solid transparent;         }         /* focus/open states of first descendant link within a top level             navigation item */         .nav-item > a:focus,         .nav-item > a.open {             border: 1px solid #dedede;         }         /* open state of first descendant link within a top level             navigation item */         .nav-item > a.open {             background-color: #fff;             border-bottom: none;             z-index: 1;         }         /* sub-navigation panel */         .sub-nav {             position: absolute;             display: none;             top: 2.2em;             margin-top: -1px;             padding: 0.5em 1em;             border: 1px solid #dedede;             background-color: #fff;         }         /* sub-navigation panel open state */         .sub-nav.open {             display: block;         }         /* list of items within sub-navigation panel */         .sub-nav ul {             display: inline-block;             vertical-align: top;             margin: 0 1em 0 0;             padding: 0;         }         /* list item within sub-navigation panel */         .sub-nav li {             display: block;             list-style-type: none;             margin: 0;             padding: 0;         }          </style>     </head>     <body>     <nav>         <ul class=""nav-menu"">             <li class=""nav-item"">                 <a href=""?movie"">Movies</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=0"">Action &amp; Adventure</a></li>                         <li><a href=""?movie&genre=2"">Children &amp; Family</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=7"">Dramas</a></li>                         <li><a href=""?movie&genre=9"">Foreign</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=14"">Musicals</a></li>                         <li><a href=""?movie&genre=15"">Romance</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>             <li class=""nav-item"">                 <a href=""?tv"">TV Shows</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=20"">Classic TV</a></li>                         <li><a href=""?tv&genre=21"">Crime TV</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=27"">Reality TV</a></li>                         <li><a href=""?tv&genre=30"">TV Action</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=33"">TV Dramas</a></li>                         <li><a href=""?tv&genre=34"">TV Horror</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>         </ul>     </nav>          <!-- include jquery -->     <script src=""//code.jquery.com/jquery-1.10.1.min.js""></script>     <!-- include the jquery-accessibleMegaMenu plugin script -->     <script src=""js/jquery-accessibleMegaMenu.js""></script>     <!-- initialize a selector as an accessibleMegaMenu -->     <script>         $(""nav:first"").accessibleMegaMenu({             /* prefix for generated unique id attributes, which are required                 to indicate aria-owns, aria-controls and aria-labelledby */             uuidPrefix: ""accessible-megamenu"",                          /* css class used to define the megamenu styling */             menuClass: ""nav-menu"",                          /* css class for a top-level navigation item in the megamenu */             topNavItemClass: ""nav-item"",                          /* css class for a megamenu panel */             panelClass: ""sub-nav"",                          /* css class for a group of items within a megamenu panel */             panelGroupClass: ""sub-nav-group"",                          /* css class for the hover state */             hoverClass: ""hover"",                          /* css class for the focus state */             focusClass: ""focus"",                          /* css class for the open state */             openClass: ""open""         });     </script>     </body>     </html> About A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. Resources Readme License Apache-2.0 License Releases No releases published Packages 0 No packages published Contributors 7 Languages HTML 71.8% CSS 26.4% JavaScript 1.8% © 2021 GitHub, Inc. Terms Privacy Security Status Docs Contact GitHub Pricing API Training Blog About You can’t perform that action at this time. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."
608176,20210514,github.com,https://github.com/crypto-browserify/crypto-browserify,text/html,text/html,en,"GitHub - crypto-browserify/crypto-browserify: partial implementation of node's `crypto` for the browser Skip to content Sign up Why GitHub? Features → Mobile → Actions → Codespaces → Packages → Security → Code review → Project management → Integrations → GitHub Sponsors → Customer stories→ Team Enterprise Explore Explore GitHub → Learn and contribute Topics → Collections → Trending → Learning Lab → Open source guides → Connect with others The ReadME Project → Events → Community forum → GitHub Education → GitHub Stars program → Marketplace Pricing Plans → Compare plans → Contact Sales → Education → In this repository All GitHub ↵ Jump to ↵ No suggested jump to results In this repository All GitHub ↵ Jump to ↵ In this organization All GitHub ↵ Jump to ↵ In this repository All GitHub ↵ Jump to ↵ Sign in Sign up {{ message }} crypto-browserify / crypto-browserify Notifications Star 475 Fork 157 partial implementation of node's `crypto` for the browser MIT License 475 stars 157 forks Star Notifications Code Issues 19 Pull requests 6 Actions Projects 0 Wiki Security Insights More Code Issues Pull requests Actions Projects Wiki Security Insights master Switch branches/tags Branches Tags Could not load branches Nothing to show {{ refName }} default View all branches Could not load tags Nothing to show {{ refName }} default View all tags 6 branches 31 tags Code Clone HTTPS GitHub CLI Use Git or checkout with SVN using the web URL. Work fast with our official CLI. Learn more. Open with GitHub Desktop Download ZIP Launching GitHub Desktop If nothing happens, download GitHub Desktop and try again. Go back Launching GitHub Desktop If nothing happens, download GitHub Desktop and try again. Go back Launching Xcode If nothing happens, download Xcode and try again. Go back Launching Visual Studio If nothing happens, download the GitHub extension for Visual Studio and try again. Go back Latest commit calvinmetcalf fix debian issue (maybe) … 460a13b Feb 9, 2018 fix debian issue (maybe) 460a13b Git stats 362 commits Files Permalink Failed to load latest commit information. Type Name Latest commit message Commit time example add standard 5.0.0 Aug 13, 2015 test fix debian issue (maybe) Feb 9, 2018 .gitignore Add .gitignore Aug 5, 2013 .travis.yml saucelabs aparently only goes back to 7 Oct 19, 2017 .zuul.yml add zuul and browser tests Oct 3, 2015 LICENSE Add MIT license Sep 20, 2013 README.md add privateEncrypt/publicDecrypt to README Dec 14, 2015 index.js add rndom fill Oct 18, 2017 package.json 3.12.0 Nov 3, 2017 View code crypto-browserify todo contributions License README.md crypto-browserify A port of node's crypto module to the browser. The goal of this module is to reimplement node's crypto module, in pure javascript so that it can run in the browser. Here is the subset that is currently implemented: createHash (sha1, sha224, sha256, sha384, sha512, md5, rmd160) createHmac (sha1, sha224, sha256, sha384, sha512, md5, rmd160) pbkdf2 pbkdf2Sync randomBytes pseudoRandomBytes createCipher (aes) createDecipher (aes) createDiffieHellman createSign (rsa, ecdsa) createVerify (rsa, ecdsa) createECDH (secp256k1) publicEncrypt/privateDecrypt (rsa) privateEncrypt/publicDecrypt (rsa) todo these features from node's crypto are still unimplemented. createCredentials contributions If you are interested in writing a feature, please implement as a new module, which will be incorporated into crypto-browserify as a dependency. All deps must be compatible with node's crypto (generate example inputs and outputs with node, and save base64 strings inside JSON, so that tests can run in the browser. see sha.js Crypto is extra serious so please do not hesitate to review the code, and post comments if you do. License MIT About partial implementation of node's `crypto` for the browser Resources Readme License MIT License Releases 31 tags Packages 0 No packages published Used by 5.9m + 5,908,727 Contributors 24 + 13 contributors Languages JavaScript 99.1% HTML 0.9% © 2021 GitHub, Inc. Terms Privacy Security Status Docs Contact GitHub Pricing API Training Blog About You can’t perform that action at this time. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."
608178,20210514,github.com,https://github.com/indutny/elliptic/issues,text/html,text/html,en,"Issues · indutny/elliptic · GitHub Skip to content Sign up Why GitHub? Features → Mobile → Actions → Codespaces → Packages → Security → Code review → Project management → Integrations → GitHub Sponsors → Customer stories→ Team Enterprise Explore Explore GitHub → Learn and contribute Topics → Collections → Trending → Learning Lab → Open source guides → Connect with others The ReadME Project → Events → Community forum → GitHub Education → GitHub Stars program → Marketplace Pricing Plans → Compare plans → Contact Sales → Education → In this repository All GitHub ↵ Jump to ↵ No suggested jump to results In this repository All GitHub ↵ Jump to ↵ In this user All GitHub ↵ Jump to ↵ In this repository All GitHub ↵ Jump to ↵ Sign in Sign up {{ message }} indutny / elliptic Notifications Star 1.2k Fork 301 Code Issues 75 Pull requests 18 Actions Projects 0 Wiki Security Insights More Code Issues Pull requests Actions Projects Wiki Security Insights Labels 8 Milestones 0 Labels 8 Milestones 0 New issue Have a question about this project? Sign up for a free GitHub account to open an issue and contact its maintainers and the community. Pick a username Email Address Password Sign up for GitHub By clicking “Sign up for GitHub”, you agree to our terms of service and privacy statement. We’ll occasionally send you account related emails. Already on GitHub? Sign in to your account 75 Open 97 Closed 75 Open 97 Closed Author Filter by author author: Filter by this user Label Filter by label Use alt + click/return to exclude labels. Projects Filter by project Milestones Filter by milestone Assignee Filter by who’s assigned Sort Sort by Newest Oldest Most commented Least commented Recently updated Least recently updated Most reactions 👍 👎 😄 🎉 😕 ❤️ 🚀 👀 deriving private key from public key #257 opened Apr 27, 2021 by madhav-madhusoodanan How to use keys with crypto.subtle #255 opened Apr 1, 2021 by DominicTobias-b1 EDDSA.decodeInt should fails or reduce by dafault? #254 opened Mar 18, 2021 by mahnunchik Sad state #251 opened Mar 11, 2021 by berkus EDDSA.decodePoint should fails on ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff #250 opened Mar 3, 2021 by mahnunchik 15 Add endian argument to bn.js toString method #249 opened Mar 2, 2021 by mahnunchik EDDSA decodePoint doesn't support Buffer as argument #248 opened Mar 2, 2021 by mahnunchik How to decipher the encrypted message? #245 opened Jan 27, 2021 by istabraq-iot Montgomery Curve25519 is not openssl compatible #243 opened Dec 28, 2020 by jc-lab 4 Curves p384 and p521 produce incorrect results #239 opened Oct 18, 2020 by guidovranken 1 i want to use this library with c# #238 opened Oct 10, 2020 by medozeus Elliptic.js support following curve types: #236 opened Oct 5, 2020 by medozeus The Elliptic package 6.5.2 for Node.js allows ECDSA signature malleability via variations in encoding, leading '\0' bytes, or integer overflows. #235 opened Oct 1, 2020 by bsomeshwer EdDSA: What is a reason to manipulate with bytes? #233 opened Aug 27, 2020 by mahnunchik why use derive method get ECDH key，i got different length #230 opened Jul 10, 2020 by cqupt-yifanwu 4 Why do I generate my local test path in chunk-vendors when packing with NPM #229 opened Jun 22, 2020 by Anthonychen1994 1 TypedArray support ? #228 opened Jun 20, 2020 by dojyorin Is there way to generate PKCS#8 private key from Pem format ECC Private key #225 opened Apr 28, 2020 by sureshreddygovindu Signature validation in python. Prefix configuration? #224 opened Apr 25, 2020 by amrbz is it possible to do assymetric encryption? #223 opened Apr 7, 2020 by maroodb 1 Missing infinity point encoding #218 opened Feb 21, 2020 by catenacyber 1 ECDH P-521 public key point not on curve according to java (clojure) #216 opened Feb 11, 2020 by slhabity 2 how save and load private / publick key in pem or other format #215 opened Jan 27, 2020 by fturiot 2 How to pair client to server BTCPay NodeJS client? #214 opened Jan 21, 2020 by savshit 1 How to pair client to server BTCPay NodeJS client? #213 opened Jan 21, 2020 by savshit Previous 1 2 3 Next Previous Next ProTip! Type g p on any issue or pull request to go back to the pull request listing page. © 2021 GitHub, Inc. Terms Privacy Security Status Docs Contact GitHub Pricing API Training Blog About You can’t perform that action at this time. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."
608179,20210514,github.com,https://github.com/indutny/elliptic,text/html,text/html,en,"GitHub - indutny/elliptic: Fast Elliptic Curve Cryptography in plain javascript Skip to content Sign up Why GitHub? Features → Mobile → Actions → Codespaces → Packages → Security → Code review → Project management → Integrations → GitHub Sponsors → Customer stories→ Team Enterprise Explore Explore GitHub → Learn and contribute Topics → Collections → Trending → Learning Lab → Open source guides → Connect with others The ReadME Project → Events → Community forum → GitHub Education → GitHub Stars program → Marketplace Pricing Plans → Compare plans → Contact Sales → Education → In this repository All GitHub ↵ Jump to ↵ No suggested jump to results In this repository All GitHub ↵ Jump to ↵ In this user All GitHub ↵ Jump to ↵ In this repository All GitHub ↵ Jump to ↵ Sign in Sign up {{ message }} indutny / elliptic Notifications Star 1.2k Fork 301 Fast Elliptic Curve Cryptography in plain javascript 1.2k stars 301 forks Star Notifications Code Issues 75 Pull requests 18 Actions Projects 0 Wiki Security Insights More Code Issues Pull requests Actions Projects Wiki Security Insights master Switch branches/tags Branches Tags Could not load branches Nothing to show {{ refName }} default View all branches Could not load tags Nothing to show {{ refName }} default View all tags 2 branches 85 tags Code Clone HTTPS GitHub CLI Use Git or checkout with SVN using the web URL. Work fast with our official CLI. Learn more. Open with GitHub Desktop Download ZIP Launching GitHub Desktop If nothing happens, download GitHub Desktop and try again. Go back Launching GitHub Desktop If nothing happens, download GitHub Desktop and try again. Go back Launching Xcode If nothing happens, download Xcode and try again. Go back Launching Visual Studio If nothing happens, download the GitHub extension for Visual Studio and try again. Go back Latest commit indutny 6.5.4 … 43ac7f2 Feb 2, 2021 6.5.4 43ac7f2 Git stats 331 commits Files Permalink Failed to load latest commit information. Type Name Latest commit message Commit time benchmarks package: remove Makefile and dist Jan 29, 2016 dist 6.5.4 Feb 2, 2021 lib ec: validate that a point before deriving keys Feb 2, 2021 test ec: validate that a point before deriving keys Feb 2, 2021 .codeclimate.yml test: improvements with Saucelabs/Codeclimate Mar 31, 2016 .eslintignore lib: relint using eslint Aug 2, 2020 .eslintrc.js lib: relint using eslint Aug 2, 2020 .gitignore test: improvements with Saucelabs/Codeclimate Mar 31, 2016 .npmignore npmignore: dist May 20, 2016 .travis.yml travis: really move on Jun 26, 2019 Gruntfile.js grunt: fix standalone build May 25, 2016 README.md readme: update example Mar 23, 2017 package-lock.json 6.5.4 Feb 2, 2021 package.json 6.5.4 Feb 2, 2021 View code Elliptic Incentive Benchmarks API ECDSA EdDSA ECDH Supported curves Implementation details Related projects LICENSE README.md Elliptic Fast elliptic-curve cryptography in a plain javascript implementation. NOTE: Please take a look at http://safecurves.cr.yp.to/ before choosing a curve for your cryptography operations. Incentive ECC is much slower than regular RSA cryptography, the JS implementations are even more slower. Benchmarks $ node benchmarks/index.js Benchmarking: sign elliptic#sign x 262 ops/sec ±0.51% (177 runs sampled) eccjs#sign x 55.91 ops/sec ±0.90% (144 runs sampled) ------------------------ Fastest is elliptic#sign ======================== Benchmarking: verify elliptic#verify x 113 ops/sec ±0.50% (166 runs sampled) eccjs#verify x 48.56 ops/sec ±0.36% (125 runs sampled) ------------------------ Fastest is elliptic#verify ======================== Benchmarking: gen elliptic#gen x 294 ops/sec ±0.43% (176 runs sampled) eccjs#gen x 62.25 ops/sec ±0.63% (129 runs sampled) ------------------------ Fastest is elliptic#gen ======================== Benchmarking: ecdh elliptic#ecdh x 136 ops/sec ±0.85% (156 runs sampled) ------------------------ Fastest is elliptic#ecdh ======================== API ECDSA var EC = require('elliptic').ec; // Create and initialize EC context // (better do it once and reuse it) var ec = new EC('secp256k1'); // Generate keys var key = ec.genKeyPair(); // Sign the message's hash (input must be an array, or a hex-string) var msgHash = [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ]; var signature = key.sign(msgHash); // Export DER encoded signature in Array var derSign = signature.toDER(); // Verify signature console.log(key.verify(msgHash, derSign)); // CHECK WITH NO PRIVATE KEY var pubPoint = key.getPublic(); var x = pubPoint.getX(); var y = pubPoint.getY(); // Public Key MUST be either: // 1) '04' + hex string of x + hex string of y; or // 2) object with two hex string properties (x and y); or // 3) object with two buffer properties (x and y) var pub = pubPoint.encode('hex');                                 // case 1 var pub = { x: x.toString('hex'), y: y.toString('hex') };         // case 2 var pub = { x: x.toBuffer(), y: y.toBuffer() };                   // case 3 var pub = { x: x.toArrayLike(Buffer), y: y.toArrayLike(Buffer) }; // case 3 // Import public key var key = ec.keyFromPublic(pub, 'hex'); // Signature MUST be either: // 1) DER-encoded signature as hex-string; or // 2) DER-encoded signature as buffer; or // 3) object with two hex-string properties (r and s); or // 4) object with two buffer properties (r and s) var signature = '3046022100...'; // case 1 var signature = new Buffer('...'); // case 2 var signature = { r: 'b1fc...', s: '9c42...' }; // case 3 // Verify signature console.log(key.verify(msgHash, signature)); EdDSA var EdDSA = require('elliptic').eddsa; // Create and initialize EdDSA context // (better do it once and reuse it) var ec = new EdDSA('ed25519'); // Create key pair from secret var key = ec.keyFromSecret('693e3c...'); // hex string, array or Buffer // Sign the message's hash (input must be an array, or a hex-string) var msgHash = [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ]; var signature = key.sign(msgHash).toHex(); // Verify signature console.log(key.verify(msgHash, signature)); // CHECK WITH NO PRIVATE KEY // Import public key var pub = '0a1af638...'; var key = ec.keyFromPublic(pub, 'hex'); // Verify signature var signature = '70bed1...'; console.log(key.verify(msgHash, signature)); ECDH var EC = require('elliptic').ec; var ec = new EC('curve25519'); // Generate keys var key1 = ec.genKeyPair(); var key2 = ec.genKeyPair(); var shared1 = key1.derive(key2.getPublic()); var shared2 = key2.derive(key1.getPublic()); console.log('Both shared secrets are BN instances'); console.log(shared1.toString(16)); console.log(shared2.toString(16)); three and more members: var EC = require('elliptic').ec; var ec = new EC('curve25519'); var A = ec.genKeyPair(); var B = ec.genKeyPair(); var C = ec.genKeyPair(); var AB = A.getPublic().mul(B.getPrivate()) var BC = B.getPublic().mul(C.getPrivate()) var CA = C.getPublic().mul(A.getPrivate()) var ABC = AB.mul(C.getPrivate()) var BCA = BC.mul(A.getPrivate()) var CAB = CA.mul(B.getPrivate()) console.log(ABC.getX().toString(16)) console.log(BCA.getX().toString(16)) console.log(CAB.getX().toString(16)) NOTE: .derive() returns a BN instance. Supported curves Elliptic.js support following curve types: Short Weierstrass Montgomery Edwards Twisted Edwards Following curve 'presets' are embedded into the library: secp256k1 p192 p224 p256 p384 p521 curve25519 ed25519 NOTE: That curve25519 could not be used for ECDSA, use ed25519 instead. Implementation details ECDSA is using deterministic k value generation as per RFC6979. Most of the curve operations are performed on non-affine coordinates (either projective or extended), various windowing techniques are used for different cases. All operations are performed in reduction context using bn.js, hashing is provided by hash.js Related projects eccrypto: isomorphic implementation of ECDSA, ECDH and ECIES for both browserify and node (uses elliptic for browser and secp256k1-node for node) LICENSE This software is licensed under the MIT License. Copyright Fedor Indutny, 2014. Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the ""Software""), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. About Fast Elliptic Curve Cryptography in plain javascript Resources Readme Releases 85 tags Packages 0 No packages published Used by 5.8m + 5,825,177 Contributors 25 + 14 contributors Languages JavaScript 99.3% HTML 0.7% © 2021 GitHub, Inc. Terms Privacy Security Status Docs Contact GitHub Pricing API Training Blog About You can’t perform that action at this time. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."
608775,20210521,github.com,https://github.com/adobe-accessibility/Accessible-Mega-Menu,text/html,text/html,en,"GitHub - adobe-accessibility/Accessible-Mega-Menu: A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. Skip to content Sign up Why GitHub? Features → Mobile → Actions → Codespaces → Packages → Security → Code review → Project management → Integrations → GitHub Sponsors → Customer stories→ Team Enterprise Explore Explore GitHub → Learn and contribute Topics → Collections → Trending → Learning Lab → Open source guides → Connect with others The ReadME Project → Events → Community forum → GitHub Education → GitHub Stars program → Marketplace Pricing Plans → Compare plans → Contact Sales → Education → In this repository All GitHub ↵ Jump to ↵ No suggested jump to results In this repository All GitHub ↵ Jump to ↵ In this organization All GitHub ↵ Jump to ↵ In this repository All GitHub ↵ Jump to ↵ Sign in Sign up {{ message }} adobe-accessibility / Accessible-Mega-Menu Notifications Star 579 Fork 199 A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. Apache-2.0 License 579 stars 199 forks Star Notifications Code Issues 28 Pull requests 6 Actions Projects 0 Wiki Security Insights More Code Issues Pull requests Actions Projects Wiki Security Insights master Switch branches/tags Branches Tags Could not load branches Nothing to show {{ refName }} default View all branches Could not load tags Nothing to show {{ refName }} default View all tags 2 branches 0 tags Code Clone HTTPS GitHub CLI Use Git or checkout with SVN using the web URL. Work fast with our official CLI. Learn more. Open with GitHub Desktop Download ZIP Launching GitHub Desktop If nothing happens, download GitHub Desktop and try again. Go back Launching GitHub Desktop If nothing happens, download GitHub Desktop and try again. Go back Launching Xcode If nothing happens, download Xcode and try again. Go back Launching Visual Studio Code Your codespace will open once ready. There was a problem preparing your codespace, please try again. Latest commit majornista fix evaluation for ChromeVox object … 5c070bc Dec 7, 2020 fix evaluation for ChromeVox object 5c070bc Git stats 39 commits Files Permalink Failed to load latest commit information. Type Name Latest commit message Commit time css Add openOnMouseover setting, and toggleButtonClass for responsive layout May 11, 2018 js fix evaluation for ChromeVox object Dec 7, 2020 third-party/jquery initial commit Aug 26, 2013 LICENSE initial commit Aug 26, 2013 NOTICE initial commit Aug 26, 2013 README.md initial commit Aug 26, 2013 index.html Updating WCAG 2.0 References to WCAG 2.1 (#67) Dec 4, 2020 package.json Updating repo references Jul 8, 2016 View code Accessible Mega Menu Keyboard Accessibility Screen Reader Accessibility Usage HTML JavaScript CSS README.md Accessible Mega Menu ========================= A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. It is modeled after the mega menu on adobe.com but has been simplified for use by others. An brief explanation of our interaction design choices can be found in a blog post at Mega menu accessibility on adobe.com. Content for the links and text within the mega menu comes from the Web Content Accessibility Guidelines (WCAG) 2.0. Keyboard Accessibility The accessible mega menu supports keyboard interaction modeled after the behavior described in the WAI-ARIA Menu or Menu bar (widget) design pattern, however we also try to respect users' general expectations for the behavior of links in a global navigation. To this end, the accessible mega menu implementation permits tab focus on each of the six top-level menu items. When one of the menu items has focus, pressing the Enter key, Spacebar or Down arrow will open the submenu panel, and pressing the Left or Right arrow key will shift focus to the adjacent menu item. Links within the submenu panels are included in the tab order when the panel is open. They can also be navigated with the arrow keys or by typing the first character in the link name, which speeds up keyboard navigation considerably. Pressing the Escape key closes the submenu and restores focus to the parent menu item. Screen Reader Accessibility The accessible mega menu models its use of WAI-ARIA Roles, States, and Properties after those described in the WAI-ARIA Menu or Menu bar (widget) design pattern with some notable exceptions, so that it behaves better with screen reader user expectations for global navigation. We don't use role=""menu"" for the menu container and role=""menuitem"" for each of the links therein, because if we do, assistive technology will no longer interpret the links as links, but instead, as menu items, and the links in our global navigation will no longer show up when a screen reader user executes a shortcut command to bring up a list of links in the page. We also want to maintain the semantic structure of the submenu panels in our mega menu; our links are organized into lists and separated by headings. Omitting role=""menu"" and role=""menuitem"" for the global navigation seems the safer way to go. Usage HTML The HTML structure for the mega menu is a nav element, or any other container element, containing a list. Each list item contains a link which is followed by a div or any other container element which will serve as the pop up panel. The panel can contain any html content; in the following example, each panel contains three lists of links. You can explicitly define groups within the panel, between which a user can navigate quickly using the left and right arrow keys; in the following example, the CSS class .sub-nav-group identifies a navigable group.     <nav>         <ul class=""nav-menu"">             <li class=""nav-item"">                 <a href=""?movie"">Movies</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=0"">Action &amp; Adventure</a></li>                         <li><a href=""?movie&genre=2"">Children &amp; Family</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=7"">Dramas</a></li>                         <li><a href=""?movie&genre=9"">Foreign</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=14"">Musicals</a></li>                         <li><a href=""?movie&genre=15"">Romance</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>             <li class=""nav-item"">                 <a href=""?tv"">TV Shows</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=20"">Classic TV</a></li>                         <li><a href=""?tv&genre=21"">Crime TV</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=27"">Reality TV</a></li>                         <li><a href=""?tv&genre=30"">TV Action</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=33"">TV Dramas</a></li>                         <li><a href=""?tv&genre=34"">TV Horror</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>         </ul>     </nav> By default, accessibleMegaMenu uses the the following CSS classes to define the top-level navigation items, panels, groups within the panels, and the hover, focus, and open states. It also defines a prefix for unique id strings, which are required to indicate the relationship of a top-level navigation item to the panel it controls.     defaults = {         /* unique ID's are required to indicate aria-owns, aria-controls and aria-labelledby */         uuidPrefix: ""accessible-megamenu"",                  /* default css class used to define the megamenu styling */         menuClass: ""accessible-megamenu"",                  /* default css class for a top-level navigation item in the megamenu */         topNavItemClass: ""accessible-megamenu-top-nav-item"",                  /* default css class for a megamenu panel */         panelClass: ""accessible-megamenu-panel"",                  /* default css class for a group of items within a megamenu panel */         panelGroupClass: ""accessible-megamenu-panel-group"",                  /* default css class for the hover state */         hoverClass: ""hover"",                  /* default css class for the focus state */         focusClass: ""focus"",                  /* default css class for the open state */         openClass: ""open""      } You can optionally override the defaults to use the CSS classes you may have already defined for your mega menu. JavaScript Be sure to include jQuery and the jquery-accessibleMegaMenu.js plugin script.     <script src=""//code.jquery.com/jquery-1.10.1.min.js""></script>     <script src=""js/jquery-accessibleMegaMenu.js""></script> The following initializes the first nav element in the document as an accessibleMegaMenu, with optional CSS class overrides.     $(""nav:first"").accessibleMegaMenu({         /* prefix for generated unique id attributes, which are required             to indicate aria-owns, aria-controls and aria-labelledby */         uuidPrefix: ""accessible-megamenu"",                  /* css class used to define the megamenu styling */         menuClass: ""nav-menu"",                  /* css class for a top-level navigation item in the megamenu */         topNavItemClass: ""nav-item"",                  /* css class for a megamenu panel */         panelClass: ""sub-nav"",                  /* css class for a group of items within a megamenu panel */         panelGroupClass: ""sub-nav-group"",                  /* css class for the hover state */         hoverClass: ""hover"",                  /* css class for the focus state */         focusClass: ""focus"",                  /* css class for the open state */         openClass: ""open""     }); CSS AccessibleMegaMenu handles the showing and hiding of panels by adding or removing a CSS class. No inline styles are added to hide elements or create animation between states. Following is some rudimentary CSS for our example which enables the showing/hiding of and the layout of lists panels in the mega menu.     /* mega menu list */     .nav-menu {         display: block;         position: relative;         list-style: none;         margin: 0;         padding: 0;         z-index: 15;     }     /* a top level navigation item in the mega menu */     .nav-item {         list-style: none;         display: inline-block;         padding: 0;         margin: 0;     }     /* first descendant link within a top level navigation item */     .nav-item > a {         position: relative;         display: inline-block;         padding: 0.5em 1em;         margin: 0 0 -1px 0;         border: 1px solid transparent;     }     /* focus/open states of first descendant link within a top level         navigation item */     .nav-item > a:focus,     .nav-item > a.open {         border: 1px solid #dedede;     }     /* open state of first descendant link within a top level         navigation item */     .nav-item > a.open {         background-color: #fff;         border-bottom: none;         z-index: 1;     }     /* sub-navigation panel */     .sub-nav {         position: absolute;         display: none;         top: 2.2em;         margin-top: -1px;         padding: 0.5em 1em;         border: 1px solid #dedede;         background-color: #fff;     }     /* sub-navigation panel open state */     .sub-nav.open {         display: block;     }     /* list of items within sub-navigation panel */     .sub-nav ul {         display: inline-block;         vertical-align: top;         margin: 0 1em 0 0;         padding: 0;     }     /* list item within sub-navigation panel */     .sub-nav li {         display: block;         list-style-type: none;         margin: 0;         padding: 0;     }   Putting it all together, here is the completed example:     <!doctype html>     <html lang=""en"">     <head>     <meta charset=""UTF-8"">     <title>Simple Accessible Mega Menu Example</title>     <style>         /* Rudimentary mega menu CSS for demonstration */             /* mega menu list */         .nav-menu {             display: block;             position: relative;             list-style: none;             margin: 0;             padding: 0;             z-index: 15;         }         /* a top level navigation item in the mega menu */         .nav-item {             list-style: none;             display: inline-block;             padding: 0;             margin: 0;         }         /* first descendant link within a top level navigation item */         .nav-item > a {             position: relative;             display: inline-block;             padding: 0.5em 1em;             margin: 0 0 -1px 0;             border: 1px solid transparent;         }         /* focus/open states of first descendant link within a top level             navigation item */         .nav-item > a:focus,         .nav-item > a.open {             border: 1px solid #dedede;         }         /* open state of first descendant link within a top level             navigation item */         .nav-item > a.open {             background-color: #fff;             border-bottom: none;             z-index: 1;         }         /* sub-navigation panel */         .sub-nav {             position: absolute;             display: none;             top: 2.2em;             margin-top: -1px;             padding: 0.5em 1em;             border: 1px solid #dedede;             background-color: #fff;         }         /* sub-navigation panel open state */         .sub-nav.open {             display: block;         }         /* list of items within sub-navigation panel */         .sub-nav ul {             display: inline-block;             vertical-align: top;             margin: 0 1em 0 0;             padding: 0;         }         /* list item within sub-navigation panel */         .sub-nav li {             display: block;             list-style-type: none;             margin: 0;             padding: 0;         }          </style>     </head>     <body>     <nav>         <ul class=""nav-menu"">             <li class=""nav-item"">                 <a href=""?movie"">Movies</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=0"">Action &amp; Adventure</a></li>                         <li><a href=""?movie&genre=2"">Children &amp; Family</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=7"">Dramas</a></li>                         <li><a href=""?movie&genre=9"">Foreign</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=14"">Musicals</a></li>                         <li><a href=""?movie&genre=15"">Romance</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>             <li class=""nav-item"">                 <a href=""?tv"">TV Shows</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=20"">Classic TV</a></li>                         <li><a href=""?tv&genre=21"">Crime TV</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=27"">Reality TV</a></li>                         <li><a href=""?tv&genre=30"">TV Action</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=33"">TV Dramas</a></li>                         <li><a href=""?tv&genre=34"">TV Horror</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>         </ul>     </nav>          <!-- include jquery -->     <script src=""//code.jquery.com/jquery-1.10.1.min.js""></script>     <!-- include the jquery-accessibleMegaMenu plugin script -->     <script src=""js/jquery-accessibleMegaMenu.js""></script>     <!-- initialize a selector as an accessibleMegaMenu -->     <script>         $(""nav:first"").accessibleMegaMenu({             /* prefix for generated unique id attributes, which are required                 to indicate aria-owns, aria-controls and aria-labelledby */             uuidPrefix: ""accessible-megamenu"",                          /* css class used to define the megamenu styling */             menuClass: ""nav-menu"",                          /* css class for a top-level navigation item in the megamenu */             topNavItemClass: ""nav-item"",                          /* css class for a megamenu panel */             panelClass: ""sub-nav"",                          /* css class for a group of items within a megamenu panel */             panelGroupClass: ""sub-nav-group"",                          /* css class for the hover state */             hoverClass: ""hover"",                          /* css class for the focus state */             focusClass: ""focus"",                          /* css class for the open state */             openClass: ""open""         });     </script>     </body>     </html> About A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. Resources Readme License Apache-2.0 License Releases No releases published Packages 0 No packages published Used by 15 + 7 Contributors 7 Languages HTML 71.8% CSS 26.4% JavaScript 1.8% © 2021 GitHub, Inc. Terms Privacy Security Status Docs Contact GitHub Pricing API Training Blog About You can’t perform that action at this time. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."
618713,20210521,github.com,https://github.com/crypto-browserify/crypto-browserify,text/html,text/html,en,"GitHub - crypto-browserify/crypto-browserify: partial implementation of node's `crypto` for the browser Skip to content Sign up Why GitHub? Features → Mobile → Actions → Codespaces → Packages → Security → Code review → Project management → Integrations → GitHub Sponsors → Customer stories→ Team Enterprise Explore Explore GitHub → Learn and contribute Topics → Collections → Trending → Learning Lab → Open source guides → Connect with others The ReadME Project → Events → Community forum → GitHub Education → GitHub Stars program → Marketplace Pricing Plans → Compare plans → Contact Sales → Education → In this repository All GitHub ↵ Jump to ↵ No suggested jump to results In this repository All GitHub ↵ Jump to ↵ In this organization All GitHub ↵ Jump to ↵ In this repository All GitHub ↵ Jump to ↵ Sign in Sign up {{ message }} crypto-browserify / crypto-browserify Notifications Star 477 Fork 157 partial implementation of node's `crypto` for the browser MIT License 477 stars 157 forks Star Notifications Code Issues 19 Pull requests 6 Actions Projects 0 Wiki Security Insights More Code Issues Pull requests Actions Projects Wiki Security Insights master Switch branches/tags Branches Tags Could not load branches Nothing to show {{ refName }} default View all branches Could not load tags Nothing to show {{ refName }} default View all tags 6 branches 31 tags Code Clone HTTPS GitHub CLI Use Git or checkout with SVN using the web URL. Work fast with our official CLI. Learn more. Open with GitHub Desktop Download ZIP Launching GitHub Desktop If nothing happens, download GitHub Desktop and try again. Go back Launching GitHub Desktop If nothing happens, download GitHub Desktop and try again. Go back Launching Xcode If nothing happens, download Xcode and try again. Go back Launching Visual Studio Code Your codespace will open once ready. There was a problem preparing your codespace, please try again. Latest commit calvinmetcalf fix debian issue (maybe) … 460a13b Feb 9, 2018 fix debian issue (maybe) 460a13b Git stats 362 commits Files Permalink Failed to load latest commit information. Type Name Latest commit message Commit time example add standard 5.0.0 Aug 13, 2015 test fix debian issue (maybe) Feb 9, 2018 .gitignore Add .gitignore Aug 5, 2013 .travis.yml saucelabs aparently only goes back to 7 Oct 19, 2017 .zuul.yml add zuul and browser tests Oct 3, 2015 LICENSE Add MIT license Sep 20, 2013 README.md add privateEncrypt/publicDecrypt to README Dec 14, 2015 index.js add rndom fill Oct 18, 2017 package.json 3.12.0 Nov 3, 2017 View code crypto-browserify todo contributions License README.md crypto-browserify A port of node's crypto module to the browser. The goal of this module is to reimplement node's crypto module, in pure javascript so that it can run in the browser. Here is the subset that is currently implemented: createHash (sha1, sha224, sha256, sha384, sha512, md5, rmd160) createHmac (sha1, sha224, sha256, sha384, sha512, md5, rmd160) pbkdf2 pbkdf2Sync randomBytes pseudoRandomBytes createCipher (aes) createDecipher (aes) createDiffieHellman createSign (rsa, ecdsa) createVerify (rsa, ecdsa) createECDH (secp256k1) publicEncrypt/privateDecrypt (rsa) privateEncrypt/publicDecrypt (rsa) todo these features from node's crypto are still unimplemented. createCredentials contributions If you are interested in writing a feature, please implement as a new module, which will be incorporated into crypto-browserify as a dependency. All deps must be compatible with node's crypto (generate example inputs and outputs with node, and save base64 strings inside JSON, so that tests can run in the browser. see sha.js Crypto is extra serious so please do not hesitate to review the code, and post comments if you do. License MIT About partial implementation of node's `crypto` for the browser Resources Readme License MIT License Releases 31 tags Packages 0 No packages published Used by 5.9m + 5,932,591 Contributors 24 + 13 contributors Languages JavaScript 99.1% HTML 0.9% © 2021 GitHub, Inc. Terms Privacy Security Status Docs Contact GitHub Pricing API Training Blog About You can’t perform that action at this time. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."
618715,20210521,github.com,https://github.com/indutny/elliptic/issues,text/html,text/html,en,"Issues · indutny/elliptic · GitHub Skip to content Sign up Why GitHub? Features → Mobile → Actions → Codespaces → Packages → Security → Code review → Project management → Integrations → GitHub Sponsors → Customer stories→ Team Enterprise Explore Explore GitHub → Learn and contribute Topics → Collections → Trending → Learning Lab → Open source guides → Connect with others The ReadME Project → Events → Community forum → GitHub Education → GitHub Stars program → Marketplace Pricing Plans → Compare plans → Contact Sales → Education → In this repository All GitHub ↵ Jump to ↵ No suggested jump to results In this repository All GitHub ↵ Jump to ↵ In this user All GitHub ↵ Jump to ↵ In this repository All GitHub ↵ Jump to ↵ Sign in Sign up {{ message }} indutny / elliptic Notifications Star 1.2k Fork 303 Code Issues 75 Pull requests 19 Actions Projects 0 Wiki Security Insights More Code Issues Pull requests Actions Projects Wiki Security Insights Labels 8 Milestones 0 Labels 8 Milestones 0 New issue Have a question about this project? Sign up for a free GitHub account to open an issue and contact its maintainers and the community. Pick a username Email Address Password Sign up for GitHub By clicking “Sign up for GitHub”, you agree to our terms of service and privacy statement. We’ll occasionally send you account related emails. Already on GitHub? Sign in to your account 75 Open 97 Closed 75 Open 97 Closed Author Filter by author author: Filter by this user Label Filter by label Use alt + click/return to exclude labels. Projects Filter by project Milestones Filter by milestone Assignee Filter by who’s assigned Sort Sort by Newest Oldest Most commented Least commented Recently updated Least recently updated Most reactions 👍 👎 😄 🎉 😕 ❤️ 🚀 👀 deriving private key from public key #257 opened Apr 27, 2021 by madhav-madhusoodanan How to use keys with crypto.subtle #255 opened Apr 1, 2021 by DominicTobias-b1 EDDSA.decodeInt should fails or reduce by dafault? #254 opened Mar 18, 2021 by mahnunchik Sad state #251 opened Mar 11, 2021 by berkus EDDSA.decodePoint should fails on ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff #250 opened Mar 3, 2021 by mahnunchik 15 Add endian argument to bn.js toString method #249 opened Mar 2, 2021 by mahnunchik EDDSA decodePoint doesn't support Buffer as argument #248 opened Mar 2, 2021 by mahnunchik How to decipher the encrypted message? #245 opened Jan 27, 2021 by istabraq-iot Montgomery Curve25519 is not openssl compatible #243 opened Dec 28, 2020 by jc-lab 4 Curves p384 and p521 produce incorrect results #239 opened Oct 18, 2020 by guidovranken 1 i want to use this library with c# #238 opened Oct 10, 2020 by medozeus Elliptic.js support following curve types: #236 opened Oct 5, 2020 by medozeus The Elliptic package 6.5.2 for Node.js allows ECDSA signature malleability via variations in encoding, leading '\0' bytes, or integer overflows. #235 opened Oct 1, 2020 by bsomeshwer EdDSA: What is a reason to manipulate with bytes? #233 opened Aug 27, 2020 by mahnunchik why use derive method get ECDH key，i got different length #230 opened Jul 10, 2020 by cqupt-yifanwu 4 Why do I generate my local test path in chunk-vendors when packing with NPM #229 opened Jun 22, 2020 by Anthonychen1994 1 TypedArray support ? #228 opened Jun 20, 2020 by dojyorin Is there way to generate PKCS#8 private key from Pem format ECC Private key #225 opened Apr 28, 2020 by sureshreddygovindu Signature validation in python. Prefix configuration? #224 opened Apr 25, 2020 by amrbz is it possible to do assymetric encryption? #223 opened Apr 7, 2020 by maroodb 1 Missing infinity point encoding #218 opened Feb 21, 2020 by catenacyber 1 ECDH P-521 public key point not on curve according to java (clojure) #216 opened Feb 11, 2020 by slhabity 2 how save and load private / publick key in pem or other format #215 opened Jan 27, 2020 by fturiot 2 How to pair client to server BTCPay NodeJS client? #214 opened Jan 21, 2020 by savshit 1 How to pair client to server BTCPay NodeJS client? #213 opened Jan 21, 2020 by savshit Previous 1 2 3 Next Previous Next ProTip! Adding no:label will show everything without a label. © 2021 GitHub, Inc. Terms Privacy Security Status Docs Contact GitHub Pricing API Training Blog About You can’t perform that action at this time. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."
618717,20210521,github.com,https://github.com/indutny/elliptic,text/html,text/html,en,"GitHub - indutny/elliptic: Fast Elliptic Curve Cryptography in plain javascript Skip to content Sign up Why GitHub? Features → Mobile → Actions → Codespaces → Packages → Security → Code review → Project management → Integrations → GitHub Sponsors → Customer stories→ Team Enterprise Explore Explore GitHub → Learn and contribute Topics → Collections → Trending → Learning Lab → Open source guides → Connect with others The ReadME Project → Events → Community forum → GitHub Education → GitHub Stars program → Marketplace Pricing Plans → Compare plans → Contact Sales → Education → In this repository All GitHub ↵ Jump to ↵ No suggested jump to results In this repository All GitHub ↵ Jump to ↵ In this user All GitHub ↵ Jump to ↵ In this repository All GitHub ↵ Jump to ↵ Sign in Sign up {{ message }} indutny / elliptic Notifications Star 1.2k Fork 303 Fast Elliptic Curve Cryptography in plain javascript 1.2k stars 303 forks Star Notifications Code Issues 75 Pull requests 19 Actions Projects 0 Wiki Security Insights More Code Issues Pull requests Actions Projects Wiki Security Insights master Switch branches/tags Branches Tags Could not load branches Nothing to show {{ refName }} default View all branches Could not load tags Nothing to show {{ refName }} default View all tags 2 branches 85 tags Code Clone HTTPS GitHub CLI Use Git or checkout with SVN using the web URL. Work fast with our official CLI. Learn more. Open with GitHub Desktop Download ZIP Launching GitHub Desktop If nothing happens, download GitHub Desktop and try again. Go back Launching GitHub Desktop If nothing happens, download GitHub Desktop and try again. Go back Launching Xcode If nothing happens, download Xcode and try again. Go back Launching Visual Studio Code Your codespace will open once ready. There was a problem preparing your codespace, please try again. Latest commit indutny 6.5.4 … 43ac7f2 Feb 2, 2021 6.5.4 43ac7f2 Git stats 331 commits Files Permalink Failed to load latest commit information. Type Name Latest commit message Commit time benchmarks package: remove Makefile and dist Jan 29, 2016 dist 6.5.4 Feb 2, 2021 lib ec: validate that a point before deriving keys Feb 2, 2021 test ec: validate that a point before deriving keys Feb 2, 2021 .codeclimate.yml test: improvements with Saucelabs/Codeclimate Mar 31, 2016 .eslintignore lib: relint using eslint Aug 2, 2020 .eslintrc.js lib: relint using eslint Aug 2, 2020 .gitignore test: improvements with Saucelabs/Codeclimate Mar 31, 2016 .npmignore npmignore: dist May 20, 2016 .travis.yml travis: really move on Jun 26, 2019 Gruntfile.js grunt: fix standalone build May 25, 2016 README.md readme: update example Mar 23, 2017 package-lock.json 6.5.4 Feb 2, 2021 package.json 6.5.4 Feb 2, 2021 View code Elliptic Incentive Benchmarks API ECDSA EdDSA ECDH Supported curves Implementation details Related projects LICENSE README.md Elliptic Fast elliptic-curve cryptography in a plain javascript implementation. NOTE: Please take a look at http://safecurves.cr.yp.to/ before choosing a curve for your cryptography operations. Incentive ECC is much slower than regular RSA cryptography, the JS implementations are even more slower. Benchmarks $ node benchmarks/index.js Benchmarking: sign elliptic#sign x 262 ops/sec ±0.51% (177 runs sampled) eccjs#sign x 55.91 ops/sec ±0.90% (144 runs sampled) ------------------------ Fastest is elliptic#sign ======================== Benchmarking: verify elliptic#verify x 113 ops/sec ±0.50% (166 runs sampled) eccjs#verify x 48.56 ops/sec ±0.36% (125 runs sampled) ------------------------ Fastest is elliptic#verify ======================== Benchmarking: gen elliptic#gen x 294 ops/sec ±0.43% (176 runs sampled) eccjs#gen x 62.25 ops/sec ±0.63% (129 runs sampled) ------------------------ Fastest is elliptic#gen ======================== Benchmarking: ecdh elliptic#ecdh x 136 ops/sec ±0.85% (156 runs sampled) ------------------------ Fastest is elliptic#ecdh ======================== API ECDSA var EC = require('elliptic').ec; // Create and initialize EC context // (better do it once and reuse it) var ec = new EC('secp256k1'); // Generate keys var key = ec.genKeyPair(); // Sign the message's hash (input must be an array, or a hex-string) var msgHash = [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ]; var signature = key.sign(msgHash); // Export DER encoded signature in Array var derSign = signature.toDER(); // Verify signature console.log(key.verify(msgHash, derSign)); // CHECK WITH NO PRIVATE KEY var pubPoint = key.getPublic(); var x = pubPoint.getX(); var y = pubPoint.getY(); // Public Key MUST be either: // 1) '04' + hex string of x + hex string of y; or // 2) object with two hex string properties (x and y); or // 3) object with two buffer properties (x and y) var pub = pubPoint.encode('hex');                                 // case 1 var pub = { x: x.toString('hex'), y: y.toString('hex') };         // case 2 var pub = { x: x.toBuffer(), y: y.toBuffer() };                   // case 3 var pub = { x: x.toArrayLike(Buffer), y: y.toArrayLike(Buffer) }; // case 3 // Import public key var key = ec.keyFromPublic(pub, 'hex'); // Signature MUST be either: // 1) DER-encoded signature as hex-string; or // 2) DER-encoded signature as buffer; or // 3) object with two hex-string properties (r and s); or // 4) object with two buffer properties (r and s) var signature = '3046022100...'; // case 1 var signature = new Buffer('...'); // case 2 var signature = { r: 'b1fc...', s: '9c42...' }; // case 3 // Verify signature console.log(key.verify(msgHash, signature)); EdDSA var EdDSA = require('elliptic').eddsa; // Create and initialize EdDSA context // (better do it once and reuse it) var ec = new EdDSA('ed25519'); // Create key pair from secret var key = ec.keyFromSecret('693e3c...'); // hex string, array or Buffer // Sign the message's hash (input must be an array, or a hex-string) var msgHash = [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ]; var signature = key.sign(msgHash).toHex(); // Verify signature console.log(key.verify(msgHash, signature)); // CHECK WITH NO PRIVATE KEY // Import public key var pub = '0a1af638...'; var key = ec.keyFromPublic(pub, 'hex'); // Verify signature var signature = '70bed1...'; console.log(key.verify(msgHash, signature)); ECDH var EC = require('elliptic').ec; var ec = new EC('curve25519'); // Generate keys var key1 = ec.genKeyPair(); var key2 = ec.genKeyPair(); var shared1 = key1.derive(key2.getPublic()); var shared2 = key2.derive(key1.getPublic()); console.log('Both shared secrets are BN instances'); console.log(shared1.toString(16)); console.log(shared2.toString(16)); three and more members: var EC = require('elliptic').ec; var ec = new EC('curve25519'); var A = ec.genKeyPair(); var B = ec.genKeyPair(); var C = ec.genKeyPair(); var AB = A.getPublic().mul(B.getPrivate()) var BC = B.getPublic().mul(C.getPrivate()) var CA = C.getPublic().mul(A.getPrivate()) var ABC = AB.mul(C.getPrivate()) var BCA = BC.mul(A.getPrivate()) var CAB = CA.mul(B.getPrivate()) console.log(ABC.getX().toString(16)) console.log(BCA.getX().toString(16)) console.log(CAB.getX().toString(16)) NOTE: .derive() returns a BN instance. Supported curves Elliptic.js support following curve types: Short Weierstrass Montgomery Edwards Twisted Edwards Following curve 'presets' are embedded into the library: secp256k1 p192 p224 p256 p384 p521 curve25519 ed25519 NOTE: That curve25519 could not be used for ECDSA, use ed25519 instead. Implementation details ECDSA is using deterministic k value generation as per RFC6979. Most of the curve operations are performed on non-affine coordinates (either projective or extended), various windowing techniques are used for different cases. All operations are performed in reduction context using bn.js, hashing is provided by hash.js Related projects eccrypto: isomorphic implementation of ECDSA, ECDH and ECIES for both browserify and node (uses elliptic for browser and secp256k1-node for node) LICENSE This software is licensed under the MIT License. Copyright Fedor Indutny, 2014. Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the ""Software""), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. About Fast Elliptic Curve Cryptography in plain javascript Resources Readme Releases 85 tags Packages 0 No packages published Used by 5.9m + 5,860,157 Contributors 25 + 14 contributors Languages JavaScript 99.3% HTML 0.7% © 2021 GitHub, Inc. Terms Privacy Security Status Docs Contact GitHub Pricing API Training Blog About You can’t perform that action at this time. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."
619326,20210528,github.com,https://github.com/adobe-accessibility/Accessible-Mega-Menu,text/html,text/html,en,"GitHub - adobe-accessibility/Accessible-Mega-Menu: A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. Skip to content Sign up Why GitHub? Features → Mobile → Actions → Codespaces → Packages → Security → Code review → Project management → Integrations → GitHub Sponsors → Customer stories→ Team Enterprise Explore Explore GitHub → Learn and contribute Topics → Collections → Trending → Learning Lab → Open source guides → Connect with others The ReadME Project → Events → Community forum → GitHub Education → GitHub Stars program → Marketplace Pricing Plans → Compare plans → Contact Sales → Education → In this repository All GitHub ↵ Jump to ↵ No suggested jump to results In this repository All GitHub ↵ Jump to ↵ In this organization All GitHub ↵ Jump to ↵ In this repository All GitHub ↵ Jump to ↵ Sign in Sign up {{ message }} adobe-accessibility / Accessible-Mega-Menu Notifications Star 581 Fork 199 A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. Apache-2.0 License 581 stars 199 forks Star Notifications Code Issues 28 Pull requests 6 Actions Projects 0 Wiki Security Insights More Code Issues Pull requests Actions Projects Wiki Security Insights master Switch branches/tags Branches Tags Could not load branches Nothing to show {{ refName }} default View all branches Could not load tags Nothing to show {{ refName }} default View all tags 2 branches 0 tags Code Clone HTTPS GitHub CLI Use Git or checkout with SVN using the web URL. Work fast with our official CLI. Learn more. Open with GitHub Desktop Download ZIP Launching GitHub Desktop If nothing happens, download GitHub Desktop and try again. Go back Launching GitHub Desktop If nothing happens, download GitHub Desktop and try again. Go back Launching Xcode If nothing happens, download Xcode and try again. Go back Launching Visual Studio Code Your codespace will open once ready. There was a problem preparing your codespace, please try again. Latest commit majornista fix evaluation for ChromeVox object … 5c070bc Dec 7, 2020 fix evaluation for ChromeVox object 5c070bc Git stats 39 commits Files Permalink Failed to load latest commit information. Type Name Latest commit message Commit time css Add openOnMouseover setting, and toggleButtonClass for responsive layout May 11, 2018 js fix evaluation for ChromeVox object Dec 7, 2020 third-party/jquery initial commit Aug 26, 2013 LICENSE initial commit Aug 26, 2013 NOTICE initial commit Aug 26, 2013 README.md initial commit Aug 26, 2013 index.html Updating WCAG 2.0 References to WCAG 2.1 (#67) Dec 4, 2020 package.json Updating repo references Jul 8, 2016 View code Accessible Mega Menu Keyboard Accessibility Screen Reader Accessibility Usage HTML JavaScript CSS README.md Accessible Mega Menu ========================= A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. It is modeled after the mega menu on adobe.com but has been simplified for use by others. An brief explanation of our interaction design choices can be found in a blog post at Mega menu accessibility on adobe.com. Content for the links and text within the mega menu comes from the Web Content Accessibility Guidelines (WCAG) 2.0. Keyboard Accessibility The accessible mega menu supports keyboard interaction modeled after the behavior described in the WAI-ARIA Menu or Menu bar (widget) design pattern, however we also try to respect users' general expectations for the behavior of links in a global navigation. To this end, the accessible mega menu implementation permits tab focus on each of the six top-level menu items. When one of the menu items has focus, pressing the Enter key, Spacebar or Down arrow will open the submenu panel, and pressing the Left or Right arrow key will shift focus to the adjacent menu item. Links within the submenu panels are included in the tab order when the panel is open. They can also be navigated with the arrow keys or by typing the first character in the link name, which speeds up keyboard navigation considerably. Pressing the Escape key closes the submenu and restores focus to the parent menu item. Screen Reader Accessibility The accessible mega menu models its use of WAI-ARIA Roles, States, and Properties after those described in the WAI-ARIA Menu or Menu bar (widget) design pattern with some notable exceptions, so that it behaves better with screen reader user expectations for global navigation. We don't use role=""menu"" for the menu container and role=""menuitem"" for each of the links therein, because if we do, assistive technology will no longer interpret the links as links, but instead, as menu items, and the links in our global navigation will no longer show up when a screen reader user executes a shortcut command to bring up a list of links in the page. We also want to maintain the semantic structure of the submenu panels in our mega menu; our links are organized into lists and separated by headings. Omitting role=""menu"" and role=""menuitem"" for the global navigation seems the safer way to go. Usage HTML The HTML structure for the mega menu is a nav element, or any other container element, containing a list. Each list item contains a link which is followed by a div or any other container element which will serve as the pop up panel. The panel can contain any html content; in the following example, each panel contains three lists of links. You can explicitly define groups within the panel, between which a user can navigate quickly using the left and right arrow keys; in the following example, the CSS class .sub-nav-group identifies a navigable group.     <nav>         <ul class=""nav-menu"">             <li class=""nav-item"">                 <a href=""?movie"">Movies</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=0"">Action &amp; Adventure</a></li>                         <li><a href=""?movie&genre=2"">Children &amp; Family</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=7"">Dramas</a></li>                         <li><a href=""?movie&genre=9"">Foreign</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=14"">Musicals</a></li>                         <li><a href=""?movie&genre=15"">Romance</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>             <li class=""nav-item"">                 <a href=""?tv"">TV Shows</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=20"">Classic TV</a></li>                         <li><a href=""?tv&genre=21"">Crime TV</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=27"">Reality TV</a></li>                         <li><a href=""?tv&genre=30"">TV Action</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=33"">TV Dramas</a></li>                         <li><a href=""?tv&genre=34"">TV Horror</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>         </ul>     </nav> By default, accessibleMegaMenu uses the the following CSS classes to define the top-level navigation items, panels, groups within the panels, and the hover, focus, and open states. It also defines a prefix for unique id strings, which are required to indicate the relationship of a top-level navigation item to the panel it controls.     defaults = {         /* unique ID's are required to indicate aria-owns, aria-controls and aria-labelledby */         uuidPrefix: ""accessible-megamenu"",                  /* default css class used to define the megamenu styling */         menuClass: ""accessible-megamenu"",                  /* default css class for a top-level navigation item in the megamenu */         topNavItemClass: ""accessible-megamenu-top-nav-item"",                  /* default css class for a megamenu panel */         panelClass: ""accessible-megamenu-panel"",                  /* default css class for a group of items within a megamenu panel */         panelGroupClass: ""accessible-megamenu-panel-group"",                  /* default css class for the hover state */         hoverClass: ""hover"",                  /* default css class for the focus state */         focusClass: ""focus"",                  /* default css class for the open state */         openClass: ""open""      } You can optionally override the defaults to use the CSS classes you may have already defined for your mega menu. JavaScript Be sure to include jQuery and the jquery-accessibleMegaMenu.js plugin script.     <script src=""//code.jquery.com/jquery-1.10.1.min.js""></script>     <script src=""js/jquery-accessibleMegaMenu.js""></script> The following initializes the first nav element in the document as an accessibleMegaMenu, with optional CSS class overrides.     $(""nav:first"").accessibleMegaMenu({         /* prefix for generated unique id attributes, which are required             to indicate aria-owns, aria-controls and aria-labelledby */         uuidPrefix: ""accessible-megamenu"",                  /* css class used to define the megamenu styling */         menuClass: ""nav-menu"",                  /* css class for a top-level navigation item in the megamenu */         topNavItemClass: ""nav-item"",                  /* css class for a megamenu panel */         panelClass: ""sub-nav"",                  /* css class for a group of items within a megamenu panel */         panelGroupClass: ""sub-nav-group"",                  /* css class for the hover state */         hoverClass: ""hover"",                  /* css class for the focus state */         focusClass: ""focus"",                  /* css class for the open state */         openClass: ""open""     }); CSS AccessibleMegaMenu handles the showing and hiding of panels by adding or removing a CSS class. No inline styles are added to hide elements or create animation between states. Following is some rudimentary CSS for our example which enables the showing/hiding of and the layout of lists panels in the mega menu.     /* mega menu list */     .nav-menu {         display: block;         position: relative;         list-style: none;         margin: 0;         padding: 0;         z-index: 15;     }     /* a top level navigation item in the mega menu */     .nav-item {         list-style: none;         display: inline-block;         padding: 0;         margin: 0;     }     /* first descendant link within a top level navigation item */     .nav-item > a {         position: relative;         display: inline-block;         padding: 0.5em 1em;         margin: 0 0 -1px 0;         border: 1px solid transparent;     }     /* focus/open states of first descendant link within a top level         navigation item */     .nav-item > a:focus,     .nav-item > a.open {         border: 1px solid #dedede;     }     /* open state of first descendant link within a top level         navigation item */     .nav-item > a.open {         background-color: #fff;         border-bottom: none;         z-index: 1;     }     /* sub-navigation panel */     .sub-nav {         position: absolute;         display: none;         top: 2.2em;         margin-top: -1px;         padding: 0.5em 1em;         border: 1px solid #dedede;         background-color: #fff;     }     /* sub-navigation panel open state */     .sub-nav.open {         display: block;     }     /* list of items within sub-navigation panel */     .sub-nav ul {         display: inline-block;         vertical-align: top;         margin: 0 1em 0 0;         padding: 0;     }     /* list item within sub-navigation panel */     .sub-nav li {         display: block;         list-style-type: none;         margin: 0;         padding: 0;     }   Putting it all together, here is the completed example:     <!doctype html>     <html lang=""en"">     <head>     <meta charset=""UTF-8"">     <title>Simple Accessible Mega Menu Example</title>     <style>         /* Rudimentary mega menu CSS for demonstration */             /* mega menu list */         .nav-menu {             display: block;             position: relative;             list-style: none;             margin: 0;             padding: 0;             z-index: 15;         }         /* a top level navigation item in the mega menu */         .nav-item {             list-style: none;             display: inline-block;             padding: 0;             margin: 0;         }         /* first descendant link within a top level navigation item */         .nav-item > a {             position: relative;             display: inline-block;             padding: 0.5em 1em;             margin: 0 0 -1px 0;             border: 1px solid transparent;         }         /* focus/open states of first descendant link within a top level             navigation item */         .nav-item > a:focus,         .nav-item > a.open {             border: 1px solid #dedede;         }         /* open state of first descendant link within a top level             navigation item */         .nav-item > a.open {             background-color: #fff;             border-bottom: none;             z-index: 1;         }         /* sub-navigation panel */         .sub-nav {             position: absolute;             display: none;             top: 2.2em;             margin-top: -1px;             padding: 0.5em 1em;             border: 1px solid #dedede;             background-color: #fff;         }         /* sub-navigation panel open state */         .sub-nav.open {             display: block;         }         /* list of items within sub-navigation panel */         .sub-nav ul {             display: inline-block;             vertical-align: top;             margin: 0 1em 0 0;             padding: 0;         }         /* list item within sub-navigation panel */         .sub-nav li {             display: block;             list-style-type: none;             margin: 0;             padding: 0;         }          </style>     </head>     <body>     <nav>         <ul class=""nav-menu"">             <li class=""nav-item"">                 <a href=""?movie"">Movies</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=0"">Action &amp; Adventure</a></li>                         <li><a href=""?movie&genre=2"">Children &amp; Family</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=7"">Dramas</a></li>                         <li><a href=""?movie&genre=9"">Foreign</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=14"">Musicals</a></li>                         <li><a href=""?movie&genre=15"">Romance</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>             <li class=""nav-item"">                 <a href=""?tv"">TV Shows</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=20"">Classic TV</a></li>                         <li><a href=""?tv&genre=21"">Crime TV</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=27"">Reality TV</a></li>                         <li><a href=""?tv&genre=30"">TV Action</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=33"">TV Dramas</a></li>                         <li><a href=""?tv&genre=34"">TV Horror</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>         </ul>     </nav>          <!-- include jquery -->     <script src=""//code.jquery.com/jquery-1.10.1.min.js""></script>     <!-- include the jquery-accessibleMegaMenu plugin script -->     <script src=""js/jquery-accessibleMegaMenu.js""></script>     <!-- initialize a selector as an accessibleMegaMenu -->     <script>         $(""nav:first"").accessibleMegaMenu({             /* prefix for generated unique id attributes, which are required                 to indicate aria-owns, aria-controls and aria-labelledby */             uuidPrefix: ""accessible-megamenu"",                          /* css class used to define the megamenu styling */             menuClass: ""nav-menu"",                          /* css class for a top-level navigation item in the megamenu */             topNavItemClass: ""nav-item"",                          /* css class for a megamenu panel */             panelClass: ""sub-nav"",                          /* css class for a group of items within a megamenu panel */             panelGroupClass: ""sub-nav-group"",                          /* css class for the hover state */             hoverClass: ""hover"",                          /* css class for the focus state */             focusClass: ""focus"",                          /* css class for the open state */             openClass: ""open""         });     </script>     </body>     </html> About A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. Resources Readme License Apache-2.0 License Releases No releases published Packages 0 No packages published Used by 15 + 7 Contributors 7 Languages HTML 71.8% CSS 26.4% JavaScript 1.8% © 2021 GitHub, Inc. Terms Privacy Security Status Docs Contact GitHub Pricing API Training Blog About You can’t perform that action at this time. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."
629675,20210604,github.com,https://github.com/adobe-accessibility/Accessible-Mega-Menu,text/html,text/html,en,"GitHub - adobe-accessibility/Accessible-Mega-Menu: A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. Skip to content Sign up Why GitHub? Features → Mobile → Actions → Codespaces → Packages → Security → Code review → Project management → Integrations → GitHub Sponsors → Customer stories→ Team Enterprise Explore Explore GitHub → Learn and contribute Topics → Collections → Trending → Learning Lab → Open source guides → Connect with others The ReadME Project → Events → Community forum → GitHub Education → GitHub Stars program → Marketplace Pricing Plans → Compare plans → Contact Sales → Education → In this repository All GitHub ↵ Jump to ↵ No suggested jump to results In this repository All GitHub ↵ Jump to ↵ In this organization All GitHub ↵ Jump to ↵ In this repository All GitHub ↵ Jump to ↵ Sign in Sign up {{ message }} adobe-accessibility / Accessible-Mega-Menu Notifications Star 582 Fork 200 A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. Apache-2.0 License 582 stars 200 forks Star Notifications Code Issues 28 Pull requests 6 Actions Projects 0 Wiki Security Insights More Code Issues Pull requests Actions Projects Wiki Security Insights master Switch branches/tags Branches Tags Could not load branches Nothing to show {{ refName }} default View all branches Could not load tags Nothing to show {{ refName }} default View all tags 2 branches 0 tags Code Clone HTTPS GitHub CLI Use Git or checkout with SVN using the web URL. Work fast with our official CLI. Learn more. Open with GitHub Desktop Download ZIP Launching GitHub Desktop If nothing happens, download GitHub Desktop and try again. Go back Launching GitHub Desktop If nothing happens, download GitHub Desktop and try again. Go back Launching Xcode If nothing happens, download Xcode and try again. Go back Launching Visual Studio Code Your codespace will open once ready. There was a problem preparing your codespace, please try again. Latest commit majornista fix evaluation for ChromeVox object … 5c070bc Dec 7, 2020 fix evaluation for ChromeVox object 5c070bc Git stats 39 commits Files Permalink Failed to load latest commit information. Type Name Latest commit message Commit time css Add openOnMouseover setting, and toggleButtonClass for responsive layout May 11, 2018 js fix evaluation for ChromeVox object Dec 7, 2020 third-party/jquery initial commit Aug 26, 2013 LICENSE initial commit Aug 26, 2013 NOTICE initial commit Aug 26, 2013 README.md initial commit Aug 26, 2013 index.html Updating WCAG 2.0 References to WCAG 2.1 (#67) Dec 4, 2020 package.json Updating repo references Jul 8, 2016 View code Accessible Mega Menu Keyboard Accessibility Screen Reader Accessibility Usage HTML JavaScript CSS README.md Accessible Mega Menu ========================= A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. It is modeled after the mega menu on adobe.com but has been simplified for use by others. An brief explanation of our interaction design choices can be found in a blog post at Mega menu accessibility on adobe.com. Content for the links and text within the mega menu comes from the Web Content Accessibility Guidelines (WCAG) 2.0. Keyboard Accessibility The accessible mega menu supports keyboard interaction modeled after the behavior described in the WAI-ARIA Menu or Menu bar (widget) design pattern, however we also try to respect users' general expectations for the behavior of links in a global navigation. To this end, the accessible mega menu implementation permits tab focus on each of the six top-level menu items. When one of the menu items has focus, pressing the Enter key, Spacebar or Down arrow will open the submenu panel, and pressing the Left or Right arrow key will shift focus to the adjacent menu item. Links within the submenu panels are included in the tab order when the panel is open. They can also be navigated with the arrow keys or by typing the first character in the link name, which speeds up keyboard navigation considerably. Pressing the Escape key closes the submenu and restores focus to the parent menu item. Screen Reader Accessibility The accessible mega menu models its use of WAI-ARIA Roles, States, and Properties after those described in the WAI-ARIA Menu or Menu bar (widget) design pattern with some notable exceptions, so that it behaves better with screen reader user expectations for global navigation. We don't use role=""menu"" for the menu container and role=""menuitem"" for each of the links therein, because if we do, assistive technology will no longer interpret the links as links, but instead, as menu items, and the links in our global navigation will no longer show up when a screen reader user executes a shortcut command to bring up a list of links in the page. We also want to maintain the semantic structure of the submenu panels in our mega menu; our links are organized into lists and separated by headings. Omitting role=""menu"" and role=""menuitem"" for the global navigation seems the safer way to go. Usage HTML The HTML structure for the mega menu is a nav element, or any other container element, containing a list. Each list item contains a link which is followed by a div or any other container element which will serve as the pop up panel. The panel can contain any html content; in the following example, each panel contains three lists of links. You can explicitly define groups within the panel, between which a user can navigate quickly using the left and right arrow keys; in the following example, the CSS class .sub-nav-group identifies a navigable group.     <nav>         <ul class=""nav-menu"">             <li class=""nav-item"">                 <a href=""?movie"">Movies</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=0"">Action &amp; Adventure</a></li>                         <li><a href=""?movie&genre=2"">Children &amp; Family</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=7"">Dramas</a></li>                         <li><a href=""?movie&genre=9"">Foreign</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=14"">Musicals</a></li>                         <li><a href=""?movie&genre=15"">Romance</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>             <li class=""nav-item"">                 <a href=""?tv"">TV Shows</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=20"">Classic TV</a></li>                         <li><a href=""?tv&genre=21"">Crime TV</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=27"">Reality TV</a></li>                         <li><a href=""?tv&genre=30"">TV Action</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=33"">TV Dramas</a></li>                         <li><a href=""?tv&genre=34"">TV Horror</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>         </ul>     </nav> By default, accessibleMegaMenu uses the the following CSS classes to define the top-level navigation items, panels, groups within the panels, and the hover, focus, and open states. It also defines a prefix for unique id strings, which are required to indicate the relationship of a top-level navigation item to the panel it controls.     defaults = {         /* unique ID's are required to indicate aria-owns, aria-controls and aria-labelledby */         uuidPrefix: ""accessible-megamenu"",                  /* default css class used to define the megamenu styling */         menuClass: ""accessible-megamenu"",                  /* default css class for a top-level navigation item in the megamenu */         topNavItemClass: ""accessible-megamenu-top-nav-item"",                  /* default css class for a megamenu panel */         panelClass: ""accessible-megamenu-panel"",                  /* default css class for a group of items within a megamenu panel */         panelGroupClass: ""accessible-megamenu-panel-group"",                  /* default css class for the hover state */         hoverClass: ""hover"",                  /* default css class for the focus state */         focusClass: ""focus"",                  /* default css class for the open state */         openClass: ""open""      } You can optionally override the defaults to use the CSS classes you may have already defined for your mega menu. JavaScript Be sure to include jQuery and the jquery-accessibleMegaMenu.js plugin script.     <script src=""//code.jquery.com/jquery-1.10.1.min.js""></script>     <script src=""js/jquery-accessibleMegaMenu.js""></script> The following initializes the first nav element in the document as an accessibleMegaMenu, with optional CSS class overrides.     $(""nav:first"").accessibleMegaMenu({         /* prefix for generated unique id attributes, which are required             to indicate aria-owns, aria-controls and aria-labelledby */         uuidPrefix: ""accessible-megamenu"",                  /* css class used to define the megamenu styling */         menuClass: ""nav-menu"",                  /* css class for a top-level navigation item in the megamenu */         topNavItemClass: ""nav-item"",                  /* css class for a megamenu panel */         panelClass: ""sub-nav"",                  /* css class for a group of items within a megamenu panel */         panelGroupClass: ""sub-nav-group"",                  /* css class for the hover state */         hoverClass: ""hover"",                  /* css class for the focus state */         focusClass: ""focus"",                  /* css class for the open state */         openClass: ""open""     }); CSS AccessibleMegaMenu handles the showing and hiding of panels by adding or removing a CSS class. No inline styles are added to hide elements or create animation between states. Following is some rudimentary CSS for our example which enables the showing/hiding of and the layout of lists panels in the mega menu.     /* mega menu list */     .nav-menu {         display: block;         position: relative;         list-style: none;         margin: 0;         padding: 0;         z-index: 15;     }     /* a top level navigation item in the mega menu */     .nav-item {         list-style: none;         display: inline-block;         padding: 0;         margin: 0;     }     /* first descendant link within a top level navigation item */     .nav-item > a {         position: relative;         display: inline-block;         padding: 0.5em 1em;         margin: 0 0 -1px 0;         border: 1px solid transparent;     }     /* focus/open states of first descendant link within a top level         navigation item */     .nav-item > a:focus,     .nav-item > a.open {         border: 1px solid #dedede;     }     /* open state of first descendant link within a top level         navigation item */     .nav-item > a.open {         background-color: #fff;         border-bottom: none;         z-index: 1;     }     /* sub-navigation panel */     .sub-nav {         position: absolute;         display: none;         top: 2.2em;         margin-top: -1px;         padding: 0.5em 1em;         border: 1px solid #dedede;         background-color: #fff;     }     /* sub-navigation panel open state */     .sub-nav.open {         display: block;     }     /* list of items within sub-navigation panel */     .sub-nav ul {         display: inline-block;         vertical-align: top;         margin: 0 1em 0 0;         padding: 0;     }     /* list item within sub-navigation panel */     .sub-nav li {         display: block;         list-style-type: none;         margin: 0;         padding: 0;     }   Putting it all together, here is the completed example:     <!doctype html>     <html lang=""en"">     <head>     <meta charset=""UTF-8"">     <title>Simple Accessible Mega Menu Example</title>     <style>         /* Rudimentary mega menu CSS for demonstration */             /* mega menu list */         .nav-menu {             display: block;             position: relative;             list-style: none;             margin: 0;             padding: 0;             z-index: 15;         }         /* a top level navigation item in the mega menu */         .nav-item {             list-style: none;             display: inline-block;             padding: 0;             margin: 0;         }         /* first descendant link within a top level navigation item */         .nav-item > a {             position: relative;             display: inline-block;             padding: 0.5em 1em;             margin: 0 0 -1px 0;             border: 1px solid transparent;         }         /* focus/open states of first descendant link within a top level             navigation item */         .nav-item > a:focus,         .nav-item > a.open {             border: 1px solid #dedede;         }         /* open state of first descendant link within a top level             navigation item */         .nav-item > a.open {             background-color: #fff;             border-bottom: none;             z-index: 1;         }         /* sub-navigation panel */         .sub-nav {             position: absolute;             display: none;             top: 2.2em;             margin-top: -1px;             padding: 0.5em 1em;             border: 1px solid #dedede;             background-color: #fff;         }         /* sub-navigation panel open state */         .sub-nav.open {             display: block;         }         /* list of items within sub-navigation panel */         .sub-nav ul {             display: inline-block;             vertical-align: top;             margin: 0 1em 0 0;             padding: 0;         }         /* list item within sub-navigation panel */         .sub-nav li {             display: block;             list-style-type: none;             margin: 0;             padding: 0;         }          </style>     </head>     <body>     <nav>         <ul class=""nav-menu"">             <li class=""nav-item"">                 <a href=""?movie"">Movies</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=0"">Action &amp; Adventure</a></li>                         <li><a href=""?movie&genre=2"">Children &amp; Family</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=7"">Dramas</a></li>                         <li><a href=""?movie&genre=9"">Foreign</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=14"">Musicals</a></li>                         <li><a href=""?movie&genre=15"">Romance</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>             <li class=""nav-item"">                 <a href=""?tv"">TV Shows</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=20"">Classic TV</a></li>                         <li><a href=""?tv&genre=21"">Crime TV</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=27"">Reality TV</a></li>                         <li><a href=""?tv&genre=30"">TV Action</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=33"">TV Dramas</a></li>                         <li><a href=""?tv&genre=34"">TV Horror</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>         </ul>     </nav>          <!-- include jquery -->     <script src=""//code.jquery.com/jquery-1.10.1.min.js""></script>     <!-- include the jquery-accessibleMegaMenu plugin script -->     <script src=""js/jquery-accessibleMegaMenu.js""></script>     <!-- initialize a selector as an accessibleMegaMenu -->     <script>         $(""nav:first"").accessibleMegaMenu({             /* prefix for generated unique id attributes, which are required                 to indicate aria-owns, aria-controls and aria-labelledby */             uuidPrefix: ""accessible-megamenu"",                          /* css class used to define the megamenu styling */             menuClass: ""nav-menu"",                          /* css class for a top-level navigation item in the megamenu */             topNavItemClass: ""nav-item"",                          /* css class for a megamenu panel */             panelClass: ""sub-nav"",                          /* css class for a group of items within a megamenu panel */             panelGroupClass: ""sub-nav-group"",                          /* css class for the hover state */             hoverClass: ""hover"",                          /* css class for the focus state */             focusClass: ""focus"",                          /* css class for the open state */             openClass: ""open""         });     </script>     </body>     </html> About A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. Resources Readme License Apache-2.0 License Releases No releases published Packages 0 No packages published Contributors 7 Languages HTML 71.8% CSS 26.4% JavaScript 1.8% © 2021 GitHub, Inc. Terms Privacy Security Status Docs Contact GitHub Pricing API Training Blog About You can’t perform that action at this time. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."
634512,20210604,github.com,https://github.com/crypto-browserify/crypto-browserify,text/html,text/html,en,"GitHub - crypto-browserify/crypto-browserify: partial implementation of node's `crypto` for the browser Skip to content Sign up Why GitHub? Features → Mobile → Actions → Codespaces → Packages → Security → Code review → Project management → Integrations → GitHub Sponsors → Customer stories→ Team Enterprise Explore Explore GitHub → Learn and contribute Topics → Collections → Trending → Learning Lab → Open source guides → Connect with others The ReadME Project → Events → Community forum → GitHub Education → GitHub Stars program → Marketplace Pricing Plans → Compare plans → Contact Sales → Education → In this repository All GitHub ↵ Jump to ↵ No suggested jump to results In this repository All GitHub ↵ Jump to ↵ In this organization All GitHub ↵ Jump to ↵ In this repository All GitHub ↵ Jump to ↵ Sign in Sign up {{ message }} crypto-browserify / crypto-browserify Notifications Star 478 Fork 157 partial implementation of node's `crypto` for the browser MIT License 478 stars 157 forks Star Notifications Code Issues 19 Pull requests 6 Actions Projects 0 Wiki Security Insights More Code Issues Pull requests Actions Projects Wiki Security Insights master Switch branches/tags Branches Tags Could not load branches Nothing to show {{ refName }} default View all branches Could not load tags Nothing to show {{ refName }} default View all tags 6 branches 31 tags Code Clone HTTPS GitHub CLI Use Git or checkout with SVN using the web URL. Work fast with our official CLI. Learn more. Open with GitHub Desktop Download ZIP Launching GitHub Desktop If nothing happens, download GitHub Desktop and try again. Go back Launching GitHub Desktop If nothing happens, download GitHub Desktop and try again. Go back Launching Xcode If nothing happens, download Xcode and try again. Go back Launching Visual Studio Code Your codespace will open once ready. There was a problem preparing your codespace, please try again. Latest commit calvinmetcalf fix debian issue (maybe) … 460a13b Feb 9, 2018 fix debian issue (maybe) 460a13b Git stats 362 commits Files Permalink Failed to load latest commit information. Type Name Latest commit message Commit time example add standard 5.0.0 Aug 13, 2015 test fix debian issue (maybe) Feb 9, 2018 .gitignore Add .gitignore Aug 5, 2013 .travis.yml saucelabs aparently only goes back to 7 Oct 19, 2017 .zuul.yml add zuul and browser tests Oct 3, 2015 LICENSE Add MIT license Sep 20, 2013 README.md add privateEncrypt/publicDecrypt to README Dec 14, 2015 index.js add rndom fill Oct 18, 2017 package.json 3.12.0 Nov 3, 2017 View code crypto-browserify todo contributions License README.md crypto-browserify A port of node's crypto module to the browser. The goal of this module is to reimplement node's crypto module, in pure javascript so that it can run in the browser. Here is the subset that is currently implemented: createHash (sha1, sha224, sha256, sha384, sha512, md5, rmd160) createHmac (sha1, sha224, sha256, sha384, sha512, md5, rmd160) pbkdf2 pbkdf2Sync randomBytes pseudoRandomBytes createCipher (aes) createDecipher (aes) createDiffieHellman createSign (rsa, ecdsa) createVerify (rsa, ecdsa) createECDH (secp256k1) publicEncrypt/privateDecrypt (rsa) privateEncrypt/publicDecrypt (rsa) todo these features from node's crypto are still unimplemented. createCredentials contributions If you are interested in writing a feature, please implement as a new module, which will be incorporated into crypto-browserify as a dependency. All deps must be compatible with node's crypto (generate example inputs and outputs with node, and save base64 strings inside JSON, so that tests can run in the browser. see sha.js Crypto is extra serious so please do not hesitate to review the code, and post comments if you do. License MIT About partial implementation of node's `crypto` for the browser Resources Readme License MIT License Releases 31 tags Packages 0 No packages published Used by 6m + 6,002,510 Contributors 24 + 13 contributors Languages JavaScript 99.1% HTML 0.9% © 2021 GitHub, Inc. Terms Privacy Security Status Docs Contact GitHub Pricing API Training Blog About You can’t perform that action at this time. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."
634513,20210604,github.com,https://github.com/indutny/elliptic/issues,text/html,text/html,en,"Issues · indutny/elliptic · GitHub Skip to content Sign up Why GitHub? Features → Mobile → Actions → Codespaces → Packages → Security → Code review → Project management → Integrations → GitHub Sponsors → Customer stories→ Team Enterprise Explore Explore GitHub → Learn and contribute Topics → Collections → Trending → Learning Lab → Open source guides → Connect with others The ReadME Project → Events → Community forum → GitHub Education → GitHub Stars program → Marketplace Pricing Plans → Compare plans → Contact Sales → Education → In this repository All GitHub ↵ Jump to ↵ No suggested jump to results In this repository All GitHub ↵ Jump to ↵ In this user All GitHub ↵ Jump to ↵ In this repository All GitHub ↵ Jump to ↵ Sign in Sign up {{ message }} indutny / elliptic Notifications Star 1.2k Fork 303 Code Issues 75 Pull requests 19 Actions Projects 0 Wiki Security Insights More Code Issues Pull requests Actions Projects Wiki Security Insights Labels 8 Milestones 0 Labels 8 Milestones 0 New issue Have a question about this project? Sign up for a free GitHub account to open an issue and contact its maintainers and the community. Pick a username Email Address Password Sign up for GitHub By clicking “Sign up for GitHub”, you agree to our terms of service and privacy statement. We’ll occasionally send you account related emails. Already on GitHub? Sign in to your account 75 Open 97 Closed 75 Open 97 Closed Author Filter by author author: Filter by this user Label Filter by label Use alt + click/return to exclude labels. Projects Filter by project Milestones Filter by milestone Assignee Filter by who’s assigned Sort Sort by Newest Oldest Most commented Least commented Recently updated Least recently updated Most reactions 👍 👎 😄 🎉 😕 ❤️ 🚀 👀 deriving private key from public key #257 opened Apr 27, 2021 by madhav-madhusoodanan How to use keys with crypto.subtle #255 opened Apr 1, 2021 by DominicTobias-b1 EDDSA.decodeInt should fails or reduce by dafault? #254 opened Mar 18, 2021 by mahnunchik Sad state #251 opened Mar 11, 2021 by berkus 1 EDDSA.decodePoint should fails on ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff #250 opened Mar 3, 2021 by mahnunchik 15 Add endian argument to bn.js toString method #249 opened Mar 2, 2021 by mahnunchik EDDSA decodePoint doesn't support Buffer as argument #248 opened Mar 2, 2021 by mahnunchik How to decipher the encrypted message? #245 opened Jan 27, 2021 by istabraq-iot Montgomery Curve25519 is not openssl compatible #243 opened Dec 28, 2020 by jc-lab 4 Curves p384 and p521 produce incorrect results #239 opened Oct 18, 2020 by guidovranken 1 i want to use this library with c# #238 opened Oct 10, 2020 by medozeus Elliptic.js support following curve types: #236 opened Oct 5, 2020 by medozeus The Elliptic package 6.5.2 for Node.js allows ECDSA signature malleability via variations in encoding, leading '\0' bytes, or integer overflows. #235 opened Oct 1, 2020 by bsomeshwer EdDSA: What is a reason to manipulate with bytes? #233 opened Aug 27, 2020 by mahnunchik why use derive method get ECDH key，i got different length #230 opened Jul 10, 2020 by cqupt-yifanwu 4 Why do I generate my local test path in chunk-vendors when packing with NPM #229 opened Jun 22, 2020 by Anthonychen1994 1 TypedArray support ? #228 opened Jun 20, 2020 by dojyorin Is there way to generate PKCS#8 private key from Pem format ECC Private key #225 opened Apr 28, 2020 by sureshreddygovindu Signature validation in python. Prefix configuration? #224 opened Apr 25, 2020 by amrbz is it possible to do assymetric encryption? #223 opened Apr 7, 2020 by maroodb 1 Missing infinity point encoding #218 opened Feb 21, 2020 by catenacyber 1 ECDH P-521 public key point not on curve according to java (clojure) #216 opened Feb 11, 2020 by slhabity 2 how save and load private / publick key in pem or other format #215 opened Jan 27, 2020 by fturiot 2 How to pair client to server BTCPay NodeJS client? #214 opened Jan 21, 2020 by savshit 1 How to pair client to server BTCPay NodeJS client? #213 opened Jan 21, 2020 by savshit Previous 1 2 3 Next Previous Next ProTip! Type g i on any issue or pull request to go back to the issue listing page. © 2021 GitHub, Inc. Terms Privacy Security Status Docs Contact GitHub Pricing API Training Blog About You can’t perform that action at this time. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."
634514,20210604,github.com,https://github.com/indutny/elliptic,text/html,text/html,en,"GitHub - indutny/elliptic: Fast Elliptic Curve Cryptography in plain javascript Skip to content Sign up Why GitHub? Features → Mobile → Actions → Codespaces → Packages → Security → Code review → Project management → Integrations → GitHub Sponsors → Customer stories→ Team Enterprise Explore Explore GitHub → Learn and contribute Topics → Collections → Trending → Learning Lab → Open source guides → Connect with others The ReadME Project → Events → Community forum → GitHub Education → GitHub Stars program → Marketplace Pricing Plans → Compare plans → Contact Sales → Education → In this repository All GitHub ↵ Jump to ↵ No suggested jump to results In this repository All GitHub ↵ Jump to ↵ In this user All GitHub ↵ Jump to ↵ In this repository All GitHub ↵ Jump to ↵ Sign in Sign up {{ message }} indutny / elliptic Notifications Star 1.2k Fork 303 Fast Elliptic Curve Cryptography in plain javascript 1.2k stars 303 forks Star Notifications Code Issues 75 Pull requests 19 Actions Projects 0 Wiki Security Insights More Code Issues Pull requests Actions Projects Wiki Security Insights master Switch branches/tags Branches Tags Could not load branches Nothing to show {{ refName }} default View all branches Could not load tags Nothing to show {{ refName }} default View all tags 2 branches 85 tags Code Clone HTTPS GitHub CLI Use Git or checkout with SVN using the web URL. Work fast with our official CLI. Learn more. Open with GitHub Desktop Download ZIP Launching GitHub Desktop If nothing happens, download GitHub Desktop and try again. Go back Launching GitHub Desktop If nothing happens, download GitHub Desktop and try again. Go back Launching Xcode If nothing happens, download Xcode and try again. Go back Launching Visual Studio Code Your codespace will open once ready. There was a problem preparing your codespace, please try again. Latest commit indutny 6.5.4 … 43ac7f2 Feb 2, 2021 6.5.4 43ac7f2 Git stats 331 commits Files Permalink Failed to load latest commit information. Type Name Latest commit message Commit time benchmarks package: remove Makefile and dist Jan 29, 2016 dist 6.5.4 Feb 2, 2021 lib ec: validate that a point before deriving keys Feb 2, 2021 test ec: validate that a point before deriving keys Feb 2, 2021 .codeclimate.yml test: improvements with Saucelabs/Codeclimate Mar 31, 2016 .eslintignore lib: relint using eslint Aug 2, 2020 .eslintrc.js lib: relint using eslint Aug 2, 2020 .gitignore test: improvements with Saucelabs/Codeclimate Mar 31, 2016 .npmignore npmignore: dist May 20, 2016 .travis.yml travis: really move on Jun 26, 2019 Gruntfile.js grunt: fix standalone build May 25, 2016 README.md readme: update example Mar 23, 2017 package-lock.json 6.5.4 Feb 2, 2021 package.json 6.5.4 Feb 2, 2021 View code Elliptic Incentive Benchmarks API ECDSA EdDSA ECDH Supported curves Implementation details Related projects LICENSE README.md Elliptic Fast elliptic-curve cryptography in a plain javascript implementation. NOTE: Please take a look at http://safecurves.cr.yp.to/ before choosing a curve for your cryptography operations. Incentive ECC is much slower than regular RSA cryptography, the JS implementations are even more slower. Benchmarks $ node benchmarks/index.js Benchmarking: sign elliptic#sign x 262 ops/sec ±0.51% (177 runs sampled) eccjs#sign x 55.91 ops/sec ±0.90% (144 runs sampled) ------------------------ Fastest is elliptic#sign ======================== Benchmarking: verify elliptic#verify x 113 ops/sec ±0.50% (166 runs sampled) eccjs#verify x 48.56 ops/sec ±0.36% (125 runs sampled) ------------------------ Fastest is elliptic#verify ======================== Benchmarking: gen elliptic#gen x 294 ops/sec ±0.43% (176 runs sampled) eccjs#gen x 62.25 ops/sec ±0.63% (129 runs sampled) ------------------------ Fastest is elliptic#gen ======================== Benchmarking: ecdh elliptic#ecdh x 136 ops/sec ±0.85% (156 runs sampled) ------------------------ Fastest is elliptic#ecdh ======================== API ECDSA var EC = require('elliptic').ec; // Create and initialize EC context // (better do it once and reuse it) var ec = new EC('secp256k1'); // Generate keys var key = ec.genKeyPair(); // Sign the message's hash (input must be an array, or a hex-string) var msgHash = [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ]; var signature = key.sign(msgHash); // Export DER encoded signature in Array var derSign = signature.toDER(); // Verify signature console.log(key.verify(msgHash, derSign)); // CHECK WITH NO PRIVATE KEY var pubPoint = key.getPublic(); var x = pubPoint.getX(); var y = pubPoint.getY(); // Public Key MUST be either: // 1) '04' + hex string of x + hex string of y; or // 2) object with two hex string properties (x and y); or // 3) object with two buffer properties (x and y) var pub = pubPoint.encode('hex');                                 // case 1 var pub = { x: x.toString('hex'), y: y.toString('hex') };         // case 2 var pub = { x: x.toBuffer(), y: y.toBuffer() };                   // case 3 var pub = { x: x.toArrayLike(Buffer), y: y.toArrayLike(Buffer) }; // case 3 // Import public key var key = ec.keyFromPublic(pub, 'hex'); // Signature MUST be either: // 1) DER-encoded signature as hex-string; or // 2) DER-encoded signature as buffer; or // 3) object with two hex-string properties (r and s); or // 4) object with two buffer properties (r and s) var signature = '3046022100...'; // case 1 var signature = new Buffer('...'); // case 2 var signature = { r: 'b1fc...', s: '9c42...' }; // case 3 // Verify signature console.log(key.verify(msgHash, signature)); EdDSA var EdDSA = require('elliptic').eddsa; // Create and initialize EdDSA context // (better do it once and reuse it) var ec = new EdDSA('ed25519'); // Create key pair from secret var key = ec.keyFromSecret('693e3c...'); // hex string, array or Buffer // Sign the message's hash (input must be an array, or a hex-string) var msgHash = [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ]; var signature = key.sign(msgHash).toHex(); // Verify signature console.log(key.verify(msgHash, signature)); // CHECK WITH NO PRIVATE KEY // Import public key var pub = '0a1af638...'; var key = ec.keyFromPublic(pub, 'hex'); // Verify signature var signature = '70bed1...'; console.log(key.verify(msgHash, signature)); ECDH var EC = require('elliptic').ec; var ec = new EC('curve25519'); // Generate keys var key1 = ec.genKeyPair(); var key2 = ec.genKeyPair(); var shared1 = key1.derive(key2.getPublic()); var shared2 = key2.derive(key1.getPublic()); console.log('Both shared secrets are BN instances'); console.log(shared1.toString(16)); console.log(shared2.toString(16)); three and more members: var EC = require('elliptic').ec; var ec = new EC('curve25519'); var A = ec.genKeyPair(); var B = ec.genKeyPair(); var C = ec.genKeyPair(); var AB = A.getPublic().mul(B.getPrivate()) var BC = B.getPublic().mul(C.getPrivate()) var CA = C.getPublic().mul(A.getPrivate()) var ABC = AB.mul(C.getPrivate()) var BCA = BC.mul(A.getPrivate()) var CAB = CA.mul(B.getPrivate()) console.log(ABC.getX().toString(16)) console.log(BCA.getX().toString(16)) console.log(CAB.getX().toString(16)) NOTE: .derive() returns a BN instance. Supported curves Elliptic.js support following curve types: Short Weierstrass Montgomery Edwards Twisted Edwards Following curve 'presets' are embedded into the library: secp256k1 p192 p224 p256 p384 p521 curve25519 ed25519 NOTE: That curve25519 could not be used for ECDSA, use ed25519 instead. Implementation details ECDSA is using deterministic k value generation as per RFC6979. Most of the curve operations are performed on non-affine coordinates (either projective or extended), various windowing techniques are used for different cases. All operations are performed in reduction context using bn.js, hashing is provided by hash.js Related projects eccrypto: isomorphic implementation of ECDSA, ECDH and ECIES for both browserify and node (uses elliptic for browser and secp256k1-node for node) LICENSE This software is licensed under the MIT License. Copyright Fedor Indutny, 2014. Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the ""Software""), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. About Fast Elliptic Curve Cryptography in plain javascript Resources Readme Releases 85 tags Packages 0 No packages published Used by 5.9m + 5,921,210 Contributors 25 + 14 contributors Languages JavaScript 99.3% HTML 0.7% © 2021 GitHub, Inc. Terms Privacy Security Status Docs Contact GitHub Pricing API Training Blog About You can’t perform that action at this time. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."
640313,20210611,github.com,https://github.com/adobe-accessibility/Accessible-Mega-Menu,text/html,text/html,en,"GitHub - adobe-accessibility/Accessible-Mega-Menu: A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. Skip to content Sign up Why GitHub? Features → Mobile → Actions → Codespaces → Packages → Security → Code review → Project management → Integrations → GitHub Sponsors → Customer stories→ Team Enterprise Explore Explore GitHub → Learn and contribute Topics → Collections → Trending → Learning Lab → Open source guides → Connect with others The ReadME Project → Events → Community forum → GitHub Education → GitHub Stars program → Marketplace Pricing Plans → Compare plans → Contact Sales → Education → In this repository All GitHub ↵ Jump to ↵ No suggested jump to results In this repository All GitHub ↵ Jump to ↵ In this organization All GitHub ↵ Jump to ↵ In this repository All GitHub ↵ Jump to ↵ Sign in Sign up {{ message }} adobe-accessibility / Accessible-Mega-Menu Notifications Star 583 Fork 199 A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. Apache-2.0 License 583 stars 199 forks Star Notifications Code Issues 29 Pull requests 6 Actions Projects 0 Wiki Security Insights More Code Issues Pull requests Actions Projects Wiki Security Insights master Switch branches/tags Branches Tags Could not load branches Nothing to show {{ refName }} default View all branches Could not load tags Nothing to show {{ refName }} default View all tags 2 branches 0 tags Code Clone HTTPS GitHub CLI Use Git or checkout with SVN using the web URL. Work fast with our official CLI. Learn more. Open with GitHub Desktop Download ZIP Launching GitHub Desktop If nothing happens, download GitHub Desktop and try again. Go back Launching GitHub Desktop If nothing happens, download GitHub Desktop and try again. Go back Launching Xcode If nothing happens, download Xcode and try again. Go back Launching Visual Studio Code Your codespace will open once ready. There was a problem preparing your codespace, please try again. Latest commit majornista fix evaluation for ChromeVox object … 5c070bc Dec 7, 2020 fix evaluation for ChromeVox object 5c070bc Git stats 39 commits Files Permalink Failed to load latest commit information. Type Name Latest commit message Commit time css Add openOnMouseover setting, and toggleButtonClass for responsive layout May 11, 2018 js fix evaluation for ChromeVox object Dec 7, 2020 third-party/jquery initial commit Aug 26, 2013 LICENSE initial commit Aug 26, 2013 NOTICE initial commit Aug 26, 2013 README.md initial commit Aug 26, 2013 index.html Updating WCAG 2.0 References to WCAG 2.1 (#67) Dec 4, 2020 package.json Updating repo references Jul 8, 2016 View code Accessible Mega Menu Keyboard Accessibility Screen Reader Accessibility Usage HTML JavaScript CSS README.md Accessible Mega Menu ========================= A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. It is modeled after the mega menu on adobe.com but has been simplified for use by others. An brief explanation of our interaction design choices can be found in a blog post at Mega menu accessibility on adobe.com. Content for the links and text within the mega menu comes from the Web Content Accessibility Guidelines (WCAG) 2.0. Keyboard Accessibility The accessible mega menu supports keyboard interaction modeled after the behavior described in the WAI-ARIA Menu or Menu bar (widget) design pattern, however we also try to respect users' general expectations for the behavior of links in a global navigation. To this end, the accessible mega menu implementation permits tab focus on each of the six top-level menu items. When one of the menu items has focus, pressing the Enter key, Spacebar or Down arrow will open the submenu panel, and pressing the Left or Right arrow key will shift focus to the adjacent menu item. Links within the submenu panels are included in the tab order when the panel is open. They can also be navigated with the arrow keys or by typing the first character in the link name, which speeds up keyboard navigation considerably. Pressing the Escape key closes the submenu and restores focus to the parent menu item. Screen Reader Accessibility The accessible mega menu models its use of WAI-ARIA Roles, States, and Properties after those described in the WAI-ARIA Menu or Menu bar (widget) design pattern with some notable exceptions, so that it behaves better with screen reader user expectations for global navigation. We don't use role=""menu"" for the menu container and role=""menuitem"" for each of the links therein, because if we do, assistive technology will no longer interpret the links as links, but instead, as menu items, and the links in our global navigation will no longer show up when a screen reader user executes a shortcut command to bring up a list of links in the page. We also want to maintain the semantic structure of the submenu panels in our mega menu; our links are organized into lists and separated by headings. Omitting role=""menu"" and role=""menuitem"" for the global navigation seems the safer way to go. Usage HTML The HTML structure for the mega menu is a nav element, or any other container element, containing a list. Each list item contains a link which is followed by a div or any other container element which will serve as the pop up panel. The panel can contain any html content; in the following example, each panel contains three lists of links. You can explicitly define groups within the panel, between which a user can navigate quickly using the left and right arrow keys; in the following example, the CSS class .sub-nav-group identifies a navigable group.     <nav>         <ul class=""nav-menu"">             <li class=""nav-item"">                 <a href=""?movie"">Movies</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=0"">Action &amp; Adventure</a></li>                         <li><a href=""?movie&genre=2"">Children &amp; Family</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=7"">Dramas</a></li>                         <li><a href=""?movie&genre=9"">Foreign</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=14"">Musicals</a></li>                         <li><a href=""?movie&genre=15"">Romance</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>             <li class=""nav-item"">                 <a href=""?tv"">TV Shows</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=20"">Classic TV</a></li>                         <li><a href=""?tv&genre=21"">Crime TV</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=27"">Reality TV</a></li>                         <li><a href=""?tv&genre=30"">TV Action</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=33"">TV Dramas</a></li>                         <li><a href=""?tv&genre=34"">TV Horror</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>         </ul>     </nav> By default, accessibleMegaMenu uses the the following CSS classes to define the top-level navigation items, panels, groups within the panels, and the hover, focus, and open states. It also defines a prefix for unique id strings, which are required to indicate the relationship of a top-level navigation item to the panel it controls.     defaults = {         /* unique ID's are required to indicate aria-owns, aria-controls and aria-labelledby */         uuidPrefix: ""accessible-megamenu"",                  /* default css class used to define the megamenu styling */         menuClass: ""accessible-megamenu"",                  /* default css class for a top-level navigation item in the megamenu */         topNavItemClass: ""accessible-megamenu-top-nav-item"",                  /* default css class for a megamenu panel */         panelClass: ""accessible-megamenu-panel"",                  /* default css class for a group of items within a megamenu panel */         panelGroupClass: ""accessible-megamenu-panel-group"",                  /* default css class for the hover state */         hoverClass: ""hover"",                  /* default css class for the focus state */         focusClass: ""focus"",                  /* default css class for the open state */         openClass: ""open""      } You can optionally override the defaults to use the CSS classes you may have already defined for your mega menu. JavaScript Be sure to include jQuery and the jquery-accessibleMegaMenu.js plugin script.     <script src=""//code.jquery.com/jquery-1.10.1.min.js""></script>     <script src=""js/jquery-accessibleMegaMenu.js""></script> The following initializes the first nav element in the document as an accessibleMegaMenu, with optional CSS class overrides.     $(""nav:first"").accessibleMegaMenu({         /* prefix for generated unique id attributes, which are required             to indicate aria-owns, aria-controls and aria-labelledby */         uuidPrefix: ""accessible-megamenu"",                  /* css class used to define the megamenu styling */         menuClass: ""nav-menu"",                  /* css class for a top-level navigation item in the megamenu */         topNavItemClass: ""nav-item"",                  /* css class for a megamenu panel */         panelClass: ""sub-nav"",                  /* css class for a group of items within a megamenu panel */         panelGroupClass: ""sub-nav-group"",                  /* css class for the hover state */         hoverClass: ""hover"",                  /* css class for the focus state */         focusClass: ""focus"",                  /* css class for the open state */         openClass: ""open""     }); CSS AccessibleMegaMenu handles the showing and hiding of panels by adding or removing a CSS class. No inline styles are added to hide elements or create animation between states. Following is some rudimentary CSS for our example which enables the showing/hiding of and the layout of lists panels in the mega menu.     /* mega menu list */     .nav-menu {         display: block;         position: relative;         list-style: none;         margin: 0;         padding: 0;         z-index: 15;     }     /* a top level navigation item in the mega menu */     .nav-item {         list-style: none;         display: inline-block;         padding: 0;         margin: 0;     }     /* first descendant link within a top level navigation item */     .nav-item > a {         position: relative;         display: inline-block;         padding: 0.5em 1em;         margin: 0 0 -1px 0;         border: 1px solid transparent;     }     /* focus/open states of first descendant link within a top level         navigation item */     .nav-item > a:focus,     .nav-item > a.open {         border: 1px solid #dedede;     }     /* open state of first descendant link within a top level         navigation item */     .nav-item > a.open {         background-color: #fff;         border-bottom: none;         z-index: 1;     }     /* sub-navigation panel */     .sub-nav {         position: absolute;         display: none;         top: 2.2em;         margin-top: -1px;         padding: 0.5em 1em;         border: 1px solid #dedede;         background-color: #fff;     }     /* sub-navigation panel open state */     .sub-nav.open {         display: block;     }     /* list of items within sub-navigation panel */     .sub-nav ul {         display: inline-block;         vertical-align: top;         margin: 0 1em 0 0;         padding: 0;     }     /* list item within sub-navigation panel */     .sub-nav li {         display: block;         list-style-type: none;         margin: 0;         padding: 0;     }   Putting it all together, here is the completed example:     <!doctype html>     <html lang=""en"">     <head>     <meta charset=""UTF-8"">     <title>Simple Accessible Mega Menu Example</title>     <style>         /* Rudimentary mega menu CSS for demonstration */             /* mega menu list */         .nav-menu {             display: block;             position: relative;             list-style: none;             margin: 0;             padding: 0;             z-index: 15;         }         /* a top level navigation item in the mega menu */         .nav-item {             list-style: none;             display: inline-block;             padding: 0;             margin: 0;         }         /* first descendant link within a top level navigation item */         .nav-item > a {             position: relative;             display: inline-block;             padding: 0.5em 1em;             margin: 0 0 -1px 0;             border: 1px solid transparent;         }         /* focus/open states of first descendant link within a top level             navigation item */         .nav-item > a:focus,         .nav-item > a.open {             border: 1px solid #dedede;         }         /* open state of first descendant link within a top level             navigation item */         .nav-item > a.open {             background-color: #fff;             border-bottom: none;             z-index: 1;         }         /* sub-navigation panel */         .sub-nav {             position: absolute;             display: none;             top: 2.2em;             margin-top: -1px;             padding: 0.5em 1em;             border: 1px solid #dedede;             background-color: #fff;         }         /* sub-navigation panel open state */         .sub-nav.open {             display: block;         }         /* list of items within sub-navigation panel */         .sub-nav ul {             display: inline-block;             vertical-align: top;             margin: 0 1em 0 0;             padding: 0;         }         /* list item within sub-navigation panel */         .sub-nav li {             display: block;             list-style-type: none;             margin: 0;             padding: 0;         }          </style>     </head>     <body>     <nav>         <ul class=""nav-menu"">             <li class=""nav-item"">                 <a href=""?movie"">Movies</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=0"">Action &amp; Adventure</a></li>                         <li><a href=""?movie&genre=2"">Children &amp; Family</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=7"">Dramas</a></li>                         <li><a href=""?movie&genre=9"">Foreign</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=14"">Musicals</a></li>                         <li><a href=""?movie&genre=15"">Romance</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>             <li class=""nav-item"">                 <a href=""?tv"">TV Shows</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=20"">Classic TV</a></li>                         <li><a href=""?tv&genre=21"">Crime TV</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=27"">Reality TV</a></li>                         <li><a href=""?tv&genre=30"">TV Action</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=33"">TV Dramas</a></li>                         <li><a href=""?tv&genre=34"">TV Horror</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>         </ul>     </nav>          <!-- include jquery -->     <script src=""//code.jquery.com/jquery-1.10.1.min.js""></script>     <!-- include the jquery-accessibleMegaMenu plugin script -->     <script src=""js/jquery-accessibleMegaMenu.js""></script>     <!-- initialize a selector as an accessibleMegaMenu -->     <script>         $(""nav:first"").accessibleMegaMenu({             /* prefix for generated unique id attributes, which are required                 to indicate aria-owns, aria-controls and aria-labelledby */             uuidPrefix: ""accessible-megamenu"",                          /* css class used to define the megamenu styling */             menuClass: ""nav-menu"",                          /* css class for a top-level navigation item in the megamenu */             topNavItemClass: ""nav-item"",                          /* css class for a megamenu panel */             panelClass: ""sub-nav"",                          /* css class for a group of items within a megamenu panel */             panelGroupClass: ""sub-nav-group"",                          /* css class for the hover state */             hoverClass: ""hover"",                          /* css class for the focus state */             focusClass: ""focus"",                          /* css class for the open state */             openClass: ""open""         });     </script>     </body>     </html> About A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. Resources Readme License Apache-2.0 License Releases No releases published Packages 0 No packages published Contributors 7 Languages HTML 71.8% CSS 26.4% JavaScript 1.8% © 2021 GitHub, Inc. Terms Privacy Security Status Docs Contact GitHub Pricing API Training Blog About You can’t perform that action at this time. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."
647858,20210611,github.com,https://github.com/crypto-browserify/crypto-browserify,text/html,text/html,en,"GitHub - crypto-browserify/crypto-browserify: partial implementation of node's `crypto` for the browser Skip to content Sign up Why GitHub? Features → Mobile → Actions → Codespaces → Packages → Security → Code review → Project management → Integrations → GitHub Sponsors → Customer stories→ Team Enterprise Explore Explore GitHub → Learn and contribute Topics → Collections → Trending → Learning Lab → Open source guides → Connect with others The ReadME Project → Events → Community forum → GitHub Education → GitHub Stars program → Marketplace Pricing Plans → Compare plans → Contact Sales → Education → In this repository All GitHub ↵ Jump to ↵ No suggested jump to results In this repository All GitHub ↵ Jump to ↵ In this organization All GitHub ↵ Jump to ↵ In this repository All GitHub ↵ Jump to ↵ Sign in Sign up {{ message }} crypto-browserify / crypto-browserify Notifications Star 478 Fork 157 partial implementation of node's `crypto` for the browser MIT License 478 stars 157 forks Star Notifications Code Issues 19 Pull requests 6 Actions Projects 0 Wiki Security Insights More Code Issues Pull requests Actions Projects Wiki Security Insights master Switch branches/tags Branches Tags Could not load branches Nothing to show {{ refName }} default View all branches Could not load tags Nothing to show {{ refName }} default View all tags 6 branches 31 tags Code Clone HTTPS GitHub CLI Use Git or checkout with SVN using the web URL. Work fast with our official CLI. Learn more. Open with GitHub Desktop Download ZIP Launching GitHub Desktop If nothing happens, download GitHub Desktop and try again. Go back Launching GitHub Desktop If nothing happens, download GitHub Desktop and try again. Go back Launching Xcode If nothing happens, download Xcode and try again. Go back Launching Visual Studio Code Your codespace will open once ready. There was a problem preparing your codespace, please try again. Latest commit calvinmetcalf fix debian issue (maybe) … 460a13b Feb 9, 2018 fix debian issue (maybe) 460a13b Git stats 362 commits Files Permalink Failed to load latest commit information. Type Name Latest commit message Commit time example add standard 5.0.0 Aug 13, 2015 test fix debian issue (maybe) Feb 9, 2018 .gitignore Add .gitignore Aug 5, 2013 .travis.yml saucelabs aparently only goes back to 7 Oct 19, 2017 .zuul.yml add zuul and browser tests Oct 3, 2015 LICENSE Add MIT license Sep 20, 2013 README.md add privateEncrypt/publicDecrypt to README Dec 14, 2015 index.js add rndom fill Oct 18, 2017 package.json 3.12.0 Nov 3, 2017 View code crypto-browserify todo contributions License README.md crypto-browserify A port of node's crypto module to the browser. The goal of this module is to reimplement node's crypto module, in pure javascript so that it can run in the browser. Here is the subset that is currently implemented: createHash (sha1, sha224, sha256, sha384, sha512, md5, rmd160) createHmac (sha1, sha224, sha256, sha384, sha512, md5, rmd160) pbkdf2 pbkdf2Sync randomBytes pseudoRandomBytes createCipher (aes) createDecipher (aes) createDiffieHellman createSign (rsa, ecdsa) createVerify (rsa, ecdsa) createECDH (secp256k1) publicEncrypt/privateDecrypt (rsa) privateEncrypt/publicDecrypt (rsa) todo these features from node's crypto are still unimplemented. createCredentials contributions If you are interested in writing a feature, please implement as a new module, which will be incorporated into crypto-browserify as a dependency. All deps must be compatible with node's crypto (generate example inputs and outputs with node, and save base64 strings inside JSON, so that tests can run in the browser. see sha.js Crypto is extra serious so please do not hesitate to review the code, and post comments if you do. License MIT About partial implementation of node's `crypto` for the browser Resources Readme License MIT License Releases 31 tags Packages 0 No packages published Used by 6m + 6,027,679 Contributors 24 + 13 contributors Languages JavaScript 99.1% HTML 0.9% © 2021 GitHub, Inc. Terms Privacy Security Status Docs Contact GitHub Pricing API Training Blog About You can’t perform that action at this time. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."
647861,20210611,github.com,https://github.com/indutny/elliptic/issues,text/html,text/html,en,"Issues · indutny/elliptic · GitHub Skip to content Sign up Why GitHub? Features → Mobile → Actions → Codespaces → Packages → Security → Code review → Project management → Integrations → GitHub Sponsors → Customer stories→ Team Enterprise Explore Explore GitHub → Learn and contribute Topics → Collections → Trending → Learning Lab → Open source guides → Connect with others The ReadME Project → Events → Community forum → GitHub Education → GitHub Stars program → Marketplace Pricing Plans → Compare plans → Contact Sales → Education → In this repository All GitHub ↵ Jump to ↵ No suggested jump to results In this repository All GitHub ↵ Jump to ↵ In this user All GitHub ↵ Jump to ↵ In this repository All GitHub ↵ Jump to ↵ Sign in Sign up {{ message }} indutny / elliptic Notifications Star 1.3k Fork 305 Code Issues 75 Pull requests 20 Actions Projects 0 Wiki Security Insights More Code Issues Pull requests Actions Projects Wiki Security Insights Labels 8 Milestones 0 Labels 8 Milestones 0 New issue Have a question about this project? Sign up for a free GitHub account to open an issue and contact its maintainers and the community. Pick a username Email Address Password Sign up for GitHub By clicking “Sign up for GitHub”, you agree to our terms of service and privacy statement. We’ll occasionally send you account related emails. Already on GitHub? Sign in to your account 75 Open 97 Closed 75 Open 97 Closed Author Filter by author author: Filter by this user Label Filter by label Use alt + click/return to exclude labels. Projects Filter by project Milestones Filter by milestone Assignee Filter by who’s assigned Sort Sort by Newest Oldest Most commented Least commented Recently updated Least recently updated Most reactions 👍 👎 😄 🎉 😕 ❤️ 🚀 👀 deriving private key from public key #257 opened Apr 27, 2021 by madhav-madhusoodanan How to use keys with crypto.subtle #255 opened Apr 1, 2021 by DominicTobias-b1 EDDSA.decodeInt should fails or reduce by dafault? #254 opened Mar 18, 2021 by mahnunchik Sad state #251 opened Mar 11, 2021 by berkus 1 EDDSA.decodePoint should fails on ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff #250 opened Mar 3, 2021 by mahnunchik 15 Add endian argument to bn.js toString method #249 opened Mar 2, 2021 by mahnunchik EDDSA decodePoint doesn't support Buffer as argument #248 opened Mar 2, 2021 by mahnunchik How to decipher the encrypted message? #245 opened Jan 27, 2021 by istabraq-iot Montgomery Curve25519 is not openssl compatible #243 opened Dec 28, 2020 by jc-lab 4 Curves p384 and p521 produce incorrect results #239 opened Oct 18, 2020 by guidovranken 1 i want to use this library with c# #238 opened Oct 10, 2020 by medozeus Elliptic.js support following curve types: #236 opened Oct 5, 2020 by medozeus The Elliptic package 6.5.2 for Node.js allows ECDSA signature malleability via variations in encoding, leading '\0' bytes, or integer overflows. #235 opened Oct 1, 2020 by bsomeshwer EdDSA: What is a reason to manipulate with bytes? #233 opened Aug 27, 2020 by mahnunchik why use derive method get ECDH key，i got different length #230 opened Jul 10, 2020 by cqupt-yifanwu 4 Why do I generate my local test path in chunk-vendors when packing with NPM #229 opened Jun 22, 2020 by Anthonychen1994 1 TypedArray support ? #228 opened Jun 20, 2020 by dojyorin Is there way to generate PKCS#8 private key from Pem format ECC Private key #225 opened Apr 28, 2020 by sureshreddygovindu Signature validation in python. Prefix configuration? #224 opened Apr 25, 2020 by amrbz is it possible to do assymetric encryption? #223 opened Apr 7, 2020 by maroodb 1 Missing infinity point encoding #218 opened Feb 21, 2020 by catenacyber 1 ECDH P-521 public key point not on curve according to java (clojure) #216 opened Feb 11, 2020 by slhabity 2 how save and load private / publick key in pem or other format #215 opened Jan 27, 2020 by fturiot 2 How to pair client to server BTCPay NodeJS client? #214 opened Jan 21, 2020 by savshit 1 How to pair client to server BTCPay NodeJS client? #213 opened Jan 21, 2020 by savshit Previous 1 2 3 Next Previous Next ProTip! Add no:assignee to see everything that’s not assigned. © 2021 GitHub, Inc. Terms Privacy Security Status Docs Contact GitHub Pricing API Training Blog About You can’t perform that action at this time. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."
647862,20210611,github.com,https://github.com/indutny/elliptic,text/html,text/html,en,"GitHub - indutny/elliptic: Fast Elliptic Curve Cryptography in plain javascript Skip to content Sign up Why GitHub? Features → Mobile → Actions → Codespaces → Packages → Security → Code review → Project management → Integrations → GitHub Sponsors → Customer stories→ Team Enterprise Explore Explore GitHub → Learn and contribute Topics → Collections → Trending → Learning Lab → Open source guides → Connect with others The ReadME Project → Events → Community forum → GitHub Education → GitHub Stars program → Marketplace Pricing Plans → Compare plans → Contact Sales → Education → In this repository All GitHub ↵ Jump to ↵ No suggested jump to results In this repository All GitHub ↵ Jump to ↵ In this user All GitHub ↵ Jump to ↵ In this repository All GitHub ↵ Jump to ↵ Sign in Sign up {{ message }} indutny / elliptic Notifications Star 1.3k Fork 305 Fast Elliptic Curve Cryptography in plain javascript 1.3k stars 305 forks Star Notifications Code Issues 75 Pull requests 20 Actions Projects 0 Wiki Security Insights More Code Issues Pull requests Actions Projects Wiki Security Insights master Switch branches/tags Branches Tags Could not load branches Nothing to show {{ refName }} default View all branches Could not load tags Nothing to show {{ refName }} default View all tags 2 branches 85 tags Code Clone HTTPS GitHub CLI Use Git or checkout with SVN using the web URL. Work fast with our official CLI. Learn more. Open with GitHub Desktop Download ZIP Launching GitHub Desktop If nothing happens, download GitHub Desktop and try again. Go back Launching GitHub Desktop If nothing happens, download GitHub Desktop and try again. Go back Launching Xcode If nothing happens, download Xcode and try again. Go back Launching Visual Studio Code Your codespace will open once ready. There was a problem preparing your codespace, please try again. Latest commit indutny 6.5.4 … 43ac7f2 Feb 2, 2021 6.5.4 43ac7f2 Git stats 331 commits Files Permalink Failed to load latest commit information. Type Name Latest commit message Commit time benchmarks package: remove Makefile and dist Jan 29, 2016 dist 6.5.4 Feb 2, 2021 lib ec: validate that a point before deriving keys Feb 2, 2021 test ec: validate that a point before deriving keys Feb 2, 2021 .codeclimate.yml test: improvements with Saucelabs/Codeclimate Mar 31, 2016 .eslintignore lib: relint using eslint Aug 2, 2020 .eslintrc.js lib: relint using eslint Aug 2, 2020 .gitignore test: improvements with Saucelabs/Codeclimate Mar 31, 2016 .npmignore npmignore: dist May 20, 2016 .travis.yml travis: really move on Jun 26, 2019 Gruntfile.js grunt: fix standalone build May 25, 2016 README.md readme: update example Mar 23, 2017 package-lock.json 6.5.4 Feb 2, 2021 package.json 6.5.4 Feb 2, 2021 View code Elliptic Incentive Benchmarks API ECDSA EdDSA ECDH Supported curves Implementation details Related projects LICENSE README.md Elliptic Fast elliptic-curve cryptography in a plain javascript implementation. NOTE: Please take a look at http://safecurves.cr.yp.to/ before choosing a curve for your cryptography operations. Incentive ECC is much slower than regular RSA cryptography, the JS implementations are even more slower. Benchmarks $ node benchmarks/index.js Benchmarking: sign elliptic#sign x 262 ops/sec ±0.51% (177 runs sampled) eccjs#sign x 55.91 ops/sec ±0.90% (144 runs sampled) ------------------------ Fastest is elliptic#sign ======================== Benchmarking: verify elliptic#verify x 113 ops/sec ±0.50% (166 runs sampled) eccjs#verify x 48.56 ops/sec ±0.36% (125 runs sampled) ------------------------ Fastest is elliptic#verify ======================== Benchmarking: gen elliptic#gen x 294 ops/sec ±0.43% (176 runs sampled) eccjs#gen x 62.25 ops/sec ±0.63% (129 runs sampled) ------------------------ Fastest is elliptic#gen ======================== Benchmarking: ecdh elliptic#ecdh x 136 ops/sec ±0.85% (156 runs sampled) ------------------------ Fastest is elliptic#ecdh ======================== API ECDSA var EC = require('elliptic').ec; // Create and initialize EC context // (better do it once and reuse it) var ec = new EC('secp256k1'); // Generate keys var key = ec.genKeyPair(); // Sign the message's hash (input must be an array, or a hex-string) var msgHash = [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ]; var signature = key.sign(msgHash); // Export DER encoded signature in Array var derSign = signature.toDER(); // Verify signature console.log(key.verify(msgHash, derSign)); // CHECK WITH NO PRIVATE KEY var pubPoint = key.getPublic(); var x = pubPoint.getX(); var y = pubPoint.getY(); // Public Key MUST be either: // 1) '04' + hex string of x + hex string of y; or // 2) object with two hex string properties (x and y); or // 3) object with two buffer properties (x and y) var pub = pubPoint.encode('hex');                                 // case 1 var pub = { x: x.toString('hex'), y: y.toString('hex') };         // case 2 var pub = { x: x.toBuffer(), y: y.toBuffer() };                   // case 3 var pub = { x: x.toArrayLike(Buffer), y: y.toArrayLike(Buffer) }; // case 3 // Import public key var key = ec.keyFromPublic(pub, 'hex'); // Signature MUST be either: // 1) DER-encoded signature as hex-string; or // 2) DER-encoded signature as buffer; or // 3) object with two hex-string properties (r and s); or // 4) object with two buffer properties (r and s) var signature = '3046022100...'; // case 1 var signature = new Buffer('...'); // case 2 var signature = { r: 'b1fc...', s: '9c42...' }; // case 3 // Verify signature console.log(key.verify(msgHash, signature)); EdDSA var EdDSA = require('elliptic').eddsa; // Create and initialize EdDSA context // (better do it once and reuse it) var ec = new EdDSA('ed25519'); // Create key pair from secret var key = ec.keyFromSecret('693e3c...'); // hex string, array or Buffer // Sign the message's hash (input must be an array, or a hex-string) var msgHash = [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ]; var signature = key.sign(msgHash).toHex(); // Verify signature console.log(key.verify(msgHash, signature)); // CHECK WITH NO PRIVATE KEY // Import public key var pub = '0a1af638...'; var key = ec.keyFromPublic(pub, 'hex'); // Verify signature var signature = '70bed1...'; console.log(key.verify(msgHash, signature)); ECDH var EC = require('elliptic').ec; var ec = new EC('curve25519'); // Generate keys var key1 = ec.genKeyPair(); var key2 = ec.genKeyPair(); var shared1 = key1.derive(key2.getPublic()); var shared2 = key2.derive(key1.getPublic()); console.log('Both shared secrets are BN instances'); console.log(shared1.toString(16)); console.log(shared2.toString(16)); three and more members: var EC = require('elliptic').ec; var ec = new EC('curve25519'); var A = ec.genKeyPair(); var B = ec.genKeyPair(); var C = ec.genKeyPair(); var AB = A.getPublic().mul(B.getPrivate()) var BC = B.getPublic().mul(C.getPrivate()) var CA = C.getPublic().mul(A.getPrivate()) var ABC = AB.mul(C.getPrivate()) var BCA = BC.mul(A.getPrivate()) var CAB = CA.mul(B.getPrivate()) console.log(ABC.getX().toString(16)) console.log(BCA.getX().toString(16)) console.log(CAB.getX().toString(16)) NOTE: .derive() returns a BN instance. Supported curves Elliptic.js support following curve types: Short Weierstrass Montgomery Edwards Twisted Edwards Following curve 'presets' are embedded into the library: secp256k1 p192 p224 p256 p384 p521 curve25519 ed25519 NOTE: That curve25519 could not be used for ECDSA, use ed25519 instead. Implementation details ECDSA is using deterministic k value generation as per RFC6979. Most of the curve operations are performed on non-affine coordinates (either projective or extended), various windowing techniques are used for different cases. All operations are performed in reduction context using bn.js, hashing is provided by hash.js Related projects eccrypto: isomorphic implementation of ECDSA, ECDH and ECIES for both browserify and node (uses elliptic for browser and secp256k1-node for node) LICENSE This software is licensed under the MIT License. Copyright Fedor Indutny, 2014. Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the ""Software""), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. About Fast Elliptic Curve Cryptography in plain javascript Resources Readme Releases 85 tags Packages 0 No packages published Used by 6m + 5,952,206 Contributors 25 + 14 contributors Languages JavaScript 99.3% HTML 0.7% © 2021 GitHub, Inc. Terms Privacy Security Status Docs Contact GitHub Pricing API Training Blog About You can’t perform that action at this time. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."
650899,20210618,github.com,https://github.com/adobe-accessibility/Accessible-Mega-Menu,text/html,text/html,en,"GitHub - adobe-accessibility/Accessible-Mega-Menu: A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. Skip to content Sign up Why GitHub? Features → Mobile → Actions → Codespaces → Packages → Security → Code review → Project management → Integrations → GitHub Sponsors → Customer stories→ Team Enterprise Explore Explore GitHub → Learn and contribute Topics → Collections → Trending → Learning Lab → Open source guides → Connect with others The ReadME Project → Events → Community forum → GitHub Education → GitHub Stars program → Marketplace Pricing Plans → Compare plans → Contact Sales → Education → In this repository All GitHub ↵ Jump to ↵ No suggested jump to results In this repository All GitHub ↵ Jump to ↵ In this organization All GitHub ↵ Jump to ↵ In this repository All GitHub ↵ Jump to ↵ Sign in Sign up {{ message }} adobe-accessibility / Accessible-Mega-Menu Notifications Star 584 Fork 200 A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. Apache-2.0 License 584 stars 200 forks Star Notifications Code Issues 29 Pull requests 6 Actions Projects 0 Wiki Security Insights More Code Issues Pull requests Actions Projects Wiki Security Insights master Switch branches/tags Branches Tags Could not load branches Nothing to show {{ refName }} default View all branches Could not load tags Nothing to show {{ refName }} default View all tags 2 branches 0 tags Code Clone HTTPS GitHub CLI Use Git or checkout with SVN using the web URL. Work fast with our official CLI. Learn more. Open with GitHub Desktop Download ZIP Launching GitHub Desktop If nothing happens, download GitHub Desktop and try again. Go back Launching GitHub Desktop If nothing happens, download GitHub Desktop and try again. Go back Launching Xcode If nothing happens, download Xcode and try again. Go back Launching Visual Studio Code Your codespace will open once ready. There was a problem preparing your codespace, please try again. Latest commit majornista fix evaluation for ChromeVox object … 5c070bc Dec 7, 2020 fix evaluation for ChromeVox object 5c070bc Git stats 39 commits Files Permalink Failed to load latest commit information. Type Name Latest commit message Commit time css Add openOnMouseover setting, and toggleButtonClass for responsive layout May 11, 2018 js fix evaluation for ChromeVox object Dec 7, 2020 third-party/jquery initial commit Aug 26, 2013 LICENSE initial commit Aug 26, 2013 NOTICE initial commit Aug 26, 2013 README.md initial commit Aug 26, 2013 index.html Updating WCAG 2.0 References to WCAG 2.1 (#67) Dec 4, 2020 package.json Updating repo references Jul 8, 2016 View code Accessible Mega Menu Keyboard Accessibility Screen Reader Accessibility Usage HTML JavaScript CSS README.md Accessible Mega Menu ========================= A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. It is modeled after the mega menu on adobe.com but has been simplified for use by others. An brief explanation of our interaction design choices can be found in a blog post at Mega menu accessibility on adobe.com. Content for the links and text within the mega menu comes from the Web Content Accessibility Guidelines (WCAG) 2.0. Keyboard Accessibility The accessible mega menu supports keyboard interaction modeled after the behavior described in the WAI-ARIA Menu or Menu bar (widget) design pattern, however we also try to respect users' general expectations for the behavior of links in a global navigation. To this end, the accessible mega menu implementation permits tab focus on each of the six top-level menu items. When one of the menu items has focus, pressing the Enter key, Spacebar or Down arrow will open the submenu panel, and pressing the Left or Right arrow key will shift focus to the adjacent menu item. Links within the submenu panels are included in the tab order when the panel is open. They can also be navigated with the arrow keys or by typing the first character in the link name, which speeds up keyboard navigation considerably. Pressing the Escape key closes the submenu and restores focus to the parent menu item. Screen Reader Accessibility The accessible mega menu models its use of WAI-ARIA Roles, States, and Properties after those described in the WAI-ARIA Menu or Menu bar (widget) design pattern with some notable exceptions, so that it behaves better with screen reader user expectations for global navigation. We don't use role=""menu"" for the menu container and role=""menuitem"" for each of the links therein, because if we do, assistive technology will no longer interpret the links as links, but instead, as menu items, and the links in our global navigation will no longer show up when a screen reader user executes a shortcut command to bring up a list of links in the page. We also want to maintain the semantic structure of the submenu panels in our mega menu; our links are organized into lists and separated by headings. Omitting role=""menu"" and role=""menuitem"" for the global navigation seems the safer way to go. Usage HTML The HTML structure for the mega menu is a nav element, or any other container element, containing a list. Each list item contains a link which is followed by a div or any other container element which will serve as the pop up panel. The panel can contain any html content; in the following example, each panel contains three lists of links. You can explicitly define groups within the panel, between which a user can navigate quickly using the left and right arrow keys; in the following example, the CSS class .sub-nav-group identifies a navigable group.     <nav>         <ul class=""nav-menu"">             <li class=""nav-item"">                 <a href=""?movie"">Movies</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=0"">Action &amp; Adventure</a></li>                         <li><a href=""?movie&genre=2"">Children &amp; Family</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=7"">Dramas</a></li>                         <li><a href=""?movie&genre=9"">Foreign</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=14"">Musicals</a></li>                         <li><a href=""?movie&genre=15"">Romance</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>             <li class=""nav-item"">                 <a href=""?tv"">TV Shows</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=20"">Classic TV</a></li>                         <li><a href=""?tv&genre=21"">Crime TV</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=27"">Reality TV</a></li>                         <li><a href=""?tv&genre=30"">TV Action</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=33"">TV Dramas</a></li>                         <li><a href=""?tv&genre=34"">TV Horror</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>         </ul>     </nav> By default, accessibleMegaMenu uses the the following CSS classes to define the top-level navigation items, panels, groups within the panels, and the hover, focus, and open states. It also defines a prefix for unique id strings, which are required to indicate the relationship of a top-level navigation item to the panel it controls.     defaults = {         /* unique ID's are required to indicate aria-owns, aria-controls and aria-labelledby */         uuidPrefix: ""accessible-megamenu"",                  /* default css class used to define the megamenu styling */         menuClass: ""accessible-megamenu"",                  /* default css class for a top-level navigation item in the megamenu */         topNavItemClass: ""accessible-megamenu-top-nav-item"",                  /* default css class for a megamenu panel */         panelClass: ""accessible-megamenu-panel"",                  /* default css class for a group of items within a megamenu panel */         panelGroupClass: ""accessible-megamenu-panel-group"",                  /* default css class for the hover state */         hoverClass: ""hover"",                  /* default css class for the focus state */         focusClass: ""focus"",                  /* default css class for the open state */         openClass: ""open""      } You can optionally override the defaults to use the CSS classes you may have already defined for your mega menu. JavaScript Be sure to include jQuery and the jquery-accessibleMegaMenu.js plugin script.     <script src=""//code.jquery.com/jquery-1.10.1.min.js""></script>     <script src=""js/jquery-accessibleMegaMenu.js""></script> The following initializes the first nav element in the document as an accessibleMegaMenu, with optional CSS class overrides.     $(""nav:first"").accessibleMegaMenu({         /* prefix for generated unique id attributes, which are required             to indicate aria-owns, aria-controls and aria-labelledby */         uuidPrefix: ""accessible-megamenu"",                  /* css class used to define the megamenu styling */         menuClass: ""nav-menu"",                  /* css class for a top-level navigation item in the megamenu */         topNavItemClass: ""nav-item"",                  /* css class for a megamenu panel */         panelClass: ""sub-nav"",                  /* css class for a group of items within a megamenu panel */         panelGroupClass: ""sub-nav-group"",                  /* css class for the hover state */         hoverClass: ""hover"",                  /* css class for the focus state */         focusClass: ""focus"",                  /* css class for the open state */         openClass: ""open""     }); CSS AccessibleMegaMenu handles the showing and hiding of panels by adding or removing a CSS class. No inline styles are added to hide elements or create animation between states. Following is some rudimentary CSS for our example which enables the showing/hiding of and the layout of lists panels in the mega menu.     /* mega menu list */     .nav-menu {         display: block;         position: relative;         list-style: none;         margin: 0;         padding: 0;         z-index: 15;     }     /* a top level navigation item in the mega menu */     .nav-item {         list-style: none;         display: inline-block;         padding: 0;         margin: 0;     }     /* first descendant link within a top level navigation item */     .nav-item > a {         position: relative;         display: inline-block;         padding: 0.5em 1em;         margin: 0 0 -1px 0;         border: 1px solid transparent;     }     /* focus/open states of first descendant link within a top level         navigation item */     .nav-item > a:focus,     .nav-item > a.open {         border: 1px solid #dedede;     }     /* open state of first descendant link within a top level         navigation item */     .nav-item > a.open {         background-color: #fff;         border-bottom: none;         z-index: 1;     }     /* sub-navigation panel */     .sub-nav {         position: absolute;         display: none;         top: 2.2em;         margin-top: -1px;         padding: 0.5em 1em;         border: 1px solid #dedede;         background-color: #fff;     }     /* sub-navigation panel open state */     .sub-nav.open {         display: block;     }     /* list of items within sub-navigation panel */     .sub-nav ul {         display: inline-block;         vertical-align: top;         margin: 0 1em 0 0;         padding: 0;     }     /* list item within sub-navigation panel */     .sub-nav li {         display: block;         list-style-type: none;         margin: 0;         padding: 0;     }   Putting it all together, here is the completed example:     <!doctype html>     <html lang=""en"">     <head>     <meta charset=""UTF-8"">     <title>Simple Accessible Mega Menu Example</title>     <style>         /* Rudimentary mega menu CSS for demonstration */             /* mega menu list */         .nav-menu {             display: block;             position: relative;             list-style: none;             margin: 0;             padding: 0;             z-index: 15;         }         /* a top level navigation item in the mega menu */         .nav-item {             list-style: none;             display: inline-block;             padding: 0;             margin: 0;         }         /* first descendant link within a top level navigation item */         .nav-item > a {             position: relative;             display: inline-block;             padding: 0.5em 1em;             margin: 0 0 -1px 0;             border: 1px solid transparent;         }         /* focus/open states of first descendant link within a top level             navigation item */         .nav-item > a:focus,         .nav-item > a.open {             border: 1px solid #dedede;         }         /* open state of first descendant link within a top level             navigation item */         .nav-item > a.open {             background-color: #fff;             border-bottom: none;             z-index: 1;         }         /* sub-navigation panel */         .sub-nav {             position: absolute;             display: none;             top: 2.2em;             margin-top: -1px;             padding: 0.5em 1em;             border: 1px solid #dedede;             background-color: #fff;         }         /* sub-navigation panel open state */         .sub-nav.open {             display: block;         }         /* list of items within sub-navigation panel */         .sub-nav ul {             display: inline-block;             vertical-align: top;             margin: 0 1em 0 0;             padding: 0;         }         /* list item within sub-navigation panel */         .sub-nav li {             display: block;             list-style-type: none;             margin: 0;             padding: 0;         }          </style>     </head>     <body>     <nav>         <ul class=""nav-menu"">             <li class=""nav-item"">                 <a href=""?movie"">Movies</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=0"">Action &amp; Adventure</a></li>                         <li><a href=""?movie&genre=2"">Children &amp; Family</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=7"">Dramas</a></li>                         <li><a href=""?movie&genre=9"">Foreign</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=14"">Musicals</a></li>                         <li><a href=""?movie&genre=15"">Romance</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>             <li class=""nav-item"">                 <a href=""?tv"">TV Shows</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=20"">Classic TV</a></li>                         <li><a href=""?tv&genre=21"">Crime TV</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=27"">Reality TV</a></li>                         <li><a href=""?tv&genre=30"">TV Action</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=33"">TV Dramas</a></li>                         <li><a href=""?tv&genre=34"">TV Horror</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>         </ul>     </nav>          <!-- include jquery -->     <script src=""//code.jquery.com/jquery-1.10.1.min.js""></script>     <!-- include the jquery-accessibleMegaMenu plugin script -->     <script src=""js/jquery-accessibleMegaMenu.js""></script>     <!-- initialize a selector as an accessibleMegaMenu -->     <script>         $(""nav:first"").accessibleMegaMenu({             /* prefix for generated unique id attributes, which are required                 to indicate aria-owns, aria-controls and aria-labelledby */             uuidPrefix: ""accessible-megamenu"",                          /* css class used to define the megamenu styling */             menuClass: ""nav-menu"",                          /* css class for a top-level navigation item in the megamenu */             topNavItemClass: ""nav-item"",                          /* css class for a megamenu panel */             panelClass: ""sub-nav"",                          /* css class for a group of items within a megamenu panel */             panelGroupClass: ""sub-nav-group"",                          /* css class for the hover state */             hoverClass: ""hover"",                          /* css class for the focus state */             focusClass: ""focus"",                          /* css class for the open state */             openClass: ""open""         });     </script>     </body>     </html> About A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. Resources Readme License Apache-2.0 License Releases No releases published Packages 0 No packages published Used by 16 + 8 Contributors 7 Languages HTML 71.8% CSS 26.4% JavaScript 1.8% © 2021 GitHub, Inc. Terms Privacy Security Status Docs Contact GitHub Pricing API Training Blog About You can’t perform that action at this time. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."
660054,20210618,github.com,https://github.com/crypto-browserify/crypto-browserify,text/html,text/html,en,"GitHub - crypto-browserify/crypto-browserify: partial implementation of node's `crypto` for the browser Skip to content Sign up Why GitHub? Features → Mobile → Actions → Codespaces → Packages → Security → Code review → Project management → Integrations → GitHub Sponsors → Customer stories→ Team Enterprise Explore Explore GitHub → Learn and contribute Topics → Collections → Trending → Learning Lab → Open source guides → Connect with others The ReadME Project → Events → Community forum → GitHub Education → GitHub Stars program → Marketplace Pricing Plans → Compare plans → Contact Sales → Education → In this repository All GitHub ↵ Jump to ↵ No suggested jump to results In this repository All GitHub ↵ Jump to ↵ In this organization All GitHub ↵ Jump to ↵ In this repository All GitHub ↵ Jump to ↵ Sign in Sign up {{ message }} crypto-browserify / crypto-browserify Notifications Star 478 Fork 157 partial implementation of node's `crypto` for the browser MIT License 478 stars 157 forks Star Notifications Code Issues 19 Pull requests 6 Actions Projects 0 Wiki Security Insights More Code Issues Pull requests Actions Projects Wiki Security Insights master Switch branches/tags Branches Tags Could not load branches Nothing to show {{ refName }} default View all branches Could not load tags Nothing to show {{ refName }} default View all tags 6 branches 31 tags Code Clone HTTPS GitHub CLI Use Git or checkout with SVN using the web URL. Work fast with our official CLI. Learn more. Open with GitHub Desktop Download ZIP Launching GitHub Desktop If nothing happens, download GitHub Desktop and try again. Go back Launching GitHub Desktop If nothing happens, download GitHub Desktop and try again. Go back Launching Xcode If nothing happens, download Xcode and try again. Go back Launching Visual Studio Code Your codespace will open once ready. There was a problem preparing your codespace, please try again. Latest commit calvinmetcalf fix debian issue (maybe) … 460a13b Feb 9, 2018 fix debian issue (maybe) 460a13b Git stats 362 commits Files Permalink Failed to load latest commit information. Type Name Latest commit message Commit time example test .gitignore .travis.yml .zuul.yml LICENSE README.md index.js package.json View code crypto-browserify todo contributions License README.md crypto-browserify A port of node's crypto module to the browser. The goal of this module is to reimplement node's crypto module, in pure javascript so that it can run in the browser. Here is the subset that is currently implemented: createHash (sha1, sha224, sha256, sha384, sha512, md5, rmd160) createHmac (sha1, sha224, sha256, sha384, sha512, md5, rmd160) pbkdf2 pbkdf2Sync randomBytes pseudoRandomBytes createCipher (aes) createDecipher (aes) createDiffieHellman createSign (rsa, ecdsa) createVerify (rsa, ecdsa) createECDH (secp256k1) publicEncrypt/privateDecrypt (rsa) privateEncrypt/publicDecrypt (rsa) todo these features from node's crypto are still unimplemented. createCredentials contributions If you are interested in writing a feature, please implement as a new module, which will be incorporated into crypto-browserify as a dependency. All deps must be compatible with node's crypto (generate example inputs and outputs with node, and save base64 strings inside JSON, so that tests can run in the browser. see sha.js Crypto is extra serious so please do not hesitate to review the code, and post comments if you do. License MIT About partial implementation of node's `crypto` for the browser Resources Readme License MIT License Releases 31 tags Packages 0 No packages published Used by 6.1m + 6,055,599 Contributors 24 + 13 contributors Languages JavaScript 99.1% HTML 0.9% © 2021 GitHub, Inc. Terms Privacy Security Status Docs Contact GitHub Pricing API Training Blog About You can’t perform that action at this time. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."
660055,20210618,github.com,https://github.com/indutny/elliptic/issues,text/html,text/html,en,"Issues · indutny/elliptic · GitHub Skip to content Sign up Why GitHub? Features → Mobile → Actions → Codespaces → Packages → Security → Code review → Project management → Integrations → GitHub Sponsors → Customer stories→ Team Enterprise Explore Explore GitHub → Learn and contribute Topics → Collections → Trending → Learning Lab → Open source guides → Connect with others The ReadME Project → Events → Community forum → GitHub Education → GitHub Stars program → Marketplace Pricing Plans → Compare plans → Contact Sales → Education → In this repository All GitHub ↵ Jump to ↵ No suggested jump to results In this repository All GitHub ↵ Jump to ↵ In this user All GitHub ↵ Jump to ↵ In this repository All GitHub ↵ Jump to ↵ Sign in Sign up {{ message }} indutny / elliptic Notifications Star 1.3k Fork 304 Code Issues 76 Pull requests 20 Actions Projects 0 Wiki Security Insights More Code Issues Pull requests Actions Projects Wiki Security Insights Labels 8 Milestones 0 Labels 8 Milestones 0 New issue Have a question about this project? Sign up for a free GitHub account to open an issue and contact its maintainers and the community. Sign up for GitHub By clicking “Sign up for GitHub”, you agree to our terms of service and privacy statement. We’ll occasionally send you account related emails. Already on GitHub? Sign in to your account 76 Open 97 Closed 76 Open 97 Closed Author Filter by author author: Filter by this user Label Filter by label Use alt + click/return to exclude labels. Projects Filter by project Milestones Filter by milestone Assignee Filter by who’s assigned Sort Sort by Newest Oldest Most commented Least commented Recently updated Least recently updated Most reactions 👍 👎 😄 🎉 😕 ❤️ 🚀 👀 Point multiplication gives different results based on order of operattions #260 opened Jun 16, 2021 by kot-begemot 3 deriving private key from public key #257 opened Apr 27, 2021 by madhav-madhusoodanan How to use keys with crypto.subtle #255 opened Apr 1, 2021 by DominicTobias-b1 EDDSA.decodeInt should fails or reduce by dafault? #254 opened Mar 18, 2021 by mahnunchik Sad state #251 opened Mar 11, 2021 by berkus 1 EDDSA.decodePoint should fails on ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff #250 opened Mar 3, 2021 by mahnunchik 15 Add endian argument to bn.js toString method #249 opened Mar 2, 2021 by mahnunchik EDDSA decodePoint doesn't support Buffer as argument #248 opened Mar 2, 2021 by mahnunchik How to decipher the encrypted message? #245 opened Jan 27, 2021 by istabraq-iot Montgomery Curve25519 is not openssl compatible #243 opened Dec 28, 2020 by jc-lab 4 Curves p384 and p521 produce incorrect results #239 opened Oct 18, 2020 by guidovranken 1 i want to use this library with c# #238 opened Oct 10, 2020 by medozeus Elliptic.js support following curve types: #236 opened Oct 5, 2020 by medozeus The Elliptic package 6.5.2 for Node.js allows ECDSA signature malleability via variations in encoding, leading '\0' bytes, or integer overflows. #235 opened Oct 1, 2020 by bsomeshwer EdDSA: What is a reason to manipulate with bytes? #233 opened Aug 27, 2020 by mahnunchik why use derive method get ECDH key，i got different length #230 opened Jul 10, 2020 by cqupt-yifanwu 4 Why do I generate my local test path in chunk-vendors when packing with NPM #229 opened Jun 22, 2020 by Anthonychen1994 1 TypedArray support ? #228 opened Jun 20, 2020 by dojyorin Is there way to generate PKCS#8 private key from Pem format ECC Private key #225 opened Apr 28, 2020 by sureshreddygovindu Signature validation in python. Prefix configuration? #224 opened Apr 25, 2020 by amrbz is it possible to do assymetric encryption? #223 opened Apr 7, 2020 by maroodb 1 Missing infinity point encoding #218 opened Feb 21, 2020 by catenacyber 1 ECDH P-521 public key point not on curve according to java (clojure) #216 opened Feb 11, 2020 by slhabity 2 how save and load private / publick key in pem or other format #215 opened Jan 27, 2020 by fturiot 2 How to pair client to server BTCPay NodeJS client? #214 opened Jan 21, 2020 by savshit 1 Previous 1 2 3 4 Next Previous Next ProTip! What’s not been updated in a month: updated:<2021-05-18. © 2021 GitHub, Inc. Terms Privacy Security Status Docs Contact GitHub Pricing API Training Blog About You can’t perform that action at this time. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."
660058,20210618,github.com,https://github.com/indutny/elliptic,text/html,text/html,en,"GitHub - indutny/elliptic: Fast Elliptic Curve Cryptography in plain javascript Skip to content Sign up Why GitHub? Features → Mobile → Actions → Codespaces → Packages → Security → Code review → Project management → Integrations → GitHub Sponsors → Customer stories→ Team Enterprise Explore Explore GitHub → Learn and contribute Topics → Collections → Trending → Learning Lab → Open source guides → Connect with others The ReadME Project → Events → Community forum → GitHub Education → GitHub Stars program → Marketplace Pricing Plans → Compare plans → Contact Sales → Education → In this repository All GitHub ↵ Jump to ↵ No suggested jump to results In this repository All GitHub ↵ Jump to ↵ In this user All GitHub ↵ Jump to ↵ In this repository All GitHub ↵ Jump to ↵ Sign in Sign up {{ message }} indutny / elliptic Notifications Star 1.3k Fork 304 Fast Elliptic Curve Cryptography in plain javascript 1.3k stars 304 forks Star Notifications Code Issues 76 Pull requests 20 Actions Projects 0 Wiki Security Insights More Code Issues Pull requests Actions Projects Wiki Security Insights master Switch branches/tags Branches Tags Could not load branches Nothing to show {{ refName }} default View all branches Could not load tags Nothing to show {{ refName }} default View all tags 2 branches 85 tags Code Clone HTTPS GitHub CLI Use Git or checkout with SVN using the web URL. Work fast with our official CLI. Learn more. Open with GitHub Desktop Download ZIP Launching GitHub Desktop If nothing happens, download GitHub Desktop and try again. Go back Launching GitHub Desktop If nothing happens, download GitHub Desktop and try again. Go back Launching Xcode If nothing happens, download Xcode and try again. Go back Launching Visual Studio Code Your codespace will open once ready. There was a problem preparing your codespace, please try again. Latest commit indutny 6.5.4 … 43ac7f2 Feb 2, 2021 6.5.4 43ac7f2 Git stats 331 commits Files Permalink Failed to load latest commit information. Type Name Latest commit message Commit time benchmarks package: remove Makefile and dist Jan 29, 2016 dist 6.5.4 Feb 2, 2021 lib ec: validate that a point before deriving keys Feb 2, 2021 test ec: validate that a point before deriving keys Feb 2, 2021 .codeclimate.yml test: improvements with Saucelabs/Codeclimate Mar 31, 2016 .eslintignore lib: relint using eslint Aug 2, 2020 .eslintrc.js lib: relint using eslint Aug 2, 2020 .gitignore test: improvements with Saucelabs/Codeclimate Mar 31, 2016 .npmignore npmignore: dist May 20, 2016 .travis.yml travis: really move on Jun 26, 2019 Gruntfile.js grunt: fix standalone build May 25, 2016 README.md readme: update example Mar 23, 2017 package-lock.json 6.5.4 Feb 2, 2021 package.json 6.5.4 Feb 2, 2021 View code Elliptic Incentive Benchmarks API ECDSA EdDSA ECDH Supported curves Implementation details Related projects LICENSE README.md Elliptic Fast elliptic-curve cryptography in a plain javascript implementation. NOTE: Please take a look at http://safecurves.cr.yp.to/ before choosing a curve for your cryptography operations. Incentive ECC is much slower than regular RSA cryptography, the JS implementations are even more slower. Benchmarks $ node benchmarks/index.js Benchmarking: sign elliptic#sign x 262 ops/sec ±0.51% (177 runs sampled) eccjs#sign x 55.91 ops/sec ±0.90% (144 runs sampled) ------------------------ Fastest is elliptic#sign ======================== Benchmarking: verify elliptic#verify x 113 ops/sec ±0.50% (166 runs sampled) eccjs#verify x 48.56 ops/sec ±0.36% (125 runs sampled) ------------------------ Fastest is elliptic#verify ======================== Benchmarking: gen elliptic#gen x 294 ops/sec ±0.43% (176 runs sampled) eccjs#gen x 62.25 ops/sec ±0.63% (129 runs sampled) ------------------------ Fastest is elliptic#gen ======================== Benchmarking: ecdh elliptic#ecdh x 136 ops/sec ±0.85% (156 runs sampled) ------------------------ Fastest is elliptic#ecdh ======================== API ECDSA var EC = require('elliptic').ec; // Create and initialize EC context // (better do it once and reuse it) var ec = new EC('secp256k1'); // Generate keys var key = ec.genKeyPair(); // Sign the message's hash (input must be an array, or a hex-string) var msgHash = [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ]; var signature = key.sign(msgHash); // Export DER encoded signature in Array var derSign = signature.toDER(); // Verify signature console.log(key.verify(msgHash, derSign)); // CHECK WITH NO PRIVATE KEY var pubPoint = key.getPublic(); var x = pubPoint.getX(); var y = pubPoint.getY(); // Public Key MUST be either: // 1) '04' + hex string of x + hex string of y; or // 2) object with two hex string properties (x and y); or // 3) object with two buffer properties (x and y) var pub = pubPoint.encode('hex');                                 // case 1 var pub = { x: x.toString('hex'), y: y.toString('hex') };         // case 2 var pub = { x: x.toBuffer(), y: y.toBuffer() };                   // case 3 var pub = { x: x.toArrayLike(Buffer), y: y.toArrayLike(Buffer) }; // case 3 // Import public key var key = ec.keyFromPublic(pub, 'hex'); // Signature MUST be either: // 1) DER-encoded signature as hex-string; or // 2) DER-encoded signature as buffer; or // 3) object with two hex-string properties (r and s); or // 4) object with two buffer properties (r and s) var signature = '3046022100...'; // case 1 var signature = new Buffer('...'); // case 2 var signature = { r: 'b1fc...', s: '9c42...' }; // case 3 // Verify signature console.log(key.verify(msgHash, signature)); EdDSA var EdDSA = require('elliptic').eddsa; // Create and initialize EdDSA context // (better do it once and reuse it) var ec = new EdDSA('ed25519'); // Create key pair from secret var key = ec.keyFromSecret('693e3c...'); // hex string, array or Buffer // Sign the message's hash (input must be an array, or a hex-string) var msgHash = [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ]; var signature = key.sign(msgHash).toHex(); // Verify signature console.log(key.verify(msgHash, signature)); // CHECK WITH NO PRIVATE KEY // Import public key var pub = '0a1af638...'; var key = ec.keyFromPublic(pub, 'hex'); // Verify signature var signature = '70bed1...'; console.log(key.verify(msgHash, signature)); ECDH var EC = require('elliptic').ec; var ec = new EC('curve25519'); // Generate keys var key1 = ec.genKeyPair(); var key2 = ec.genKeyPair(); var shared1 = key1.derive(key2.getPublic()); var shared2 = key2.derive(key1.getPublic()); console.log('Both shared secrets are BN instances'); console.log(shared1.toString(16)); console.log(shared2.toString(16)); three and more members: var EC = require('elliptic').ec; var ec = new EC('curve25519'); var A = ec.genKeyPair(); var B = ec.genKeyPair(); var C = ec.genKeyPair(); var AB = A.getPublic().mul(B.getPrivate()) var BC = B.getPublic().mul(C.getPrivate()) var CA = C.getPublic().mul(A.getPrivate()) var ABC = AB.mul(C.getPrivate()) var BCA = BC.mul(A.getPrivate()) var CAB = CA.mul(B.getPrivate()) console.log(ABC.getX().toString(16)) console.log(BCA.getX().toString(16)) console.log(CAB.getX().toString(16)) NOTE: .derive() returns a BN instance. Supported curves Elliptic.js support following curve types: Short Weierstrass Montgomery Edwards Twisted Edwards Following curve 'presets' are embedded into the library: secp256k1 p192 p224 p256 p384 p521 curve25519 ed25519 NOTE: That curve25519 could not be used for ECDSA, use ed25519 instead. Implementation details ECDSA is using deterministic k value generation as per RFC6979. Most of the curve operations are performed on non-affine coordinates (either projective or extended), various windowing techniques are used for different cases. All operations are performed in reduction context using bn.js, hashing is provided by hash.js Related projects eccrypto: isomorphic implementation of ECDSA, ECDH and ECIES for both browserify and node (uses elliptic for browser and secp256k1-node for node) LICENSE This software is licensed under the MIT License. Copyright Fedor Indutny, 2014. Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the ""Software""), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. About Fast Elliptic Curve Cryptography in plain javascript Resources Readme Releases 85 tags Packages 0 No packages published Used by 6m + 5,980,236 Contributors 25 + 14 contributors Languages JavaScript 99.3% HTML 0.7% © 2021 GitHub, Inc. Terms Privacy Security Status Docs Contact GitHub Pricing API Training Blog About You can’t perform that action at this time. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."
660670,20210625,github.com,https://github.com/adobe-accessibility/Accessible-Mega-Menu,text/html,text/html,en,"GitHub - adobe-accessibility/Accessible-Mega-Menu: A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. Skip to content Sign up Why GitHub? Features → Mobile → Actions → Codespaces → Packages → Security → Code review → Issues → Integrations → GitHub Sponsors → Customer stories→ Team Enterprise Explore Explore GitHub → Learn and contribute Topics → Collections → Trending → Learning Lab → Open source guides → Connect with others The ReadME Project → Events → Community forum → GitHub Education → GitHub Stars program → Marketplace Pricing Plans → Compare plans → Contact Sales → Education → In this repository All GitHub ↵ Jump to ↵ No suggested jump to results In this repository All GitHub ↵ Jump to ↵ In this organization All GitHub ↵ Jump to ↵ In this repository All GitHub ↵ Jump to ↵ Sign in Sign up {{ message }} adobe-accessibility / Accessible-Mega-Menu Notifications Star 584 Fork 200 A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. Apache-2.0 License 584 stars 200 forks Star Notifications Code Issues 29 Pull requests 6 Actions Projects 0 Wiki Security Insights More Code Issues Pull requests Actions Projects Wiki Security Insights master Switch branches/tags Branches Tags Could not load branches Nothing to show {{ refName }} default View all branches Could not load tags Nothing to show {{ refName }} default View all tags 2 branches 0 tags Code Clone HTTPS GitHub CLI Use Git or checkout with SVN using the web URL. Work fast with our official CLI. Learn more. Open with GitHub Desktop Download ZIP Launching GitHub Desktop If nothing happens, download GitHub Desktop and try again. Go back Launching GitHub Desktop If nothing happens, download GitHub Desktop and try again. Go back Launching Xcode If nothing happens, download Xcode and try again. Go back Launching Visual Studio Code Your codespace will open once ready. There was a problem preparing your codespace, please try again. Latest commit majornista fix evaluation for ChromeVox object … 5c070bc Dec 7, 2020 fix evaluation for ChromeVox object 5c070bc Git stats 39 commits Files Permalink Failed to load latest commit information. Type Name Latest commit message Commit time css js third-party/jquery LICENSE NOTICE README.md index.html package.json View code Accessible Mega Menu Keyboard Accessibility Screen Reader Accessibility Usage HTML JavaScript CSS README.md Accessible Mega Menu ========================= A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. It is modeled after the mega menu on adobe.com but has been simplified for use by others. An brief explanation of our interaction design choices can be found in a blog post at Mega menu accessibility on adobe.com. Content for the links and text within the mega menu comes from the Web Content Accessibility Guidelines (WCAG) 2.0. Keyboard Accessibility The accessible mega menu supports keyboard interaction modeled after the behavior described in the WAI-ARIA Menu or Menu bar (widget) design pattern, however we also try to respect users' general expectations for the behavior of links in a global navigation. To this end, the accessible mega menu implementation permits tab focus on each of the six top-level menu items. When one of the menu items has focus, pressing the Enter key, Spacebar or Down arrow will open the submenu panel, and pressing the Left or Right arrow key will shift focus to the adjacent menu item. Links within the submenu panels are included in the tab order when the panel is open. They can also be navigated with the arrow keys or by typing the first character in the link name, which speeds up keyboard navigation considerably. Pressing the Escape key closes the submenu and restores focus to the parent menu item. Screen Reader Accessibility The accessible mega menu models its use of WAI-ARIA Roles, States, and Properties after those described in the WAI-ARIA Menu or Menu bar (widget) design pattern with some notable exceptions, so that it behaves better with screen reader user expectations for global navigation. We don't use role=""menu"" for the menu container and role=""menuitem"" for each of the links therein, because if we do, assistive technology will no longer interpret the links as links, but instead, as menu items, and the links in our global navigation will no longer show up when a screen reader user executes a shortcut command to bring up a list of links in the page. We also want to maintain the semantic structure of the submenu panels in our mega menu; our links are organized into lists and separated by headings. Omitting role=""menu"" and role=""menuitem"" for the global navigation seems the safer way to go. Usage HTML The HTML structure for the mega menu is a nav element, or any other container element, containing a list. Each list item contains a link which is followed by a div or any other container element which will serve as the pop up panel. The panel can contain any html content; in the following example, each panel contains three lists of links. You can explicitly define groups within the panel, between which a user can navigate quickly using the left and right arrow keys; in the following example, the CSS class .sub-nav-group identifies a navigable group.     <nav>         <ul class=""nav-menu"">             <li class=""nav-item"">                 <a href=""?movie"">Movies</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=0"">Action &amp; Adventure</a></li>                         <li><a href=""?movie&genre=2"">Children &amp; Family</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=7"">Dramas</a></li>                         <li><a href=""?movie&genre=9"">Foreign</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=14"">Musicals</a></li>                         <li><a href=""?movie&genre=15"">Romance</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>             <li class=""nav-item"">                 <a href=""?tv"">TV Shows</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=20"">Classic TV</a></li>                         <li><a href=""?tv&genre=21"">Crime TV</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=27"">Reality TV</a></li>                         <li><a href=""?tv&genre=30"">TV Action</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=33"">TV Dramas</a></li>                         <li><a href=""?tv&genre=34"">TV Horror</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>         </ul>     </nav> By default, accessibleMegaMenu uses the the following CSS classes to define the top-level navigation items, panels, groups within the panels, and the hover, focus, and open states. It also defines a prefix for unique id strings, which are required to indicate the relationship of a top-level navigation item to the panel it controls.     defaults = {         /* unique ID's are required to indicate aria-owns, aria-controls and aria-labelledby */         uuidPrefix: ""accessible-megamenu"",                  /* default css class used to define the megamenu styling */         menuClass: ""accessible-megamenu"",                  /* default css class for a top-level navigation item in the megamenu */         topNavItemClass: ""accessible-megamenu-top-nav-item"",                  /* default css class for a megamenu panel */         panelClass: ""accessible-megamenu-panel"",                  /* default css class for a group of items within a megamenu panel */         panelGroupClass: ""accessible-megamenu-panel-group"",                  /* default css class for the hover state */         hoverClass: ""hover"",                  /* default css class for the focus state */         focusClass: ""focus"",                  /* default css class for the open state */         openClass: ""open""      } You can optionally override the defaults to use the CSS classes you may have already defined for your mega menu. JavaScript Be sure to include jQuery and the jquery-accessibleMegaMenu.js plugin script.     <script src=""//code.jquery.com/jquery-1.10.1.min.js""></script>     <script src=""js/jquery-accessibleMegaMenu.js""></script> The following initializes the first nav element in the document as an accessibleMegaMenu, with optional CSS class overrides.     $(""nav:first"").accessibleMegaMenu({         /* prefix for generated unique id attributes, which are required             to indicate aria-owns, aria-controls and aria-labelledby */         uuidPrefix: ""accessible-megamenu"",                  /* css class used to define the megamenu styling */         menuClass: ""nav-menu"",                  /* css class for a top-level navigation item in the megamenu */         topNavItemClass: ""nav-item"",                  /* css class for a megamenu panel */         panelClass: ""sub-nav"",                  /* css class for a group of items within a megamenu panel */         panelGroupClass: ""sub-nav-group"",                  /* css class for the hover state */         hoverClass: ""hover"",                  /* css class for the focus state */         focusClass: ""focus"",                  /* css class for the open state */         openClass: ""open""     }); CSS AccessibleMegaMenu handles the showing and hiding of panels by adding or removing a CSS class. No inline styles are added to hide elements or create animation between states. Following is some rudimentary CSS for our example which enables the showing/hiding of and the layout of lists panels in the mega menu.     /* mega menu list */     .nav-menu {         display: block;         position: relative;         list-style: none;         margin: 0;         padding: 0;         z-index: 15;     }     /* a top level navigation item in the mega menu */     .nav-item {         list-style: none;         display: inline-block;         padding: 0;         margin: 0;     }     /* first descendant link within a top level navigation item */     .nav-item > a {         position: relative;         display: inline-block;         padding: 0.5em 1em;         margin: 0 0 -1px 0;         border: 1px solid transparent;     }     /* focus/open states of first descendant link within a top level         navigation item */     .nav-item > a:focus,     .nav-item > a.open {         border: 1px solid #dedede;     }     /* open state of first descendant link within a top level         navigation item */     .nav-item > a.open {         background-color: #fff;         border-bottom: none;         z-index: 1;     }     /* sub-navigation panel */     .sub-nav {         position: absolute;         display: none;         top: 2.2em;         margin-top: -1px;         padding: 0.5em 1em;         border: 1px solid #dedede;         background-color: #fff;     }     /* sub-navigation panel open state */     .sub-nav.open {         display: block;     }     /* list of items within sub-navigation panel */     .sub-nav ul {         display: inline-block;         vertical-align: top;         margin: 0 1em 0 0;         padding: 0;     }     /* list item within sub-navigation panel */     .sub-nav li {         display: block;         list-style-type: none;         margin: 0;         padding: 0;     }   Putting it all together, here is the completed example:     <!doctype html>     <html lang=""en"">     <head>     <meta charset=""UTF-8"">     <title>Simple Accessible Mega Menu Example</title>     <style>         /* Rudimentary mega menu CSS for demonstration */             /* mega menu list */         .nav-menu {             display: block;             position: relative;             list-style: none;             margin: 0;             padding: 0;             z-index: 15;         }         /* a top level navigation item in the mega menu */         .nav-item {             list-style: none;             display: inline-block;             padding: 0;             margin: 0;         }         /* first descendant link within a top level navigation item */         .nav-item > a {             position: relative;             display: inline-block;             padding: 0.5em 1em;             margin: 0 0 -1px 0;             border: 1px solid transparent;         }         /* focus/open states of first descendant link within a top level             navigation item */         .nav-item > a:focus,         .nav-item > a.open {             border: 1px solid #dedede;         }         /* open state of first descendant link within a top level             navigation item */         .nav-item > a.open {             background-color: #fff;             border-bottom: none;             z-index: 1;         }         /* sub-navigation panel */         .sub-nav {             position: absolute;             display: none;             top: 2.2em;             margin-top: -1px;             padding: 0.5em 1em;             border: 1px solid #dedede;             background-color: #fff;         }         /* sub-navigation panel open state */         .sub-nav.open {             display: block;         }         /* list of items within sub-navigation panel */         .sub-nav ul {             display: inline-block;             vertical-align: top;             margin: 0 1em 0 0;             padding: 0;         }         /* list item within sub-navigation panel */         .sub-nav li {             display: block;             list-style-type: none;             margin: 0;             padding: 0;         }          </style>     </head>     <body>     <nav>         <ul class=""nav-menu"">             <li class=""nav-item"">                 <a href=""?movie"">Movies</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=0"">Action &amp; Adventure</a></li>                         <li><a href=""?movie&genre=2"">Children &amp; Family</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=7"">Dramas</a></li>                         <li><a href=""?movie&genre=9"">Foreign</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=14"">Musicals</a></li>                         <li><a href=""?movie&genre=15"">Romance</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>             <li class=""nav-item"">                 <a href=""?tv"">TV Shows</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=20"">Classic TV</a></li>                         <li><a href=""?tv&genre=21"">Crime TV</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=27"">Reality TV</a></li>                         <li><a href=""?tv&genre=30"">TV Action</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=33"">TV Dramas</a></li>                         <li><a href=""?tv&genre=34"">TV Horror</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>         </ul>     </nav>          <!-- include jquery -->     <script src=""//code.jquery.com/jquery-1.10.1.min.js""></script>     <!-- include the jquery-accessibleMegaMenu plugin script -->     <script src=""js/jquery-accessibleMegaMenu.js""></script>     <!-- initialize a selector as an accessibleMegaMenu -->     <script>         $(""nav:first"").accessibleMegaMenu({             /* prefix for generated unique id attributes, which are required                 to indicate aria-owns, aria-controls and aria-labelledby */             uuidPrefix: ""accessible-megamenu"",                          /* css class used to define the megamenu styling */             menuClass: ""nav-menu"",                          /* css class for a top-level navigation item in the megamenu */             topNavItemClass: ""nav-item"",                          /* css class for a megamenu panel */             panelClass: ""sub-nav"",                          /* css class for a group of items within a megamenu panel */             panelGroupClass: ""sub-nav-group"",                          /* css class for the hover state */             hoverClass: ""hover"",                          /* css class for the focus state */             focusClass: ""focus"",                          /* css class for the open state */             openClass: ""open""         });     </script>     </body>     </html> About A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. Resources Readme License Apache-2.0 License Releases No releases published Packages 0 No packages published Used by 16 + 8 Contributors 7 Languages HTML 71.8% CSS 26.4% JavaScript 1.8% © 2021 GitHub, Inc. Terms Privacy Security Status Docs Contact GitHub Pricing API Training Blog About You can’t perform that action at this time. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."
663515,20210625,github.com,https://github.com/crypto-browserify/crypto-browserify,text/html,text/html,en,"GitHub - crypto-browserify/crypto-browserify: partial implementation of node's `crypto` for the browser Skip to content Sign up Why GitHub? Features → Mobile → Actions → Codespaces → Packages → Security → Code review → Issues → Integrations → GitHub Sponsors → Customer stories→ Team Enterprise Explore Explore GitHub → Learn and contribute Topics → Collections → Trending → Learning Lab → Open source guides → Connect with others The ReadME Project → Events → Community forum → GitHub Education → GitHub Stars program → Marketplace Pricing Plans → Compare plans → Contact Sales → Education → In this repository All GitHub ↵ Jump to ↵ No suggested jump to results In this repository All GitHub ↵ Jump to ↵ In this organization All GitHub ↵ Jump to ↵ In this repository All GitHub ↵ Jump to ↵ Sign in Sign up {{ message }} crypto-browserify / crypto-browserify Notifications Star 481 Fork 157 partial implementation of node's `crypto` for the browser MIT License 481 stars 157 forks Star Notifications Code Issues 20 Pull requests 6 Actions Projects 0 Wiki Security Insights More Code Issues Pull requests Actions Projects Wiki Security Insights master Switch branches/tags Branches Tags Could not load branches Nothing to show {{ refName }} default View all branches Could not load tags Nothing to show {{ refName }} default View all tags 6 branches 31 tags Code Clone HTTPS GitHub CLI Use Git or checkout with SVN using the web URL. Work fast with our official CLI. Learn more. Open with GitHub Desktop Download ZIP Launching GitHub Desktop If nothing happens, download GitHub Desktop and try again. Go back Launching GitHub Desktop If nothing happens, download GitHub Desktop and try again. Go back Launching Xcode If nothing happens, download Xcode and try again. Go back Launching Visual Studio Code Your codespace will open once ready. There was a problem preparing your codespace, please try again. Latest commit calvinmetcalf fix debian issue (maybe) … 460a13b Feb 9, 2018 fix debian issue (maybe) 460a13b Git stats 362 commits Files Permalink Failed to load latest commit information. Type Name Latest commit message Commit time example test .gitignore .travis.yml .zuul.yml LICENSE README.md index.js package.json View code crypto-browserify todo contributions License README.md crypto-browserify A port of node's crypto module to the browser. The goal of this module is to reimplement node's crypto module, in pure javascript so that it can run in the browser. Here is the subset that is currently implemented: createHash (sha1, sha224, sha256, sha384, sha512, md5, rmd160) createHmac (sha1, sha224, sha256, sha384, sha512, md5, rmd160) pbkdf2 pbkdf2Sync randomBytes pseudoRandomBytes createCipher (aes) createDecipher (aes) createDiffieHellman createSign (rsa, ecdsa) createVerify (rsa, ecdsa) createECDH (secp256k1) publicEncrypt/privateDecrypt (rsa) privateEncrypt/publicDecrypt (rsa) todo these features from node's crypto are still unimplemented. createCredentials contributions If you are interested in writing a feature, please implement as a new module, which will be incorporated into crypto-browserify as a dependency. All deps must be compatible with node's crypto (generate example inputs and outputs with node, and save base64 strings inside JSON, so that tests can run in the browser. see sha.js Crypto is extra serious so please do not hesitate to review the code, and post comments if you do. License MIT About partial implementation of node's `crypto` for the browser Resources Readme License MIT License Releases 31 tags Packages 0 No packages published Used by 6.1m + 6,068,448 Contributors 24 + 13 contributors Languages JavaScript 99.1% HTML 0.9% © 2021 GitHub, Inc. Terms Privacy Security Status Docs Contact GitHub Pricing API Training Blog About You can’t perform that action at this time. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."
663519,20210625,github.com,https://github.com/indutny/elliptic/issues,text/html,text/html,en,"Issues · indutny/elliptic · GitHub Skip to content Sign up Why GitHub? Features → Mobile → Actions → Codespaces → Packages → Security → Code review → Issues → Integrations → GitHub Sponsors → Customer stories→ Team Enterprise Explore Explore GitHub → Learn and contribute Topics → Collections → Trending → Learning Lab → Open source guides → Connect with others The ReadME Project → Events → Community forum → GitHub Education → GitHub Stars program → Marketplace Pricing Plans → Compare plans → Contact Sales → Education → In this repository All GitHub ↵ Jump to ↵ No suggested jump to results In this repository All GitHub ↵ Jump to ↵ In this user All GitHub ↵ Jump to ↵ In this repository All GitHub ↵ Jump to ↵ Sign in Sign up {{ message }} indutny / elliptic Notifications Star 1.3k Fork 305 Code Issues 76 Pull requests 20 Actions Projects 0 Wiki Security Insights More Code Issues Pull requests Actions Projects Wiki Security Insights Labels 8 Milestones 0 Labels 8 Milestones 0 New issue Have a question about this project? Sign up for a free GitHub account to open an issue and contact its maintainers and the community. Sign up for GitHub By clicking “Sign up for GitHub”, you agree to our terms of service and privacy statement. We’ll occasionally send you account related emails. Already on GitHub? Sign in to your account 76 Open 97 Closed 76 Open 97 Closed Author Filter by author author: Filter by this user Label Filter by label Use alt + click/return to exclude labels. Projects Filter by project Milestones Filter by milestone Assignee Filter by who’s assigned Sort Sort by Newest Oldest Most commented Least commented Recently updated Least recently updated Most reactions 👍 👎 😄 🎉 😕 ❤️ 🚀 👀 Point multiplication gives different results based on order of operattions #260 opened Jun 16, 2021 by kot-begemot 3 deriving private key from public key #257 opened Apr 27, 2021 by madhav-madhusoodanan How to use keys with crypto.subtle #255 opened Apr 1, 2021 by DominicTobias-b1 EDDSA.decodeInt should fails or reduce by dafault? #254 opened Mar 18, 2021 by mahnunchik Sad state #251 opened Mar 11, 2021 by berkus 1 EDDSA.decodePoint should fails on ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff #250 opened Mar 3, 2021 by mahnunchik 15 Add endian argument to bn.js toString method #249 opened Mar 2, 2021 by mahnunchik EDDSA decodePoint doesn't support Buffer as argument #248 opened Mar 2, 2021 by mahnunchik How to decipher the encrypted message? #245 opened Jan 27, 2021 by istabraq-iot Montgomery Curve25519 is not openssl compatible #243 opened Dec 28, 2020 by jc-lab 4 Curves p384 and p521 produce incorrect results #239 opened Oct 18, 2020 by guidovranken 1 i want to use this library with c# #238 opened Oct 10, 2020 by medozeus Elliptic.js support following curve types: #236 opened Oct 5, 2020 by medozeus The Elliptic package 6.5.2 for Node.js allows ECDSA signature malleability via variations in encoding, leading '\0' bytes, or integer overflows. #235 opened Oct 1, 2020 by bsomeshwer EdDSA: What is a reason to manipulate with bytes? #233 opened Aug 27, 2020 by mahnunchik why use derive method get ECDH key，i got different length #230 opened Jul 10, 2020 by cqupt-yifanwu 4 Why do I generate my local test path in chunk-vendors when packing with NPM #229 opened Jun 22, 2020 by Anthonychen1994 1 TypedArray support ? #228 opened Jun 20, 2020 by dojyorin Is there way to generate PKCS#8 private key from Pem format ECC Private key #225 opened Apr 28, 2020 by sureshreddygovindu Signature validation in python. Prefix configuration? #224 opened Apr 25, 2020 by amrbz is it possible to do assymetric encryption? #223 opened Apr 7, 2020 by maroodb 1 Missing infinity point encoding #218 opened Feb 21, 2020 by catenacyber 1 ECDH P-521 public key point not on curve according to java (clojure) #216 opened Feb 11, 2020 by slhabity 2 how save and load private / publick key in pem or other format #215 opened Jan 27, 2020 by fturiot 2 How to pair client to server BTCPay NodeJS client? #214 opened Jan 21, 2020 by savshit 1 Previous 1 2 3 4 Next Previous Next ProTip! Add no:assignee to see everything that’s not assigned. © 2021 GitHub, Inc. Terms Privacy Security Status Docs Contact GitHub Pricing API Training Blog About You can’t perform that action at this time. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."
663522,20210625,github.com,https://github.com/indutny/elliptic,text/html,text/html,en,"GitHub - indutny/elliptic: Fast Elliptic Curve Cryptography in plain javascript Skip to content Sign up Why GitHub? Features → Mobile → Actions → Codespaces → Packages → Security → Code review → Issues → Integrations → GitHub Sponsors → Customer stories→ Team Enterprise Explore Explore GitHub → Learn and contribute Topics → Collections → Trending → Learning Lab → Open source guides → Connect with others The ReadME Project → Events → Community forum → GitHub Education → GitHub Stars program → Marketplace Pricing Plans → Compare plans → Contact Sales → Education → In this repository All GitHub ↵ Jump to ↵ No suggested jump to results In this repository All GitHub ↵ Jump to ↵ In this user All GitHub ↵ Jump to ↵ In this repository All GitHub ↵ Jump to ↵ Sign in Sign up {{ message }} indutny / elliptic Notifications Star 1.3k Fork 305 Fast Elliptic Curve Cryptography in plain javascript 1.3k stars 305 forks Star Notifications Code Issues 76 Pull requests 20 Actions Projects 0 Wiki Security Insights More Code Issues Pull requests Actions Projects Wiki Security Insights master Switch branches/tags Branches Tags Could not load branches Nothing to show {{ refName }} default View all branches Could not load tags Nothing to show {{ refName }} default View all tags 2 branches 85 tags Code Clone HTTPS GitHub CLI Use Git or checkout with SVN using the web URL. Work fast with our official CLI. Learn more. Open with GitHub Desktop Download ZIP Launching GitHub Desktop If nothing happens, download GitHub Desktop and try again. Go back Launching GitHub Desktop If nothing happens, download GitHub Desktop and try again. Go back Launching Xcode If nothing happens, download Xcode and try again. Go back Launching Visual Studio Code Your codespace will open once ready. There was a problem preparing your codespace, please try again. Latest commit indutny 6.5.4 … 43ac7f2 Feb 2, 2021 6.5.4 43ac7f2 Git stats 331 commits Files Permalink Failed to load latest commit information. Type Name Latest commit message Commit time benchmarks dist lib test .codeclimate.yml .eslintignore .eslintrc.js .gitignore .npmignore .travis.yml Gruntfile.js README.md package-lock.json package.json View code Elliptic Incentive Benchmarks API ECDSA EdDSA ECDH Supported curves Implementation details Related projects LICENSE README.md Elliptic Fast elliptic-curve cryptography in a plain javascript implementation. NOTE: Please take a look at http://safecurves.cr.yp.to/ before choosing a curve for your cryptography operations. Incentive ECC is much slower than regular RSA cryptography, the JS implementations are even more slower. Benchmarks $ node benchmarks/index.js Benchmarking: sign elliptic#sign x 262 ops/sec ±0.51% (177 runs sampled) eccjs#sign x 55.91 ops/sec ±0.90% (144 runs sampled) ------------------------ Fastest is elliptic#sign ======================== Benchmarking: verify elliptic#verify x 113 ops/sec ±0.50% (166 runs sampled) eccjs#verify x 48.56 ops/sec ±0.36% (125 runs sampled) ------------------------ Fastest is elliptic#verify ======================== Benchmarking: gen elliptic#gen x 294 ops/sec ±0.43% (176 runs sampled) eccjs#gen x 62.25 ops/sec ±0.63% (129 runs sampled) ------------------------ Fastest is elliptic#gen ======================== Benchmarking: ecdh elliptic#ecdh x 136 ops/sec ±0.85% (156 runs sampled) ------------------------ Fastest is elliptic#ecdh ======================== API ECDSA var EC = require('elliptic').ec; // Create and initialize EC context // (better do it once and reuse it) var ec = new EC('secp256k1'); // Generate keys var key = ec.genKeyPair(); // Sign the message's hash (input must be an array, or a hex-string) var msgHash = [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ]; var signature = key.sign(msgHash); // Export DER encoded signature in Array var derSign = signature.toDER(); // Verify signature console.log(key.verify(msgHash, derSign)); // CHECK WITH NO PRIVATE KEY var pubPoint = key.getPublic(); var x = pubPoint.getX(); var y = pubPoint.getY(); // Public Key MUST be either: // 1) '04' + hex string of x + hex string of y; or // 2) object with two hex string properties (x and y); or // 3) object with two buffer properties (x and y) var pub = pubPoint.encode('hex');                                 // case 1 var pub = { x: x.toString('hex'), y: y.toString('hex') };         // case 2 var pub = { x: x.toBuffer(), y: y.toBuffer() };                   // case 3 var pub = { x: x.toArrayLike(Buffer), y: y.toArrayLike(Buffer) }; // case 3 // Import public key var key = ec.keyFromPublic(pub, 'hex'); // Signature MUST be either: // 1) DER-encoded signature as hex-string; or // 2) DER-encoded signature as buffer; or // 3) object with two hex-string properties (r and s); or // 4) object with two buffer properties (r and s) var signature = '3046022100...'; // case 1 var signature = new Buffer('...'); // case 2 var signature = { r: 'b1fc...', s: '9c42...' }; // case 3 // Verify signature console.log(key.verify(msgHash, signature)); EdDSA var EdDSA = require('elliptic').eddsa; // Create and initialize EdDSA context // (better do it once and reuse it) var ec = new EdDSA('ed25519'); // Create key pair from secret var key = ec.keyFromSecret('693e3c...'); // hex string, array or Buffer // Sign the message's hash (input must be an array, or a hex-string) var msgHash = [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ]; var signature = key.sign(msgHash).toHex(); // Verify signature console.log(key.verify(msgHash, signature)); // CHECK WITH NO PRIVATE KEY // Import public key var pub = '0a1af638...'; var key = ec.keyFromPublic(pub, 'hex'); // Verify signature var signature = '70bed1...'; console.log(key.verify(msgHash, signature)); ECDH var EC = require('elliptic').ec; var ec = new EC('curve25519'); // Generate keys var key1 = ec.genKeyPair(); var key2 = ec.genKeyPair(); var shared1 = key1.derive(key2.getPublic()); var shared2 = key2.derive(key1.getPublic()); console.log('Both shared secrets are BN instances'); console.log(shared1.toString(16)); console.log(shared2.toString(16)); three and more members: var EC = require('elliptic').ec; var ec = new EC('curve25519'); var A = ec.genKeyPair(); var B = ec.genKeyPair(); var C = ec.genKeyPair(); var AB = A.getPublic().mul(B.getPrivate()) var BC = B.getPublic().mul(C.getPrivate()) var CA = C.getPublic().mul(A.getPrivate()) var ABC = AB.mul(C.getPrivate()) var BCA = BC.mul(A.getPrivate()) var CAB = CA.mul(B.getPrivate()) console.log(ABC.getX().toString(16)) console.log(BCA.getX().toString(16)) console.log(CAB.getX().toString(16)) NOTE: .derive() returns a BN instance. Supported curves Elliptic.js support following curve types: Short Weierstrass Montgomery Edwards Twisted Edwards Following curve 'presets' are embedded into the library: secp256k1 p192 p224 p256 p384 p521 curve25519 ed25519 NOTE: That curve25519 could not be used for ECDSA, use ed25519 instead. Implementation details ECDSA is using deterministic k value generation as per RFC6979. Most of the curve operations are performed on non-affine coordinates (either projective or extended), various windowing techniques are used for different cases. All operations are performed in reduction context using bn.js, hashing is provided by hash.js Related projects eccrypto: isomorphic implementation of ECDSA, ECDH and ECIES for both browserify and node (uses elliptic for browser and secp256k1-node for node) LICENSE This software is licensed under the MIT License. Copyright Fedor Indutny, 2014. Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the ""Software""), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. About Fast Elliptic Curve Cryptography in plain javascript Resources Readme Releases 85 tags Packages 0 No packages published Used by 6m + 6,004,197 Contributors 25 + 14 contributors Languages JavaScript 99.3% HTML 0.7% © 2021 GitHub, Inc. Terms Privacy Security Status Docs Contact GitHub Pricing API Training Blog About You can’t perform that action at this time. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."
666479,20210702,github.com,https://github.com/adobe-accessibility/Accessible-Mega-Menu,text/html,text/html,en,"GitHub - adobe-accessibility/Accessible-Mega-Menu: A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. Skip to content Sign up Why GitHub? Features → Mobile → Actions → Codespaces → Packages → Security → Code review → Issues → Integrations → GitHub Sponsors → Customer stories→ Team Enterprise Explore Explore GitHub → Learn and contribute Topics → Collections → Trending → Learning Lab → Open source guides → Connect with others The ReadME Project → Events → Community forum → GitHub Education → GitHub Stars program → Marketplace Pricing Plans → Compare plans → Contact Sales → Education → In this repository All GitHub ↵ Jump to ↵ No suggested jump to results In this repository All GitHub ↵ Jump to ↵ In this organization All GitHub ↵ Jump to ↵ In this repository All GitHub ↵ Jump to ↵ Sign in Sign up {{ message }} adobe-accessibility / Accessible-Mega-Menu Notifications Star 584 Fork 200 A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. Apache-2.0 License 584 stars 200 forks Star Notifications Code Issues 29 Pull requests 6 Actions Projects 0 Wiki Security Insights More Code Issues Pull requests Actions Projects Wiki Security Insights master Switch branches/tags Branches Tags Could not load branches Nothing to show {{ refName }} default View all branches Could not load tags Nothing to show {{ refName }} default View all tags 2 branches 0 tags Code Clone HTTPS GitHub CLI Use Git or checkout with SVN using the web URL. Work fast with our official CLI. Learn more. Open with GitHub Desktop Download ZIP Launching GitHub Desktop If nothing happens, download GitHub Desktop and try again. Go back Launching GitHub Desktop If nothing happens, download GitHub Desktop and try again. Go back Launching Xcode If nothing happens, download Xcode and try again. Go back Launching Visual Studio Code Your codespace will open once ready. There was a problem preparing your codespace, please try again. Latest commit majornista fix evaluation for ChromeVox object … 5c070bc Dec 7, 2020 fix evaluation for ChromeVox object 5c070bc Git stats 39 commits Files Permalink Failed to load latest commit information. Type Name Latest commit message Commit time css js third-party/jquery LICENSE NOTICE README.md index.html package.json View code Accessible Mega Menu Keyboard Accessibility Screen Reader Accessibility Usage HTML JavaScript CSS README.md Accessible Mega Menu ========================= A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. It is modeled after the mega menu on adobe.com but has been simplified for use by others. An brief explanation of our interaction design choices can be found in a blog post at Mega menu accessibility on adobe.com. Content for the links and text within the mega menu comes from the Web Content Accessibility Guidelines (WCAG) 2.0. Keyboard Accessibility The accessible mega menu supports keyboard interaction modeled after the behavior described in the WAI-ARIA Menu or Menu bar (widget) design pattern, however we also try to respect users' general expectations for the behavior of links in a global navigation. To this end, the accessible mega menu implementation permits tab focus on each of the six top-level menu items. When one of the menu items has focus, pressing the Enter key, Spacebar or Down arrow will open the submenu panel, and pressing the Left or Right arrow key will shift focus to the adjacent menu item. Links within the submenu panels are included in the tab order when the panel is open. They can also be navigated with the arrow keys or by typing the first character in the link name, which speeds up keyboard navigation considerably. Pressing the Escape key closes the submenu and restores focus to the parent menu item. Screen Reader Accessibility The accessible mega menu models its use of WAI-ARIA Roles, States, and Properties after those described in the WAI-ARIA Menu or Menu bar (widget) design pattern with some notable exceptions, so that it behaves better with screen reader user expectations for global navigation. We don't use role=""menu"" for the menu container and role=""menuitem"" for each of the links therein, because if we do, assistive technology will no longer interpret the links as links, but instead, as menu items, and the links in our global navigation will no longer show up when a screen reader user executes a shortcut command to bring up a list of links in the page. We also want to maintain the semantic structure of the submenu panels in our mega menu; our links are organized into lists and separated by headings. Omitting role=""menu"" and role=""menuitem"" for the global navigation seems the safer way to go. Usage HTML The HTML structure for the mega menu is a nav element, or any other container element, containing a list. Each list item contains a link which is followed by a div or any other container element which will serve as the pop up panel. The panel can contain any html content; in the following example, each panel contains three lists of links. You can explicitly define groups within the panel, between which a user can navigate quickly using the left and right arrow keys; in the following example, the CSS class .sub-nav-group identifies a navigable group.     <nav>         <ul class=""nav-menu"">             <li class=""nav-item"">                 <a href=""?movie"">Movies</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=0"">Action &amp; Adventure</a></li>                         <li><a href=""?movie&genre=2"">Children &amp; Family</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=7"">Dramas</a></li>                         <li><a href=""?movie&genre=9"">Foreign</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=14"">Musicals</a></li>                         <li><a href=""?movie&genre=15"">Romance</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>             <li class=""nav-item"">                 <a href=""?tv"">TV Shows</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=20"">Classic TV</a></li>                         <li><a href=""?tv&genre=21"">Crime TV</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=27"">Reality TV</a></li>                         <li><a href=""?tv&genre=30"">TV Action</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=33"">TV Dramas</a></li>                         <li><a href=""?tv&genre=34"">TV Horror</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>         </ul>     </nav> By default, accessibleMegaMenu uses the the following CSS classes to define the top-level navigation items, panels, groups within the panels, and the hover, focus, and open states. It also defines a prefix for unique id strings, which are required to indicate the relationship of a top-level navigation item to the panel it controls.     defaults = {         /* unique ID's are required to indicate aria-owns, aria-controls and aria-labelledby */         uuidPrefix: ""accessible-megamenu"",                  /* default css class used to define the megamenu styling */         menuClass: ""accessible-megamenu"",                  /* default css class for a top-level navigation item in the megamenu */         topNavItemClass: ""accessible-megamenu-top-nav-item"",                  /* default css class for a megamenu panel */         panelClass: ""accessible-megamenu-panel"",                  /* default css class for a group of items within a megamenu panel */         panelGroupClass: ""accessible-megamenu-panel-group"",                  /* default css class for the hover state */         hoverClass: ""hover"",                  /* default css class for the focus state */         focusClass: ""focus"",                  /* default css class for the open state */         openClass: ""open""      } You can optionally override the defaults to use the CSS classes you may have already defined for your mega menu. JavaScript Be sure to include jQuery and the jquery-accessibleMegaMenu.js plugin script.     <script src=""//code.jquery.com/jquery-1.10.1.min.js""></script>     <script src=""js/jquery-accessibleMegaMenu.js""></script> The following initializes the first nav element in the document as an accessibleMegaMenu, with optional CSS class overrides.     $(""nav:first"").accessibleMegaMenu({         /* prefix for generated unique id attributes, which are required             to indicate aria-owns, aria-controls and aria-labelledby */         uuidPrefix: ""accessible-megamenu"",                  /* css class used to define the megamenu styling */         menuClass: ""nav-menu"",                  /* css class for a top-level navigation item in the megamenu */         topNavItemClass: ""nav-item"",                  /* css class for a megamenu panel */         panelClass: ""sub-nav"",                  /* css class for a group of items within a megamenu panel */         panelGroupClass: ""sub-nav-group"",                  /* css class for the hover state */         hoverClass: ""hover"",                  /* css class for the focus state */         focusClass: ""focus"",                  /* css class for the open state */         openClass: ""open""     }); CSS AccessibleMegaMenu handles the showing and hiding of panels by adding or removing a CSS class. No inline styles are added to hide elements or create animation between states. Following is some rudimentary CSS for our example which enables the showing/hiding of and the layout of lists panels in the mega menu.     /* mega menu list */     .nav-menu {         display: block;         position: relative;         list-style: none;         margin: 0;         padding: 0;         z-index: 15;     }     /* a top level navigation item in the mega menu */     .nav-item {         list-style: none;         display: inline-block;         padding: 0;         margin: 0;     }     /* first descendant link within a top level navigation item */     .nav-item > a {         position: relative;         display: inline-block;         padding: 0.5em 1em;         margin: 0 0 -1px 0;         border: 1px solid transparent;     }     /* focus/open states of first descendant link within a top level         navigation item */     .nav-item > a:focus,     .nav-item > a.open {         border: 1px solid #dedede;     }     /* open state of first descendant link within a top level         navigation item */     .nav-item > a.open {         background-color: #fff;         border-bottom: none;         z-index: 1;     }     /* sub-navigation panel */     .sub-nav {         position: absolute;         display: none;         top: 2.2em;         margin-top: -1px;         padding: 0.5em 1em;         border: 1px solid #dedede;         background-color: #fff;     }     /* sub-navigation panel open state */     .sub-nav.open {         display: block;     }     /* list of items within sub-navigation panel */     .sub-nav ul {         display: inline-block;         vertical-align: top;         margin: 0 1em 0 0;         padding: 0;     }     /* list item within sub-navigation panel */     .sub-nav li {         display: block;         list-style-type: none;         margin: 0;         padding: 0;     }   Putting it all together, here is the completed example:     <!doctype html>     <html lang=""en"">     <head>     <meta charset=""UTF-8"">     <title>Simple Accessible Mega Menu Example</title>     <style>         /* Rudimentary mega menu CSS for demonstration */             /* mega menu list */         .nav-menu {             display: block;             position: relative;             list-style: none;             margin: 0;             padding: 0;             z-index: 15;         }         /* a top level navigation item in the mega menu */         .nav-item {             list-style: none;             display: inline-block;             padding: 0;             margin: 0;         }         /* first descendant link within a top level navigation item */         .nav-item > a {             position: relative;             display: inline-block;             padding: 0.5em 1em;             margin: 0 0 -1px 0;             border: 1px solid transparent;         }         /* focus/open states of first descendant link within a top level             navigation item */         .nav-item > a:focus,         .nav-item > a.open {             border: 1px solid #dedede;         }         /* open state of first descendant link within a top level             navigation item */         .nav-item > a.open {             background-color: #fff;             border-bottom: none;             z-index: 1;         }         /* sub-navigation panel */         .sub-nav {             position: absolute;             display: none;             top: 2.2em;             margin-top: -1px;             padding: 0.5em 1em;             border: 1px solid #dedede;             background-color: #fff;         }         /* sub-navigation panel open state */         .sub-nav.open {             display: block;         }         /* list of items within sub-navigation panel */         .sub-nav ul {             display: inline-block;             vertical-align: top;             margin: 0 1em 0 0;             padding: 0;         }         /* list item within sub-navigation panel */         .sub-nav li {             display: block;             list-style-type: none;             margin: 0;             padding: 0;         }          </style>     </head>     <body>     <nav>         <ul class=""nav-menu"">             <li class=""nav-item"">                 <a href=""?movie"">Movies</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=0"">Action &amp; Adventure</a></li>                         <li><a href=""?movie&genre=2"">Children &amp; Family</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=7"">Dramas</a></li>                         <li><a href=""?movie&genre=9"">Foreign</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=14"">Musicals</a></li>                         <li><a href=""?movie&genre=15"">Romance</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>             <li class=""nav-item"">                 <a href=""?tv"">TV Shows</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=20"">Classic TV</a></li>                         <li><a href=""?tv&genre=21"">Crime TV</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=27"">Reality TV</a></li>                         <li><a href=""?tv&genre=30"">TV Action</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=33"">TV Dramas</a></li>                         <li><a href=""?tv&genre=34"">TV Horror</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>         </ul>     </nav>          <!-- include jquery -->     <script src=""//code.jquery.com/jquery-1.10.1.min.js""></script>     <!-- include the jquery-accessibleMegaMenu plugin script -->     <script src=""js/jquery-accessibleMegaMenu.js""></script>     <!-- initialize a selector as an accessibleMegaMenu -->     <script>         $(""nav:first"").accessibleMegaMenu({             /* prefix for generated unique id attributes, which are required                 to indicate aria-owns, aria-controls and aria-labelledby */             uuidPrefix: ""accessible-megamenu"",                          /* css class used to define the megamenu styling */             menuClass: ""nav-menu"",                          /* css class for a top-level navigation item in the megamenu */             topNavItemClass: ""nav-item"",                          /* css class for a megamenu panel */             panelClass: ""sub-nav"",                          /* css class for a group of items within a megamenu panel */             panelGroupClass: ""sub-nav-group"",                          /* css class for the hover state */             hoverClass: ""hover"",                          /* css class for the focus state */             focusClass: ""focus"",                          /* css class for the open state */             openClass: ""open""         });     </script>     </body>     </html> About A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. Resources Readme License Apache-2.0 License Releases No releases published Packages 0 No packages published Used by 16 + 8 Contributors 7 Languages HTML 71.8% CSS 26.4% JavaScript 1.8% © 2021 GitHub, Inc. Terms Privacy Security Status Docs Contact GitHub Pricing API Training Blog About You can’t perform that action at this time. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."
671863,20210702,github.com,https://github.com/crypto-browserify/crypto-browserify,text/html,text/html,en,"GitHub - crypto-browserify/crypto-browserify: partial implementation of node's `crypto` for the browser Skip to content Sign up Why GitHub? Features → Mobile → Actions → Codespaces → Packages → Security → Code review → Issues → Integrations → GitHub Sponsors → Customer stories→ Team Enterprise Explore Explore GitHub → Learn and contribute Topics → Collections → Trending → Learning Lab → Open source guides → Connect with others The ReadME Project → Events → Community forum → GitHub Education → GitHub Stars program → Marketplace Pricing Plans → Compare plans → Contact Sales → Education → In this repository All GitHub ↵ Jump to ↵ No suggested jump to results In this repository All GitHub ↵ Jump to ↵ In this organization All GitHub ↵ Jump to ↵ In this repository All GitHub ↵ Jump to ↵ Sign in Sign up {{ message }} crypto-browserify / crypto-browserify Notifications Star 482 Fork 157 partial implementation of node's `crypto` for the browser MIT License 482 stars 157 forks Star Notifications Code Issues 20 Pull requests 6 Actions Projects 0 Wiki Security Insights More Code Issues Pull requests Actions Projects Wiki Security Insights master Switch branches/tags Branches Tags Could not load branches Nothing to show {{ refName }} default View all branches Could not load tags Nothing to show {{ refName }} default View all tags 6 branches 31 tags Code Clone HTTPS GitHub CLI Use Git or checkout with SVN using the web URL. Work fast with our official CLI. Learn more. Open with GitHub Desktop Download ZIP Launching GitHub Desktop If nothing happens, download GitHub Desktop and try again. Go back Launching GitHub Desktop If nothing happens, download GitHub Desktop and try again. Go back Launching Xcode If nothing happens, download Xcode and try again. Go back Launching Visual Studio Code Your codespace will open once ready. There was a problem preparing your codespace, please try again. Latest commit calvinmetcalf fix debian issue (maybe) … 460a13b Feb 9, 2018 fix debian issue (maybe) 460a13b Git stats 362 commits Files Permalink Failed to load latest commit information. Type Name Latest commit message Commit time example add standard 5.0.0 Aug 13, 2015 test fix debian issue (maybe) Feb 9, 2018 .gitignore Add .gitignore Aug 5, 2013 .travis.yml saucelabs aparently only goes back to 7 Oct 19, 2017 .zuul.yml add zuul and browser tests Oct 3, 2015 LICENSE Add MIT license Sep 20, 2013 README.md add privateEncrypt/publicDecrypt to README Dec 14, 2015 index.js add rndom fill Oct 18, 2017 package.json 3.12.0 Nov 3, 2017 View code crypto-browserify todo contributions License README.md crypto-browserify A port of node's crypto module to the browser. The goal of this module is to reimplement node's crypto module, in pure javascript so that it can run in the browser. Here is the subset that is currently implemented: createHash (sha1, sha224, sha256, sha384, sha512, md5, rmd160) createHmac (sha1, sha224, sha256, sha384, sha512, md5, rmd160) pbkdf2 pbkdf2Sync randomBytes pseudoRandomBytes createCipher (aes) createDecipher (aes) createDiffieHellman createSign (rsa, ecdsa) createVerify (rsa, ecdsa) createECDH (secp256k1) publicEncrypt/privateDecrypt (rsa) privateEncrypt/publicDecrypt (rsa) todo these features from node's crypto are still unimplemented. createCredentials contributions If you are interested in writing a feature, please implement as a new module, which will be incorporated into crypto-browserify as a dependency. All deps must be compatible with node's crypto (generate example inputs and outputs with node, and save base64 strings inside JSON, so that tests can run in the browser. see sha.js Crypto is extra serious so please do not hesitate to review the code, and post comments if you do. License MIT About partial implementation of node's `crypto` for the browser Resources Readme License MIT License Releases 31 tags Packages 0 No packages published Used by 6.1m + 6,113,061 Contributors 24 + 13 contributors Languages JavaScript 99.1% HTML 0.9% © 2021 GitHub, Inc. Terms Privacy Security Status Docs Contact GitHub Pricing API Training Blog About You can’t perform that action at this time. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."
671866,20210702,github.com,https://github.com/indutny/elliptic/issues,text/html,text/html,en,"Issues · indutny/elliptic · GitHub Skip to content Sign up Why GitHub? Features → Mobile → Actions → Codespaces → Packages → Security → Code review → Issues → Integrations → GitHub Sponsors → Customer stories→ Team Enterprise Explore Explore GitHub → Learn and contribute Topics → Collections → Trending → Learning Lab → Open source guides → Connect with others The ReadME Project → Events → Community forum → GitHub Education → GitHub Stars program → Marketplace Pricing Plans → Compare plans → Contact Sales → Education → In this repository All GitHub ↵ Jump to ↵ No suggested jump to results In this repository All GitHub ↵ Jump to ↵ In this user All GitHub ↵ Jump to ↵ In this repository All GitHub ↵ Jump to ↵ Sign in Sign up {{ message }} indutny / elliptic Notifications Star 1.3k Fork 307 Code Issues 76 Pull requests 21 Actions Projects 0 Wiki Security Insights More Code Issues Pull requests Actions Projects Wiki Security Insights Labels 8 Milestones 0 Labels 8 Milestones 0 New issue Have a question about this project? Sign up for a free GitHub account to open an issue and contact its maintainers and the community. Sign up for GitHub By clicking “Sign up for GitHub”, you agree to our terms of service and privacy statement. We’ll occasionally send you account related emails. Already on GitHub? Sign in to your account 76 Open 97 Closed 76 Open 97 Closed Author Filter by author author: Filter by this user Label Filter by label Use alt + click/return to exclude labels. Projects Filter by project Milestones Filter by milestone Assignee Filter by who’s assigned Sort Sort by Newest Oldest Most commented Least commented Recently updated Least recently updated Most reactions 👍 👎 😄 🎉 😕 ❤️ 🚀 👀 Point multiplication gives different results based on order of operattions #260 opened Jun 16, 2021 by kot-begemot 3 deriving private key from public key #257 opened Apr 27, 2021 by madhav-madhusoodanan How to use keys with crypto.subtle #255 opened Apr 1, 2021 by DominicTobias-b1 EDDSA.decodeInt should fails or reduce by dafault? #254 opened Mar 18, 2021 by mahnunchik Sad state #251 opened Mar 11, 2021 by berkus 1 EDDSA.decodePoint should fails on ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff #250 opened Mar 3, 2021 by mahnunchik 15 Add endian argument to bn.js toString method #249 opened Mar 2, 2021 by mahnunchik EDDSA decodePoint doesn't support Buffer as argument #248 opened Mar 2, 2021 by mahnunchik How to decipher the encrypted message? #245 opened Jan 27, 2021 by istabraq-iot Montgomery Curve25519 is not openssl compatible #243 opened Dec 28, 2020 by jc-lab 4 Curves p384 and p521 produce incorrect results #239 opened Oct 18, 2020 by guidovranken 1 i want to use this library with c# #238 opened Oct 10, 2020 by medozeus Elliptic.js support following curve types: #236 opened Oct 5, 2020 by medozeus The Elliptic package 6.5.2 for Node.js allows ECDSA signature malleability via variations in encoding, leading '\0' bytes, or integer overflows. #235 opened Oct 1, 2020 by bsomeshwer EdDSA: What is a reason to manipulate with bytes? #233 opened Aug 27, 2020 by mahnunchik why use derive method get ECDH key，i got different length #230 opened Jul 10, 2020 by cqupt-yifanwu 4 Why do I generate my local test path in chunk-vendors when packing with NPM #229 opened Jun 22, 2020 by Anthonychen1994 1 TypedArray support ? #228 opened Jun 20, 2020 by dojyorin Is there way to generate PKCS#8 private key from Pem format ECC Private key #225 opened Apr 28, 2020 by sureshreddygovindu Signature validation in python. Prefix configuration? #224 opened Apr 25, 2020 by amrbz is it possible to do assymetric encryption? #223 opened Apr 7, 2020 by maroodb 1 Missing infinity point encoding #218 opened Feb 21, 2020 by catenacyber 1 ECDH P-521 public key point not on curve according to java (clojure) #216 opened Feb 11, 2020 by slhabity 2 how save and load private / publick key in pem or other format #215 opened Jan 27, 2020 by fturiot 2 How to pair client to server BTCPay NodeJS client? #214 opened Jan 21, 2020 by savshit 1 Previous 1 2 3 4 Next Previous Next ProTip! no:milestone will show everything without a milestone. © 2021 GitHub, Inc. Terms Privacy Security Status Docs Contact GitHub Pricing API Training Blog About You can’t perform that action at this time. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."
671869,20210702,github.com,https://github.com/indutny/elliptic,text/html,text/html,en,"GitHub - indutny/elliptic: Fast Elliptic Curve Cryptography in plain javascript Skip to content Sign up Why GitHub? Features → Mobile → Actions → Codespaces → Packages → Security → Code review → Issues → Integrations → GitHub Sponsors → Customer stories→ Team Enterprise Explore Explore GitHub → Learn and contribute Topics → Collections → Trending → Learning Lab → Open source guides → Connect with others The ReadME Project → Events → Community forum → GitHub Education → GitHub Stars program → Marketplace Pricing Plans → Compare plans → Contact Sales → Education → In this repository All GitHub ↵ Jump to ↵ No suggested jump to results In this repository All GitHub ↵ Jump to ↵ In this user All GitHub ↵ Jump to ↵ In this repository All GitHub ↵ Jump to ↵ Sign in Sign up {{ message }} indutny / elliptic Notifications Star 1.3k Fork 307 Fast Elliptic Curve Cryptography in plain javascript 1.3k stars 307 forks Star Notifications Code Issues 76 Pull requests 21 Actions Projects 0 Wiki Security Insights More Code Issues Pull requests Actions Projects Wiki Security Insights master Switch branches/tags Branches Tags Could not load branches Nothing to show {{ refName }} default View all branches Could not load tags Nothing to show {{ refName }} default View all tags 2 branches 85 tags Code Clone HTTPS GitHub CLI Use Git or checkout with SVN using the web URL. Work fast with our official CLI. Learn more. Open with GitHub Desktop Download ZIP Launching GitHub Desktop If nothing happens, download GitHub Desktop and try again. Go back Launching GitHub Desktop If nothing happens, download GitHub Desktop and try again. Go back Launching Xcode If nothing happens, download Xcode and try again. Go back Launching Visual Studio Code Your codespace will open once ready. There was a problem preparing your codespace, please try again. Latest commit indutny 6.5.4 … 43ac7f2 Feb 2, 2021 6.5.4 43ac7f2 Git stats 331 commits Files Permalink Failed to load latest commit information. Type Name Latest commit message Commit time benchmarks dist lib test .codeclimate.yml .eslintignore .eslintrc.js .gitignore .npmignore .travis.yml Gruntfile.js README.md package-lock.json package.json View code Elliptic Incentive Benchmarks API ECDSA EdDSA ECDH Supported curves Implementation details Related projects LICENSE README.md Elliptic Fast elliptic-curve cryptography in a plain javascript implementation. NOTE: Please take a look at http://safecurves.cr.yp.to/ before choosing a curve for your cryptography operations. Incentive ECC is much slower than regular RSA cryptography, the JS implementations are even more slower. Benchmarks $ node benchmarks/index.js Benchmarking: sign elliptic#sign x 262 ops/sec ±0.51% (177 runs sampled) eccjs#sign x 55.91 ops/sec ±0.90% (144 runs sampled) ------------------------ Fastest is elliptic#sign ======================== Benchmarking: verify elliptic#verify x 113 ops/sec ±0.50% (166 runs sampled) eccjs#verify x 48.56 ops/sec ±0.36% (125 runs sampled) ------------------------ Fastest is elliptic#verify ======================== Benchmarking: gen elliptic#gen x 294 ops/sec ±0.43% (176 runs sampled) eccjs#gen x 62.25 ops/sec ±0.63% (129 runs sampled) ------------------------ Fastest is elliptic#gen ======================== Benchmarking: ecdh elliptic#ecdh x 136 ops/sec ±0.85% (156 runs sampled) ------------------------ Fastest is elliptic#ecdh ======================== API ECDSA var EC = require('elliptic').ec; // Create and initialize EC context // (better do it once and reuse it) var ec = new EC('secp256k1'); // Generate keys var key = ec.genKeyPair(); // Sign the message's hash (input must be an array, or a hex-string) var msgHash = [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ]; var signature = key.sign(msgHash); // Export DER encoded signature in Array var derSign = signature.toDER(); // Verify signature console.log(key.verify(msgHash, derSign)); // CHECK WITH NO PRIVATE KEY var pubPoint = key.getPublic(); var x = pubPoint.getX(); var y = pubPoint.getY(); // Public Key MUST be either: // 1) '04' + hex string of x + hex string of y; or // 2) object with two hex string properties (x and y); or // 3) object with two buffer properties (x and y) var pub = pubPoint.encode('hex');                                 // case 1 var pub = { x: x.toString('hex'), y: y.toString('hex') };         // case 2 var pub = { x: x.toBuffer(), y: y.toBuffer() };                   // case 3 var pub = { x: x.toArrayLike(Buffer), y: y.toArrayLike(Buffer) }; // case 3 // Import public key var key = ec.keyFromPublic(pub, 'hex'); // Signature MUST be either: // 1) DER-encoded signature as hex-string; or // 2) DER-encoded signature as buffer; or // 3) object with two hex-string properties (r and s); or // 4) object with two buffer properties (r and s) var signature = '3046022100...'; // case 1 var signature = new Buffer('...'); // case 2 var signature = { r: 'b1fc...', s: '9c42...' }; // case 3 // Verify signature console.log(key.verify(msgHash, signature)); EdDSA var EdDSA = require('elliptic').eddsa; // Create and initialize EdDSA context // (better do it once and reuse it) var ec = new EdDSA('ed25519'); // Create key pair from secret var key = ec.keyFromSecret('693e3c...'); // hex string, array or Buffer // Sign the message's hash (input must be an array, or a hex-string) var msgHash = [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ]; var signature = key.sign(msgHash).toHex(); // Verify signature console.log(key.verify(msgHash, signature)); // CHECK WITH NO PRIVATE KEY // Import public key var pub = '0a1af638...'; var key = ec.keyFromPublic(pub, 'hex'); // Verify signature var signature = '70bed1...'; console.log(key.verify(msgHash, signature)); ECDH var EC = require('elliptic').ec; var ec = new EC('curve25519'); // Generate keys var key1 = ec.genKeyPair(); var key2 = ec.genKeyPair(); var shared1 = key1.derive(key2.getPublic()); var shared2 = key2.derive(key1.getPublic()); console.log('Both shared secrets are BN instances'); console.log(shared1.toString(16)); console.log(shared2.toString(16)); three and more members: var EC = require('elliptic').ec; var ec = new EC('curve25519'); var A = ec.genKeyPair(); var B = ec.genKeyPair(); var C = ec.genKeyPair(); var AB = A.getPublic().mul(B.getPrivate()) var BC = B.getPublic().mul(C.getPrivate()) var CA = C.getPublic().mul(A.getPrivate()) var ABC = AB.mul(C.getPrivate()) var BCA = BC.mul(A.getPrivate()) var CAB = CA.mul(B.getPrivate()) console.log(ABC.getX().toString(16)) console.log(BCA.getX().toString(16)) console.log(CAB.getX().toString(16)) NOTE: .derive() returns a BN instance. Supported curves Elliptic.js support following curve types: Short Weierstrass Montgomery Edwards Twisted Edwards Following curve 'presets' are embedded into the library: secp256k1 p192 p224 p256 p384 p521 curve25519 ed25519 NOTE: That curve25519 could not be used for ECDSA, use ed25519 instead. Implementation details ECDSA is using deterministic k value generation as per RFC6979. Most of the curve operations are performed on non-affine coordinates (either projective or extended), various windowing techniques are used for different cases. All operations are performed in reduction context using bn.js, hashing is provided by hash.js Related projects eccrypto: isomorphic implementation of ECDSA, ECDH and ECIES for both browserify and node (uses elliptic for browser and secp256k1-node for node) LICENSE This software is licensed under the MIT License. Copyright Fedor Indutny, 2014. Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the ""Software""), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. About Fast Elliptic Curve Cryptography in plain javascript Resources Readme Releases 85 tags Packages 0 No packages published Used by 6m + 6,020,695 Contributors 25 + 14 contributors Languages JavaScript 99.3% HTML 0.7% © 2021 GitHub, Inc. Terms Privacy Security Status Docs Contact GitHub Pricing API Training Blog About You can’t perform that action at this time. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."
672431,20210709,github.com,https://github.com/adobe-accessibility/Accessible-Mega-Menu,text/html,text/html,en,"GitHub - adobe-accessibility/Accessible-Mega-Menu: A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. Skip to content Sign up Why GitHub? Features → Mobile → Actions → Codespaces → Packages → Security → Code review → Issues → Integrations → GitHub Sponsors → Customer stories→ Team Enterprise Explore Explore GitHub → Learn and contribute Topics → Collections → Trending → Learning Lab → Open source guides → Connect with others The ReadME Project → Events → Community forum → GitHub Education → GitHub Stars program → Marketplace Pricing Plans → Compare plans → Contact Sales → Education → In this repository All GitHub ↵ Jump to ↵ No suggested jump to results In this repository All GitHub ↵ Jump to ↵ In this organization All GitHub ↵ Jump to ↵ In this repository All GitHub ↵ Jump to ↵ Sign in Sign up {{ message }} adobe-accessibility / Accessible-Mega-Menu Notifications Star 584 Fork 201 A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. Apache-2.0 License 584 stars 201 forks Star Notifications Code Issues 29 Pull requests 6 Actions Projects 0 Wiki Security Insights More Code Issues Pull requests Actions Projects Wiki Security Insights master Switch branches/tags Branches Tags Could not load branches Nothing to show {{ refName }} default View all branches Could not load tags Nothing to show {{ refName }} default View all tags 2 branches 0 tags Code Clone HTTPS GitHub CLI Use Git or checkout with SVN using the web URL. Work fast with our official CLI. Learn more. Open with GitHub Desktop Download ZIP Launching GitHub Desktop If nothing happens, download GitHub Desktop and try again. Go back Launching GitHub Desktop If nothing happens, download GitHub Desktop and try again. Go back Launching Xcode If nothing happens, download Xcode and try again. Go back Launching Visual Studio Code Your codespace will open once ready. There was a problem preparing your codespace, please try again. Latest commit majornista fix evaluation for ChromeVox object … 5c070bc Dec 7, 2020 fix evaluation for ChromeVox object 5c070bc Git stats 39 commits Files Permalink Failed to load latest commit information. Type Name Latest commit message Commit time css Add openOnMouseover setting, and toggleButtonClass for responsive layout May 11, 2018 js fix evaluation for ChromeVox object Dec 7, 2020 third-party/jquery initial commit Aug 26, 2013 LICENSE initial commit Aug 26, 2013 NOTICE initial commit Aug 26, 2013 README.md initial commit Aug 26, 2013 index.html Updating WCAG 2.0 References to WCAG 2.1 (#67) Dec 4, 2020 package.json Updating repo references Jul 8, 2016 View code Accessible Mega Menu Keyboard Accessibility Screen Reader Accessibility Usage HTML JavaScript CSS README.md Accessible Mega Menu ========================= A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. It is modeled after the mega menu on adobe.com but has been simplified for use by others. An brief explanation of our interaction design choices can be found in a blog post at Mega menu accessibility on adobe.com. Content for the links and text within the mega menu comes from the Web Content Accessibility Guidelines (WCAG) 2.0. Keyboard Accessibility The accessible mega menu supports keyboard interaction modeled after the behavior described in the WAI-ARIA Menu or Menu bar (widget) design pattern, however we also try to respect users' general expectations for the behavior of links in a global navigation. To this end, the accessible mega menu implementation permits tab focus on each of the six top-level menu items. When one of the menu items has focus, pressing the Enter key, Spacebar or Down arrow will open the submenu panel, and pressing the Left or Right arrow key will shift focus to the adjacent menu item. Links within the submenu panels are included in the tab order when the panel is open. They can also be navigated with the arrow keys or by typing the first character in the link name, which speeds up keyboard navigation considerably. Pressing the Escape key closes the submenu and restores focus to the parent menu item. Screen Reader Accessibility The accessible mega menu models its use of WAI-ARIA Roles, States, and Properties after those described in the WAI-ARIA Menu or Menu bar (widget) design pattern with some notable exceptions, so that it behaves better with screen reader user expectations for global navigation. We don't use role=""menu"" for the menu container and role=""menuitem"" for each of the links therein, because if we do, assistive technology will no longer interpret the links as links, but instead, as menu items, and the links in our global navigation will no longer show up when a screen reader user executes a shortcut command to bring up a list of links in the page. We also want to maintain the semantic structure of the submenu panels in our mega menu; our links are organized into lists and separated by headings. Omitting role=""menu"" and role=""menuitem"" for the global navigation seems the safer way to go. Usage HTML The HTML structure for the mega menu is a nav element, or any other container element, containing a list. Each list item contains a link which is followed by a div or any other container element which will serve as the pop up panel. The panel can contain any html content; in the following example, each panel contains three lists of links. You can explicitly define groups within the panel, between which a user can navigate quickly using the left and right arrow keys; in the following example, the CSS class .sub-nav-group identifies a navigable group.     <nav>         <ul class=""nav-menu"">             <li class=""nav-item"">                 <a href=""?movie"">Movies</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=0"">Action &amp; Adventure</a></li>                         <li><a href=""?movie&genre=2"">Children &amp; Family</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=7"">Dramas</a></li>                         <li><a href=""?movie&genre=9"">Foreign</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=14"">Musicals</a></li>                         <li><a href=""?movie&genre=15"">Romance</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>             <li class=""nav-item"">                 <a href=""?tv"">TV Shows</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=20"">Classic TV</a></li>                         <li><a href=""?tv&genre=21"">Crime TV</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=27"">Reality TV</a></li>                         <li><a href=""?tv&genre=30"">TV Action</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=33"">TV Dramas</a></li>                         <li><a href=""?tv&genre=34"">TV Horror</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>         </ul>     </nav> By default, accessibleMegaMenu uses the the following CSS classes to define the top-level navigation items, panels, groups within the panels, and the hover, focus, and open states. It also defines a prefix for unique id strings, which are required to indicate the relationship of a top-level navigation item to the panel it controls.     defaults = {         /* unique ID's are required to indicate aria-owns, aria-controls and aria-labelledby */         uuidPrefix: ""accessible-megamenu"",                  /* default css class used to define the megamenu styling */         menuClass: ""accessible-megamenu"",                  /* default css class for a top-level navigation item in the megamenu */         topNavItemClass: ""accessible-megamenu-top-nav-item"",                  /* default css class for a megamenu panel */         panelClass: ""accessible-megamenu-panel"",                  /* default css class for a group of items within a megamenu panel */         panelGroupClass: ""accessible-megamenu-panel-group"",                  /* default css class for the hover state */         hoverClass: ""hover"",                  /* default css class for the focus state */         focusClass: ""focus"",                  /* default css class for the open state */         openClass: ""open""      } You can optionally override the defaults to use the CSS classes you may have already defined for your mega menu. JavaScript Be sure to include jQuery and the jquery-accessibleMegaMenu.js plugin script.     <script src=""//code.jquery.com/jquery-1.10.1.min.js""></script>     <script src=""js/jquery-accessibleMegaMenu.js""></script> The following initializes the first nav element in the document as an accessibleMegaMenu, with optional CSS class overrides.     $(""nav:first"").accessibleMegaMenu({         /* prefix for generated unique id attributes, which are required             to indicate aria-owns, aria-controls and aria-labelledby */         uuidPrefix: ""accessible-megamenu"",                  /* css class used to define the megamenu styling */         menuClass: ""nav-menu"",                  /* css class for a top-level navigation item in the megamenu */         topNavItemClass: ""nav-item"",                  /* css class for a megamenu panel */         panelClass: ""sub-nav"",                  /* css class for a group of items within a megamenu panel */         panelGroupClass: ""sub-nav-group"",                  /* css class for the hover state */         hoverClass: ""hover"",                  /* css class for the focus state */         focusClass: ""focus"",                  /* css class for the open state */         openClass: ""open""     }); CSS AccessibleMegaMenu handles the showing and hiding of panels by adding or removing a CSS class. No inline styles are added to hide elements or create animation between states. Following is some rudimentary CSS for our example which enables the showing/hiding of and the layout of lists panels in the mega menu.     /* mega menu list */     .nav-menu {         display: block;         position: relative;         list-style: none;         margin: 0;         padding: 0;         z-index: 15;     }     /* a top level navigation item in the mega menu */     .nav-item {         list-style: none;         display: inline-block;         padding: 0;         margin: 0;     }     /* first descendant link within a top level navigation item */     .nav-item > a {         position: relative;         display: inline-block;         padding: 0.5em 1em;         margin: 0 0 -1px 0;         border: 1px solid transparent;     }     /* focus/open states of first descendant link within a top level         navigation item */     .nav-item > a:focus,     .nav-item > a.open {         border: 1px solid #dedede;     }     /* open state of first descendant link within a top level         navigation item */     .nav-item > a.open {         background-color: #fff;         border-bottom: none;         z-index: 1;     }     /* sub-navigation panel */     .sub-nav {         position: absolute;         display: none;         top: 2.2em;         margin-top: -1px;         padding: 0.5em 1em;         border: 1px solid #dedede;         background-color: #fff;     }     /* sub-navigation panel open state */     .sub-nav.open {         display: block;     }     /* list of items within sub-navigation panel */     .sub-nav ul {         display: inline-block;         vertical-align: top;         margin: 0 1em 0 0;         padding: 0;     }     /* list item within sub-navigation panel */     .sub-nav li {         display: block;         list-style-type: none;         margin: 0;         padding: 0;     }   Putting it all together, here is the completed example:     <!doctype html>     <html lang=""en"">     <head>     <meta charset=""UTF-8"">     <title>Simple Accessible Mega Menu Example</title>     <style>         /* Rudimentary mega menu CSS for demonstration */             /* mega menu list */         .nav-menu {             display: block;             position: relative;             list-style: none;             margin: 0;             padding: 0;             z-index: 15;         }         /* a top level navigation item in the mega menu */         .nav-item {             list-style: none;             display: inline-block;             padding: 0;             margin: 0;         }         /* first descendant link within a top level navigation item */         .nav-item > a {             position: relative;             display: inline-block;             padding: 0.5em 1em;             margin: 0 0 -1px 0;             border: 1px solid transparent;         }         /* focus/open states of first descendant link within a top level             navigation item */         .nav-item > a:focus,         .nav-item > a.open {             border: 1px solid #dedede;         }         /* open state of first descendant link within a top level             navigation item */         .nav-item > a.open {             background-color: #fff;             border-bottom: none;             z-index: 1;         }         /* sub-navigation panel */         .sub-nav {             position: absolute;             display: none;             top: 2.2em;             margin-top: -1px;             padding: 0.5em 1em;             border: 1px solid #dedede;             background-color: #fff;         }         /* sub-navigation panel open state */         .sub-nav.open {             display: block;         }         /* list of items within sub-navigation panel */         .sub-nav ul {             display: inline-block;             vertical-align: top;             margin: 0 1em 0 0;             padding: 0;         }         /* list item within sub-navigation panel */         .sub-nav li {             display: block;             list-style-type: none;             margin: 0;             padding: 0;         }          </style>     </head>     <body>     <nav>         <ul class=""nav-menu"">             <li class=""nav-item"">                 <a href=""?movie"">Movies</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=0"">Action &amp; Adventure</a></li>                         <li><a href=""?movie&genre=2"">Children &amp; Family</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=7"">Dramas</a></li>                         <li><a href=""?movie&genre=9"">Foreign</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=14"">Musicals</a></li>                         <li><a href=""?movie&genre=15"">Romance</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>             <li class=""nav-item"">                 <a href=""?tv"">TV Shows</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=20"">Classic TV</a></li>                         <li><a href=""?tv&genre=21"">Crime TV</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=27"">Reality TV</a></li>                         <li><a href=""?tv&genre=30"">TV Action</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=33"">TV Dramas</a></li>                         <li><a href=""?tv&genre=34"">TV Horror</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>         </ul>     </nav>          <!-- include jquery -->     <script src=""//code.jquery.com/jquery-1.10.1.min.js""></script>     <!-- include the jquery-accessibleMegaMenu plugin script -->     <script src=""js/jquery-accessibleMegaMenu.js""></script>     <!-- initialize a selector as an accessibleMegaMenu -->     <script>         $(""nav:first"").accessibleMegaMenu({             /* prefix for generated unique id attributes, which are required                 to indicate aria-owns, aria-controls and aria-labelledby */             uuidPrefix: ""accessible-megamenu"",                          /* css class used to define the megamenu styling */             menuClass: ""nav-menu"",                          /* css class for a top-level navigation item in the megamenu */             topNavItemClass: ""nav-item"",                          /* css class for a megamenu panel */             panelClass: ""sub-nav"",                          /* css class for a group of items within a megamenu panel */             panelGroupClass: ""sub-nav-group"",                          /* css class for the hover state */             hoverClass: ""hover"",                          /* css class for the focus state */             focusClass: ""focus"",                          /* css class for the open state */             openClass: ""open""         });     </script>     </body>     </html> About A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. Resources Readme License Apache-2.0 License Releases No releases published Packages 0 No packages published Used by 16 + 8 Contributors 7 Languages HTML 71.8% CSS 26.4% JavaScript 1.8% © 2021 GitHub, Inc. Terms Privacy Security Status Docs Contact GitHub Pricing API Training Blog About You can’t perform that action at this time. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."
677771,20210709,github.com,https://github.com/crypto-browserify/crypto-browserify,text/html,text/html,en,"GitHub - crypto-browserify/crypto-browserify: partial implementation of node's `crypto` for the browser Skip to content Sign up Why GitHub? Features → Mobile → Actions → Codespaces → Packages → Security → Code review → Issues → Integrations → GitHub Sponsors → Customer stories→ Team Enterprise Explore Explore GitHub → Learn and contribute Topics → Collections → Trending → Learning Lab → Open source guides → Connect with others The ReadME Project → Events → Community forum → GitHub Education → GitHub Stars program → Marketplace Pricing Plans → Compare plans → Contact Sales → Education → In this repository All GitHub ↵ Jump to ↵ No suggested jump to results In this repository All GitHub ↵ Jump to ↵ In this organization All GitHub ↵ Jump to ↵ In this repository All GitHub ↵ Jump to ↵ Sign in Sign up {{ message }} crypto-browserify / crypto-browserify Notifications Star 483 Fork 157 partial implementation of node's `crypto` for the browser MIT License 483 stars 157 forks Star Notifications Code Issues 20 Pull requests 6 Actions Projects 0 Wiki Security Insights More Code Issues Pull requests Actions Projects Wiki Security Insights master Switch branches/tags Branches Tags Could not load branches Nothing to show {{ refName }} default View all branches Could not load tags Nothing to show {{ refName }} default View all tags 6 branches 31 tags Code Clone HTTPS GitHub CLI Use Git or checkout with SVN using the web URL. Work fast with our official CLI. Learn more. Open with GitHub Desktop Download ZIP Launching GitHub Desktop If nothing happens, download GitHub Desktop and try again. Go back Launching GitHub Desktop If nothing happens, download GitHub Desktop and try again. Go back Launching Xcode If nothing happens, download Xcode and try again. Go back Launching Visual Studio Code Your codespace will open once ready. There was a problem preparing your codespace, please try again. Latest commit calvinmetcalf fix debian issue (maybe) … 460a13b Feb 9, 2018 fix debian issue (maybe) 460a13b Git stats 362 commits Files Permalink Failed to load latest commit information. Type Name Latest commit message Commit time example test .gitignore .travis.yml .zuul.yml LICENSE README.md index.js package.json View code crypto-browserify todo contributions License README.md crypto-browserify A port of node's crypto module to the browser. The goal of this module is to reimplement node's crypto module, in pure javascript so that it can run in the browser. Here is the subset that is currently implemented: createHash (sha1, sha224, sha256, sha384, sha512, md5, rmd160) createHmac (sha1, sha224, sha256, sha384, sha512, md5, rmd160) pbkdf2 pbkdf2Sync randomBytes pseudoRandomBytes createCipher (aes) createDecipher (aes) createDiffieHellman createSign (rsa, ecdsa) createVerify (rsa, ecdsa) createECDH (secp256k1) publicEncrypt/privateDecrypt (rsa) privateEncrypt/publicDecrypt (rsa) todo these features from node's crypto are still unimplemented. createCredentials contributions If you are interested in writing a feature, please implement as a new module, which will be incorporated into crypto-browserify as a dependency. All deps must be compatible with node's crypto (generate example inputs and outputs with node, and save base64 strings inside JSON, so that tests can run in the browser. see sha.js Crypto is extra serious so please do not hesitate to review the code, and post comments if you do. License MIT About partial implementation of node's `crypto` for the browser Resources Readme License MIT License Releases 31 tags Packages 0 No packages published Used by 6.1m + 6,149,448 Contributors 24 + 13 contributors Languages JavaScript 99.1% HTML 0.9% © 2021 GitHub, Inc. Terms Privacy Security Status Docs Contact GitHub Pricing API Training Blog About You can’t perform that action at this time. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."
677773,20210709,github.com,https://github.com/indutny/elliptic/issues,text/html,text/html,en,"Issues · indutny/elliptic · GitHub Skip to content Sign up Why GitHub? Features → Mobile → Actions → Codespaces → Packages → Security → Code review → Issues → Integrations → GitHub Sponsors → Customer stories→ Team Enterprise Explore Explore GitHub → Learn and contribute Topics → Collections → Trending → Learning Lab → Open source guides → Connect with others The ReadME Project → Events → Community forum → GitHub Education → GitHub Stars program → Marketplace Pricing Plans → Compare plans → Contact Sales → Education → In this repository All GitHub ↵ Jump to ↵ No suggested jump to results In this repository All GitHub ↵ Jump to ↵ In this user All GitHub ↵ Jump to ↵ In this repository All GitHub ↵ Jump to ↵ Sign in Sign up {{ message }} indutny / elliptic Notifications Star 1.3k Fork 307 Code Issues 77 Pull requests 21 Actions Projects 0 Wiki Security Insights More Code Issues Pull requests Actions Projects Wiki Security Insights Labels 8 Milestones 0 Labels 8 Milestones 0 New issue Have a question about this project? Sign up for a free GitHub account to open an issue and contact its maintainers and the community. Sign up for GitHub By clicking “Sign up for GitHub”, you agree to our terms of service and privacy statement. We’ll occasionally send you account related emails. Already on GitHub? Sign in to your account 77 Open 97 Closed 77 Open 97 Closed Author Filter by author author: Filter by this user Label Filter by label Use alt + click/return to exclude labels. Projects Filter by project Milestones Filter by milestone Assignee Filter by who’s assigned Sort Sort by Newest Oldest Most commented Least commented Recently updated Least recently updated Most reactions 👍 👎 😄 🎉 😕 ❤️ 🚀 👀 Invalid hashed data sign with EDDSA #262 opened Jul 6, 2021 by samuel-uniris Point multiplication gives different results based on order of operattions #260 opened Jun 16, 2021 by kot-begemot 3 deriving private key from public key #257 opened Apr 27, 2021 by madhav-madhusoodanan How to use keys with crypto.subtle #255 opened Apr 1, 2021 by DominicTobias-b1 EDDSA.decodeInt should fails or reduce by dafault? #254 opened Mar 18, 2021 by mahnunchik Sad state #251 opened Mar 11, 2021 by berkus 1 EDDSA.decodePoint should fails on ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff #250 opened Mar 3, 2021 by mahnunchik 15 Add endian argument to bn.js toString method #249 opened Mar 2, 2021 by mahnunchik EDDSA decodePoint doesn't support Buffer as argument #248 opened Mar 2, 2021 by mahnunchik How to decipher the encrypted message? #245 opened Jan 27, 2021 by istabraq-iot Montgomery Curve25519 is not openssl compatible #243 opened Dec 28, 2020 by jc-lab 4 Curves p384 and p521 produce incorrect results #239 opened Oct 18, 2020 by guidovranken 1 i want to use this library with c# #238 opened Oct 10, 2020 by medozeus Elliptic.js support following curve types: #236 opened Oct 5, 2020 by medozeus The Elliptic package 6.5.2 for Node.js allows ECDSA signature malleability via variations in encoding, leading '\0' bytes, or integer overflows. #235 opened Oct 1, 2020 by bsomeshwer EdDSA: What is a reason to manipulate with bytes? #233 opened Aug 27, 2020 by mahnunchik why use derive method get ECDH key，i got different length #230 opened Jul 10, 2020 by cqupt-yifanwu 4 Why do I generate my local test path in chunk-vendors when packing with NPM #229 opened Jun 22, 2020 by Anthonychen1994 1 TypedArray support ? #228 opened Jun 20, 2020 by dojyorin Is there way to generate PKCS#8 private key from Pem format ECC Private key #225 opened Apr 28, 2020 by sureshreddygovindu Signature validation in python. Prefix configuration? #224 opened Apr 25, 2020 by amrbz is it possible to do assymetric encryption? #223 opened Apr 7, 2020 by maroodb 1 Missing infinity point encoding #218 opened Feb 21, 2020 by catenacyber 1 ECDH P-521 public key point not on curve according to java (clojure) #216 opened Feb 11, 2020 by slhabity 2 how save and load private / publick key in pem or other format #215 opened Jan 27, 2020 by fturiot 2 Previous 1 2 3 4 Next Previous Next ProTip! Mix and match filters to narrow down what you’re looking for. © 2021 GitHub, Inc. Terms Privacy Security Status Docs Contact GitHub Pricing API Training Blog About You can’t perform that action at this time. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."
677777,20210709,github.com,https://github.com/indutny/elliptic,text/html,text/html,en,"GitHub - indutny/elliptic: Fast Elliptic Curve Cryptography in plain javascript Skip to content Sign up Why GitHub? Features → Mobile → Actions → Codespaces → Packages → Security → Code review → Issues → Integrations → GitHub Sponsors → Customer stories→ Team Enterprise Explore Explore GitHub → Learn and contribute Topics → Collections → Trending → Learning Lab → Open source guides → Connect with others The ReadME Project → Events → Community forum → GitHub Education → GitHub Stars program → Marketplace Pricing Plans → Compare plans → Contact Sales → Education → In this repository All GitHub ↵ Jump to ↵ No suggested jump to results In this repository All GitHub ↵ Jump to ↵ In this user All GitHub ↵ Jump to ↵ In this repository All GitHub ↵ Jump to ↵ Sign in Sign up {{ message }} indutny / elliptic Notifications Star 1.3k Fork 307 Fast Elliptic Curve Cryptography in plain javascript 1.3k stars 307 forks Star Notifications Code Issues 77 Pull requests 21 Actions Projects 0 Wiki Security Insights More Code Issues Pull requests Actions Projects Wiki Security Insights master Switch branches/tags Branches Tags Could not load branches Nothing to show {{ refName }} default View all branches Could not load tags Nothing to show {{ refName }} default View all tags 2 branches 85 tags Code Clone HTTPS GitHub CLI Use Git or checkout with SVN using the web URL. Work fast with our official CLI. Learn more. Open with GitHub Desktop Download ZIP Launching GitHub Desktop If nothing happens, download GitHub Desktop and try again. Go back Launching GitHub Desktop If nothing happens, download GitHub Desktop and try again. Go back Launching Xcode If nothing happens, download Xcode and try again. Go back Launching Visual Studio Code Your codespace will open once ready. There was a problem preparing your codespace, please try again. Latest commit indutny 6.5.4 … 43ac7f2 Feb 2, 2021 6.5.4 43ac7f2 Git stats 331 commits Files Permalink Failed to load latest commit information. Type Name Latest commit message Commit time benchmarks package: remove Makefile and dist Jan 29, 2016 dist 6.5.4 Feb 2, 2021 lib ec: validate that a point before deriving keys Feb 2, 2021 test ec: validate that a point before deriving keys Feb 2, 2021 .codeclimate.yml test: improvements with Saucelabs/Codeclimate Mar 31, 2016 .eslintignore lib: relint using eslint Aug 2, 2020 .eslintrc.js lib: relint using eslint Aug 2, 2020 .gitignore test: improvements with Saucelabs/Codeclimate Mar 31, 2016 .npmignore npmignore: dist May 20, 2016 .travis.yml travis: really move on Jun 26, 2019 Gruntfile.js grunt: fix standalone build May 25, 2016 README.md readme: update example Mar 23, 2017 package-lock.json 6.5.4 Feb 2, 2021 package.json 6.5.4 Feb 2, 2021 View code Elliptic Incentive Benchmarks API ECDSA EdDSA ECDH Supported curves Implementation details Related projects LICENSE README.md Elliptic Fast elliptic-curve cryptography in a plain javascript implementation. NOTE: Please take a look at http://safecurves.cr.yp.to/ before choosing a curve for your cryptography operations. Incentive ECC is much slower than regular RSA cryptography, the JS implementations are even more slower. Benchmarks $ node benchmarks/index.js Benchmarking: sign elliptic#sign x 262 ops/sec ±0.51% (177 runs sampled) eccjs#sign x 55.91 ops/sec ±0.90% (144 runs sampled) ------------------------ Fastest is elliptic#sign ======================== Benchmarking: verify elliptic#verify x 113 ops/sec ±0.50% (166 runs sampled) eccjs#verify x 48.56 ops/sec ±0.36% (125 runs sampled) ------------------------ Fastest is elliptic#verify ======================== Benchmarking: gen elliptic#gen x 294 ops/sec ±0.43% (176 runs sampled) eccjs#gen x 62.25 ops/sec ±0.63% (129 runs sampled) ------------------------ Fastest is elliptic#gen ======================== Benchmarking: ecdh elliptic#ecdh x 136 ops/sec ±0.85% (156 runs sampled) ------------------------ Fastest is elliptic#ecdh ======================== API ECDSA var EC = require('elliptic').ec; // Create and initialize EC context // (better do it once and reuse it) var ec = new EC('secp256k1'); // Generate keys var key = ec.genKeyPair(); // Sign the message's hash (input must be an array, or a hex-string) var msgHash = [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ]; var signature = key.sign(msgHash); // Export DER encoded signature in Array var derSign = signature.toDER(); // Verify signature console.log(key.verify(msgHash, derSign)); // CHECK WITH NO PRIVATE KEY var pubPoint = key.getPublic(); var x = pubPoint.getX(); var y = pubPoint.getY(); // Public Key MUST be either: // 1) '04' + hex string of x + hex string of y; or // 2) object with two hex string properties (x and y); or // 3) object with two buffer properties (x and y) var pub = pubPoint.encode('hex');                                 // case 1 var pub = { x: x.toString('hex'), y: y.toString('hex') };         // case 2 var pub = { x: x.toBuffer(), y: y.toBuffer() };                   // case 3 var pub = { x: x.toArrayLike(Buffer), y: y.toArrayLike(Buffer) }; // case 3 // Import public key var key = ec.keyFromPublic(pub, 'hex'); // Signature MUST be either: // 1) DER-encoded signature as hex-string; or // 2) DER-encoded signature as buffer; or // 3) object with two hex-string properties (r and s); or // 4) object with two buffer properties (r and s) var signature = '3046022100...'; // case 1 var signature = new Buffer('...'); // case 2 var signature = { r: 'b1fc...', s: '9c42...' }; // case 3 // Verify signature console.log(key.verify(msgHash, signature)); EdDSA var EdDSA = require('elliptic').eddsa; // Create and initialize EdDSA context // (better do it once and reuse it) var ec = new EdDSA('ed25519'); // Create key pair from secret var key = ec.keyFromSecret('693e3c...'); // hex string, array or Buffer // Sign the message's hash (input must be an array, or a hex-string) var msgHash = [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ]; var signature = key.sign(msgHash).toHex(); // Verify signature console.log(key.verify(msgHash, signature)); // CHECK WITH NO PRIVATE KEY // Import public key var pub = '0a1af638...'; var key = ec.keyFromPublic(pub, 'hex'); // Verify signature var signature = '70bed1...'; console.log(key.verify(msgHash, signature)); ECDH var EC = require('elliptic').ec; var ec = new EC('curve25519'); // Generate keys var key1 = ec.genKeyPair(); var key2 = ec.genKeyPair(); var shared1 = key1.derive(key2.getPublic()); var shared2 = key2.derive(key1.getPublic()); console.log('Both shared secrets are BN instances'); console.log(shared1.toString(16)); console.log(shared2.toString(16)); three and more members: var EC = require('elliptic').ec; var ec = new EC('curve25519'); var A = ec.genKeyPair(); var B = ec.genKeyPair(); var C = ec.genKeyPair(); var AB = A.getPublic().mul(B.getPrivate()) var BC = B.getPublic().mul(C.getPrivate()) var CA = C.getPublic().mul(A.getPrivate()) var ABC = AB.mul(C.getPrivate()) var BCA = BC.mul(A.getPrivate()) var CAB = CA.mul(B.getPrivate()) console.log(ABC.getX().toString(16)) console.log(BCA.getX().toString(16)) console.log(CAB.getX().toString(16)) NOTE: .derive() returns a BN instance. Supported curves Elliptic.js support following curve types: Short Weierstrass Montgomery Edwards Twisted Edwards Following curve 'presets' are embedded into the library: secp256k1 p192 p224 p256 p384 p521 curve25519 ed25519 NOTE: That curve25519 could not be used for ECDSA, use ed25519 instead. Implementation details ECDSA is using deterministic k value generation as per RFC6979. Most of the curve operations are performed on non-affine coordinates (either projective or extended), various windowing techniques are used for different cases. All operations are performed in reduction context using bn.js, hashing is provided by hash.js Related projects eccrypto: isomorphic implementation of ECDSA, ECDH and ECIES for both browserify and node (uses elliptic for browser and secp256k1-node for node) LICENSE This software is licensed under the MIT License. Copyright Fedor Indutny, 2014. Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the ""Software""), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. About Fast Elliptic Curve Cryptography in plain javascript Resources Readme Releases 85 tags Packages 0 No packages published Used by 6.1m + 6,062,664 Contributors 25 + 14 contributors Languages JavaScript 99.3% HTML 0.7% © 2021 GitHub, Inc. Terms Privacy Security Status Docs Contact GitHub Pricing API Training Blog About You can’t perform that action at this time. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."
678378,20210716,github.com,https://github.com/adobe-accessibility/Accessible-Mega-Menu,text/html,text/html,en,"GitHub - adobe-accessibility/Accessible-Mega-Menu: A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. Skip to content Sign up Why GitHub? Features → Mobile → Actions → Codespaces → Packages → Security → Code review → Issues → Integrations → GitHub Sponsors → Customer stories→ Team Enterprise Explore Explore GitHub → Learn and contribute Topics → Collections → Trending → Learning Lab → Open source guides → Connect with others The ReadME Project → Events → Community forum → GitHub Education → GitHub Stars program → Marketplace Pricing Plans → Compare plans → Contact Sales → Education → In this repository All GitHub ↵ Jump to ↵ No suggested jump to results In this repository All GitHub ↵ Jump to ↵ In this organization All GitHub ↵ Jump to ↵ In this repository All GitHub ↵ Jump to ↵ Sign in Sign up {{ message }} adobe-accessibility / Accessible-Mega-Menu Notifications Star 584 Fork 201 A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. Apache-2.0 License 584 stars 201 forks Star Notifications Code Issues 30 Pull requests 6 Actions Projects 0 Wiki Security Insights More Code Issues Pull requests Actions Projects Wiki Security Insights master Switch branches/tags Branches Tags Could not load branches Nothing to show {{ refName }} default View all branches Could not load tags Nothing to show {{ refName }} default View all tags 2 branches 0 tags Code Clone HTTPS GitHub CLI Use Git or checkout with SVN using the web URL. Work fast with our official CLI. Learn more. Open with GitHub Desktop Download ZIP Launching GitHub Desktop If nothing happens, download GitHub Desktop and try again. Go back Launching GitHub Desktop If nothing happens, download GitHub Desktop and try again. Go back Launching Xcode If nothing happens, download Xcode and try again. Go back Launching Visual Studio Code Your codespace will open once ready. There was a problem preparing your codespace, please try again. Latest commit Git stats 39 commits Files Permalink Failed to load latest commit information. Type Name Latest commit message Commit time css Add openOnMouseover setting, and toggleButtonClass for responsive layout May 11, 2018 js fix evaluation for ChromeVox object Dec 7, 2020 third-party/jquery initial commit Aug 26, 2013 LICENSE initial commit Aug 26, 2013 NOTICE initial commit Aug 26, 2013 README.md initial commit Aug 26, 2013 index.html Updating WCAG 2.0 References to WCAG 2.1 (#67) Dec 4, 2020 package.json Updating repo references Jul 8, 2016 View code Accessible Mega Menu Keyboard Accessibility Screen Reader Accessibility Usage HTML JavaScript CSS README.md Accessible Mega Menu ========================= A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. It is modeled after the mega menu on adobe.com but has been simplified for use by others. An brief explanation of our interaction design choices can be found in a blog post at Mega menu accessibility on adobe.com. Content for the links and text within the mega menu comes from the Web Content Accessibility Guidelines (WCAG) 2.0. Keyboard Accessibility The accessible mega menu supports keyboard interaction modeled after the behavior described in the WAI-ARIA Menu or Menu bar (widget) design pattern, however we also try to respect users' general expectations for the behavior of links in a global navigation. To this end, the accessible mega menu implementation permits tab focus on each of the six top-level menu items. When one of the menu items has focus, pressing the Enter key, Spacebar or Down arrow will open the submenu panel, and pressing the Left or Right arrow key will shift focus to the adjacent menu item. Links within the submenu panels are included in the tab order when the panel is open. They can also be navigated with the arrow keys or by typing the first character in the link name, which speeds up keyboard navigation considerably. Pressing the Escape key closes the submenu and restores focus to the parent menu item. Screen Reader Accessibility The accessible mega menu models its use of WAI-ARIA Roles, States, and Properties after those described in the WAI-ARIA Menu or Menu bar (widget) design pattern with some notable exceptions, so that it behaves better with screen reader user expectations for global navigation. We don't use role=""menu"" for the menu container and role=""menuitem"" for each of the links therein, because if we do, assistive technology will no longer interpret the links as links, but instead, as menu items, and the links in our global navigation will no longer show up when a screen reader user executes a shortcut command to bring up a list of links in the page. We also want to maintain the semantic structure of the submenu panels in our mega menu; our links are organized into lists and separated by headings. Omitting role=""menu"" and role=""menuitem"" for the global navigation seems the safer way to go. Usage HTML The HTML structure for the mega menu is a nav element, or any other container element, containing a list. Each list item contains a link which is followed by a div or any other container element which will serve as the pop up panel. The panel can contain any html content; in the following example, each panel contains three lists of links. You can explicitly define groups within the panel, between which a user can navigate quickly using the left and right arrow keys; in the following example, the CSS class .sub-nav-group identifies a navigable group.     <nav>         <ul class=""nav-menu"">             <li class=""nav-item"">                 <a href=""?movie"">Movies</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=0"">Action &amp; Adventure</a></li>                         <li><a href=""?movie&genre=2"">Children &amp; Family</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=7"">Dramas</a></li>                         <li><a href=""?movie&genre=9"">Foreign</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=14"">Musicals</a></li>                         <li><a href=""?movie&genre=15"">Romance</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>             <li class=""nav-item"">                 <a href=""?tv"">TV Shows</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=20"">Classic TV</a></li>                         <li><a href=""?tv&genre=21"">Crime TV</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=27"">Reality TV</a></li>                         <li><a href=""?tv&genre=30"">TV Action</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=33"">TV Dramas</a></li>                         <li><a href=""?tv&genre=34"">TV Horror</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>         </ul>     </nav> By default, accessibleMegaMenu uses the the following CSS classes to define the top-level navigation items, panels, groups within the panels, and the hover, focus, and open states. It also defines a prefix for unique id strings, which are required to indicate the relationship of a top-level navigation item to the panel it controls.     defaults = {         /* unique ID's are required to indicate aria-owns, aria-controls and aria-labelledby */         uuidPrefix: ""accessible-megamenu"",                  /* default css class used to define the megamenu styling */         menuClass: ""accessible-megamenu"",                  /* default css class for a top-level navigation item in the megamenu */         topNavItemClass: ""accessible-megamenu-top-nav-item"",                  /* default css class for a megamenu panel */         panelClass: ""accessible-megamenu-panel"",                  /* default css class for a group of items within a megamenu panel */         panelGroupClass: ""accessible-megamenu-panel-group"",                  /* default css class for the hover state */         hoverClass: ""hover"",                  /* default css class for the focus state */         focusClass: ""focus"",                  /* default css class for the open state */         openClass: ""open""      } You can optionally override the defaults to use the CSS classes you may have already defined for your mega menu. JavaScript Be sure to include jQuery and the jquery-accessibleMegaMenu.js plugin script.     <script src=""//code.jquery.com/jquery-1.10.1.min.js""></script>     <script src=""js/jquery-accessibleMegaMenu.js""></script> The following initializes the first nav element in the document as an accessibleMegaMenu, with optional CSS class overrides.     $(""nav:first"").accessibleMegaMenu({         /* prefix for generated unique id attributes, which are required             to indicate aria-owns, aria-controls and aria-labelledby */         uuidPrefix: ""accessible-megamenu"",                  /* css class used to define the megamenu styling */         menuClass: ""nav-menu"",                  /* css class for a top-level navigation item in the megamenu */         topNavItemClass: ""nav-item"",                  /* css class for a megamenu panel */         panelClass: ""sub-nav"",                  /* css class for a group of items within a megamenu panel */         panelGroupClass: ""sub-nav-group"",                  /* css class for the hover state */         hoverClass: ""hover"",                  /* css class for the focus state */         focusClass: ""focus"",                  /* css class for the open state */         openClass: ""open""     }); CSS AccessibleMegaMenu handles the showing and hiding of panels by adding or removing a CSS class. No inline styles are added to hide elements or create animation between states. Following is some rudimentary CSS for our example which enables the showing/hiding of and the layout of lists panels in the mega menu.     /* mega menu list */     .nav-menu {         display: block;         position: relative;         list-style: none;         margin: 0;         padding: 0;         z-index: 15;     }     /* a top level navigation item in the mega menu */     .nav-item {         list-style: none;         display: inline-block;         padding: 0;         margin: 0;     }     /* first descendant link within a top level navigation item */     .nav-item > a {         position: relative;         display: inline-block;         padding: 0.5em 1em;         margin: 0 0 -1px 0;         border: 1px solid transparent;     }     /* focus/open states of first descendant link within a top level         navigation item */     .nav-item > a:focus,     .nav-item > a.open {         border: 1px solid #dedede;     }     /* open state of first descendant link within a top level         navigation item */     .nav-item > a.open {         background-color: #fff;         border-bottom: none;         z-index: 1;     }     /* sub-navigation panel */     .sub-nav {         position: absolute;         display: none;         top: 2.2em;         margin-top: -1px;         padding: 0.5em 1em;         border: 1px solid #dedede;         background-color: #fff;     }     /* sub-navigation panel open state */     .sub-nav.open {         display: block;     }     /* list of items within sub-navigation panel */     .sub-nav ul {         display: inline-block;         vertical-align: top;         margin: 0 1em 0 0;         padding: 0;     }     /* list item within sub-navigation panel */     .sub-nav li {         display: block;         list-style-type: none;         margin: 0;         padding: 0;     }   Putting it all together, here is the completed example:     <!doctype html>     <html lang=""en"">     <head>     <meta charset=""UTF-8"">     <title>Simple Accessible Mega Menu Example</title>     <style>         /* Rudimentary mega menu CSS for demonstration */             /* mega menu list */         .nav-menu {             display: block;             position: relative;             list-style: none;             margin: 0;             padding: 0;             z-index: 15;         }         /* a top level navigation item in the mega menu */         .nav-item {             list-style: none;             display: inline-block;             padding: 0;             margin: 0;         }         /* first descendant link within a top level navigation item */         .nav-item > a {             position: relative;             display: inline-block;             padding: 0.5em 1em;             margin: 0 0 -1px 0;             border: 1px solid transparent;         }         /* focus/open states of first descendant link within a top level             navigation item */         .nav-item > a:focus,         .nav-item > a.open {             border: 1px solid #dedede;         }         /* open state of first descendant link within a top level             navigation item */         .nav-item > a.open {             background-color: #fff;             border-bottom: none;             z-index: 1;         }         /* sub-navigation panel */         .sub-nav {             position: absolute;             display: none;             top: 2.2em;             margin-top: -1px;             padding: 0.5em 1em;             border: 1px solid #dedede;             background-color: #fff;         }         /* sub-navigation panel open state */         .sub-nav.open {             display: block;         }         /* list of items within sub-navigation panel */         .sub-nav ul {             display: inline-block;             vertical-align: top;             margin: 0 1em 0 0;             padding: 0;         }         /* list item within sub-navigation panel */         .sub-nav li {             display: block;             list-style-type: none;             margin: 0;             padding: 0;         }          </style>     </head>     <body>     <nav>         <ul class=""nav-menu"">             <li class=""nav-item"">                 <a href=""?movie"">Movies</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=0"">Action &amp; Adventure</a></li>                         <li><a href=""?movie&genre=2"">Children &amp; Family</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=7"">Dramas</a></li>                         <li><a href=""?movie&genre=9"">Foreign</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=14"">Musicals</a></li>                         <li><a href=""?movie&genre=15"">Romance</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>             <li class=""nav-item"">                 <a href=""?tv"">TV Shows</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=20"">Classic TV</a></li>                         <li><a href=""?tv&genre=21"">Crime TV</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=27"">Reality TV</a></li>                         <li><a href=""?tv&genre=30"">TV Action</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=33"">TV Dramas</a></li>                         <li><a href=""?tv&genre=34"">TV Horror</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>         </ul>     </nav>          <!-- include jquery -->     <script src=""//code.jquery.com/jquery-1.10.1.min.js""></script>     <!-- include the jquery-accessibleMegaMenu plugin script -->     <script src=""js/jquery-accessibleMegaMenu.js""></script>     <!-- initialize a selector as an accessibleMegaMenu -->     <script>         $(""nav:first"").accessibleMegaMenu({             /* prefix for generated unique id attributes, which are required                 to indicate aria-owns, aria-controls and aria-labelledby */             uuidPrefix: ""accessible-megamenu"",                          /* css class used to define the megamenu styling */             menuClass: ""nav-menu"",                          /* css class for a top-level navigation item in the megamenu */             topNavItemClass: ""nav-item"",                          /* css class for a megamenu panel */             panelClass: ""sub-nav"",                          /* css class for a group of items within a megamenu panel */             panelGroupClass: ""sub-nav-group"",                          /* css class for the hover state */             hoverClass: ""hover"",                          /* css class for the focus state */             focusClass: ""focus"",                          /* css class for the open state */             openClass: ""open""         });     </script>     </body>     </html> About A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. Resources Readme License Apache-2.0 License Releases No releases published Packages 0 No packages published Contributors 7 Languages HTML 71.8% CSS 26.4% JavaScript 1.8% © 2021 GitHub, Inc. Terms Privacy Security Status Docs Contact GitHub Pricing API Training Blog About You can’t perform that action at this time. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."
683782,20210716,github.com,https://github.com/crypto-browserify/crypto-browserify,text/html,text/html,en,"GitHub - crypto-browserify/crypto-browserify: partial implementation of node's `crypto` for the browser Skip to content Sign up Why GitHub? Features → Mobile → Actions → Codespaces → Packages → Security → Code review → Issues → Integrations → GitHub Sponsors → Customer stories→ Team Enterprise Explore Explore GitHub → Learn and contribute Topics → Collections → Trending → Learning Lab → Open source guides → Connect with others The ReadME Project → Events → Community forum → GitHub Education → GitHub Stars program → Marketplace Pricing Plans → Compare plans → Contact Sales → Education → In this repository All GitHub ↵ Jump to ↵ No suggested jump to results In this repository All GitHub ↵ Jump to ↵ In this organization All GitHub ↵ Jump to ↵ In this repository All GitHub ↵ Jump to ↵ Sign in Sign up {{ message }} crypto-browserify / crypto-browserify Notifications Star 482 Fork 157 partial implementation of node's `crypto` for the browser MIT License 482 stars 157 forks Star Notifications Code Issues 21 Pull requests 6 Actions Projects 0 Wiki Security Insights More Code Issues Pull requests Actions Projects Wiki Security Insights master Switch branches/tags Branches Tags Could not load branches Nothing to show {{ refName }} default View all branches Could not load tags Nothing to show {{ refName }} default View all tags 6 branches 31 tags Code Clone HTTPS GitHub CLI Use Git or checkout with SVN using the web URL. Work fast with our official CLI. Learn more. Open with GitHub Desktop Download ZIP Launching GitHub Desktop If nothing happens, download GitHub Desktop and try again. Go back Launching GitHub Desktop If nothing happens, download GitHub Desktop and try again. Go back Launching Xcode If nothing happens, download Xcode and try again. Go back Launching Visual Studio Code Your codespace will open once ready. There was a problem preparing your codespace, please try again. Latest commit Git stats 362 commits Files Permalink Failed to load latest commit information. Type Name Latest commit message Commit time example add standard 5.0.0 Aug 13, 2015 test fix debian issue (maybe) Feb 9, 2018 .gitignore Add .gitignore Aug 5, 2013 .travis.yml saucelabs aparently only goes back to 7 Oct 19, 2017 .zuul.yml add zuul and browser tests Oct 3, 2015 LICENSE Add MIT license Sep 20, 2013 README.md add privateEncrypt/publicDecrypt to README Dec 14, 2015 index.js add rndom fill Oct 18, 2017 package.json 3.12.0 Nov 3, 2017 View code crypto-browserify todo contributions License README.md crypto-browserify A port of node's crypto module to the browser. The goal of this module is to reimplement node's crypto module, in pure javascript so that it can run in the browser. Here is the subset that is currently implemented: createHash (sha1, sha224, sha256, sha384, sha512, md5, rmd160) createHmac (sha1, sha224, sha256, sha384, sha512, md5, rmd160) pbkdf2 pbkdf2Sync randomBytes pseudoRandomBytes createCipher (aes) createDecipher (aes) createDiffieHellman createSign (rsa, ecdsa) createVerify (rsa, ecdsa) createECDH (secp256k1) publicEncrypt/privateDecrypt (rsa) privateEncrypt/publicDecrypt (rsa) todo these features from node's crypto are still unimplemented. createCredentials contributions If you are interested in writing a feature, please implement as a new module, which will be incorporated into crypto-browserify as a dependency. All deps must be compatible with node's crypto (generate example inputs and outputs with node, and save base64 strings inside JSON, so that tests can run in the browser. see sha.js Crypto is extra serious so please do not hesitate to review the code, and post comments if you do. License MIT About partial implementation of node's `crypto` for the browser Resources Readme License MIT License Releases 31 tags Packages 0 No packages published Used by 6.2m + 6,183,820 Contributors 24 + 13 contributors Languages JavaScript 99.1% HTML 0.9% © 2021 GitHub, Inc. Terms Privacy Security Status Docs Contact GitHub Pricing API Training Blog About You can’t perform that action at this time. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."
683788,20210716,github.com,https://github.com/indutny/elliptic/issues,text/html,text/html,en,"Issues · indutny/elliptic · GitHub Skip to content Sign up Why GitHub? Features → Mobile → Actions → Codespaces → Packages → Security → Code review → Issues → Integrations → GitHub Sponsors → Customer stories→ Team Enterprise Explore Explore GitHub → Learn and contribute Topics → Collections → Trending → Learning Lab → Open source guides → Connect with others The ReadME Project → Events → Community forum → GitHub Education → GitHub Stars program → Marketplace Pricing Plans → Compare plans → Contact Sales → Education → In this repository All GitHub ↵ Jump to ↵ No suggested jump to results In this repository All GitHub ↵ Jump to ↵ In this user All GitHub ↵ Jump to ↵ In this repository All GitHub ↵ Jump to ↵ Sign in Sign up {{ message }} indutny / elliptic Notifications Star 1.3k Fork 308 Code Issues 77 Pull requests 21 Actions Projects 0 Wiki Security Insights More Code Issues Pull requests Actions Projects Wiki Security Insights Labels 8 Milestones 0 Labels 8 Milestones 0 New issue Have a question about this project? Sign up for a free GitHub account to open an issue and contact its maintainers and the community. Sign up for GitHub By clicking “Sign up for GitHub”, you agree to our terms of service and privacy statement. We’ll occasionally send you account related emails. Already on GitHub? Sign in to your account 77 Open 97 Closed 77 Open 97 Closed Author Filter by author author: Filter by this user Label Filter by label Use alt + click/return to exclude labels. Projects Filter by project Milestones Filter by milestone Assignee Filter by who’s assigned Sort Sort by Newest Oldest Most commented Least commented Recently updated Least recently updated Most reactions 👍 👎 😄 🎉 😕 ❤️ 🚀 👀 Invalid hashed data sign with EDDSA #262 opened Jul 6, 2021 by samuel-uniris Point multiplication gives different results based on order of operattions #260 opened Jun 16, 2021 by kot-begemot 3 deriving private key from public key #257 opened Apr 27, 2021 by madhav-madhusoodanan How to use keys with crypto.subtle #255 opened Apr 1, 2021 by DominicTobias-b1 EDDSA.decodeInt should fails or reduce by dafault? #254 opened Mar 18, 2021 by mahnunchik Sad state #251 opened Mar 11, 2021 by berkus 1 EDDSA.decodePoint should fails on ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff #250 opened Mar 3, 2021 by mahnunchik 15 Add endian argument to bn.js toString method #249 opened Mar 2, 2021 by mahnunchik EDDSA decodePoint doesn't support Buffer as argument #248 opened Mar 2, 2021 by mahnunchik How to decipher the encrypted message? #245 opened Jan 27, 2021 by istabraq-iot Montgomery Curve25519 is not openssl compatible #243 opened Dec 28, 2020 by jc-lab 4 Curves p384 and p521 produce incorrect results #239 opened Oct 18, 2020 by guidovranken 1 i want to use this library with c# #238 opened Oct 10, 2020 by medozeus Elliptic.js support following curve types: #236 opened Oct 5, 2020 by medozeus The Elliptic package 6.5.2 for Node.js allows ECDSA signature malleability via variations in encoding, leading '\0' bytes, or integer overflows. #235 opened Oct 1, 2020 by bsomeshwer EdDSA: What is a reason to manipulate with bytes? #233 opened Aug 27, 2020 by mahnunchik why use derive method get ECDH key，i got different length #230 opened Jul 10, 2020 by cqupt-yifanwu 4 Why do I generate my local test path in chunk-vendors when packing with NPM #229 opened Jun 22, 2020 by Anthonychen1994 1 TypedArray support ? #228 opened Jun 20, 2020 by dojyorin Is there way to generate PKCS#8 private key from Pem format ECC Private key #225 opened Apr 28, 2020 by sureshreddygovindu Signature validation in python. Prefix configuration? #224 opened Apr 25, 2020 by amrbz is it possible to do assymetric encryption? #223 opened Apr 7, 2020 by maroodb 1 Missing infinity point encoding #218 opened Feb 21, 2020 by catenacyber 1 ECDH P-521 public key point not on curve according to java (clojure) #216 opened Feb 11, 2020 by slhabity 2 how save and load private / publick key in pem or other format #215 opened Jan 27, 2020 by fturiot 2 Previous 1 2 3 4 Next Previous Next ProTip! Type g p on any issue or pull request to go back to the pull request listing page. © 2021 GitHub, Inc. Terms Privacy Security Status Docs Contact GitHub Pricing API Training Blog About You can’t perform that action at this time. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."
683794,20210716,github.com,https://github.com/indutny/elliptic,text/html,text/html,en,"GitHub - indutny/elliptic: Fast Elliptic Curve Cryptography in plain javascript Skip to content Sign up Why GitHub? Features → Mobile → Actions → Codespaces → Packages → Security → Code review → Issues → Integrations → GitHub Sponsors → Customer stories→ Team Enterprise Explore Explore GitHub → Learn and contribute Topics → Collections → Trending → Learning Lab → Open source guides → Connect with others The ReadME Project → Events → Community forum → GitHub Education → GitHub Stars program → Marketplace Pricing Plans → Compare plans → Contact Sales → Education → In this repository All GitHub ↵ Jump to ↵ No suggested jump to results In this repository All GitHub ↵ Jump to ↵ In this user All GitHub ↵ Jump to ↵ In this repository All GitHub ↵ Jump to ↵ Sign in Sign up {{ message }} indutny / elliptic Notifications Star 1.3k Fork 308 Fast Elliptic Curve Cryptography in plain javascript 1.3k stars 308 forks Star Notifications Code Issues 77 Pull requests 21 Actions Projects 0 Wiki Security Insights More Code Issues Pull requests Actions Projects Wiki Security Insights master Switch branches/tags Branches Tags Could not load branches Nothing to show {{ refName }} default View all branches Could not load tags Nothing to show {{ refName }} default View all tags 2 branches 85 tags Code Clone HTTPS GitHub CLI Use Git or checkout with SVN using the web URL. Work fast with our official CLI. Learn more. Open with GitHub Desktop Download ZIP Launching GitHub Desktop If nothing happens, download GitHub Desktop and try again. Go back Launching GitHub Desktop If nothing happens, download GitHub Desktop and try again. Go back Launching Xcode If nothing happens, download Xcode and try again. Go back Launching Visual Studio Code Your codespace will open once ready. There was a problem preparing your codespace, please try again. Latest commit indutny 6.5.4 … 43ac7f2 Feb 2, 2021 6.5.4 43ac7f2 Git stats 331 commits Files Permalink Failed to load latest commit information. Type Name Latest commit message Commit time benchmarks package: remove Makefile and dist Jan 29, 2016 dist 6.5.4 Feb 2, 2021 lib ec: validate that a point before deriving keys Feb 2, 2021 test ec: validate that a point before deriving keys Feb 2, 2021 .codeclimate.yml test: improvements with Saucelabs/Codeclimate Mar 31, 2016 .eslintignore lib: relint using eslint Aug 2, 2020 .eslintrc.js lib: relint using eslint Aug 2, 2020 .gitignore test: improvements with Saucelabs/Codeclimate Mar 31, 2016 .npmignore npmignore: dist May 20, 2016 .travis.yml travis: really move on Jun 26, 2019 Gruntfile.js grunt: fix standalone build May 25, 2016 README.md readme: update example Mar 23, 2017 package-lock.json 6.5.4 Feb 2, 2021 package.json 6.5.4 Feb 2, 2021 View code Elliptic Incentive Benchmarks API ECDSA EdDSA ECDH Supported curves Implementation details Related projects LICENSE README.md Elliptic Fast elliptic-curve cryptography in a plain javascript implementation. NOTE: Please take a look at http://safecurves.cr.yp.to/ before choosing a curve for your cryptography operations. Incentive ECC is much slower than regular RSA cryptography, the JS implementations are even more slower. Benchmarks $ node benchmarks/index.js Benchmarking: sign elliptic#sign x 262 ops/sec ±0.51% (177 runs sampled) eccjs#sign x 55.91 ops/sec ±0.90% (144 runs sampled) ------------------------ Fastest is elliptic#sign ======================== Benchmarking: verify elliptic#verify x 113 ops/sec ±0.50% (166 runs sampled) eccjs#verify x 48.56 ops/sec ±0.36% (125 runs sampled) ------------------------ Fastest is elliptic#verify ======================== Benchmarking: gen elliptic#gen x 294 ops/sec ±0.43% (176 runs sampled) eccjs#gen x 62.25 ops/sec ±0.63% (129 runs sampled) ------------------------ Fastest is elliptic#gen ======================== Benchmarking: ecdh elliptic#ecdh x 136 ops/sec ±0.85% (156 runs sampled) ------------------------ Fastest is elliptic#ecdh ======================== API ECDSA var EC = require('elliptic').ec; // Create and initialize EC context // (better do it once and reuse it) var ec = new EC('secp256k1'); // Generate keys var key = ec.genKeyPair(); // Sign the message's hash (input must be an array, or a hex-string) var msgHash = [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ]; var signature = key.sign(msgHash); // Export DER encoded signature in Array var derSign = signature.toDER(); // Verify signature console.log(key.verify(msgHash, derSign)); // CHECK WITH NO PRIVATE KEY var pubPoint = key.getPublic(); var x = pubPoint.getX(); var y = pubPoint.getY(); // Public Key MUST be either: // 1) '04' + hex string of x + hex string of y; or // 2) object with two hex string properties (x and y); or // 3) object with two buffer properties (x and y) var pub = pubPoint.encode('hex');                                 // case 1 var pub = { x: x.toString('hex'), y: y.toString('hex') };         // case 2 var pub = { x: x.toBuffer(), y: y.toBuffer() };                   // case 3 var pub = { x: x.toArrayLike(Buffer), y: y.toArrayLike(Buffer) }; // case 3 // Import public key var key = ec.keyFromPublic(pub, 'hex'); // Signature MUST be either: // 1) DER-encoded signature as hex-string; or // 2) DER-encoded signature as buffer; or // 3) object with two hex-string properties (r and s); or // 4) object with two buffer properties (r and s) var signature = '3046022100...'; // case 1 var signature = new Buffer('...'); // case 2 var signature = { r: 'b1fc...', s: '9c42...' }; // case 3 // Verify signature console.log(key.verify(msgHash, signature)); EdDSA var EdDSA = require('elliptic').eddsa; // Create and initialize EdDSA context // (better do it once and reuse it) var ec = new EdDSA('ed25519'); // Create key pair from secret var key = ec.keyFromSecret('693e3c...'); // hex string, array or Buffer // Sign the message's hash (input must be an array, or a hex-string) var msgHash = [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ]; var signature = key.sign(msgHash).toHex(); // Verify signature console.log(key.verify(msgHash, signature)); // CHECK WITH NO PRIVATE KEY // Import public key var pub = '0a1af638...'; var key = ec.keyFromPublic(pub, 'hex'); // Verify signature var signature = '70bed1...'; console.log(key.verify(msgHash, signature)); ECDH var EC = require('elliptic').ec; var ec = new EC('curve25519'); // Generate keys var key1 = ec.genKeyPair(); var key2 = ec.genKeyPair(); var shared1 = key1.derive(key2.getPublic()); var shared2 = key2.derive(key1.getPublic()); console.log('Both shared secrets are BN instances'); console.log(shared1.toString(16)); console.log(shared2.toString(16)); three and more members: var EC = require('elliptic').ec; var ec = new EC('curve25519'); var A = ec.genKeyPair(); var B = ec.genKeyPair(); var C = ec.genKeyPair(); var AB = A.getPublic().mul(B.getPrivate()) var BC = B.getPublic().mul(C.getPrivate()) var CA = C.getPublic().mul(A.getPrivate()) var ABC = AB.mul(C.getPrivate()) var BCA = BC.mul(A.getPrivate()) var CAB = CA.mul(B.getPrivate()) console.log(ABC.getX().toString(16)) console.log(BCA.getX().toString(16)) console.log(CAB.getX().toString(16)) NOTE: .derive() returns a BN instance. Supported curves Elliptic.js support following curve types: Short Weierstrass Montgomery Edwards Twisted Edwards Following curve 'presets' are embedded into the library: secp256k1 p192 p224 p256 p384 p521 curve25519 ed25519 NOTE: That curve25519 could not be used for ECDSA, use ed25519 instead. Implementation details ECDSA is using deterministic k value generation as per RFC6979. Most of the curve operations are performed on non-affine coordinates (either projective or extended), various windowing techniques are used for different cases. All operations are performed in reduction context using bn.js, hashing is provided by hash.js Related projects eccrypto: isomorphic implementation of ECDSA, ECDH and ECIES for both browserify and node (uses elliptic for browser and secp256k1-node for node) LICENSE This software is licensed under the MIT License. Copyright Fedor Indutny, 2014. Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the ""Software""), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. About Fast Elliptic Curve Cryptography in plain javascript Resources Readme Releases 85 tags Packages 0 No packages published Contributors 25 + 14 contributors Languages JavaScript 99.3% HTML 0.7% © 2021 GitHub, Inc. Terms Privacy Security Status Docs Contact GitHub Pricing API Training Blog About You can’t perform that action at this time. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."
684351,20210723,github.com,https://github.com/adobe-accessibility/Accessible-Mega-Menu,text/html,text/html,en,"GitHub - adobe-accessibility/Accessible-Mega-Menu: A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. Skip to content Sign up Why GitHub? Features → Mobile → Actions → Codespaces → Packages → Security → Code review → Issues → Integrations → GitHub Sponsors → Customer stories→ Team Enterprise Explore Explore GitHub → Learn and contribute Topics → Collections → Trending → Learning Lab → Open source guides → Connect with others The ReadME Project → Events → Community forum → GitHub Education → GitHub Stars program → Marketplace Pricing Plans → Compare plans → Contact Sales → Education → In this repository All GitHub ↵ Jump to ↵ No suggested jump to results In this repository All GitHub ↵ Jump to ↵ In this organization All GitHub ↵ Jump to ↵ In this repository All GitHub ↵ Jump to ↵ Sign in Sign up {{ message }} adobe-accessibility / Accessible-Mega-Menu Notifications Star 584 Fork 201 A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. Apache-2.0 License 584 stars 201 forks Star Notifications Code Issues 30 Pull requests 6 Actions Projects 0 Wiki Security Insights More Code Issues Pull requests Actions Projects Wiki Security Insights master Switch branches/tags Branches Tags Could not load branches Nothing to show {{ refName }} default View all branches Could not load tags Nothing to show {{ refName }} default View all tags 2 branches 0 tags Code Clone HTTPS GitHub CLI Use Git or checkout with SVN using the web URL. Work fast with our official CLI. Learn more. Open with GitHub Desktop Download ZIP Launching GitHub Desktop If nothing happens, download GitHub Desktop and try again. Go back Launching GitHub Desktop If nothing happens, download GitHub Desktop and try again. Go back Launching Xcode If nothing happens, download Xcode and try again. Go back Launching Visual Studio Code Your codespace will open once ready. There was a problem preparing your codespace, please try again. Latest commit majornista fix evaluation for ChromeVox object … 5c070bc Dec 7, 2020 fix evaluation for ChromeVox object 5c070bc Git stats 39 commits Files Permalink Failed to load latest commit information. Type Name Latest commit message Commit time css Add openOnMouseover setting, and toggleButtonClass for responsive layout May 11, 2018 js fix evaluation for ChromeVox object Dec 7, 2020 third-party/jquery initial commit Aug 26, 2013 LICENSE initial commit Aug 26, 2013 NOTICE initial commit Aug 26, 2013 README.md initial commit Aug 26, 2013 index.html Updating WCAG 2.0 References to WCAG 2.1 (#67) Dec 4, 2020 package.json Updating repo references Jul 8, 2016 View code Accessible Mega Menu Keyboard Accessibility Screen Reader Accessibility Usage HTML JavaScript CSS README.md Accessible Mega Menu ========================= A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. It is modeled after the mega menu on adobe.com but has been simplified for use by others. An brief explanation of our interaction design choices can be found in a blog post at Mega menu accessibility on adobe.com. Content for the links and text within the mega menu comes from the Web Content Accessibility Guidelines (WCAG) 2.0. Keyboard Accessibility The accessible mega menu supports keyboard interaction modeled after the behavior described in the WAI-ARIA Menu or Menu bar (widget) design pattern, however we also try to respect users' general expectations for the behavior of links in a global navigation. To this end, the accessible mega menu implementation permits tab focus on each of the six top-level menu items. When one of the menu items has focus, pressing the Enter key, Spacebar or Down arrow will open the submenu panel, and pressing the Left or Right arrow key will shift focus to the adjacent menu item. Links within the submenu panels are included in the tab order when the panel is open. They can also be navigated with the arrow keys or by typing the first character in the link name, which speeds up keyboard navigation considerably. Pressing the Escape key closes the submenu and restores focus to the parent menu item. Screen Reader Accessibility The accessible mega menu models its use of WAI-ARIA Roles, States, and Properties after those described in the WAI-ARIA Menu or Menu bar (widget) design pattern with some notable exceptions, so that it behaves better with screen reader user expectations for global navigation. We don't use role=""menu"" for the menu container and role=""menuitem"" for each of the links therein, because if we do, assistive technology will no longer interpret the links as links, but instead, as menu items, and the links in our global navigation will no longer show up when a screen reader user executes a shortcut command to bring up a list of links in the page. We also want to maintain the semantic structure of the submenu panels in our mega menu; our links are organized into lists and separated by headings. Omitting role=""menu"" and role=""menuitem"" for the global navigation seems the safer way to go. Usage HTML The HTML structure for the mega menu is a nav element, or any other container element, containing a list. Each list item contains a link which is followed by a div or any other container element which will serve as the pop up panel. The panel can contain any html content; in the following example, each panel contains three lists of links. You can explicitly define groups within the panel, between which a user can navigate quickly using the left and right arrow keys; in the following example, the CSS class .sub-nav-group identifies a navigable group.     <nav>         <ul class=""nav-menu"">             <li class=""nav-item"">                 <a href=""?movie"">Movies</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=0"">Action &amp; Adventure</a></li>                         <li><a href=""?movie&genre=2"">Children &amp; Family</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=7"">Dramas</a></li>                         <li><a href=""?movie&genre=9"">Foreign</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=14"">Musicals</a></li>                         <li><a href=""?movie&genre=15"">Romance</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>             <li class=""nav-item"">                 <a href=""?tv"">TV Shows</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=20"">Classic TV</a></li>                         <li><a href=""?tv&genre=21"">Crime TV</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=27"">Reality TV</a></li>                         <li><a href=""?tv&genre=30"">TV Action</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=33"">TV Dramas</a></li>                         <li><a href=""?tv&genre=34"">TV Horror</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>         </ul>     </nav> By default, accessibleMegaMenu uses the the following CSS classes to define the top-level navigation items, panels, groups within the panels, and the hover, focus, and open states. It also defines a prefix for unique id strings, which are required to indicate the relationship of a top-level navigation item to the panel it controls.     defaults = {         /* unique ID's are required to indicate aria-owns, aria-controls and aria-labelledby */         uuidPrefix: ""accessible-megamenu"",                  /* default css class used to define the megamenu styling */         menuClass: ""accessible-megamenu"",                  /* default css class for a top-level navigation item in the megamenu */         topNavItemClass: ""accessible-megamenu-top-nav-item"",                  /* default css class for a megamenu panel */         panelClass: ""accessible-megamenu-panel"",                  /* default css class for a group of items within a megamenu panel */         panelGroupClass: ""accessible-megamenu-panel-group"",                  /* default css class for the hover state */         hoverClass: ""hover"",                  /* default css class for the focus state */         focusClass: ""focus"",                  /* default css class for the open state */         openClass: ""open""      } You can optionally override the defaults to use the CSS classes you may have already defined for your mega menu. JavaScript Be sure to include jQuery and the jquery-accessibleMegaMenu.js plugin script.     <script src=""//code.jquery.com/jquery-1.10.1.min.js""></script>     <script src=""js/jquery-accessibleMegaMenu.js""></script> The following initializes the first nav element in the document as an accessibleMegaMenu, with optional CSS class overrides.     $(""nav:first"").accessibleMegaMenu({         /* prefix for generated unique id attributes, which are required             to indicate aria-owns, aria-controls and aria-labelledby */         uuidPrefix: ""accessible-megamenu"",                  /* css class used to define the megamenu styling */         menuClass: ""nav-menu"",                  /* css class for a top-level navigation item in the megamenu */         topNavItemClass: ""nav-item"",                  /* css class for a megamenu panel */         panelClass: ""sub-nav"",                  /* css class for a group of items within a megamenu panel */         panelGroupClass: ""sub-nav-group"",                  /* css class for the hover state */         hoverClass: ""hover"",                  /* css class for the focus state */         focusClass: ""focus"",                  /* css class for the open state */         openClass: ""open""     }); CSS AccessibleMegaMenu handles the showing and hiding of panels by adding or removing a CSS class. No inline styles are added to hide elements or create animation between states. Following is some rudimentary CSS for our example which enables the showing/hiding of and the layout of lists panels in the mega menu.     /* mega menu list */     .nav-menu {         display: block;         position: relative;         list-style: none;         margin: 0;         padding: 0;         z-index: 15;     }     /* a top level navigation item in the mega menu */     .nav-item {         list-style: none;         display: inline-block;         padding: 0;         margin: 0;     }     /* first descendant link within a top level navigation item */     .nav-item > a {         position: relative;         display: inline-block;         padding: 0.5em 1em;         margin: 0 0 -1px 0;         border: 1px solid transparent;     }     /* focus/open states of first descendant link within a top level         navigation item */     .nav-item > a:focus,     .nav-item > a.open {         border: 1px solid #dedede;     }     /* open state of first descendant link within a top level         navigation item */     .nav-item > a.open {         background-color: #fff;         border-bottom: none;         z-index: 1;     }     /* sub-navigation panel */     .sub-nav {         position: absolute;         display: none;         top: 2.2em;         margin-top: -1px;         padding: 0.5em 1em;         border: 1px solid #dedede;         background-color: #fff;     }     /* sub-navigation panel open state */     .sub-nav.open {         display: block;     }     /* list of items within sub-navigation panel */     .sub-nav ul {         display: inline-block;         vertical-align: top;         margin: 0 1em 0 0;         padding: 0;     }     /* list item within sub-navigation panel */     .sub-nav li {         display: block;         list-style-type: none;         margin: 0;         padding: 0;     }   Putting it all together, here is the completed example:     <!doctype html>     <html lang=""en"">     <head>     <meta charset=""UTF-8"">     <title>Simple Accessible Mega Menu Example</title>     <style>         /* Rudimentary mega menu CSS for demonstration */             /* mega menu list */         .nav-menu {             display: block;             position: relative;             list-style: none;             margin: 0;             padding: 0;             z-index: 15;         }         /* a top level navigation item in the mega menu */         .nav-item {             list-style: none;             display: inline-block;             padding: 0;             margin: 0;         }         /* first descendant link within a top level navigation item */         .nav-item > a {             position: relative;             display: inline-block;             padding: 0.5em 1em;             margin: 0 0 -1px 0;             border: 1px solid transparent;         }         /* focus/open states of first descendant link within a top level             navigation item */         .nav-item > a:focus,         .nav-item > a.open {             border: 1px solid #dedede;         }         /* open state of first descendant link within a top level             navigation item */         .nav-item > a.open {             background-color: #fff;             border-bottom: none;             z-index: 1;         }         /* sub-navigation panel */         .sub-nav {             position: absolute;             display: none;             top: 2.2em;             margin-top: -1px;             padding: 0.5em 1em;             border: 1px solid #dedede;             background-color: #fff;         }         /* sub-navigation panel open state */         .sub-nav.open {             display: block;         }         /* list of items within sub-navigation panel */         .sub-nav ul {             display: inline-block;             vertical-align: top;             margin: 0 1em 0 0;             padding: 0;         }         /* list item within sub-navigation panel */         .sub-nav li {             display: block;             list-style-type: none;             margin: 0;             padding: 0;         }          </style>     </head>     <body>     <nav>         <ul class=""nav-menu"">             <li class=""nav-item"">                 <a href=""?movie"">Movies</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=0"">Action &amp; Adventure</a></li>                         <li><a href=""?movie&genre=2"">Children &amp; Family</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=7"">Dramas</a></li>                         <li><a href=""?movie&genre=9"">Foreign</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=14"">Musicals</a></li>                         <li><a href=""?movie&genre=15"">Romance</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>             <li class=""nav-item"">                 <a href=""?tv"">TV Shows</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=20"">Classic TV</a></li>                         <li><a href=""?tv&genre=21"">Crime TV</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=27"">Reality TV</a></li>                         <li><a href=""?tv&genre=30"">TV Action</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=33"">TV Dramas</a></li>                         <li><a href=""?tv&genre=34"">TV Horror</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>         </ul>     </nav>          <!-- include jquery -->     <script src=""//code.jquery.com/jquery-1.10.1.min.js""></script>     <!-- include the jquery-accessibleMegaMenu plugin script -->     <script src=""js/jquery-accessibleMegaMenu.js""></script>     <!-- initialize a selector as an accessibleMegaMenu -->     <script>         $(""nav:first"").accessibleMegaMenu({             /* prefix for generated unique id attributes, which are required                 to indicate aria-owns, aria-controls and aria-labelledby */             uuidPrefix: ""accessible-megamenu"",                          /* css class used to define the megamenu styling */             menuClass: ""nav-menu"",                          /* css class for a top-level navigation item in the megamenu */             topNavItemClass: ""nav-item"",                          /* css class for a megamenu panel */             panelClass: ""sub-nav"",                          /* css class for a group of items within a megamenu panel */             panelGroupClass: ""sub-nav-group"",                          /* css class for the hover state */             hoverClass: ""hover"",                          /* css class for the focus state */             focusClass: ""focus"",                          /* css class for the open state */             openClass: ""open""         });     </script>     </body>     </html> About A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. Resources Readme License Apache-2.0 License Releases No releases published Packages 0 No packages published Used by 16 + 8 Contributors 7 Languages HTML 71.8% CSS 26.4% JavaScript 1.8% © 2021 GitHub, Inc. Terms Privacy Security Status Docs Contact GitHub Pricing API Training Blog About You can’t perform that action at this time. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."
687281,20210723,github.com,https://github.com/crypto-browserify/crypto-browserify,text/html,text/html,en,"GitHub - crypto-browserify/crypto-browserify: partial implementation of node's `crypto` for the browser Skip to content Sign up Why GitHub? Features → Mobile → Actions → Codespaces → Packages → Security → Code review → Issues → Integrations → GitHub Sponsors → Customer stories→ Team Enterprise Explore Explore GitHub → Learn and contribute Topics → Collections → Trending → Learning Lab → Open source guides → Connect with others The ReadME Project → Events → Community forum → GitHub Education → GitHub Stars program → Marketplace Pricing Plans → Compare plans → Contact Sales → Education → In this repository All GitHub ↵ Jump to ↵ No suggested jump to results In this repository All GitHub ↵ Jump to ↵ In this organization All GitHub ↵ Jump to ↵ In this repository All GitHub ↵ Jump to ↵ Sign in Sign up {{ message }} crypto-browserify / crypto-browserify Notifications Star 484 Fork 157 partial implementation of node's `crypto` for the browser MIT License 484 stars 157 forks Star Notifications Code Issues 21 Pull requests 6 Actions Projects 0 Wiki Security Insights More Code Issues Pull requests Actions Projects Wiki Security Insights master Switch branches/tags Branches Tags Could not load branches Nothing to show {{ refName }} default View all branches Could not load tags Nothing to show {{ refName }} default View all tags 6 branches 31 tags Code Clone HTTPS GitHub CLI Use Git or checkout with SVN using the web URL. Work fast with our official CLI. Learn more. Open with GitHub Desktop Download ZIP Launching GitHub Desktop If nothing happens, download GitHub Desktop and try again. Go back Launching GitHub Desktop If nothing happens, download GitHub Desktop and try again. Go back Launching Xcode If nothing happens, download Xcode and try again. Go back Launching Visual Studio Code Your codespace will open once ready. There was a problem preparing your codespace, please try again. Latest commit calvinmetcalf fix debian issue (maybe) … 460a13b Feb 9, 2018 fix debian issue (maybe) 460a13b Git stats 362 commits Files Permalink Failed to load latest commit information. Type Name Latest commit message Commit time example add standard 5.0.0 Aug 13, 2015 test fix debian issue (maybe) Feb 9, 2018 .gitignore Add .gitignore Aug 5, 2013 .travis.yml saucelabs aparently only goes back to 7 Oct 19, 2017 .zuul.yml add zuul and browser tests Oct 3, 2015 LICENSE Add MIT license Sep 20, 2013 README.md add privateEncrypt/publicDecrypt to README Dec 14, 2015 index.js add rndom fill Oct 18, 2017 package.json 3.12.0 Nov 3, 2017 View code crypto-browserify todo contributions License README.md crypto-browserify A port of node's crypto module to the browser. The goal of this module is to reimplement node's crypto module, in pure javascript so that it can run in the browser. Here is the subset that is currently implemented: createHash (sha1, sha224, sha256, sha384, sha512, md5, rmd160) createHmac (sha1, sha224, sha256, sha384, sha512, md5, rmd160) pbkdf2 pbkdf2Sync randomBytes pseudoRandomBytes createCipher (aes) createDecipher (aes) createDiffieHellman createSign (rsa, ecdsa) createVerify (rsa, ecdsa) createECDH (secp256k1) publicEncrypt/privateDecrypt (rsa) privateEncrypt/publicDecrypt (rsa) todo these features from node's crypto are still unimplemented. createCredentials contributions If you are interested in writing a feature, please implement as a new module, which will be incorporated into crypto-browserify as a dependency. All deps must be compatible with node's crypto (generate example inputs and outputs with node, and save base64 strings inside JSON, so that tests can run in the browser. see sha.js Crypto is extra serious so please do not hesitate to review the code, and post comments if you do. License MIT About partial implementation of node's `crypto` for the browser Resources Readme License MIT License Releases 31 tags Packages 0 No packages published Used by 6.2m + 6,191,789 Contributors 24 + 13 contributors Languages JavaScript 99.1% HTML 0.9% © 2021 GitHub, Inc. Terms Privacy Security Status Docs Contact GitHub Pricing API Training Blog About You can’t perform that action at this time. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."
687283,20210723,github.com,https://github.com/indutny/elliptic/issues,text/html,text/html,en,"Issues · indutny/elliptic · GitHub Skip to content Sign up Why GitHub? Features → Mobile → Actions → Codespaces → Packages → Security → Code review → Issues → Integrations → GitHub Sponsors → Customer stories→ Team Enterprise Explore Explore GitHub → Learn and contribute Topics → Collections → Trending → Learning Lab → Open source guides → Connect with others The ReadME Project → Events → Community forum → GitHub Education → GitHub Stars program → Marketplace Pricing Plans → Compare plans → Contact Sales → Education → In this repository All GitHub ↵ Jump to ↵ No suggested jump to results In this repository All GitHub ↵ Jump to ↵ In this user All GitHub ↵ Jump to ↵ In this repository All GitHub ↵ Jump to ↵ Sign in Sign up {{ message }} indutny / elliptic Notifications Star 1.3k Fork 310 Code Issues 77 Pull requests 21 Actions Projects 0 Wiki Security Insights More Code Issues Pull requests Actions Projects Wiki Security Insights Labels 8 Milestones 0 Labels 8 Milestones 0 New issue Have a question about this project? Sign up for a free GitHub account to open an issue and contact its maintainers and the community. Sign up for GitHub By clicking “Sign up for GitHub”, you agree to our terms of service and privacy statement. We’ll occasionally send you account related emails. Already on GitHub? Sign in to your account 77 Open 97 Closed 77 Open 97 Closed Author Filter by author author: Filter by this user Label Filter by label Use alt + click/return to exclude labels Projects Filter by project Milestones Filter by milestone Assignee Filter by who’s assigned Sort Sort by Newest Oldest Most commented Least commented Recently updated Least recently updated Most reactions 👍 👎 😄 🎉 😕 ❤️ 🚀 👀 Invalid hashed data sign with EDDSA #262 opened Jul 6, 2021 by samuel-uniris Point multiplication gives different results based on order of operattions #260 opened Jun 16, 2021 by kot-begemot 3 deriving private key from public key #257 opened Apr 27, 2021 by madhav-madhusoodanan How to use keys with crypto.subtle #255 opened Apr 1, 2021 by DominicTobias-b1 EDDSA.decodeInt should fails or reduce by dafault? #254 opened Mar 18, 2021 by mahnunchik Sad state #251 opened Mar 11, 2021 by berkus 1 EDDSA.decodePoint should fails on ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff #250 opened Mar 3, 2021 by mahnunchik 15 Add endian argument to bn.js toString method #249 opened Mar 2, 2021 by mahnunchik EDDSA decodePoint doesn't support Buffer as argument #248 opened Mar 2, 2021 by mahnunchik How to decipher the encrypted message? #245 opened Jan 27, 2021 by istabraq-iot Montgomery Curve25519 is not openssl compatible #243 opened Dec 28, 2020 by jc-lab 4 Curves p384 and p521 produce incorrect results #239 opened Oct 18, 2020 by guidovranken 1 i want to use this library with c# #238 opened Oct 10, 2020 by medozeus Elliptic.js support following curve types: #236 opened Oct 5, 2020 by medozeus The Elliptic package 6.5.2 for Node.js allows ECDSA signature malleability via variations in encoding, leading '\0' bytes, or integer overflows. #235 opened Oct 1, 2020 by bsomeshwer EdDSA: What is a reason to manipulate with bytes? #233 opened Aug 27, 2020 by mahnunchik why use derive method get ECDH key，i got different length #230 opened Jul 10, 2020 by cqupt-yifanwu 4 Why do I generate my local test path in chunk-vendors when packing with NPM #229 opened Jun 22, 2020 by Anthonychen1994 1 TypedArray support ? #228 opened Jun 20, 2020 by dojyorin Is there way to generate PKCS#8 private key from Pem format ECC Private key #225 opened Apr 28, 2020 by sureshreddygovindu Signature validation in python. Prefix configuration? #224 opened Apr 25, 2020 by amrbz is it possible to do assymetric encryption? #223 opened Apr 7, 2020 by maroodb 1 Missing infinity point encoding #218 opened Feb 21, 2020 by catenacyber 1 ECDH P-521 public key point not on curve according to java (clojure) #216 opened Feb 11, 2020 by slhabity 2 how save and load private / publick key in pem or other format #215 opened Jan 27, 2020 by fturiot 2 Previous 1 2 3 4 Next Previous Next ProTip! Find all open issues with in progress development work with linked:pr. © 2021 GitHub, Inc. Terms Privacy Security Status Docs Contact GitHub Pricing API Training Blog About You can’t perform that action at this time. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."
687299,20210723,github.com,https://github.com/indutny/elliptic,text/html,text/html,en,"GitHub - indutny/elliptic: Fast Elliptic Curve Cryptography in plain javascript Skip to content Sign up Why GitHub? Features → Mobile → Actions → Codespaces → Packages → Security → Code review → Issues → Integrations → GitHub Sponsors → Customer stories→ Team Enterprise Explore Explore GitHub → Learn and contribute Topics → Collections → Trending → Learning Lab → Open source guides → Connect with others The ReadME Project → Events → Community forum → GitHub Education → GitHub Stars program → Marketplace Pricing Plans → Compare plans → Contact Sales → Education → In this repository All GitHub ↵ Jump to ↵ No suggested jump to results In this repository All GitHub ↵ Jump to ↵ In this user All GitHub ↵ Jump to ↵ In this repository All GitHub ↵ Jump to ↵ Sign in Sign up {{ message }} indutny / elliptic Notifications Star 1.3k Fork 310 Fast Elliptic Curve Cryptography in plain javascript 1.3k stars 310 forks Star Notifications Code Issues 77 Pull requests 21 Actions Projects 0 Wiki Security Insights More Code Issues Pull requests Actions Projects Wiki Security Insights master Switch branches/tags Branches Tags Could not load branches Nothing to show {{ refName }} default View all branches Could not load tags Nothing to show {{ refName }} default View all tags 2 branches 85 tags Code Clone HTTPS GitHub CLI Use Git or checkout with SVN using the web URL. Work fast with our official CLI. Learn more. Open with GitHub Desktop Download ZIP Launching GitHub Desktop If nothing happens, download GitHub Desktop and try again. Go back Launching GitHub Desktop If nothing happens, download GitHub Desktop and try again. Go back Launching Xcode If nothing happens, download Xcode and try again. Go back Launching Visual Studio Code Your codespace will open once ready. There was a problem preparing your codespace, please try again. Latest commit indutny 6.5.4 … 43ac7f2 Feb 2, 2021 6.5.4 43ac7f2 Git stats 331 commits Files Permalink Failed to load latest commit information. Type Name Latest commit message Commit time benchmarks package: remove Makefile and dist Jan 29, 2016 dist 6.5.4 Feb 2, 2021 lib ec: validate that a point before deriving keys Feb 2, 2021 test ec: validate that a point before deriving keys Feb 2, 2021 .codeclimate.yml test: improvements with Saucelabs/Codeclimate Mar 31, 2016 .eslintignore lib: relint using eslint Aug 2, 2020 .eslintrc.js lib: relint using eslint Aug 2, 2020 .gitignore test: improvements with Saucelabs/Codeclimate Mar 31, 2016 .npmignore npmignore: dist May 20, 2016 .travis.yml travis: really move on Jun 26, 2019 Gruntfile.js grunt: fix standalone build May 25, 2016 README.md readme: update example Mar 23, 2017 package-lock.json 6.5.4 Feb 2, 2021 package.json 6.5.4 Feb 2, 2021 View code Elliptic Incentive Benchmarks API ECDSA EdDSA ECDH Supported curves Implementation details Related projects LICENSE README.md Elliptic Fast elliptic-curve cryptography in a plain javascript implementation. NOTE: Please take a look at http://safecurves.cr.yp.to/ before choosing a curve for your cryptography operations. Incentive ECC is much slower than regular RSA cryptography, the JS implementations are even more slower. Benchmarks $ node benchmarks/index.js Benchmarking: sign elliptic#sign x 262 ops/sec ±0.51% (177 runs sampled) eccjs#sign x 55.91 ops/sec ±0.90% (144 runs sampled) ------------------------ Fastest is elliptic#sign ======================== Benchmarking: verify elliptic#verify x 113 ops/sec ±0.50% (166 runs sampled) eccjs#verify x 48.56 ops/sec ±0.36% (125 runs sampled) ------------------------ Fastest is elliptic#verify ======================== Benchmarking: gen elliptic#gen x 294 ops/sec ±0.43% (176 runs sampled) eccjs#gen x 62.25 ops/sec ±0.63% (129 runs sampled) ------------------------ Fastest is elliptic#gen ======================== Benchmarking: ecdh elliptic#ecdh x 136 ops/sec ±0.85% (156 runs sampled) ------------------------ Fastest is elliptic#ecdh ======================== API ECDSA var EC = require('elliptic').ec; // Create and initialize EC context // (better do it once and reuse it) var ec = new EC('secp256k1'); // Generate keys var key = ec.genKeyPair(); // Sign the message's hash (input must be an array, or a hex-string) var msgHash = [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ]; var signature = key.sign(msgHash); // Export DER encoded signature in Array var derSign = signature.toDER(); // Verify signature console.log(key.verify(msgHash, derSign)); // CHECK WITH NO PRIVATE KEY var pubPoint = key.getPublic(); var x = pubPoint.getX(); var y = pubPoint.getY(); // Public Key MUST be either: // 1) '04' + hex string of x + hex string of y; or // 2) object with two hex string properties (x and y); or // 3) object with two buffer properties (x and y) var pub = pubPoint.encode('hex');                                 // case 1 var pub = { x: x.toString('hex'), y: y.toString('hex') };         // case 2 var pub = { x: x.toBuffer(), y: y.toBuffer() };                   // case 3 var pub = { x: x.toArrayLike(Buffer), y: y.toArrayLike(Buffer) }; // case 3 // Import public key var key = ec.keyFromPublic(pub, 'hex'); // Signature MUST be either: // 1) DER-encoded signature as hex-string; or // 2) DER-encoded signature as buffer; or // 3) object with two hex-string properties (r and s); or // 4) object with two buffer properties (r and s) var signature = '3046022100...'; // case 1 var signature = new Buffer('...'); // case 2 var signature = { r: 'b1fc...', s: '9c42...' }; // case 3 // Verify signature console.log(key.verify(msgHash, signature)); EdDSA var EdDSA = require('elliptic').eddsa; // Create and initialize EdDSA context // (better do it once and reuse it) var ec = new EdDSA('ed25519'); // Create key pair from secret var key = ec.keyFromSecret('693e3c...'); // hex string, array or Buffer // Sign the message's hash (input must be an array, or a hex-string) var msgHash = [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ]; var signature = key.sign(msgHash).toHex(); // Verify signature console.log(key.verify(msgHash, signature)); // CHECK WITH NO PRIVATE KEY // Import public key var pub = '0a1af638...'; var key = ec.keyFromPublic(pub, 'hex'); // Verify signature var signature = '70bed1...'; console.log(key.verify(msgHash, signature)); ECDH var EC = require('elliptic').ec; var ec = new EC('curve25519'); // Generate keys var key1 = ec.genKeyPair(); var key2 = ec.genKeyPair(); var shared1 = key1.derive(key2.getPublic()); var shared2 = key2.derive(key1.getPublic()); console.log('Both shared secrets are BN instances'); console.log(shared1.toString(16)); console.log(shared2.toString(16)); three and more members: var EC = require('elliptic').ec; var ec = new EC('curve25519'); var A = ec.genKeyPair(); var B = ec.genKeyPair(); var C = ec.genKeyPair(); var AB = A.getPublic().mul(B.getPrivate()) var BC = B.getPublic().mul(C.getPrivate()) var CA = C.getPublic().mul(A.getPrivate()) var ABC = AB.mul(C.getPrivate()) var BCA = BC.mul(A.getPrivate()) var CAB = CA.mul(B.getPrivate()) console.log(ABC.getX().toString(16)) console.log(BCA.getX().toString(16)) console.log(CAB.getX().toString(16)) NOTE: .derive() returns a BN instance. Supported curves Elliptic.js support following curve types: Short Weierstrass Montgomery Edwards Twisted Edwards Following curve 'presets' are embedded into the library: secp256k1 p192 p224 p256 p384 p521 curve25519 ed25519 NOTE: That curve25519 could not be used for ECDSA, use ed25519 instead. Implementation details ECDSA is using deterministic k value generation as per RFC6979. Most of the curve operations are performed on non-affine coordinates (either projective or extended), various windowing techniques are used for different cases. All operations are performed in reduction context using bn.js, hashing is provided by hash.js Related projects eccrypto: isomorphic implementation of ECDSA, ECDH and ECIES for both browserify and node (uses elliptic for browser and secp256k1-node for node) LICENSE This software is licensed under the MIT License. Copyright Fedor Indutny, 2014. Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the ""Software""), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. About Fast Elliptic Curve Cryptography in plain javascript Resources Readme Releases 85 tags Packages 0 No packages published Used by 6.1m + 6,134,295 Contributors 25 + 14 contributors Languages JavaScript 99.3% HTML 0.7% © 2021 GitHub, Inc. Terms Privacy Security Status Docs Contact GitHub Pricing API Training Blog About You can’t perform that action at this time. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."
690318,20210730,github.com,https://github.com/adobe-accessibility/Accessible-Mega-Menu,text/html,text/html,en,"GitHub - adobe-accessibility/Accessible-Mega-Menu: A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. Skip to content Sign up Why GitHub? Features → Mobile → Actions → Codespaces → Packages → Security → Code review → Issues → Integrations → GitHub Sponsors → Customer stories→ Team Enterprise Explore Explore GitHub → Learn and contribute Topics → Collections → Trending → Learning Lab → Open source guides → Connect with others The ReadME Project → Events → Community forum → GitHub Education → GitHub Stars program → Marketplace Pricing Plans → Compare plans → Contact Sales → Education → In this repository All GitHub ↵ Jump to ↵ No suggested jump to results In this repository All GitHub ↵ Jump to ↵ In this organization All GitHub ↵ Jump to ↵ In this repository All GitHub ↵ Jump to ↵ Sign in Sign up {{ message }} adobe-accessibility / Accessible-Mega-Menu Notifications Star 584 Fork 202 A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. Apache-2.0 License 584 stars 202 forks Star Notifications Code Issues 31 Pull requests 6 Actions Projects 0 Wiki Security Insights More Code Issues Pull requests Actions Projects Wiki Security Insights master Switch branches/tags Branches Tags Could not load branches Nothing to show {{ refName }} default View all branches Could not load tags Nothing to show {{ refName }} default View all tags 2 branches 0 tags Code Clone HTTPS GitHub CLI Use Git or checkout with SVN using the web URL. Work fast with our official CLI. Learn more. Open with GitHub Desktop Download ZIP Launching GitHub Desktop If nothing happens, download GitHub Desktop and try again. Go back Launching GitHub Desktop If nothing happens, download GitHub Desktop and try again. Go back Launching Xcode If nothing happens, download Xcode and try again. Go back Launching Visual Studio Code Your codespace will open once ready. There was a problem preparing your codespace, please try again. Latest commit majornista fix evaluation for ChromeVox object … 5c070bc Dec 7, 2020 fix evaluation for ChromeVox object 5c070bc Git stats 39 commits Files Permalink Failed to load latest commit information. Type Name Latest commit message Commit time css Add openOnMouseover setting, and toggleButtonClass for responsive layout May 11, 2018 js fix evaluation for ChromeVox object Dec 7, 2020 third-party/jquery initial commit Aug 26, 2013 LICENSE initial commit Aug 26, 2013 NOTICE initial commit Aug 26, 2013 README.md initial commit Aug 26, 2013 index.html Updating WCAG 2.0 References to WCAG 2.1 (#67) Dec 4, 2020 package.json Updating repo references Jul 8, 2016 View code Accessible Mega Menu Keyboard Accessibility Screen Reader Accessibility Usage HTML JavaScript CSS README.md Accessible Mega Menu ========================= A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. It is modeled after the mega menu on adobe.com but has been simplified for use by others. An brief explanation of our interaction design choices can be found in a blog post at Mega menu accessibility on adobe.com. Content for the links and text within the mega menu comes from the Web Content Accessibility Guidelines (WCAG) 2.0. Keyboard Accessibility The accessible mega menu supports keyboard interaction modeled after the behavior described in the WAI-ARIA Menu or Menu bar (widget) design pattern, however we also try to respect users' general expectations for the behavior of links in a global navigation. To this end, the accessible mega menu implementation permits tab focus on each of the six top-level menu items. When one of the menu items has focus, pressing the Enter key, Spacebar or Down arrow will open the submenu panel, and pressing the Left or Right arrow key will shift focus to the adjacent menu item. Links within the submenu panels are included in the tab order when the panel is open. They can also be navigated with the arrow keys or by typing the first character in the link name, which speeds up keyboard navigation considerably. Pressing the Escape key closes the submenu and restores focus to the parent menu item. Screen Reader Accessibility The accessible mega menu models its use of WAI-ARIA Roles, States, and Properties after those described in the WAI-ARIA Menu or Menu bar (widget) design pattern with some notable exceptions, so that it behaves better with screen reader user expectations for global navigation. We don't use role=""menu"" for the menu container and role=""menuitem"" for each of the links therein, because if we do, assistive technology will no longer interpret the links as links, but instead, as menu items, and the links in our global navigation will no longer show up when a screen reader user executes a shortcut command to bring up a list of links in the page. We also want to maintain the semantic structure of the submenu panels in our mega menu; our links are organized into lists and separated by headings. Omitting role=""menu"" and role=""menuitem"" for the global navigation seems the safer way to go. Usage HTML The HTML structure for the mega menu is a nav element, or any other container element, containing a list. Each list item contains a link which is followed by a div or any other container element which will serve as the pop up panel. The panel can contain any html content; in the following example, each panel contains three lists of links. You can explicitly define groups within the panel, between which a user can navigate quickly using the left and right arrow keys; in the following example, the CSS class .sub-nav-group identifies a navigable group.     <nav>         <ul class=""nav-menu"">             <li class=""nav-item"">                 <a href=""?movie"">Movies</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=0"">Action &amp; Adventure</a></li>                         <li><a href=""?movie&genre=2"">Children &amp; Family</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=7"">Dramas</a></li>                         <li><a href=""?movie&genre=9"">Foreign</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=14"">Musicals</a></li>                         <li><a href=""?movie&genre=15"">Romance</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>             <li class=""nav-item"">                 <a href=""?tv"">TV Shows</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=20"">Classic TV</a></li>                         <li><a href=""?tv&genre=21"">Crime TV</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=27"">Reality TV</a></li>                         <li><a href=""?tv&genre=30"">TV Action</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=33"">TV Dramas</a></li>                         <li><a href=""?tv&genre=34"">TV Horror</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>         </ul>     </nav> By default, accessibleMegaMenu uses the the following CSS classes to define the top-level navigation items, panels, groups within the panels, and the hover, focus, and open states. It also defines a prefix for unique id strings, which are required to indicate the relationship of a top-level navigation item to the panel it controls.     defaults = {         /* unique ID's are required to indicate aria-owns, aria-controls and aria-labelledby */         uuidPrefix: ""accessible-megamenu"",                  /* default css class used to define the megamenu styling */         menuClass: ""accessible-megamenu"",                  /* default css class for a top-level navigation item in the megamenu */         topNavItemClass: ""accessible-megamenu-top-nav-item"",                  /* default css class for a megamenu panel */         panelClass: ""accessible-megamenu-panel"",                  /* default css class for a group of items within a megamenu panel */         panelGroupClass: ""accessible-megamenu-panel-group"",                  /* default css class for the hover state */         hoverClass: ""hover"",                  /* default css class for the focus state */         focusClass: ""focus"",                  /* default css class for the open state */         openClass: ""open""      } You can optionally override the defaults to use the CSS classes you may have already defined for your mega menu. JavaScript Be sure to include jQuery and the jquery-accessibleMegaMenu.js plugin script.     <script src=""//code.jquery.com/jquery-1.10.1.min.js""></script>     <script src=""js/jquery-accessibleMegaMenu.js""></script> The following initializes the first nav element in the document as an accessibleMegaMenu, with optional CSS class overrides.     $(""nav:first"").accessibleMegaMenu({         /* prefix for generated unique id attributes, which are required             to indicate aria-owns, aria-controls and aria-labelledby */         uuidPrefix: ""accessible-megamenu"",                  /* css class used to define the megamenu styling */         menuClass: ""nav-menu"",                  /* css class for a top-level navigation item in the megamenu */         topNavItemClass: ""nav-item"",                  /* css class for a megamenu panel */         panelClass: ""sub-nav"",                  /* css class for a group of items within a megamenu panel */         panelGroupClass: ""sub-nav-group"",                  /* css class for the hover state */         hoverClass: ""hover"",                  /* css class for the focus state */         focusClass: ""focus"",                  /* css class for the open state */         openClass: ""open""     }); CSS AccessibleMegaMenu handles the showing and hiding of panels by adding or removing a CSS class. No inline styles are added to hide elements or create animation between states. Following is some rudimentary CSS for our example which enables the showing/hiding of and the layout of lists panels in the mega menu.     /* mega menu list */     .nav-menu {         display: block;         position: relative;         list-style: none;         margin: 0;         padding: 0;         z-index: 15;     }     /* a top level navigation item in the mega menu */     .nav-item {         list-style: none;         display: inline-block;         padding: 0;         margin: 0;     }     /* first descendant link within a top level navigation item */     .nav-item > a {         position: relative;         display: inline-block;         padding: 0.5em 1em;         margin: 0 0 -1px 0;         border: 1px solid transparent;     }     /* focus/open states of first descendant link within a top level         navigation item */     .nav-item > a:focus,     .nav-item > a.open {         border: 1px solid #dedede;     }     /* open state of first descendant link within a top level         navigation item */     .nav-item > a.open {         background-color: #fff;         border-bottom: none;         z-index: 1;     }     /* sub-navigation panel */     .sub-nav {         position: absolute;         display: none;         top: 2.2em;         margin-top: -1px;         padding: 0.5em 1em;         border: 1px solid #dedede;         background-color: #fff;     }     /* sub-navigation panel open state */     .sub-nav.open {         display: block;     }     /* list of items within sub-navigation panel */     .sub-nav ul {         display: inline-block;         vertical-align: top;         margin: 0 1em 0 0;         padding: 0;     }     /* list item within sub-navigation panel */     .sub-nav li {         display: block;         list-style-type: none;         margin: 0;         padding: 0;     }   Putting it all together, here is the completed example:     <!doctype html>     <html lang=""en"">     <head>     <meta charset=""UTF-8"">     <title>Simple Accessible Mega Menu Example</title>     <style>         /* Rudimentary mega menu CSS for demonstration */             /* mega menu list */         .nav-menu {             display: block;             position: relative;             list-style: none;             margin: 0;             padding: 0;             z-index: 15;         }         /* a top level navigation item in the mega menu */         .nav-item {             list-style: none;             display: inline-block;             padding: 0;             margin: 0;         }         /* first descendant link within a top level navigation item */         .nav-item > a {             position: relative;             display: inline-block;             padding: 0.5em 1em;             margin: 0 0 -1px 0;             border: 1px solid transparent;         }         /* focus/open states of first descendant link within a top level             navigation item */         .nav-item > a:focus,         .nav-item > a.open {             border: 1px solid #dedede;         }         /* open state of first descendant link within a top level             navigation item */         .nav-item > a.open {             background-color: #fff;             border-bottom: none;             z-index: 1;         }         /* sub-navigation panel */         .sub-nav {             position: absolute;             display: none;             top: 2.2em;             margin-top: -1px;             padding: 0.5em 1em;             border: 1px solid #dedede;             background-color: #fff;         }         /* sub-navigation panel open state */         .sub-nav.open {             display: block;         }         /* list of items within sub-navigation panel */         .sub-nav ul {             display: inline-block;             vertical-align: top;             margin: 0 1em 0 0;             padding: 0;         }         /* list item within sub-navigation panel */         .sub-nav li {             display: block;             list-style-type: none;             margin: 0;             padding: 0;         }          </style>     </head>     <body>     <nav>         <ul class=""nav-menu"">             <li class=""nav-item"">                 <a href=""?movie"">Movies</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=0"">Action &amp; Adventure</a></li>                         <li><a href=""?movie&genre=2"">Children &amp; Family</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=7"">Dramas</a></li>                         <li><a href=""?movie&genre=9"">Foreign</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=14"">Musicals</a></li>                         <li><a href=""?movie&genre=15"">Romance</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>             <li class=""nav-item"">                 <a href=""?tv"">TV Shows</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=20"">Classic TV</a></li>                         <li><a href=""?tv&genre=21"">Crime TV</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=27"">Reality TV</a></li>                         <li><a href=""?tv&genre=30"">TV Action</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=33"">TV Dramas</a></li>                         <li><a href=""?tv&genre=34"">TV Horror</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>         </ul>     </nav>          <!-- include jquery -->     <script src=""//code.jquery.com/jquery-1.10.1.min.js""></script>     <!-- include the jquery-accessibleMegaMenu plugin script -->     <script src=""js/jquery-accessibleMegaMenu.js""></script>     <!-- initialize a selector as an accessibleMegaMenu -->     <script>         $(""nav:first"").accessibleMegaMenu({             /* prefix for generated unique id attributes, which are required                 to indicate aria-owns, aria-controls and aria-labelledby */             uuidPrefix: ""accessible-megamenu"",                          /* css class used to define the megamenu styling */             menuClass: ""nav-menu"",                          /* css class for a top-level navigation item in the megamenu */             topNavItemClass: ""nav-item"",                          /* css class for a megamenu panel */             panelClass: ""sub-nav"",                          /* css class for a group of items within a megamenu panel */             panelGroupClass: ""sub-nav-group"",                          /* css class for the hover state */             hoverClass: ""hover"",                          /* css class for the focus state */             focusClass: ""focus"",                          /* css class for the open state */             openClass: ""open""         });     </script>     </body>     </html> About A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. Resources Readme License Apache-2.0 License Releases No releases published Packages 0 No packages published Used by 16 + 8 Contributors 7 Languages HTML 71.8% CSS 26.4% JavaScript 1.8% © 2021 GitHub, Inc. Terms Privacy Security Status Docs Contact GitHub Pricing API Training Blog About You can’t perform that action at this time. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."
695382,20210730,github.com,https://github.com/crypto-browserify/crypto-browserify,text/html,text/html,en,"GitHub - crypto-browserify/crypto-browserify: partial implementation of node's `crypto` for the browser Skip to content Sign up Why GitHub? Features → Mobile → Actions → Codespaces → Packages → Security → Code review → Issues → Integrations → GitHub Sponsors → Customer stories→ Team Enterprise Explore Explore GitHub → Learn and contribute Topics → Collections → Trending → Learning Lab → Open source guides → Connect with others The ReadME Project → Events → Community forum → GitHub Education → GitHub Stars program → Marketplace Pricing Plans → Compare plans → Contact Sales → Education → In this repository All GitHub ↵ Jump to ↵ No suggested jump to results In this repository All GitHub ↵ Jump to ↵ In this organization All GitHub ↵ Jump to ↵ In this repository All GitHub ↵ Jump to ↵ Sign in Sign up {{ message }} crypto-browserify / crypto-browserify Notifications Star 484 Fork 157 partial implementation of node's `crypto` for the browser MIT License 484 stars 157 forks Star Notifications Code Issues 21 Pull requests 6 Actions Projects 0 Wiki Security Insights More Code Issues Pull requests Actions Projects Wiki Security Insights master Switch branches/tags Branches Tags Could not load branches Nothing to show {{ refName }} default View all branches Could not load tags Nothing to show {{ refName }} default View all tags 6 branches 31 tags Code Clone HTTPS GitHub CLI Use Git or checkout with SVN using the web URL. Work fast with our official CLI. Learn more. Open with GitHub Desktop Download ZIP Launching GitHub Desktop If nothing happens, download GitHub Desktop and try again. Go back Launching GitHub Desktop If nothing happens, download GitHub Desktop and try again. Go back Launching Xcode If nothing happens, download Xcode and try again. Go back Launching Visual Studio Code Your codespace will open once ready. There was a problem preparing your codespace, please try again. Latest commit calvinmetcalf fix debian issue (maybe) … 460a13b Feb 9, 2018 fix debian issue (maybe) 460a13b Git stats 362 commits Files Permalink Failed to load latest commit information. Type Name Latest commit message Commit time example test .gitignore .travis.yml .zuul.yml LICENSE README.md index.js package.json View code crypto-browserify todo contributions License README.md crypto-browserify A port of node's crypto module to the browser. The goal of this module is to reimplement node's crypto module, in pure javascript so that it can run in the browser. Here is the subset that is currently implemented: createHash (sha1, sha224, sha256, sha384, sha512, md5, rmd160) createHmac (sha1, sha224, sha256, sha384, sha512, md5, rmd160) pbkdf2 pbkdf2Sync randomBytes pseudoRandomBytes createCipher (aes) createDecipher (aes) createDiffieHellman createSign (rsa, ecdsa) createVerify (rsa, ecdsa) createECDH (secp256k1) publicEncrypt/privateDecrypt (rsa) privateEncrypt/publicDecrypt (rsa) todo these features from node's crypto are still unimplemented. createCredentials contributions If you are interested in writing a feature, please implement as a new module, which will be incorporated into crypto-browserify as a dependency. All deps must be compatible with node's crypto (generate example inputs and outputs with node, and save base64 strings inside JSON, so that tests can run in the browser. see sha.js Crypto is extra serious so please do not hesitate to review the code, and post comments if you do. License MIT About partial implementation of node's `crypto` for the browser Resources Readme License MIT License Releases 31 tags Packages 0 No packages published Used by 6.2m + 6,239,977 Contributors 24 + 13 contributors Languages JavaScript 99.1% HTML 0.9% © 2021 GitHub, Inc. Terms Privacy Security Status Docs Contact GitHub Pricing API Training Blog About You can’t perform that action at this time. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."
695385,20210730,github.com,https://github.com/indutny/elliptic/issues,text/html,text/html,en,"Issues · indutny/elliptic · GitHub Skip to content Sign up Why GitHub? Features → Mobile → Actions → Codespaces → Packages → Security → Code review → Issues → Integrations → GitHub Sponsors → Customer stories→ Team Enterprise Explore Explore GitHub → Learn and contribute Topics → Collections → Trending → Learning Lab → Open source guides → Connect with others The ReadME Project → Events → Community forum → GitHub Education → GitHub Stars program → Marketplace Pricing Plans → Compare plans → Contact Sales → Education → In this repository All GitHub ↵ Jump to ↵ No suggested jump to results In this repository All GitHub ↵ Jump to ↵ In this user All GitHub ↵ Jump to ↵ In this repository All GitHub ↵ Jump to ↵ Sign in Sign up {{ message }} indutny / elliptic Notifications Star 1.3k Fork 310 Code Issues 78 Pull requests 21 Actions Projects 0 Wiki Security Insights More Code Issues Pull requests Actions Projects Wiki Security Insights Labels 8 Milestones 0 Labels 8 Milestones 0 New issue Have a question about this project? Sign up for a free GitHub account to open an issue and contact its maintainers and the community. Sign up for GitHub By clicking “Sign up for GitHub”, you agree to our terms of service and privacy statement. We’ll occasionally send you account related emails. Already on GitHub? Sign in to your account 78 Open 97 Closed 78 Open 97 Closed Author Filter by author author: Filter by this user Label Filter by label Use alt + click/return to exclude labels Projects Filter by project Milestones Filter by milestone Assignee Filter by who’s assigned Sort Sort by Newest Oldest Most commented Least commented Recently updated Least recently updated Most reactions 👍 👎 😄 🎉 😕 ❤️ 🚀 👀 invalid y value for curve for new EC('p256') #263 opened Jul 28, 2021 by congminh090800 Invalid hashed data sign with EDDSA #262 opened Jul 6, 2021 by samuel-uniris Point multiplication gives different results based on order of operattions #260 opened Jun 16, 2021 by kot-begemot 3 deriving private key from public key #257 opened Apr 27, 2021 by madhav-madhusoodanan How to use keys with crypto.subtle #255 opened Apr 1, 2021 by DominicTobias-b1 EDDSA.decodeInt should fails or reduce by dafault? #254 opened Mar 18, 2021 by mahnunchik Sad state #251 opened Mar 11, 2021 by berkus 1 EDDSA.decodePoint should fails on ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff #250 opened Mar 3, 2021 by mahnunchik 15 Add endian argument to bn.js toString method #249 opened Mar 2, 2021 by mahnunchik EDDSA decodePoint doesn't support Buffer as argument #248 opened Mar 2, 2021 by mahnunchik How to decipher the encrypted message? #245 opened Jan 27, 2021 by istabraq-iot Montgomery Curve25519 is not openssl compatible #243 opened Dec 28, 2020 by jc-lab 4 Curves p384 and p521 produce incorrect results #239 opened Oct 18, 2020 by guidovranken 1 i want to use this library with c# #238 opened Oct 10, 2020 by medozeus Elliptic.js support following curve types: #236 opened Oct 5, 2020 by medozeus The Elliptic package 6.5.2 for Node.js allows ECDSA signature malleability via variations in encoding, leading '\0' bytes, or integer overflows. #235 opened Oct 1, 2020 by bsomeshwer EdDSA: What is a reason to manipulate with bytes? #233 opened Aug 27, 2020 by mahnunchik why use derive method get ECDH key，i got different length #230 opened Jul 10, 2020 by cqupt-yifanwu 4 Why do I generate my local test path in chunk-vendors when packing with NPM #229 opened Jun 22, 2020 by Anthonychen1994 1 TypedArray support ? #228 opened Jun 20, 2020 by dojyorin Is there way to generate PKCS#8 private key from Pem format ECC Private key #225 opened Apr 28, 2020 by sureshreddygovindu Signature validation in python. Prefix configuration? #224 opened Apr 25, 2020 by amrbz is it possible to do assymetric encryption? #223 opened Apr 7, 2020 by maroodb 1 Missing infinity point encoding #218 opened Feb 21, 2020 by catenacyber 1 ECDH P-521 public key point not on curve according to java (clojure) #216 opened Feb 11, 2020 by slhabity 2 Previous 1 2 3 4 Next Previous Next ProTip! no:milestone will show everything without a milestone. © 2021 GitHub, Inc. Terms Privacy Security Status Docs Contact GitHub Pricing API Training Blog About You can’t perform that action at this time. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."
695389,20210730,github.com,https://github.com/indutny/elliptic,text/html,text/html,en,"GitHub - indutny/elliptic: Fast Elliptic Curve Cryptography in plain javascript Skip to content Sign up Why GitHub? Features → Mobile → Actions → Codespaces → Packages → Security → Code review → Issues → Integrations → GitHub Sponsors → Customer stories→ Team Enterprise Explore Explore GitHub → Learn and contribute Topics → Collections → Trending → Learning Lab → Open source guides → Connect with others The ReadME Project → Events → Community forum → GitHub Education → GitHub Stars program → Marketplace Pricing Plans → Compare plans → Contact Sales → Education → In this repository All GitHub ↵ Jump to ↵ No suggested jump to results In this repository All GitHub ↵ Jump to ↵ In this user All GitHub ↵ Jump to ↵ In this repository All GitHub ↵ Jump to ↵ Sign in Sign up {{ message }} indutny / elliptic Notifications Star 1.3k Fork 310 Fast Elliptic Curve Cryptography in plain javascript 1.3k stars 310 forks Star Notifications Code Issues 78 Pull requests 21 Actions Projects 0 Wiki Security Insights More Code Issues Pull requests Actions Projects Wiki Security Insights master Switch branches/tags Branches Tags Could not load branches Nothing to show {{ refName }} default View all branches Could not load tags Nothing to show {{ refName }} default View all tags 2 branches 85 tags Code Clone HTTPS GitHub CLI Use Git or checkout with SVN using the web URL. Work fast with our official CLI. Learn more. Open with GitHub Desktop Download ZIP Launching GitHub Desktop If nothing happens, download GitHub Desktop and try again. Go back Launching GitHub Desktop If nothing happens, download GitHub Desktop and try again. Go back Launching Xcode If nothing happens, download Xcode and try again. Go back Launching Visual Studio Code Your codespace will open once ready. There was a problem preparing your codespace, please try again. Latest commit indutny 6.5.4 … 43ac7f2 Feb 2, 2021 6.5.4 43ac7f2 Git stats 331 commits Files Permalink Failed to load latest commit information. Type Name Latest commit message Commit time benchmarks package: remove Makefile and dist Jan 29, 2016 dist 6.5.4 Feb 2, 2021 lib ec: validate that a point before deriving keys Feb 2, 2021 test ec: validate that a point before deriving keys Feb 2, 2021 .codeclimate.yml test: improvements with Saucelabs/Codeclimate Mar 31, 2016 .eslintignore lib: relint using eslint Aug 2, 2020 .eslintrc.js lib: relint using eslint Aug 2, 2020 .gitignore test: improvements with Saucelabs/Codeclimate Mar 31, 2016 .npmignore npmignore: dist May 20, 2016 .travis.yml travis: really move on Jun 26, 2019 Gruntfile.js grunt: fix standalone build May 25, 2016 README.md readme: update example Mar 23, 2017 package-lock.json 6.5.4 Feb 2, 2021 package.json 6.5.4 Feb 2, 2021 View code Elliptic Incentive Benchmarks API ECDSA EdDSA ECDH Supported curves Implementation details Related projects LICENSE README.md Elliptic Fast elliptic-curve cryptography in a plain javascript implementation. NOTE: Please take a look at http://safecurves.cr.yp.to/ before choosing a curve for your cryptography operations. Incentive ECC is much slower than regular RSA cryptography, the JS implementations are even more slower. Benchmarks $ node benchmarks/index.js Benchmarking: sign elliptic#sign x 262 ops/sec ±0.51% (177 runs sampled) eccjs#sign x 55.91 ops/sec ±0.90% (144 runs sampled) ------------------------ Fastest is elliptic#sign ======================== Benchmarking: verify elliptic#verify x 113 ops/sec ±0.50% (166 runs sampled) eccjs#verify x 48.56 ops/sec ±0.36% (125 runs sampled) ------------------------ Fastest is elliptic#verify ======================== Benchmarking: gen elliptic#gen x 294 ops/sec ±0.43% (176 runs sampled) eccjs#gen x 62.25 ops/sec ±0.63% (129 runs sampled) ------------------------ Fastest is elliptic#gen ======================== Benchmarking: ecdh elliptic#ecdh x 136 ops/sec ±0.85% (156 runs sampled) ------------------------ Fastest is elliptic#ecdh ======================== API ECDSA var EC = require('elliptic').ec; // Create and initialize EC context // (better do it once and reuse it) var ec = new EC('secp256k1'); // Generate keys var key = ec.genKeyPair(); // Sign the message's hash (input must be an array, or a hex-string) var msgHash = [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ]; var signature = key.sign(msgHash); // Export DER encoded signature in Array var derSign = signature.toDER(); // Verify signature console.log(key.verify(msgHash, derSign)); // CHECK WITH NO PRIVATE KEY var pubPoint = key.getPublic(); var x = pubPoint.getX(); var y = pubPoint.getY(); // Public Key MUST be either: // 1) '04' + hex string of x + hex string of y; or // 2) object with two hex string properties (x and y); or // 3) object with two buffer properties (x and y) var pub = pubPoint.encode('hex');                                 // case 1 var pub = { x: x.toString('hex'), y: y.toString('hex') };         // case 2 var pub = { x: x.toBuffer(), y: y.toBuffer() };                   // case 3 var pub = { x: x.toArrayLike(Buffer), y: y.toArrayLike(Buffer) }; // case 3 // Import public key var key = ec.keyFromPublic(pub, 'hex'); // Signature MUST be either: // 1) DER-encoded signature as hex-string; or // 2) DER-encoded signature as buffer; or // 3) object with two hex-string properties (r and s); or // 4) object with two buffer properties (r and s) var signature = '3046022100...'; // case 1 var signature = new Buffer('...'); // case 2 var signature = { r: 'b1fc...', s: '9c42...' }; // case 3 // Verify signature console.log(key.verify(msgHash, signature)); EdDSA var EdDSA = require('elliptic').eddsa; // Create and initialize EdDSA context // (better do it once and reuse it) var ec = new EdDSA('ed25519'); // Create key pair from secret var key = ec.keyFromSecret('693e3c...'); // hex string, array or Buffer // Sign the message's hash (input must be an array, or a hex-string) var msgHash = [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ]; var signature = key.sign(msgHash).toHex(); // Verify signature console.log(key.verify(msgHash, signature)); // CHECK WITH NO PRIVATE KEY // Import public key var pub = '0a1af638...'; var key = ec.keyFromPublic(pub, 'hex'); // Verify signature var signature = '70bed1...'; console.log(key.verify(msgHash, signature)); ECDH var EC = require('elliptic').ec; var ec = new EC('curve25519'); // Generate keys var key1 = ec.genKeyPair(); var key2 = ec.genKeyPair(); var shared1 = key1.derive(key2.getPublic()); var shared2 = key2.derive(key1.getPublic()); console.log('Both shared secrets are BN instances'); console.log(shared1.toString(16)); console.log(shared2.toString(16)); three and more members: var EC = require('elliptic').ec; var ec = new EC('curve25519'); var A = ec.genKeyPair(); var B = ec.genKeyPair(); var C = ec.genKeyPair(); var AB = A.getPublic().mul(B.getPrivate()) var BC = B.getPublic().mul(C.getPrivate()) var CA = C.getPublic().mul(A.getPrivate()) var ABC = AB.mul(C.getPrivate()) var BCA = BC.mul(A.getPrivate()) var CAB = CA.mul(B.getPrivate()) console.log(ABC.getX().toString(16)) console.log(BCA.getX().toString(16)) console.log(CAB.getX().toString(16)) NOTE: .derive() returns a BN instance. Supported curves Elliptic.js support following curve types: Short Weierstrass Montgomery Edwards Twisted Edwards Following curve 'presets' are embedded into the library: secp256k1 p192 p224 p256 p384 p521 curve25519 ed25519 NOTE: That curve25519 could not be used for ECDSA, use ed25519 instead. Implementation details ECDSA is using deterministic k value generation as per RFC6979. Most of the curve operations are performed on non-affine coordinates (either projective or extended), various windowing techniques are used for different cases. All operations are performed in reduction context using bn.js, hashing is provided by hash.js Related projects eccrypto: isomorphic implementation of ECDSA, ECDH and ECIES for both browserify and node (uses elliptic for browser and secp256k1-node for node) LICENSE This software is licensed under the MIT License. Copyright Fedor Indutny, 2014. Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the ""Software""), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. About Fast Elliptic Curve Cryptography in plain javascript Resources Readme Releases 85 tags Packages 0 No packages published Used by 6.2m + 6,162,532 Contributors 25 + 14 contributors Languages JavaScript 99.3% HTML 0.7% © 2021 GitHub, Inc. Terms Privacy Security Status Docs Contact GitHub Pricing API Training Blog About You can’t perform that action at this time. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."
695939,20210806,github.com,https://github.com/adobe-accessibility/Accessible-Mega-Menu,text/html,text/html,en,"GitHub - adobe-accessibility/Accessible-Mega-Menu: A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. Skip to content Sign up Why GitHub? Features → Mobile → Actions → Codespaces → Packages → Security → Code review → Issues → Integrations → GitHub Sponsors → Customer stories→ Team Enterprise Explore Explore GitHub → Learn and contribute Topics → Collections → Trending → Learning Lab → Open source guides → Connect with others The ReadME Project → Events → Community forum → GitHub Education → GitHub Stars program → Marketplace Pricing Plans → Compare plans → Contact Sales → Education → In this repository All GitHub ↵ Jump to ↵ No suggested jump to results In this repository All GitHub ↵ Jump to ↵ In this organization All GitHub ↵ Jump to ↵ In this repository All GitHub ↵ Jump to ↵ Sign in Sign up {{ message }} adobe-accessibility / Accessible-Mega-Menu Notifications Star 584 Fork 202 A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. Apache-2.0 License 584 stars 202 forks Star Notifications Code Issues 31 Pull requests 6 Actions Projects 0 Wiki Security Insights More Code Issues Pull requests Actions Projects Wiki Security Insights master Switch branches/tags Branches Tags Could not load branches Nothing to show {{ refName }} default View all branches Could not load tags Nothing to show {{ refName }} default View all tags 2 branches 0 tags Code Clone HTTPS GitHub CLI Use Git or checkout with SVN using the web URL. Work fast with our official CLI. Learn more. Open with GitHub Desktop Download ZIP Launching GitHub Desktop If nothing happens, download GitHub Desktop and try again. Go back Launching GitHub Desktop If nothing happens, download GitHub Desktop and try again. Go back Launching Xcode If nothing happens, download Xcode and try again. Go back Launching Visual Studio Code Your codespace will open once ready. There was a problem preparing your codespace, please try again. Latest commit Git stats 39 commits Files Permalink Failed to load latest commit information. Type Name Latest commit message Commit time css Add openOnMouseover setting, and toggleButtonClass for responsive layout May 11, 2018 js fix evaluation for ChromeVox object Dec 7, 2020 third-party/jquery initial commit Aug 26, 2013 LICENSE initial commit Aug 26, 2013 NOTICE initial commit Aug 26, 2013 README.md initial commit Aug 26, 2013 index.html Updating WCAG 2.0 References to WCAG 2.1 (#67) Dec 4, 2020 package.json Updating repo references Jul 8, 2016 View code Accessible Mega Menu Keyboard Accessibility Screen Reader Accessibility Usage HTML JavaScript CSS README.md Accessible Mega Menu ========================= A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. It is modeled after the mega menu on adobe.com but has been simplified for use by others. An brief explanation of our interaction design choices can be found in a blog post at Mega menu accessibility on adobe.com. Content for the links and text within the mega menu comes from the Web Content Accessibility Guidelines (WCAG) 2.0. Keyboard Accessibility The accessible mega menu supports keyboard interaction modeled after the behavior described in the WAI-ARIA Menu or Menu bar (widget) design pattern, however we also try to respect users' general expectations for the behavior of links in a global navigation. To this end, the accessible mega menu implementation permits tab focus on each of the six top-level menu items. When one of the menu items has focus, pressing the Enter key, Spacebar or Down arrow will open the submenu panel, and pressing the Left or Right arrow key will shift focus to the adjacent menu item. Links within the submenu panels are included in the tab order when the panel is open. They can also be navigated with the arrow keys or by typing the first character in the link name, which speeds up keyboard navigation considerably. Pressing the Escape key closes the submenu and restores focus to the parent menu item. Screen Reader Accessibility The accessible mega menu models its use of WAI-ARIA Roles, States, and Properties after those described in the WAI-ARIA Menu or Menu bar (widget) design pattern with some notable exceptions, so that it behaves better with screen reader user expectations for global navigation. We don't use role=""menu"" for the menu container and role=""menuitem"" for each of the links therein, because if we do, assistive technology will no longer interpret the links as links, but instead, as menu items, and the links in our global navigation will no longer show up when a screen reader user executes a shortcut command to bring up a list of links in the page. We also want to maintain the semantic structure of the submenu panels in our mega menu; our links are organized into lists and separated by headings. Omitting role=""menu"" and role=""menuitem"" for the global navigation seems the safer way to go. Usage HTML The HTML structure for the mega menu is a nav element, or any other container element, containing a list. Each list item contains a link which is followed by a div or any other container element which will serve as the pop up panel. The panel can contain any html content; in the following example, each panel contains three lists of links. You can explicitly define groups within the panel, between which a user can navigate quickly using the left and right arrow keys; in the following example, the CSS class .sub-nav-group identifies a navigable group.     <nav>         <ul class=""nav-menu"">             <li class=""nav-item"">                 <a href=""?movie"">Movies</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=0"">Action &amp; Adventure</a></li>                         <li><a href=""?movie&genre=2"">Children &amp; Family</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=7"">Dramas</a></li>                         <li><a href=""?movie&genre=9"">Foreign</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=14"">Musicals</a></li>                         <li><a href=""?movie&genre=15"">Romance</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>             <li class=""nav-item"">                 <a href=""?tv"">TV Shows</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=20"">Classic TV</a></li>                         <li><a href=""?tv&genre=21"">Crime TV</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=27"">Reality TV</a></li>                         <li><a href=""?tv&genre=30"">TV Action</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=33"">TV Dramas</a></li>                         <li><a href=""?tv&genre=34"">TV Horror</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>         </ul>     </nav> By default, accessibleMegaMenu uses the the following CSS classes to define the top-level navigation items, panels, groups within the panels, and the hover, focus, and open states. It also defines a prefix for unique id strings, which are required to indicate the relationship of a top-level navigation item to the panel it controls.     defaults = {         /* unique ID's are required to indicate aria-owns, aria-controls and aria-labelledby */         uuidPrefix: ""accessible-megamenu"",                  /* default css class used to define the megamenu styling */         menuClass: ""accessible-megamenu"",                  /* default css class for a top-level navigation item in the megamenu */         topNavItemClass: ""accessible-megamenu-top-nav-item"",                  /* default css class for a megamenu panel */         panelClass: ""accessible-megamenu-panel"",                  /* default css class for a group of items within a megamenu panel */         panelGroupClass: ""accessible-megamenu-panel-group"",                  /* default css class for the hover state */         hoverClass: ""hover"",                  /* default css class for the focus state */         focusClass: ""focus"",                  /* default css class for the open state */         openClass: ""open""      } You can optionally override the defaults to use the CSS classes you may have already defined for your mega menu. JavaScript Be sure to include jQuery and the jquery-accessibleMegaMenu.js plugin script.     <script src=""//code.jquery.com/jquery-1.10.1.min.js""></script>     <script src=""js/jquery-accessibleMegaMenu.js""></script> The following initializes the first nav element in the document as an accessibleMegaMenu, with optional CSS class overrides.     $(""nav:first"").accessibleMegaMenu({         /* prefix for generated unique id attributes, which are required             to indicate aria-owns, aria-controls and aria-labelledby */         uuidPrefix: ""accessible-megamenu"",                  /* css class used to define the megamenu styling */         menuClass: ""nav-menu"",                  /* css class for a top-level navigation item in the megamenu */         topNavItemClass: ""nav-item"",                  /* css class for a megamenu panel */         panelClass: ""sub-nav"",                  /* css class for a group of items within a megamenu panel */         panelGroupClass: ""sub-nav-group"",                  /* css class for the hover state */         hoverClass: ""hover"",                  /* css class for the focus state */         focusClass: ""focus"",                  /* css class for the open state */         openClass: ""open""     }); CSS AccessibleMegaMenu handles the showing and hiding of panels by adding or removing a CSS class. No inline styles are added to hide elements or create animation between states. Following is some rudimentary CSS for our example which enables the showing/hiding of and the layout of lists panels in the mega menu.     /* mega menu list */     .nav-menu {         display: block;         position: relative;         list-style: none;         margin: 0;         padding: 0;         z-index: 15;     }     /* a top level navigation item in the mega menu */     .nav-item {         list-style: none;         display: inline-block;         padding: 0;         margin: 0;     }     /* first descendant link within a top level navigation item */     .nav-item > a {         position: relative;         display: inline-block;         padding: 0.5em 1em;         margin: 0 0 -1px 0;         border: 1px solid transparent;     }     /* focus/open states of first descendant link within a top level         navigation item */     .nav-item > a:focus,     .nav-item > a.open {         border: 1px solid #dedede;     }     /* open state of first descendant link within a top level         navigation item */     .nav-item > a.open {         background-color: #fff;         border-bottom: none;         z-index: 1;     }     /* sub-navigation panel */     .sub-nav {         position: absolute;         display: none;         top: 2.2em;         margin-top: -1px;         padding: 0.5em 1em;         border: 1px solid #dedede;         background-color: #fff;     }     /* sub-navigation panel open state */     .sub-nav.open {         display: block;     }     /* list of items within sub-navigation panel */     .sub-nav ul {         display: inline-block;         vertical-align: top;         margin: 0 1em 0 0;         padding: 0;     }     /* list item within sub-navigation panel */     .sub-nav li {         display: block;         list-style-type: none;         margin: 0;         padding: 0;     }   Putting it all together, here is the completed example:     <!doctype html>     <html lang=""en"">     <head>     <meta charset=""UTF-8"">     <title>Simple Accessible Mega Menu Example</title>     <style>         /* Rudimentary mega menu CSS for demonstration */             /* mega menu list */         .nav-menu {             display: block;             position: relative;             list-style: none;             margin: 0;             padding: 0;             z-index: 15;         }         /* a top level navigation item in the mega menu */         .nav-item {             list-style: none;             display: inline-block;             padding: 0;             margin: 0;         }         /* first descendant link within a top level navigation item */         .nav-item > a {             position: relative;             display: inline-block;             padding: 0.5em 1em;             margin: 0 0 -1px 0;             border: 1px solid transparent;         }         /* focus/open states of first descendant link within a top level             navigation item */         .nav-item > a:focus,         .nav-item > a.open {             border: 1px solid #dedede;         }         /* open state of first descendant link within a top level             navigation item */         .nav-item > a.open {             background-color: #fff;             border-bottom: none;             z-index: 1;         }         /* sub-navigation panel */         .sub-nav {             position: absolute;             display: none;             top: 2.2em;             margin-top: -1px;             padding: 0.5em 1em;             border: 1px solid #dedede;             background-color: #fff;         }         /* sub-navigation panel open state */         .sub-nav.open {             display: block;         }         /* list of items within sub-navigation panel */         .sub-nav ul {             display: inline-block;             vertical-align: top;             margin: 0 1em 0 0;             padding: 0;         }         /* list item within sub-navigation panel */         .sub-nav li {             display: block;             list-style-type: none;             margin: 0;             padding: 0;         }          </style>     </head>     <body>     <nav>         <ul class=""nav-menu"">             <li class=""nav-item"">                 <a href=""?movie"">Movies</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=0"">Action &amp; Adventure</a></li>                         <li><a href=""?movie&genre=2"">Children &amp; Family</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=7"">Dramas</a></li>                         <li><a href=""?movie&genre=9"">Foreign</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=14"">Musicals</a></li>                         <li><a href=""?movie&genre=15"">Romance</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>             <li class=""nav-item"">                 <a href=""?tv"">TV Shows</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=20"">Classic TV</a></li>                         <li><a href=""?tv&genre=21"">Crime TV</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=27"">Reality TV</a></li>                         <li><a href=""?tv&genre=30"">TV Action</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=33"">TV Dramas</a></li>                         <li><a href=""?tv&genre=34"">TV Horror</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>         </ul>     </nav>          <!-- include jquery -->     <script src=""//code.jquery.com/jquery-1.10.1.min.js""></script>     <!-- include the jquery-accessibleMegaMenu plugin script -->     <script src=""js/jquery-accessibleMegaMenu.js""></script>     <!-- initialize a selector as an accessibleMegaMenu -->     <script>         $(""nav:first"").accessibleMegaMenu({             /* prefix for generated unique id attributes, which are required                 to indicate aria-owns, aria-controls and aria-labelledby */             uuidPrefix: ""accessible-megamenu"",                          /* css class used to define the megamenu styling */             menuClass: ""nav-menu"",                          /* css class for a top-level navigation item in the megamenu */             topNavItemClass: ""nav-item"",                          /* css class for a megamenu panel */             panelClass: ""sub-nav"",                          /* css class for a group of items within a megamenu panel */             panelGroupClass: ""sub-nav-group"",                          /* css class for the hover state */             hoverClass: ""hover"",                          /* css class for the focus state */             focusClass: ""focus"",                          /* css class for the open state */             openClass: ""open""         });     </script>     </body>     </html> About A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. Resources Readme License Apache-2.0 License Releases No releases published Packages 0 No packages published Contributors 7 Languages HTML 71.8% CSS 26.4% JavaScript 1.8% © 2021 GitHub, Inc. Terms Privacy Security Status Docs Contact GitHub Pricing API Training Blog About You can’t perform that action at this time. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."
701283,20210806,github.com,https://github.com/crypto-browserify/crypto-browserify,text/html,text/html,en,"GitHub - crypto-browserify/crypto-browserify: partial implementation of node's `crypto` for the browser Skip to content Sign up Why GitHub? Features → Mobile → Actions → Codespaces → Packages → Security → Code review → Issues → Integrations → GitHub Sponsors → Customer stories→ Team Enterprise Explore Explore GitHub → Learn and contribute Topics → Collections → Trending → Learning Lab → Open source guides → Connect with others The ReadME Project → Events → Community forum → GitHub Education → GitHub Stars program → Marketplace Pricing Plans → Compare plans → Contact Sales → Education → In this repository All GitHub ↵ Jump to ↵ No suggested jump to results In this repository All GitHub ↵ Jump to ↵ In this organization All GitHub ↵ Jump to ↵ In this repository All GitHub ↵ Jump to ↵ Sign in Sign up {{ message }} crypto-browserify / crypto-browserify Notifications Star 485 Fork 157 partial implementation of node's `crypto` for the browser MIT License 485 stars 157 forks Star Notifications Code Issues 21 Pull requests 6 Actions Projects 0 Wiki Security Insights More Code Issues Pull requests Actions Projects Wiki Security Insights master Switch branches/tags Branches Tags Could not load branches Nothing to show {{ refName }} default View all branches Could not load tags Nothing to show {{ refName }} default View all tags 6 branches 31 tags Code Clone HTTPS GitHub CLI Use Git or checkout with SVN using the web URL. Work fast with our official CLI. Learn more. Open with GitHub Desktop Download ZIP Launching GitHub Desktop If nothing happens, download GitHub Desktop and try again. Go back Launching GitHub Desktop If nothing happens, download GitHub Desktop and try again. Go back Launching Xcode If nothing happens, download Xcode and try again. Go back Launching Visual Studio Code Your codespace will open once ready. There was a problem preparing your codespace, please try again. Latest commit calvinmetcalf fix debian issue (maybe) … 460a13b Feb 9, 2018 fix debian issue (maybe) 460a13b Git stats 362 commits Files Permalink Failed to load latest commit information. Type Name Latest commit message Commit time example add standard 5.0.0 Aug 13, 2015 test fix debian issue (maybe) Feb 9, 2018 .gitignore Add .gitignore Aug 5, 2013 .travis.yml saucelabs aparently only goes back to 7 Oct 19, 2017 .zuul.yml add zuul and browser tests Oct 3, 2015 LICENSE Add MIT license Sep 20, 2013 README.md add privateEncrypt/publicDecrypt to README Dec 14, 2015 index.js add rndom fill Oct 18, 2017 package.json 3.12.0 Nov 3, 2017 View code crypto-browserify todo contributions License README.md crypto-browserify A port of node's crypto module to the browser. The goal of this module is to reimplement node's crypto module, in pure javascript so that it can run in the browser. Here is the subset that is currently implemented: createHash (sha1, sha224, sha256, sha384, sha512, md5, rmd160) createHmac (sha1, sha224, sha256, sha384, sha512, md5, rmd160) pbkdf2 pbkdf2Sync randomBytes pseudoRandomBytes createCipher (aes) createDecipher (aes) createDiffieHellman createSign (rsa, ecdsa) createVerify (rsa, ecdsa) createECDH (secp256k1) publicEncrypt/privateDecrypt (rsa) privateEncrypt/publicDecrypt (rsa) todo these features from node's crypto are still unimplemented. createCredentials contributions If you are interested in writing a feature, please implement as a new module, which will be incorporated into crypto-browserify as a dependency. All deps must be compatible with node's crypto (generate example inputs and outputs with node, and save base64 strings inside JSON, so that tests can run in the browser. see sha.js Crypto is extra serious so please do not hesitate to review the code, and post comments if you do. License MIT About partial implementation of node's `crypto` for the browser Resources Readme License MIT License Releases 31 tags Packages 0 No packages published Used by 6.3m + 6,270,903 Contributors 24 + 13 contributors Languages JavaScript 99.1% HTML 0.9% © 2021 GitHub, Inc. Terms Privacy Security Status Docs Contact GitHub Pricing API Training Blog About You can’t perform that action at this time. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."
701284,20210806,github.com,https://github.com/indutny/elliptic/issues,text/html,text/html,en,"Issues · indutny/elliptic · GitHub Skip to content Sign up Why GitHub? Features → Mobile → Actions → Codespaces → Packages → Security → Code review → Issues → Integrations → GitHub Sponsors → Customer stories→ Team Enterprise Explore Explore GitHub → Learn and contribute Topics → Collections → Trending → Learning Lab → Open source guides → Connect with others The ReadME Project → Events → Community forum → GitHub Education → GitHub Stars program → Marketplace Pricing Plans → Compare plans → Contact Sales → Education → In this repository All GitHub ↵ Jump to ↵ No suggested jump to results In this repository All GitHub ↵ Jump to ↵ In this user All GitHub ↵ Jump to ↵ In this repository All GitHub ↵ Jump to ↵ Sign in Sign up {{ message }} indutny / elliptic Notifications Star 1.3k Fork 310 Code Issues 78 Pull requests 21 Actions Projects 0 Wiki Security Insights More Code Issues Pull requests Actions Projects Wiki Security Insights Labels 8 Milestones 0 Labels 8 Milestones 0 New issue Have a question about this project? Sign up for a free GitHub account to open an issue and contact its maintainers and the community. Sign up for GitHub By clicking “Sign up for GitHub”, you agree to our terms of service and privacy statement. We’ll occasionally send you account related emails. Already on GitHub? Sign in to your account 78 Open 97 Closed 78 Open 97 Closed Author Filter by author author: Filter by this user Label Filter by label Use alt + click/return to exclude labels Projects Filter by project Milestones Filter by milestone Assignee Filter by who’s assigned Sort Sort by Newest Oldest Most commented Least commented Recently updated Least recently updated Most reactions 👍 👎 😄 🎉 😕 ❤️ 🚀 👀 invalid y value for curve for new EC('p256') #263 opened Jul 28, 2021 by congminh090800 Invalid hashed data sign with EDDSA #262 opened Jul 6, 2021 by samuel-uniris Point multiplication gives different results based on order of operattions #260 opened Jun 16, 2021 by kot-begemot 3 deriving private key from public key #257 opened Apr 27, 2021 by madhav-madhusoodanan How to use keys with crypto.subtle #255 opened Apr 1, 2021 by DominicTobias-b1 EDDSA.decodeInt should fails or reduce by dafault? #254 opened Mar 18, 2021 by mahnunchik Sad state #251 opened Mar 11, 2021 by berkus 1 EDDSA.decodePoint should fails on ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff #250 opened Mar 3, 2021 by mahnunchik 15 Add endian argument to bn.js toString method #249 opened Mar 2, 2021 by mahnunchik EDDSA decodePoint doesn't support Buffer as argument #248 opened Mar 2, 2021 by mahnunchik How to decipher the encrypted message? #245 opened Jan 27, 2021 by istabraq-iot Montgomery Curve25519 is not openssl compatible #243 opened Dec 28, 2020 by jc-lab 4 Curves p384 and p521 produce incorrect results #239 opened Oct 18, 2020 by guidovranken 1 i want to use this library with c# #238 opened Oct 10, 2020 by medozeus Elliptic.js support following curve types: #236 opened Oct 5, 2020 by medozeus The Elliptic package 6.5.2 for Node.js allows ECDSA signature malleability via variations in encoding, leading '\0' bytes, or integer overflows. #235 opened Oct 1, 2020 by bsomeshwer EdDSA: What is a reason to manipulate with bytes? #233 opened Aug 27, 2020 by mahnunchik why use derive method get ECDH key，i got different length #230 opened Jul 10, 2020 by cqupt-yifanwu 4 Why do I generate my local test path in chunk-vendors when packing with NPM #229 opened Jun 22, 2020 by Anthonychen1994 1 TypedArray support ? #228 opened Jun 20, 2020 by dojyorin Is there way to generate PKCS#8 private key from Pem format ECC Private key #225 opened Apr 28, 2020 by sureshreddygovindu Signature validation in python. Prefix configuration? #224 opened Apr 25, 2020 by amrbz is it possible to do assymetric encryption? #223 opened Apr 7, 2020 by maroodb 1 Missing infinity point encoding #218 opened Feb 21, 2020 by catenacyber 1 ECDH P-521 public key point not on curve according to java (clojure) #216 opened Feb 11, 2020 by slhabity 2 Previous 1 2 3 4 Next Previous Next ProTip! Follow long discussions with comments:>50. © 2021 GitHub, Inc. Terms Privacy Security Status Docs Contact GitHub Pricing API Training Blog About You can’t perform that action at this time. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."
701285,20210806,github.com,https://github.com/indutny/elliptic,text/html,text/html,en,"GitHub - indutny/elliptic: Fast Elliptic Curve Cryptography in plain javascript Skip to content Sign up Why GitHub? Features → Mobile → Actions → Codespaces → Packages → Security → Code review → Issues → Integrations → GitHub Sponsors → Customer stories→ Team Enterprise Explore Explore GitHub → Learn and contribute Topics → Collections → Trending → Learning Lab → Open source guides → Connect with others The ReadME Project → Events → Community forum → GitHub Education → GitHub Stars program → Marketplace Pricing Plans → Compare plans → Contact Sales → Education → In this repository All GitHub ↵ Jump to ↵ No suggested jump to results In this repository All GitHub ↵ Jump to ↵ In this user All GitHub ↵ Jump to ↵ In this repository All GitHub ↵ Jump to ↵ Sign in Sign up {{ message }} indutny / elliptic Notifications Star 1.3k Fork 310 Fast Elliptic Curve Cryptography in plain javascript 1.3k stars 310 forks Star Notifications Code Issues 78 Pull requests 21 Actions Projects 0 Wiki Security Insights More Code Issues Pull requests Actions Projects Wiki Security Insights master Switch branches/tags Branches Tags Could not load branches Nothing to show {{ refName }} default View all branches Could not load tags Nothing to show {{ refName }} default View all tags 2 branches 85 tags Code Clone HTTPS GitHub CLI Use Git or checkout with SVN using the web URL. Work fast with our official CLI. Learn more. Open with GitHub Desktop Download ZIP Launching GitHub Desktop If nothing happens, download GitHub Desktop and try again. Go back Launching GitHub Desktop If nothing happens, download GitHub Desktop and try again. Go back Launching Xcode If nothing happens, download Xcode and try again. Go back Launching Visual Studio Code Your codespace will open once ready. There was a problem preparing your codespace, please try again. Latest commit indutny 6.5.4 … 43ac7f2 Feb 2, 2021 6.5.4 43ac7f2 Git stats 331 commits Files Permalink Failed to load latest commit information. Type Name Latest commit message Commit time benchmarks package: remove Makefile and dist Jan 29, 2016 dist 6.5.4 Feb 2, 2021 lib ec: validate that a point before deriving keys Feb 2, 2021 test ec: validate that a point before deriving keys Feb 2, 2021 .codeclimate.yml test: improvements with Saucelabs/Codeclimate Mar 31, 2016 .eslintignore lib: relint using eslint Aug 2, 2020 .eslintrc.js lib: relint using eslint Aug 2, 2020 .gitignore test: improvements with Saucelabs/Codeclimate Mar 31, 2016 .npmignore npmignore: dist May 20, 2016 .travis.yml travis: really move on Jun 26, 2019 Gruntfile.js grunt: fix standalone build May 25, 2016 README.md readme: update example Mar 23, 2017 package-lock.json 6.5.4 Feb 2, 2021 package.json 6.5.4 Feb 2, 2021 View code Elliptic Incentive Benchmarks API ECDSA EdDSA ECDH Supported curves Implementation details Related projects LICENSE README.md Elliptic Fast elliptic-curve cryptography in a plain javascript implementation. NOTE: Please take a look at http://safecurves.cr.yp.to/ before choosing a curve for your cryptography operations. Incentive ECC is much slower than regular RSA cryptography, the JS implementations are even more slower. Benchmarks $ node benchmarks/index.js Benchmarking: sign elliptic#sign x 262 ops/sec ±0.51% (177 runs sampled) eccjs#sign x 55.91 ops/sec ±0.90% (144 runs sampled) ------------------------ Fastest is elliptic#sign ======================== Benchmarking: verify elliptic#verify x 113 ops/sec ±0.50% (166 runs sampled) eccjs#verify x 48.56 ops/sec ±0.36% (125 runs sampled) ------------------------ Fastest is elliptic#verify ======================== Benchmarking: gen elliptic#gen x 294 ops/sec ±0.43% (176 runs sampled) eccjs#gen x 62.25 ops/sec ±0.63% (129 runs sampled) ------------------------ Fastest is elliptic#gen ======================== Benchmarking: ecdh elliptic#ecdh x 136 ops/sec ±0.85% (156 runs sampled) ------------------------ Fastest is elliptic#ecdh ======================== API ECDSA var EC = require('elliptic').ec; // Create and initialize EC context // (better do it once and reuse it) var ec = new EC('secp256k1'); // Generate keys var key = ec.genKeyPair(); // Sign the message's hash (input must be an array, or a hex-string) var msgHash = [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ]; var signature = key.sign(msgHash); // Export DER encoded signature in Array var derSign = signature.toDER(); // Verify signature console.log(key.verify(msgHash, derSign)); // CHECK WITH NO PRIVATE KEY var pubPoint = key.getPublic(); var x = pubPoint.getX(); var y = pubPoint.getY(); // Public Key MUST be either: // 1) '04' + hex string of x + hex string of y; or // 2) object with two hex string properties (x and y); or // 3) object with two buffer properties (x and y) var pub = pubPoint.encode('hex');                                 // case 1 var pub = { x: x.toString('hex'), y: y.toString('hex') };         // case 2 var pub = { x: x.toBuffer(), y: y.toBuffer() };                   // case 3 var pub = { x: x.toArrayLike(Buffer), y: y.toArrayLike(Buffer) }; // case 3 // Import public key var key = ec.keyFromPublic(pub, 'hex'); // Signature MUST be either: // 1) DER-encoded signature as hex-string; or // 2) DER-encoded signature as buffer; or // 3) object with two hex-string properties (r and s); or // 4) object with two buffer properties (r and s) var signature = '3046022100...'; // case 1 var signature = new Buffer('...'); // case 2 var signature = { r: 'b1fc...', s: '9c42...' }; // case 3 // Verify signature console.log(key.verify(msgHash, signature)); EdDSA var EdDSA = require('elliptic').eddsa; // Create and initialize EdDSA context // (better do it once and reuse it) var ec = new EdDSA('ed25519'); // Create key pair from secret var key = ec.keyFromSecret('693e3c...'); // hex string, array or Buffer // Sign the message's hash (input must be an array, or a hex-string) var msgHash = [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ]; var signature = key.sign(msgHash).toHex(); // Verify signature console.log(key.verify(msgHash, signature)); // CHECK WITH NO PRIVATE KEY // Import public key var pub = '0a1af638...'; var key = ec.keyFromPublic(pub, 'hex'); // Verify signature var signature = '70bed1...'; console.log(key.verify(msgHash, signature)); ECDH var EC = require('elliptic').ec; var ec = new EC('curve25519'); // Generate keys var key1 = ec.genKeyPair(); var key2 = ec.genKeyPair(); var shared1 = key1.derive(key2.getPublic()); var shared2 = key2.derive(key1.getPublic()); console.log('Both shared secrets are BN instances'); console.log(shared1.toString(16)); console.log(shared2.toString(16)); three and more members: var EC = require('elliptic').ec; var ec = new EC('curve25519'); var A = ec.genKeyPair(); var B = ec.genKeyPair(); var C = ec.genKeyPair(); var AB = A.getPublic().mul(B.getPrivate()) var BC = B.getPublic().mul(C.getPrivate()) var CA = C.getPublic().mul(A.getPrivate()) var ABC = AB.mul(C.getPrivate()) var BCA = BC.mul(A.getPrivate()) var CAB = CA.mul(B.getPrivate()) console.log(ABC.getX().toString(16)) console.log(BCA.getX().toString(16)) console.log(CAB.getX().toString(16)) NOTE: .derive() returns a BN instance. Supported curves Elliptic.js support following curve types: Short Weierstrass Montgomery Edwards Twisted Edwards Following curve 'presets' are embedded into the library: secp256k1 p192 p224 p256 p384 p521 curve25519 ed25519 NOTE: That curve25519 could not be used for ECDSA, use ed25519 instead. Implementation details ECDSA is using deterministic k value generation as per RFC6979. Most of the curve operations are performed on non-affine coordinates (either projective or extended), various windowing techniques are used for different cases. All operations are performed in reduction context using bn.js, hashing is provided by hash.js Related projects eccrypto: isomorphic implementation of ECDSA, ECDH and ECIES for both browserify and node (uses elliptic for browser and secp256k1-node for node) LICENSE This software is licensed under the MIT License. Copyright Fedor Indutny, 2014. Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the ""Software""), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. About Fast Elliptic Curve Cryptography in plain javascript Resources Readme Releases 85 tags Packages 0 No packages published Contributors 25 + 14 contributors Languages JavaScript 99.3% HTML 0.7% © 2021 GitHub, Inc. Terms Privacy Security Status Docs Contact GitHub Pricing API Training Blog About You can’t perform that action at this time. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."
701822,20210813,github.com,https://github.com/adobe-accessibility/Accessible-Mega-Menu,text/html,text/html,en,"GitHub - adobe-accessibility/Accessible-Mega-Menu: A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. Skip to content Sign up Why GitHub? Features → Mobile → Actions → Codespaces → Packages → Security → Code review → Issues → Integrations → GitHub Sponsors → Customer stories→ Team Enterprise Explore Explore GitHub → Learn and contribute Topics → Collections → Trending → Learning Lab → Open source guides → Connect with others The ReadME Project → Events → Community forum → GitHub Education → GitHub Stars program → Marketplace Pricing Plans → Compare plans → Contact Sales → Education → In this repository All GitHub ↵ Jump to ↵ No suggested jump to results In this repository All GitHub ↵ Jump to ↵ In this organization All GitHub ↵ Jump to ↵ In this repository All GitHub ↵ Jump to ↵ Sign in Sign up {{ message }} adobe-accessibility / Accessible-Mega-Menu Notifications Star 584 Fork 202 A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. Apache-2.0 License 584 stars 202 forks Star Notifications Code Issues 31 Pull requests 6 Actions Projects 0 Wiki Security Insights More Code Issues Pull requests Actions Projects Wiki Security Insights master Switch branches/tags Branches Tags Could not load branches Nothing to show {{ refName }} default View all branches Could not load tags Nothing to show {{ refName }} default View all tags 2 branches 0 tags Code Clone HTTPS GitHub CLI Use Git or checkout with SVN using the web URL. Work fast with our official CLI. Learn more. Open with GitHub Desktop Download ZIP Launching GitHub Desktop If nothing happens, download GitHub Desktop and try again. Go back Launching GitHub Desktop If nothing happens, download GitHub Desktop and try again. Go back Launching Xcode If nothing happens, download Xcode and try again. Go back Launching Visual Studio Code Your codespace will open once ready. There was a problem preparing your codespace, please try again. Latest commit Git stats 39 commits Files Permalink Failed to load latest commit information. Type Name Latest commit message Commit time css js third-party/jquery LICENSE NOTICE README.md index.html package.json View code Accessible Mega Menu Keyboard Accessibility Screen Reader Accessibility Usage HTML JavaScript CSS README.md Accessible Mega Menu ========================= A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. It is modeled after the mega menu on adobe.com but has been simplified for use by others. An brief explanation of our interaction design choices can be found in a blog post at Mega menu accessibility on adobe.com. Content for the links and text within the mega menu comes from the Web Content Accessibility Guidelines (WCAG) 2.0. Keyboard Accessibility The accessible mega menu supports keyboard interaction modeled after the behavior described in the WAI-ARIA Menu or Menu bar (widget) design pattern, however we also try to respect users' general expectations for the behavior of links in a global navigation. To this end, the accessible mega menu implementation permits tab focus on each of the six top-level menu items. When one of the menu items has focus, pressing the Enter key, Spacebar or Down arrow will open the submenu panel, and pressing the Left or Right arrow key will shift focus to the adjacent menu item. Links within the submenu panels are included in the tab order when the panel is open. They can also be navigated with the arrow keys or by typing the first character in the link name, which speeds up keyboard navigation considerably. Pressing the Escape key closes the submenu and restores focus to the parent menu item. Screen Reader Accessibility The accessible mega menu models its use of WAI-ARIA Roles, States, and Properties after those described in the WAI-ARIA Menu or Menu bar (widget) design pattern with some notable exceptions, so that it behaves better with screen reader user expectations for global navigation. We don't use role=""menu"" for the menu container and role=""menuitem"" for each of the links therein, because if we do, assistive technology will no longer interpret the links as links, but instead, as menu items, and the links in our global navigation will no longer show up when a screen reader user executes a shortcut command to bring up a list of links in the page. We also want to maintain the semantic structure of the submenu panels in our mega menu; our links are organized into lists and separated by headings. Omitting role=""menu"" and role=""menuitem"" for the global navigation seems the safer way to go. Usage HTML The HTML structure for the mega menu is a nav element, or any other container element, containing a list. Each list item contains a link which is followed by a div or any other container element which will serve as the pop up panel. The panel can contain any html content; in the following example, each panel contains three lists of links. You can explicitly define groups within the panel, between which a user can navigate quickly using the left and right arrow keys; in the following example, the CSS class .sub-nav-group identifies a navigable group.     <nav>         <ul class=""nav-menu"">             <li class=""nav-item"">                 <a href=""?movie"">Movies</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=0"">Action &amp; Adventure</a></li>                         <li><a href=""?movie&genre=2"">Children &amp; Family</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=7"">Dramas</a></li>                         <li><a href=""?movie&genre=9"">Foreign</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=14"">Musicals</a></li>                         <li><a href=""?movie&genre=15"">Romance</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>             <li class=""nav-item"">                 <a href=""?tv"">TV Shows</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=20"">Classic TV</a></li>                         <li><a href=""?tv&genre=21"">Crime TV</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=27"">Reality TV</a></li>                         <li><a href=""?tv&genre=30"">TV Action</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=33"">TV Dramas</a></li>                         <li><a href=""?tv&genre=34"">TV Horror</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>         </ul>     </nav> By default, accessibleMegaMenu uses the the following CSS classes to define the top-level navigation items, panels, groups within the panels, and the hover, focus, and open states. It also defines a prefix for unique id strings, which are required to indicate the relationship of a top-level navigation item to the panel it controls.     defaults = {         /* unique ID's are required to indicate aria-owns, aria-controls and aria-labelledby */         uuidPrefix: ""accessible-megamenu"",                  /* default css class used to define the megamenu styling */         menuClass: ""accessible-megamenu"",                  /* default css class for a top-level navigation item in the megamenu */         topNavItemClass: ""accessible-megamenu-top-nav-item"",                  /* default css class for a megamenu panel */         panelClass: ""accessible-megamenu-panel"",                  /* default css class for a group of items within a megamenu panel */         panelGroupClass: ""accessible-megamenu-panel-group"",                  /* default css class for the hover state */         hoverClass: ""hover"",                  /* default css class for the focus state */         focusClass: ""focus"",                  /* default css class for the open state */         openClass: ""open""      } You can optionally override the defaults to use the CSS classes you may have already defined for your mega menu. JavaScript Be sure to include jQuery and the jquery-accessibleMegaMenu.js plugin script.     <script src=""//code.jquery.com/jquery-1.10.1.min.js""></script>     <script src=""js/jquery-accessibleMegaMenu.js""></script> The following initializes the first nav element in the document as an accessibleMegaMenu, with optional CSS class overrides.     $(""nav:first"").accessibleMegaMenu({         /* prefix for generated unique id attributes, which are required             to indicate aria-owns, aria-controls and aria-labelledby */         uuidPrefix: ""accessible-megamenu"",                  /* css class used to define the megamenu styling */         menuClass: ""nav-menu"",                  /* css class for a top-level navigation item in the megamenu */         topNavItemClass: ""nav-item"",                  /* css class for a megamenu panel */         panelClass: ""sub-nav"",                  /* css class for a group of items within a megamenu panel */         panelGroupClass: ""sub-nav-group"",                  /* css class for the hover state */         hoverClass: ""hover"",                  /* css class for the focus state */         focusClass: ""focus"",                  /* css class for the open state */         openClass: ""open""     }); CSS AccessibleMegaMenu handles the showing and hiding of panels by adding or removing a CSS class. No inline styles are added to hide elements or create animation between states. Following is some rudimentary CSS for our example which enables the showing/hiding of and the layout of lists panels in the mega menu.     /* mega menu list */     .nav-menu {         display: block;         position: relative;         list-style: none;         margin: 0;         padding: 0;         z-index: 15;     }     /* a top level navigation item in the mega menu */     .nav-item {         list-style: none;         display: inline-block;         padding: 0;         margin: 0;     }     /* first descendant link within a top level navigation item */     .nav-item > a {         position: relative;         display: inline-block;         padding: 0.5em 1em;         margin: 0 0 -1px 0;         border: 1px solid transparent;     }     /* focus/open states of first descendant link within a top level         navigation item */     .nav-item > a:focus,     .nav-item > a.open {         border: 1px solid #dedede;     }     /* open state of first descendant link within a top level         navigation item */     .nav-item > a.open {         background-color: #fff;         border-bottom: none;         z-index: 1;     }     /* sub-navigation panel */     .sub-nav {         position: absolute;         display: none;         top: 2.2em;         margin-top: -1px;         padding: 0.5em 1em;         border: 1px solid #dedede;         background-color: #fff;     }     /* sub-navigation panel open state */     .sub-nav.open {         display: block;     }     /* list of items within sub-navigation panel */     .sub-nav ul {         display: inline-block;         vertical-align: top;         margin: 0 1em 0 0;         padding: 0;     }     /* list item within sub-navigation panel */     .sub-nav li {         display: block;         list-style-type: none;         margin: 0;         padding: 0;     }   Putting it all together, here is the completed example:     <!doctype html>     <html lang=""en"">     <head>     <meta charset=""UTF-8"">     <title>Simple Accessible Mega Menu Example</title>     <style>         /* Rudimentary mega menu CSS for demonstration */             /* mega menu list */         .nav-menu {             display: block;             position: relative;             list-style: none;             margin: 0;             padding: 0;             z-index: 15;         }         /* a top level navigation item in the mega menu */         .nav-item {             list-style: none;             display: inline-block;             padding: 0;             margin: 0;         }         /* first descendant link within a top level navigation item */         .nav-item > a {             position: relative;             display: inline-block;             padding: 0.5em 1em;             margin: 0 0 -1px 0;             border: 1px solid transparent;         }         /* focus/open states of first descendant link within a top level             navigation item */         .nav-item > a:focus,         .nav-item > a.open {             border: 1px solid #dedede;         }         /* open state of first descendant link within a top level             navigation item */         .nav-item > a.open {             background-color: #fff;             border-bottom: none;             z-index: 1;         }         /* sub-navigation panel */         .sub-nav {             position: absolute;             display: none;             top: 2.2em;             margin-top: -1px;             padding: 0.5em 1em;             border: 1px solid #dedede;             background-color: #fff;         }         /* sub-navigation panel open state */         .sub-nav.open {             display: block;         }         /* list of items within sub-navigation panel */         .sub-nav ul {             display: inline-block;             vertical-align: top;             margin: 0 1em 0 0;             padding: 0;         }         /* list item within sub-navigation panel */         .sub-nav li {             display: block;             list-style-type: none;             margin: 0;             padding: 0;         }          </style>     </head>     <body>     <nav>         <ul class=""nav-menu"">             <li class=""nav-item"">                 <a href=""?movie"">Movies</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=0"">Action &amp; Adventure</a></li>                         <li><a href=""?movie&genre=2"">Children &amp; Family</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=7"">Dramas</a></li>                         <li><a href=""?movie&genre=9"">Foreign</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=14"">Musicals</a></li>                         <li><a href=""?movie&genre=15"">Romance</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>             <li class=""nav-item"">                 <a href=""?tv"">TV Shows</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=20"">Classic TV</a></li>                         <li><a href=""?tv&genre=21"">Crime TV</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=27"">Reality TV</a></li>                         <li><a href=""?tv&genre=30"">TV Action</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=33"">TV Dramas</a></li>                         <li><a href=""?tv&genre=34"">TV Horror</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>         </ul>     </nav>          <!-- include jquery -->     <script src=""//code.jquery.com/jquery-1.10.1.min.js""></script>     <!-- include the jquery-accessibleMegaMenu plugin script -->     <script src=""js/jquery-accessibleMegaMenu.js""></script>     <!-- initialize a selector as an accessibleMegaMenu -->     <script>         $(""nav:first"").accessibleMegaMenu({             /* prefix for generated unique id attributes, which are required                 to indicate aria-owns, aria-controls and aria-labelledby */             uuidPrefix: ""accessible-megamenu"",                          /* css class used to define the megamenu styling */             menuClass: ""nav-menu"",                          /* css class for a top-level navigation item in the megamenu */             topNavItemClass: ""nav-item"",                          /* css class for a megamenu panel */             panelClass: ""sub-nav"",                          /* css class for a group of items within a megamenu panel */             panelGroupClass: ""sub-nav-group"",                          /* css class for the hover state */             hoverClass: ""hover"",                          /* css class for the focus state */             focusClass: ""focus"",                          /* css class for the open state */             openClass: ""open""         });     </script>     </body>     </html> About A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. Resources Readme License Apache-2.0 License Releases No releases published Packages 0 No packages published Used by 16 + 8 Contributors 7 Languages HTML 71.8% CSS 26.4% JavaScript 1.8% © 2021 GitHub, Inc. Terms Privacy Security Status Docs Contact GitHub Pricing API Training Blog About You can’t perform that action at this time. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."
704791,20210813,github.com,https://github.com/crypto-browserify/crypto-browserify,text/html,text/html,en,"GitHub - crypto-browserify/crypto-browserify: partial implementation of node's `crypto` for the browser Skip to content Sign up Why GitHub? Features → Mobile → Actions → Codespaces → Packages → Security → Code review → Issues → Integrations → GitHub Sponsors → Customer stories→ Team Enterprise Explore Explore GitHub → Learn and contribute Topics → Collections → Trending → Learning Lab → Open source guides → Connect with others The ReadME Project → Events → Community forum → GitHub Education → GitHub Stars program → Marketplace Pricing Plans → Compare plans → Contact Sales → Education → In this repository All GitHub ↵ Jump to ↵ No suggested jump to results In this repository All GitHub ↵ Jump to ↵ In this organization All GitHub ↵ Jump to ↵ In this repository All GitHub ↵ Jump to ↵ Sign in Sign up {{ message }} crypto-browserify / crypto-browserify Notifications Star 489 Fork 157 partial implementation of node's `crypto` for the browser MIT License 489 stars 157 forks Star Notifications Code Issues 21 Pull requests 6 Actions Projects 0 Wiki Security Insights More Code Issues Pull requests Actions Projects Wiki Security Insights master Switch branches/tags Branches Tags Could not load branches Nothing to show {{ refName }} default View all branches Could not load tags Nothing to show {{ refName }} default View all tags 6 branches 31 tags Code Clone HTTPS GitHub CLI Use Git or checkout with SVN using the web URL. Work fast with our official CLI. Learn more. Open with GitHub Desktop Download ZIP Launching GitHub Desktop If nothing happens, download GitHub Desktop and try again. Go back Launching GitHub Desktop If nothing happens, download GitHub Desktop and try again. Go back Launching Xcode If nothing happens, download Xcode and try again. Go back Launching Visual Studio Code Your codespace will open once ready. There was a problem preparing your codespace, please try again. Latest commit calvinmetcalf fix debian issue (maybe) … 460a13b Feb 9, 2018 fix debian issue (maybe) 460a13b Git stats 362 commits Files Permalink Failed to load latest commit information. Type Name Latest commit message Commit time example add standard 5.0.0 Aug 13, 2015 test fix debian issue (maybe) Feb 9, 2018 .gitignore Add .gitignore Aug 5, 2013 .travis.yml saucelabs aparently only goes back to 7 Oct 19, 2017 .zuul.yml add zuul and browser tests Oct 3, 2015 LICENSE Add MIT license Sep 20, 2013 README.md add privateEncrypt/publicDecrypt to README Dec 14, 2015 index.js add rndom fill Oct 18, 2017 package.json 3.12.0 Nov 3, 2017 View code crypto-browserify todo contributions License README.md crypto-browserify A port of node's crypto module to the browser. The goal of this module is to reimplement node's crypto module, in pure javascript so that it can run in the browser. Here is the subset that is currently implemented: createHash (sha1, sha224, sha256, sha384, sha512, md5, rmd160) createHmac (sha1, sha224, sha256, sha384, sha512, md5, rmd160) pbkdf2 pbkdf2Sync randomBytes pseudoRandomBytes createCipher (aes) createDecipher (aes) createDiffieHellman createSign (rsa, ecdsa) createVerify (rsa, ecdsa) createECDH (secp256k1) publicEncrypt/privateDecrypt (rsa) privateEncrypt/publicDecrypt (rsa) todo these features from node's crypto are still unimplemented. createCredentials contributions If you are interested in writing a feature, please implement as a new module, which will be incorporated into crypto-browserify as a dependency. All deps must be compatible with node's crypto (generate example inputs and outputs with node, and save base64 strings inside JSON, so that tests can run in the browser. see sha.js Crypto is extra serious so please do not hesitate to review the code, and post comments if you do. License MIT About partial implementation of node's `crypto` for the browser Resources Readme License MIT License Releases 31 tags Packages 0 No packages published Used by 6.3m + 6,293,501 Contributors 24 + 13 contributors Languages JavaScript 99.1% HTML 0.9% © 2021 GitHub, Inc. Terms Privacy Security Status Docs Contact GitHub Pricing API Training Blog About You can’t perform that action at this time. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."
704792,20210813,github.com,https://github.com/indutny/elliptic/issues,text/html,text/html,en,"Issues · indutny/elliptic · GitHub Skip to content Sign up Why GitHub? Features → Mobile → Actions → Codespaces → Packages → Security → Code review → Issues → Integrations → GitHub Sponsors → Customer stories→ Team Enterprise Explore Explore GitHub → Learn and contribute Topics → Collections → Trending → Learning Lab → Open source guides → Connect with others The ReadME Project → Events → Community forum → GitHub Education → GitHub Stars program → Marketplace Pricing Plans → Compare plans → Contact Sales → Education → In this repository All GitHub ↵ Jump to ↵ No suggested jump to results In this repository All GitHub ↵ Jump to ↵ In this user All GitHub ↵ Jump to ↵ In this repository All GitHub ↵ Jump to ↵ Sign in Sign up {{ message }} indutny / elliptic Notifications Star 1.3k Fork 310 Code Issues 78 Pull requests 21 Actions Projects 0 Wiki Security Insights More Code Issues Pull requests Actions Projects Wiki Security Insights Labels 8 Milestones 0 Labels 8 Milestones 0 New issue Have a question about this project? Sign up for a free GitHub account to open an issue and contact its maintainers and the community. Sign up for GitHub By clicking “Sign up for GitHub”, you agree to our terms of service and privacy statement. We’ll occasionally send you account related emails. Already on GitHub? Sign in to your account 78 Open 97 Closed 78 Open 97 Closed Author Filter by author author: Filter by this user Label Filter by label Use alt + click/return to exclude labels or ⇧ + click/return for logical OR Projects Filter by project Milestones Filter by milestone Assignee Filter by who’s assigned Sort Sort by Newest Oldest Most commented Least commented Recently updated Least recently updated Most reactions 👍 👎 😄 🎉 😕 ❤️ 🚀 👀 invalid y value for curve for new EC('p256') #263 opened Jul 28, 2021 by congminh090800 Invalid hashed data sign with EDDSA #262 opened Jul 6, 2021 by samuel-uniris Point multiplication gives different results based on order of operattions #260 opened Jun 16, 2021 by kot-begemot 3 deriving private key from public key #257 opened Apr 27, 2021 by madhav-madhusoodanan How to use keys with crypto.subtle #255 opened Apr 1, 2021 by DominicTobias-b1 EDDSA.decodeInt should fails or reduce by dafault? #254 opened Mar 18, 2021 by mahnunchik Sad state #251 opened Mar 11, 2021 by berkus 1 EDDSA.decodePoint should fails on ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff #250 opened Mar 3, 2021 by mahnunchik 15 Add endian argument to bn.js toString method #249 opened Mar 2, 2021 by mahnunchik EDDSA decodePoint doesn't support Buffer as argument #248 opened Mar 2, 2021 by mahnunchik How to decipher the encrypted message? #245 opened Jan 27, 2021 by istabraq-iot Montgomery Curve25519 is not openssl compatible #243 opened Dec 28, 2020 by jc-lab 4 Curves p384 and p521 produce incorrect results #239 opened Oct 18, 2020 by guidovranken 1 i want to use this library with c# #238 opened Oct 10, 2020 by medozeus Elliptic.js support following curve types: #236 opened Oct 5, 2020 by medozeus The Elliptic package 6.5.2 for Node.js allows ECDSA signature malleability via variations in encoding, leading '\0' bytes, or integer overflows. #235 opened Oct 1, 2020 by bsomeshwer EdDSA: What is a reason to manipulate with bytes? #233 opened Aug 27, 2020 by mahnunchik why use derive method get ECDH key，i got different length #230 opened Jul 10, 2020 by cqupt-yifanwu 4 Why do I generate my local test path in chunk-vendors when packing with NPM #229 opened Jun 22, 2020 by Anthonychen1994 1 TypedArray support ? #228 opened Jun 20, 2020 by dojyorin Is there way to generate PKCS#8 private key from Pem format ECC Private key #225 opened Apr 28, 2020 by sureshreddygovindu Signature validation in python. Prefix configuration? #224 opened Apr 25, 2020 by amrbz is it possible to do assymetric encryption? #223 opened Apr 7, 2020 by maroodb 1 Missing infinity point encoding #218 opened Feb 21, 2020 by catenacyber 1 ECDH P-521 public key point not on curve according to java (clojure) #216 opened Feb 11, 2020 by slhabity 2 Previous 1 2 3 4 Next Previous Next ProTip! Find all open issues with in progress development work with linked:pr. © 2021 GitHub, Inc. Terms Privacy Security Status Docs Contact GitHub Pricing API Training Blog About You can’t perform that action at this time. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."
704804,20210813,github.com,https://github.com/indutny/elliptic,text/html,text/html,en,"GitHub - indutny/elliptic: Fast Elliptic Curve Cryptography in plain javascript Skip to content Sign up Why GitHub? Features → Mobile → Actions → Codespaces → Packages → Security → Code review → Issues → Integrations → GitHub Sponsors → Customer stories→ Team Enterprise Explore Explore GitHub → Learn and contribute Topics → Collections → Trending → Learning Lab → Open source guides → Connect with others The ReadME Project → Events → Community forum → GitHub Education → GitHub Stars program → Marketplace Pricing Plans → Compare plans → Contact Sales → Education → In this repository All GitHub ↵ Jump to ↵ No suggested jump to results In this repository All GitHub ↵ Jump to ↵ In this user All GitHub ↵ Jump to ↵ In this repository All GitHub ↵ Jump to ↵ Sign in Sign up {{ message }} indutny / elliptic Notifications Star 1.3k Fork 310 Fast Elliptic Curve Cryptography in plain javascript 1.3k stars 310 forks Star Notifications Code Issues 78 Pull requests 21 Actions Projects 0 Wiki Security Insights More Code Issues Pull requests Actions Projects Wiki Security Insights master Switch branches/tags Branches Tags Could not load branches Nothing to show {{ refName }} default View all branches Could not load tags Nothing to show {{ refName }} default View all tags 2 branches 85 tags Code Clone HTTPS GitHub CLI Use Git or checkout with SVN using the web URL. Work fast with our official CLI. Learn more. Open with GitHub Desktop Download ZIP Launching GitHub Desktop If nothing happens, download GitHub Desktop and try again. Go back Launching GitHub Desktop If nothing happens, download GitHub Desktop and try again. Go back Launching Xcode If nothing happens, download Xcode and try again. Go back Launching Visual Studio Code Your codespace will open once ready. There was a problem preparing your codespace, please try again. Latest commit indutny 6.5.4 … 43ac7f2 Feb 2, 2021 6.5.4 43ac7f2 Git stats 331 commits Files Permalink Failed to load latest commit information. Type Name Latest commit message Commit time benchmarks package: remove Makefile and dist Jan 29, 2016 dist 6.5.4 Feb 2, 2021 lib ec: validate that a point before deriving keys Feb 2, 2021 test ec: validate that a point before deriving keys Feb 2, 2021 .codeclimate.yml test: improvements with Saucelabs/Codeclimate Mar 31, 2016 .eslintignore lib: relint using eslint Aug 2, 2020 .eslintrc.js lib: relint using eslint Aug 2, 2020 .gitignore test: improvements with Saucelabs/Codeclimate Mar 31, 2016 .npmignore npmignore: dist May 20, 2016 .travis.yml travis: really move on Jun 26, 2019 Gruntfile.js grunt: fix standalone build May 25, 2016 README.md readme: update example Mar 23, 2017 package-lock.json 6.5.4 Feb 2, 2021 package.json 6.5.4 Feb 2, 2021 View code Elliptic Incentive Benchmarks API ECDSA EdDSA ECDH Supported curves Implementation details Related projects LICENSE README.md Elliptic Fast elliptic-curve cryptography in a plain javascript implementation. NOTE: Please take a look at http://safecurves.cr.yp.to/ before choosing a curve for your cryptography operations. Incentive ECC is much slower than regular RSA cryptography, the JS implementations are even more slower. Benchmarks $ node benchmarks/index.js Benchmarking: sign elliptic#sign x 262 ops/sec ±0.51% (177 runs sampled) eccjs#sign x 55.91 ops/sec ±0.90% (144 runs sampled) ------------------------ Fastest is elliptic#sign ======================== Benchmarking: verify elliptic#verify x 113 ops/sec ±0.50% (166 runs sampled) eccjs#verify x 48.56 ops/sec ±0.36% (125 runs sampled) ------------------------ Fastest is elliptic#verify ======================== Benchmarking: gen elliptic#gen x 294 ops/sec ±0.43% (176 runs sampled) eccjs#gen x 62.25 ops/sec ±0.63% (129 runs sampled) ------------------------ Fastest is elliptic#gen ======================== Benchmarking: ecdh elliptic#ecdh x 136 ops/sec ±0.85% (156 runs sampled) ------------------------ Fastest is elliptic#ecdh ======================== API ECDSA var EC = require('elliptic').ec; // Create and initialize EC context // (better do it once and reuse it) var ec = new EC('secp256k1'); // Generate keys var key = ec.genKeyPair(); // Sign the message's hash (input must be an array, or a hex-string) var msgHash = [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ]; var signature = key.sign(msgHash); // Export DER encoded signature in Array var derSign = signature.toDER(); // Verify signature console.log(key.verify(msgHash, derSign)); // CHECK WITH NO PRIVATE KEY var pubPoint = key.getPublic(); var x = pubPoint.getX(); var y = pubPoint.getY(); // Public Key MUST be either: // 1) '04' + hex string of x + hex string of y; or // 2) object with two hex string properties (x and y); or // 3) object with two buffer properties (x and y) var pub = pubPoint.encode('hex');                                 // case 1 var pub = { x: x.toString('hex'), y: y.toString('hex') };         // case 2 var pub = { x: x.toBuffer(), y: y.toBuffer() };                   // case 3 var pub = { x: x.toArrayLike(Buffer), y: y.toArrayLike(Buffer) }; // case 3 // Import public key var key = ec.keyFromPublic(pub, 'hex'); // Signature MUST be either: // 1) DER-encoded signature as hex-string; or // 2) DER-encoded signature as buffer; or // 3) object with two hex-string properties (r and s); or // 4) object with two buffer properties (r and s) var signature = '3046022100...'; // case 1 var signature = new Buffer('...'); // case 2 var signature = { r: 'b1fc...', s: '9c42...' }; // case 3 // Verify signature console.log(key.verify(msgHash, signature)); EdDSA var EdDSA = require('elliptic').eddsa; // Create and initialize EdDSA context // (better do it once and reuse it) var ec = new EdDSA('ed25519'); // Create key pair from secret var key = ec.keyFromSecret('693e3c...'); // hex string, array or Buffer // Sign the message's hash (input must be an array, or a hex-string) var msgHash = [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ]; var signature = key.sign(msgHash).toHex(); // Verify signature console.log(key.verify(msgHash, signature)); // CHECK WITH NO PRIVATE KEY // Import public key var pub = '0a1af638...'; var key = ec.keyFromPublic(pub, 'hex'); // Verify signature var signature = '70bed1...'; console.log(key.verify(msgHash, signature)); ECDH var EC = require('elliptic').ec; var ec = new EC('curve25519'); // Generate keys var key1 = ec.genKeyPair(); var key2 = ec.genKeyPair(); var shared1 = key1.derive(key2.getPublic()); var shared2 = key2.derive(key1.getPublic()); console.log('Both shared secrets are BN instances'); console.log(shared1.toString(16)); console.log(shared2.toString(16)); three and more members: var EC = require('elliptic').ec; var ec = new EC('curve25519'); var A = ec.genKeyPair(); var B = ec.genKeyPair(); var C = ec.genKeyPair(); var AB = A.getPublic().mul(B.getPrivate()) var BC = B.getPublic().mul(C.getPrivate()) var CA = C.getPublic().mul(A.getPrivate()) var ABC = AB.mul(C.getPrivate()) var BCA = BC.mul(A.getPrivate()) var CAB = CA.mul(B.getPrivate()) console.log(ABC.getX().toString(16)) console.log(BCA.getX().toString(16)) console.log(CAB.getX().toString(16)) NOTE: .derive() returns a BN instance. Supported curves Elliptic.js support following curve types: Short Weierstrass Montgomery Edwards Twisted Edwards Following curve 'presets' are embedded into the library: secp256k1 p192 p224 p256 p384 p521 curve25519 ed25519 NOTE: That curve25519 could not be used for ECDSA, use ed25519 instead. Implementation details ECDSA is using deterministic k value generation as per RFC6979. Most of the curve operations are performed on non-affine coordinates (either projective or extended), various windowing techniques are used for different cases. All operations are performed in reduction context using bn.js, hashing is provided by hash.js Related projects eccrypto: isomorphic implementation of ECDSA, ECDH and ECIES for both browserify and node (uses elliptic for browser and secp256k1-node for node) LICENSE This software is licensed under the MIT License. Copyright Fedor Indutny, 2014. Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the ""Software""), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. About Fast Elliptic Curve Cryptography in plain javascript Resources Readme Releases 85 tags Packages 0 No packages published Used by 6.2m + 6,211,110 Contributors 25 + 14 contributors Languages JavaScript 99.3% HTML 0.7% © 2021 GitHub, Inc. Terms Privacy Security Status Docs Contact GitHub Pricing API Training Blog About You can’t perform that action at this time. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."
708345,20210820,github.com,https://github.com/adobe-accessibility/Accessible-Mega-Menu,text/html,text/html,en,"GitHub - adobe-accessibility/Accessible-Mega-Menu: A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. Skip to content Sign up Why GitHub? Features → Mobile → Actions → Codespaces → Packages → Security → Code review → Issues → Integrations → GitHub Sponsors → Customer stories→ Team Enterprise Explore Explore GitHub → Learn and contribute Topics → Collections → Trending → Learning Lab → Open source guides → Connect with others The ReadME Project → Events → Community forum → GitHub Education → GitHub Stars program → Marketplace Pricing Plans → Compare plans → Contact Sales → Education → In this repository All GitHub ↵ Jump to ↵ No suggested jump to results In this repository All GitHub ↵ Jump to ↵ In this organization All GitHub ↵ Jump to ↵ In this repository All GitHub ↵ Jump to ↵ Sign in Sign up {{ message }} adobe-accessibility / Accessible-Mega-Menu Notifications Star 584 Fork 202 A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. Apache-2.0 License 584 stars 202 forks Star Notifications Code Issues 31 Pull requests 6 Actions Projects 0 Wiki Security Insights More Code Issues Pull requests Actions Projects Wiki Security Insights master Switch branches/tags Branches Tags Could not load branches Nothing to show {{ refName }} default View all branches Could not load tags Nothing to show {{ refName }} default View all tags 2 branches 0 tags Code Clone HTTPS GitHub CLI Use Git or checkout with SVN using the web URL. Work fast with our official CLI. Learn more. Open with GitHub Desktop Download ZIP Launching GitHub Desktop If nothing happens, download GitHub Desktop and try again. Go back Launching GitHub Desktop If nothing happens, download GitHub Desktop and try again. Go back Launching Xcode If nothing happens, download Xcode and try again. Go back Launching Visual Studio Code Your codespace will open once ready. There was a problem preparing your codespace, please try again. Latest commit majornista fix evaluation for ChromeVox object … 5c070bc Dec 7, 2020 fix evaluation for ChromeVox object 5c070bc Git stats 39 commits Files Permalink Failed to load latest commit information. Type Name Latest commit message Commit time css js third-party/jquery LICENSE NOTICE README.md index.html package.json View code Accessible Mega Menu Keyboard Accessibility Screen Reader Accessibility Usage HTML JavaScript CSS README.md Accessible Mega Menu ========================= A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. It is modeled after the mega menu on adobe.com but has been simplified for use by others. An brief explanation of our interaction design choices can be found in a blog post at Mega menu accessibility on adobe.com. Content for the links and text within the mega menu comes from the Web Content Accessibility Guidelines (WCAG) 2.0. Keyboard Accessibility The accessible mega menu supports keyboard interaction modeled after the behavior described in the WAI-ARIA Menu or Menu bar (widget) design pattern, however we also try to respect users' general expectations for the behavior of links in a global navigation. To this end, the accessible mega menu implementation permits tab focus on each of the six top-level menu items. When one of the menu items has focus, pressing the Enter key, Spacebar or Down arrow will open the submenu panel, and pressing the Left or Right arrow key will shift focus to the adjacent menu item. Links within the submenu panels are included in the tab order when the panel is open. They can also be navigated with the arrow keys or by typing the first character in the link name, which speeds up keyboard navigation considerably. Pressing the Escape key closes the submenu and restores focus to the parent menu item. Screen Reader Accessibility The accessible mega menu models its use of WAI-ARIA Roles, States, and Properties after those described in the WAI-ARIA Menu or Menu bar (widget) design pattern with some notable exceptions, so that it behaves better with screen reader user expectations for global navigation. We don't use role=""menu"" for the menu container and role=""menuitem"" for each of the links therein, because if we do, assistive technology will no longer interpret the links as links, but instead, as menu items, and the links in our global navigation will no longer show up when a screen reader user executes a shortcut command to bring up a list of links in the page. We also want to maintain the semantic structure of the submenu panels in our mega menu; our links are organized into lists and separated by headings. Omitting role=""menu"" and role=""menuitem"" for the global navigation seems the safer way to go. Usage HTML The HTML structure for the mega menu is a nav element, or any other container element, containing a list. Each list item contains a link which is followed by a div or any other container element which will serve as the pop up panel. The panel can contain any html content; in the following example, each panel contains three lists of links. You can explicitly define groups within the panel, between which a user can navigate quickly using the left and right arrow keys; in the following example, the CSS class .sub-nav-group identifies a navigable group.     <nav>         <ul class=""nav-menu"">             <li class=""nav-item"">                 <a href=""?movie"">Movies</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=0"">Action &amp; Adventure</a></li>                         <li><a href=""?movie&genre=2"">Children &amp; Family</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=7"">Dramas</a></li>                         <li><a href=""?movie&genre=9"">Foreign</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=14"">Musicals</a></li>                         <li><a href=""?movie&genre=15"">Romance</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>             <li class=""nav-item"">                 <a href=""?tv"">TV Shows</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=20"">Classic TV</a></li>                         <li><a href=""?tv&genre=21"">Crime TV</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=27"">Reality TV</a></li>                         <li><a href=""?tv&genre=30"">TV Action</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=33"">TV Dramas</a></li>                         <li><a href=""?tv&genre=34"">TV Horror</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>         </ul>     </nav> By default, accessibleMegaMenu uses the the following CSS classes to define the top-level navigation items, panels, groups within the panels, and the hover, focus, and open states. It also defines a prefix for unique id strings, which are required to indicate the relationship of a top-level navigation item to the panel it controls.     defaults = {         /* unique ID's are required to indicate aria-owns, aria-controls and aria-labelledby */         uuidPrefix: ""accessible-megamenu"",                  /* default css class used to define the megamenu styling */         menuClass: ""accessible-megamenu"",                  /* default css class for a top-level navigation item in the megamenu */         topNavItemClass: ""accessible-megamenu-top-nav-item"",                  /* default css class for a megamenu panel */         panelClass: ""accessible-megamenu-panel"",                  /* default css class for a group of items within a megamenu panel */         panelGroupClass: ""accessible-megamenu-panel-group"",                  /* default css class for the hover state */         hoverClass: ""hover"",                  /* default css class for the focus state */         focusClass: ""focus"",                  /* default css class for the open state */         openClass: ""open""      } You can optionally override the defaults to use the CSS classes you may have already defined for your mega menu. JavaScript Be sure to include jQuery and the jquery-accessibleMegaMenu.js plugin script.     <script src=""//code.jquery.com/jquery-1.10.1.min.js""></script>     <script src=""js/jquery-accessibleMegaMenu.js""></script> The following initializes the first nav element in the document as an accessibleMegaMenu, with optional CSS class overrides.     $(""nav:first"").accessibleMegaMenu({         /* prefix for generated unique id attributes, which are required             to indicate aria-owns, aria-controls and aria-labelledby */         uuidPrefix: ""accessible-megamenu"",                  /* css class used to define the megamenu styling */         menuClass: ""nav-menu"",                  /* css class for a top-level navigation item in the megamenu */         topNavItemClass: ""nav-item"",                  /* css class for a megamenu panel */         panelClass: ""sub-nav"",                  /* css class for a group of items within a megamenu panel */         panelGroupClass: ""sub-nav-group"",                  /* css class for the hover state */         hoverClass: ""hover"",                  /* css class for the focus state */         focusClass: ""focus"",                  /* css class for the open state */         openClass: ""open""     }); CSS AccessibleMegaMenu handles the showing and hiding of panels by adding or removing a CSS class. No inline styles are added to hide elements or create animation between states. Following is some rudimentary CSS for our example which enables the showing/hiding of and the layout of lists panels in the mega menu.     /* mega menu list */     .nav-menu {         display: block;         position: relative;         list-style: none;         margin: 0;         padding: 0;         z-index: 15;     }     /* a top level navigation item in the mega menu */     .nav-item {         list-style: none;         display: inline-block;         padding: 0;         margin: 0;     }     /* first descendant link within a top level navigation item */     .nav-item > a {         position: relative;         display: inline-block;         padding: 0.5em 1em;         margin: 0 0 -1px 0;         border: 1px solid transparent;     }     /* focus/open states of first descendant link within a top level         navigation item */     .nav-item > a:focus,     .nav-item > a.open {         border: 1px solid #dedede;     }     /* open state of first descendant link within a top level         navigation item */     .nav-item > a.open {         background-color: #fff;         border-bottom: none;         z-index: 1;     }     /* sub-navigation panel */     .sub-nav {         position: absolute;         display: none;         top: 2.2em;         margin-top: -1px;         padding: 0.5em 1em;         border: 1px solid #dedede;         background-color: #fff;     }     /* sub-navigation panel open state */     .sub-nav.open {         display: block;     }     /* list of items within sub-navigation panel */     .sub-nav ul {         display: inline-block;         vertical-align: top;         margin: 0 1em 0 0;         padding: 0;     }     /* list item within sub-navigation panel */     .sub-nav li {         display: block;         list-style-type: none;         margin: 0;         padding: 0;     }   Putting it all together, here is the completed example:     <!doctype html>     <html lang=""en"">     <head>     <meta charset=""UTF-8"">     <title>Simple Accessible Mega Menu Example</title>     <style>         /* Rudimentary mega menu CSS for demonstration */             /* mega menu list */         .nav-menu {             display: block;             position: relative;             list-style: none;             margin: 0;             padding: 0;             z-index: 15;         }         /* a top level navigation item in the mega menu */         .nav-item {             list-style: none;             display: inline-block;             padding: 0;             margin: 0;         }         /* first descendant link within a top level navigation item */         .nav-item > a {             position: relative;             display: inline-block;             padding: 0.5em 1em;             margin: 0 0 -1px 0;             border: 1px solid transparent;         }         /* focus/open states of first descendant link within a top level             navigation item */         .nav-item > a:focus,         .nav-item > a.open {             border: 1px solid #dedede;         }         /* open state of first descendant link within a top level             navigation item */         .nav-item > a.open {             background-color: #fff;             border-bottom: none;             z-index: 1;         }         /* sub-navigation panel */         .sub-nav {             position: absolute;             display: none;             top: 2.2em;             margin-top: -1px;             padding: 0.5em 1em;             border: 1px solid #dedede;             background-color: #fff;         }         /* sub-navigation panel open state */         .sub-nav.open {             display: block;         }         /* list of items within sub-navigation panel */         .sub-nav ul {             display: inline-block;             vertical-align: top;             margin: 0 1em 0 0;             padding: 0;         }         /* list item within sub-navigation panel */         .sub-nav li {             display: block;             list-style-type: none;             margin: 0;             padding: 0;         }          </style>     </head>     <body>     <nav>         <ul class=""nav-menu"">             <li class=""nav-item"">                 <a href=""?movie"">Movies</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=0"">Action &amp; Adventure</a></li>                         <li><a href=""?movie&genre=2"">Children &amp; Family</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=7"">Dramas</a></li>                         <li><a href=""?movie&genre=9"">Foreign</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=14"">Musicals</a></li>                         <li><a href=""?movie&genre=15"">Romance</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>             <li class=""nav-item"">                 <a href=""?tv"">TV Shows</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=20"">Classic TV</a></li>                         <li><a href=""?tv&genre=21"">Crime TV</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=27"">Reality TV</a></li>                         <li><a href=""?tv&genre=30"">TV Action</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=33"">TV Dramas</a></li>                         <li><a href=""?tv&genre=34"">TV Horror</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>         </ul>     </nav>          <!-- include jquery -->     <script src=""//code.jquery.com/jquery-1.10.1.min.js""></script>     <!-- include the jquery-accessibleMegaMenu plugin script -->     <script src=""js/jquery-accessibleMegaMenu.js""></script>     <!-- initialize a selector as an accessibleMegaMenu -->     <script>         $(""nav:first"").accessibleMegaMenu({             /* prefix for generated unique id attributes, which are required                 to indicate aria-owns, aria-controls and aria-labelledby */             uuidPrefix: ""accessible-megamenu"",                          /* css class used to define the megamenu styling */             menuClass: ""nav-menu"",                          /* css class for a top-level navigation item in the megamenu */             topNavItemClass: ""nav-item"",                          /* css class for a megamenu panel */             panelClass: ""sub-nav"",                          /* css class for a group of items within a megamenu panel */             panelGroupClass: ""sub-nav-group"",                          /* css class for the hover state */             hoverClass: ""hover"",                          /* css class for the focus state */             focusClass: ""focus"",                          /* css class for the open state */             openClass: ""open""         });     </script>     </body>     </html> About A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. Resources Readme License Apache-2.0 License Releases No releases published Packages 0 No packages published Used by 16 + 8 Contributors 7 Languages HTML 71.8% CSS 26.4% JavaScript 1.8% © 2021 GitHub, Inc. Terms Privacy Security Status Docs Contact GitHub Pricing API Training Blog About You can’t perform that action at this time. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."
711225,20210820,github.com,https://github.com/crypto-browserify/crypto-browserify,text/html,text/html,en,"GitHub - crypto-browserify/crypto-browserify: partial implementation of node's `crypto` for the browser Skip to content Sign up Why GitHub? Features → Mobile → Actions → Codespaces → Packages → Security → Code review → Issues → Integrations → GitHub Sponsors → Customer stories→ Team Enterprise Explore Explore GitHub → Learn and contribute Topics → Collections → Trending → Learning Lab → Open source guides → Connect with others The ReadME Project → Events → Community forum → GitHub Education → GitHub Stars program → Marketplace Pricing Plans → Compare plans → Contact Sales → Education → In this repository All GitHub ↵ Jump to ↵ No suggested jump to results In this repository All GitHub ↵ Jump to ↵ In this organization All GitHub ↵ Jump to ↵ In this repository All GitHub ↵ Jump to ↵ Sign in Sign up {{ message }} crypto-browserify / crypto-browserify Notifications Star 490 Fork 157 partial implementation of node's `crypto` for the browser MIT License 490 stars 157 forks Star Notifications Code Issues 21 Pull requests 6 Actions Projects 0 Wiki Security Insights More Code Issues Pull requests Actions Projects Wiki Security Insights master Switch branches/tags Branches Tags Could not load branches Nothing to show {{ refName }} default View all branches Could not load tags Nothing to show {{ refName }} default View all tags 6 branches 31 tags Code Clone HTTPS GitHub CLI Use Git or checkout with SVN using the web URL. Work fast with our official CLI. Learn more. Open with GitHub Desktop Download ZIP Launching GitHub Desktop If nothing happens, download GitHub Desktop and try again. Go back Launching GitHub Desktop If nothing happens, download GitHub Desktop and try again. Go back Launching Xcode If nothing happens, download Xcode and try again. Go back Launching Visual Studio Code Your codespace will open once ready. There was a problem preparing your codespace, please try again. Latest commit calvinmetcalf fix debian issue (maybe) … 460a13b Feb 9, 2018 fix debian issue (maybe) 460a13b Git stats 362 commits Files Permalink Failed to load latest commit information. Type Name Latest commit message Commit time example test .gitignore .travis.yml .zuul.yml LICENSE README.md index.js package.json View code crypto-browserify todo contributions License README.md crypto-browserify A port of node's crypto module to the browser. The goal of this module is to reimplement node's crypto module, in pure javascript so that it can run in the browser. Here is the subset that is currently implemented: createHash (sha1, sha224, sha256, sha384, sha512, md5, rmd160) createHmac (sha1, sha224, sha256, sha384, sha512, md5, rmd160) pbkdf2 pbkdf2Sync randomBytes pseudoRandomBytes createCipher (aes) createDecipher (aes) createDiffieHellman createSign (rsa, ecdsa) createVerify (rsa, ecdsa) createECDH (secp256k1) publicEncrypt/privateDecrypt (rsa) privateEncrypt/publicDecrypt (rsa) todo these features from node's crypto are still unimplemented. createCredentials contributions If you are interested in writing a feature, please implement as a new module, which will be incorporated into crypto-browserify as a dependency. All deps must be compatible with node's crypto (generate example inputs and outputs with node, and save base64 strings inside JSON, so that tests can run in the browser. see sha.js Crypto is extra serious so please do not hesitate to review the code, and post comments if you do. License MIT About partial implementation of node's `crypto` for the browser Resources Readme License MIT License Releases 31 tags Packages 0 No packages published Used by 6.3m + 6,320,940 Contributors 24 + 13 contributors Languages JavaScript 99.1% HTML 0.9% © 2021 GitHub, Inc. Terms Privacy Security Status Docs Contact GitHub Pricing API Training Blog About You can’t perform that action at this time. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."
711227,20210820,github.com,https://github.com/indutny/elliptic/issues,text/html,text/html,en,"Issues · indutny/elliptic · GitHub Skip to content Sign up Why GitHub? Features → Mobile → Actions → Codespaces → Packages → Security → Code review → Issues → Integrations → GitHub Sponsors → Customer stories→ Team Enterprise Explore Explore GitHub → Learn and contribute Topics → Collections → Trending → Learning Lab → Open source guides → Connect with others The ReadME Project → Events → Community forum → GitHub Education → GitHub Stars program → Marketplace Pricing Plans → Compare plans → Contact Sales → Education → In this repository All GitHub ↵ Jump to ↵ No suggested jump to results In this repository All GitHub ↵ Jump to ↵ In this user All GitHub ↵ Jump to ↵ In this repository All GitHub ↵ Jump to ↵ Sign in Sign up {{ message }} indutny / elliptic Notifications Star 1.3k Fork 311 Code Issues 78 Pull requests 21 Actions Projects 0 Wiki Security Insights More Code Issues Pull requests Actions Projects Wiki Security Insights Labels 8 Milestones 0 Labels 8 Milestones 0 New issue Have a question about this project? Sign up for a free GitHub account to open an issue and contact its maintainers and the community. Sign up for GitHub By clicking “Sign up for GitHub”, you agree to our terms of service and privacy statement. We’ll occasionally send you account related emails. Already on GitHub? Sign in to your account 78 Open 97 Closed 78 Open 97 Closed Author Filter by author author: Filter by this user Label Filter by label Use alt + click/return to exclude labels or ⇧ + click/return for logical OR Projects Filter by project Milestones Filter by milestone Assignee Filter by who’s assigned Sort Sort by Newest Oldest Most commented Least commented Recently updated Least recently updated Most reactions 👍 👎 😄 🎉 😕 ❤️ 🚀 👀 invalid y value for curve for new EC('p256') #263 opened Jul 28, 2021 by congminh090800 Invalid hashed data sign with EDDSA #262 opened Jul 6, 2021 by samuel-uniris Point multiplication gives different results based on order of operattions #260 opened Jun 16, 2021 by kot-begemot 3 deriving private key from public key #257 opened Apr 27, 2021 by madhav-madhusoodanan How to use keys with crypto.subtle #255 opened Apr 1, 2021 by DominicTobias-b1 EDDSA.decodeInt should fails or reduce by dafault? #254 opened Mar 18, 2021 by mahnunchik Sad state #251 opened Mar 11, 2021 by berkus 1 EDDSA.decodePoint should fails on ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff #250 opened Mar 3, 2021 by mahnunchik 15 Add endian argument to bn.js toString method #249 opened Mar 2, 2021 by mahnunchik EDDSA decodePoint doesn't support Buffer as argument #248 opened Mar 2, 2021 by mahnunchik How to decipher the encrypted message? #245 opened Jan 27, 2021 by istabraq-iot Montgomery Curve25519 is not openssl compatible #243 opened Dec 28, 2020 by jc-lab 4 Curves p384 and p521 produce incorrect results #239 opened Oct 18, 2020 by guidovranken 1 i want to use this library with c# #238 opened Oct 10, 2020 by medozeus Elliptic.js support following curve types: #236 opened Oct 5, 2020 by medozeus The Elliptic package 6.5.2 for Node.js allows ECDSA signature malleability via variations in encoding, leading '\0' bytes, or integer overflows. #235 opened Oct 1, 2020 by bsomeshwer EdDSA: What is a reason to manipulate with bytes? #233 opened Aug 27, 2020 by mahnunchik why use derive method get ECDH key，i got different length #230 opened Jul 10, 2020 by cqupt-yifanwu 4 Why do I generate my local test path in chunk-vendors when packing with NPM #229 opened Jun 22, 2020 by Anthonychen1994 1 TypedArray support ? #228 opened Jun 20, 2020 by dojyorin Is there way to generate PKCS#8 private key from Pem format ECC Private key #225 opened Apr 28, 2020 by sureshreddygovindu Signature validation in python. Prefix configuration? #224 opened Apr 25, 2020 by amrbz is it possible to do assymetric encryption? #223 opened Apr 7, 2020 by maroodb 1 Missing infinity point encoding #218 opened Feb 21, 2020 by catenacyber 1 ECDH P-521 public key point not on curve according to java (clojure) #216 opened Feb 11, 2020 by slhabity 2 Previous 1 2 3 4 Next Previous Next ProTip! Type g i on any issue or pull request to go back to the issue listing page. © 2021 GitHub, Inc. Terms Privacy Security Status Docs Contact GitHub Pricing API Training Blog About You can’t perform that action at this time. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."
711229,20210820,github.com,https://github.com/indutny/elliptic,text/html,text/html,en,"GitHub - indutny/elliptic: Fast Elliptic Curve Cryptography in plain javascript Skip to content Sign up Why GitHub? Features → Mobile → Actions → Codespaces → Packages → Security → Code review → Issues → Integrations → GitHub Sponsors → Customer stories→ Team Enterprise Explore Explore GitHub → Learn and contribute Topics → Collections → Trending → Learning Lab → Open source guides → Connect with others The ReadME Project → Events → Community forum → GitHub Education → GitHub Stars program → Marketplace Pricing Plans → Compare plans → Contact Sales → Education → In this repository All GitHub ↵ Jump to ↵ No suggested jump to results In this repository All GitHub ↵ Jump to ↵ In this user All GitHub ↵ Jump to ↵ In this repository All GitHub ↵ Jump to ↵ Sign in Sign up {{ message }} indutny / elliptic Notifications Star 1.3k Fork 311 Fast Elliptic Curve Cryptography in plain javascript 1.3k stars 311 forks Star Notifications Code Issues 78 Pull requests 21 Actions Projects 0 Wiki Security Insights More Code Issues Pull requests Actions Projects Wiki Security Insights master Switch branches/tags Branches Tags Could not load branches Nothing to show {{ refName }} default View all branches Could not load tags Nothing to show {{ refName }} default View all tags 2 branches 85 tags Code Clone HTTPS GitHub CLI Use Git or checkout with SVN using the web URL. Work fast with our official CLI. Learn more. Open with GitHub Desktop Download ZIP Launching GitHub Desktop If nothing happens, download GitHub Desktop and try again. Go back Launching GitHub Desktop If nothing happens, download GitHub Desktop and try again. Go back Launching Xcode If nothing happens, download Xcode and try again. Go back Launching Visual Studio Code Your codespace will open once ready. There was a problem preparing your codespace, please try again. Latest commit indutny 6.5.4 … 43ac7f2 Feb 2, 2021 6.5.4 43ac7f2 Git stats 331 commits Files Permalink Failed to load latest commit information. Type Name Latest commit message Commit time benchmarks package: remove Makefile and dist Jan 29, 2016 dist 6.5.4 Feb 2, 2021 lib ec: validate that a point before deriving keys Feb 2, 2021 test ec: validate that a point before deriving keys Feb 2, 2021 .codeclimate.yml test: improvements with Saucelabs/Codeclimate Mar 31, 2016 .eslintignore lib: relint using eslint Aug 2, 2020 .eslintrc.js lib: relint using eslint Aug 2, 2020 .gitignore test: improvements with Saucelabs/Codeclimate Mar 31, 2016 .npmignore npmignore: dist May 20, 2016 .travis.yml travis: really move on Jun 26, 2019 Gruntfile.js grunt: fix standalone build May 25, 2016 README.md readme: update example Mar 23, 2017 package-lock.json 6.5.4 Feb 2, 2021 package.json 6.5.4 Feb 2, 2021 View code Elliptic Incentive Benchmarks API ECDSA EdDSA ECDH Supported curves Implementation details Related projects LICENSE README.md Elliptic Fast elliptic-curve cryptography in a plain javascript implementation. NOTE: Please take a look at http://safecurves.cr.yp.to/ before choosing a curve for your cryptography operations. Incentive ECC is much slower than regular RSA cryptography, the JS implementations are even more slower. Benchmarks $ node benchmarks/index.js Benchmarking: sign elliptic#sign x 262 ops/sec ±0.51% (177 runs sampled) eccjs#sign x 55.91 ops/sec ±0.90% (144 runs sampled) ------------------------ Fastest is elliptic#sign ======================== Benchmarking: verify elliptic#verify x 113 ops/sec ±0.50% (166 runs sampled) eccjs#verify x 48.56 ops/sec ±0.36% (125 runs sampled) ------------------------ Fastest is elliptic#verify ======================== Benchmarking: gen elliptic#gen x 294 ops/sec ±0.43% (176 runs sampled) eccjs#gen x 62.25 ops/sec ±0.63% (129 runs sampled) ------------------------ Fastest is elliptic#gen ======================== Benchmarking: ecdh elliptic#ecdh x 136 ops/sec ±0.85% (156 runs sampled) ------------------------ Fastest is elliptic#ecdh ======================== API ECDSA var EC = require('elliptic').ec; // Create and initialize EC context // (better do it once and reuse it) var ec = new EC('secp256k1'); // Generate keys var key = ec.genKeyPair(); // Sign the message's hash (input must be an array, or a hex-string) var msgHash = [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ]; var signature = key.sign(msgHash); // Export DER encoded signature in Array var derSign = signature.toDER(); // Verify signature console.log(key.verify(msgHash, derSign)); // CHECK WITH NO PRIVATE KEY var pubPoint = key.getPublic(); var x = pubPoint.getX(); var y = pubPoint.getY(); // Public Key MUST be either: // 1) '04' + hex string of x + hex string of y; or // 2) object with two hex string properties (x and y); or // 3) object with two buffer properties (x and y) var pub = pubPoint.encode('hex');                                 // case 1 var pub = { x: x.toString('hex'), y: y.toString('hex') };         // case 2 var pub = { x: x.toBuffer(), y: y.toBuffer() };                   // case 3 var pub = { x: x.toArrayLike(Buffer), y: y.toArrayLike(Buffer) }; // case 3 // Import public key var key = ec.keyFromPublic(pub, 'hex'); // Signature MUST be either: // 1) DER-encoded signature as hex-string; or // 2) DER-encoded signature as buffer; or // 3) object with two hex-string properties (r and s); or // 4) object with two buffer properties (r and s) var signature = '3046022100...'; // case 1 var signature = new Buffer('...'); // case 2 var signature = { r: 'b1fc...', s: '9c42...' }; // case 3 // Verify signature console.log(key.verify(msgHash, signature)); EdDSA var EdDSA = require('elliptic').eddsa; // Create and initialize EdDSA context // (better do it once and reuse it) var ec = new EdDSA('ed25519'); // Create key pair from secret var key = ec.keyFromSecret('693e3c...'); // hex string, array or Buffer // Sign the message's hash (input must be an array, or a hex-string) var msgHash = [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ]; var signature = key.sign(msgHash).toHex(); // Verify signature console.log(key.verify(msgHash, signature)); // CHECK WITH NO PRIVATE KEY // Import public key var pub = '0a1af638...'; var key = ec.keyFromPublic(pub, 'hex'); // Verify signature var signature = '70bed1...'; console.log(key.verify(msgHash, signature)); ECDH var EC = require('elliptic').ec; var ec = new EC('curve25519'); // Generate keys var key1 = ec.genKeyPair(); var key2 = ec.genKeyPair(); var shared1 = key1.derive(key2.getPublic()); var shared2 = key2.derive(key1.getPublic()); console.log('Both shared secrets are BN instances'); console.log(shared1.toString(16)); console.log(shared2.toString(16)); three and more members: var EC = require('elliptic').ec; var ec = new EC('curve25519'); var A = ec.genKeyPair(); var B = ec.genKeyPair(); var C = ec.genKeyPair(); var AB = A.getPublic().mul(B.getPrivate()) var BC = B.getPublic().mul(C.getPrivate()) var CA = C.getPublic().mul(A.getPrivate()) var ABC = AB.mul(C.getPrivate()) var BCA = BC.mul(A.getPrivate()) var CAB = CA.mul(B.getPrivate()) console.log(ABC.getX().toString(16)) console.log(BCA.getX().toString(16)) console.log(CAB.getX().toString(16)) NOTE: .derive() returns a BN instance. Supported curves Elliptic.js support following curve types: Short Weierstrass Montgomery Edwards Twisted Edwards Following curve 'presets' are embedded into the library: secp256k1 p192 p224 p256 p384 p521 curve25519 ed25519 NOTE: That curve25519 could not be used for ECDSA, use ed25519 instead. Implementation details ECDSA is using deterministic k value generation as per RFC6979. Most of the curve operations are performed on non-affine coordinates (either projective or extended), various windowing techniques are used for different cases. All operations are performed in reduction context using bn.js, hashing is provided by hash.js Related projects eccrypto: isomorphic implementation of ECDSA, ECDH and ECIES for both browserify and node (uses elliptic for browser and secp256k1-node for node) LICENSE This software is licensed under the MIT License. Copyright Fedor Indutny, 2014. Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the ""Software""), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. About Fast Elliptic Curve Cryptography in plain javascript Resources Readme Releases 85 tags Packages 0 No packages published Used by 6.2m + 6,248,389 Contributors 25 + 14 contributors Languages JavaScript 99.3% HTML 0.7% © 2021 GitHub, Inc. Terms Privacy Security Status Docs Contact GitHub Pricing API Training Blog About You can’t perform that action at this time. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."
715042,20210827,github.com,https://github.com/adobe-accessibility/Accessible-Mega-Menu,text/html,text/html,en,"GitHub - adobe-accessibility/Accessible-Mega-Menu: A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. Skip to content Sign up Why GitHub? Features → Mobile → Actions → Codespaces → Packages → Security → Code review → Issues → Integrations → GitHub Sponsors → Customer stories→ Team Enterprise Explore Explore GitHub → Learn and contribute Topics → Collections → Trending → Learning Lab → Open source guides → Connect with others The ReadME Project → Events → Community forum → GitHub Education → GitHub Stars program → Marketplace Pricing Plans → Compare plans → Contact Sales → Education → In this repository All GitHub ↵ Jump to ↵ No suggested jump to results In this repository All GitHub ↵ Jump to ↵ In this organization All GitHub ↵ Jump to ↵ In this repository All GitHub ↵ Jump to ↵ Sign in Sign up {{ message }} adobe-accessibility / Accessible-Mega-Menu Notifications Star 584 Fork 201 A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. Apache-2.0 License 584 stars 201 forks Star Notifications Code Issues 31 Pull requests 6 Actions Projects 0 Wiki Security Insights More Code Issues Pull requests Actions Projects Wiki Security Insights master Switch branches/tags Branches Tags Could not load branches Nothing to show {{ refName }} default View all branches Could not load tags Nothing to show {{ refName }} default View all tags 2 branches 0 tags Code Clone HTTPS GitHub CLI Use Git or checkout with SVN using the web URL. Work fast with our official CLI. Learn more. Open with GitHub Desktop Download ZIP Launching GitHub Desktop If nothing happens, download GitHub Desktop and try again. Go back Launching GitHub Desktop If nothing happens, download GitHub Desktop and try again. Go back Launching Xcode If nothing happens, download Xcode and try again. Go back Launching Visual Studio Code Your codespace will open once ready. There was a problem preparing your codespace, please try again. Latest commit majornista fix evaluation for ChromeVox object … 5c070bc Dec 7, 2020 fix evaluation for ChromeVox object 5c070bc Git stats 39 commits Files Permalink Failed to load latest commit information. Type Name Latest commit message Commit time css Add openOnMouseover setting, and toggleButtonClass for responsive layout May 11, 2018 js fix evaluation for ChromeVox object Dec 7, 2020 third-party/jquery initial commit Aug 26, 2013 LICENSE initial commit Aug 26, 2013 NOTICE initial commit Aug 26, 2013 README.md initial commit Aug 26, 2013 index.html Updating WCAG 2.0 References to WCAG 2.1 (#67) Dec 4, 2020 package.json Updating repo references Jul 8, 2016 View code Accessible Mega Menu Keyboard Accessibility Screen Reader Accessibility Usage HTML JavaScript CSS README.md Accessible Mega Menu ========================= A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. It is modeled after the mega menu on adobe.com but has been simplified for use by others. An brief explanation of our interaction design choices can be found in a blog post at Mega menu accessibility on adobe.com. Content for the links and text within the mega menu comes from the Web Content Accessibility Guidelines (WCAG) 2.0. Keyboard Accessibility The accessible mega menu supports keyboard interaction modeled after the behavior described in the WAI-ARIA Menu or Menu bar (widget) design pattern, however we also try to respect users' general expectations for the behavior of links in a global navigation. To this end, the accessible mega menu implementation permits tab focus on each of the six top-level menu items. When one of the menu items has focus, pressing the Enter key, Spacebar or Down arrow will open the submenu panel, and pressing the Left or Right arrow key will shift focus to the adjacent menu item. Links within the submenu panels are included in the tab order when the panel is open. They can also be navigated with the arrow keys or by typing the first character in the link name, which speeds up keyboard navigation considerably. Pressing the Escape key closes the submenu and restores focus to the parent menu item. Screen Reader Accessibility The accessible mega menu models its use of WAI-ARIA Roles, States, and Properties after those described in the WAI-ARIA Menu or Menu bar (widget) design pattern with some notable exceptions, so that it behaves better with screen reader user expectations for global navigation. We don't use role=""menu"" for the menu container and role=""menuitem"" for each of the links therein, because if we do, assistive technology will no longer interpret the links as links, but instead, as menu items, and the links in our global navigation will no longer show up when a screen reader user executes a shortcut command to bring up a list of links in the page. We also want to maintain the semantic structure of the submenu panels in our mega menu; our links are organized into lists and separated by headings. Omitting role=""menu"" and role=""menuitem"" for the global navigation seems the safer way to go. Usage HTML The HTML structure for the mega menu is a nav element, or any other container element, containing a list. Each list item contains a link which is followed by a div or any other container element which will serve as the pop up panel. The panel can contain any html content; in the following example, each panel contains three lists of links. You can explicitly define groups within the panel, between which a user can navigate quickly using the left and right arrow keys; in the following example, the CSS class .sub-nav-group identifies a navigable group.     <nav>         <ul class=""nav-menu"">             <li class=""nav-item"">                 <a href=""?movie"">Movies</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=0"">Action &amp; Adventure</a></li>                         <li><a href=""?movie&genre=2"">Children &amp; Family</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=7"">Dramas</a></li>                         <li><a href=""?movie&genre=9"">Foreign</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=14"">Musicals</a></li>                         <li><a href=""?movie&genre=15"">Romance</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>             <li class=""nav-item"">                 <a href=""?tv"">TV Shows</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=20"">Classic TV</a></li>                         <li><a href=""?tv&genre=21"">Crime TV</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=27"">Reality TV</a></li>                         <li><a href=""?tv&genre=30"">TV Action</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=33"">TV Dramas</a></li>                         <li><a href=""?tv&genre=34"">TV Horror</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>         </ul>     </nav> By default, accessibleMegaMenu uses the the following CSS classes to define the top-level navigation items, panels, groups within the panels, and the hover, focus, and open states. It also defines a prefix for unique id strings, which are required to indicate the relationship of a top-level navigation item to the panel it controls.     defaults = {         /* unique ID's are required to indicate aria-owns, aria-controls and aria-labelledby */         uuidPrefix: ""accessible-megamenu"",                  /* default css class used to define the megamenu styling */         menuClass: ""accessible-megamenu"",                  /* default css class for a top-level navigation item in the megamenu */         topNavItemClass: ""accessible-megamenu-top-nav-item"",                  /* default css class for a megamenu panel */         panelClass: ""accessible-megamenu-panel"",                  /* default css class for a group of items within a megamenu panel */         panelGroupClass: ""accessible-megamenu-panel-group"",                  /* default css class for the hover state */         hoverClass: ""hover"",                  /* default css class for the focus state */         focusClass: ""focus"",                  /* default css class for the open state */         openClass: ""open""      } You can optionally override the defaults to use the CSS classes you may have already defined for your mega menu. JavaScript Be sure to include jQuery and the jquery-accessibleMegaMenu.js plugin script.     <script src=""//code.jquery.com/jquery-1.10.1.min.js""></script>     <script src=""js/jquery-accessibleMegaMenu.js""></script> The following initializes the first nav element in the document as an accessibleMegaMenu, with optional CSS class overrides.     $(""nav:first"").accessibleMegaMenu({         /* prefix for generated unique id attributes, which are required             to indicate aria-owns, aria-controls and aria-labelledby */         uuidPrefix: ""accessible-megamenu"",                  /* css class used to define the megamenu styling */         menuClass: ""nav-menu"",                  /* css class for a top-level navigation item in the megamenu */         topNavItemClass: ""nav-item"",                  /* css class for a megamenu panel */         panelClass: ""sub-nav"",                  /* css class for a group of items within a megamenu panel */         panelGroupClass: ""sub-nav-group"",                  /* css class for the hover state */         hoverClass: ""hover"",                  /* css class for the focus state */         focusClass: ""focus"",                  /* css class for the open state */         openClass: ""open""     }); CSS AccessibleMegaMenu handles the showing and hiding of panels by adding or removing a CSS class. No inline styles are added to hide elements or create animation between states. Following is some rudimentary CSS for our example which enables the showing/hiding of and the layout of lists panels in the mega menu.     /* mega menu list */     .nav-menu {         display: block;         position: relative;         list-style: none;         margin: 0;         padding: 0;         z-index: 15;     }     /* a top level navigation item in the mega menu */     .nav-item {         list-style: none;         display: inline-block;         padding: 0;         margin: 0;     }     /* first descendant link within a top level navigation item */     .nav-item > a {         position: relative;         display: inline-block;         padding: 0.5em 1em;         margin: 0 0 -1px 0;         border: 1px solid transparent;     }     /* focus/open states of first descendant link within a top level         navigation item */     .nav-item > a:focus,     .nav-item > a.open {         border: 1px solid #dedede;     }     /* open state of first descendant link within a top level         navigation item */     .nav-item > a.open {         background-color: #fff;         border-bottom: none;         z-index: 1;     }     /* sub-navigation panel */     .sub-nav {         position: absolute;         display: none;         top: 2.2em;         margin-top: -1px;         padding: 0.5em 1em;         border: 1px solid #dedede;         background-color: #fff;     }     /* sub-navigation panel open state */     .sub-nav.open {         display: block;     }     /* list of items within sub-navigation panel */     .sub-nav ul {         display: inline-block;         vertical-align: top;         margin: 0 1em 0 0;         padding: 0;     }     /* list item within sub-navigation panel */     .sub-nav li {         display: block;         list-style-type: none;         margin: 0;         padding: 0;     }   Putting it all together, here is the completed example:     <!doctype html>     <html lang=""en"">     <head>     <meta charset=""UTF-8"">     <title>Simple Accessible Mega Menu Example</title>     <style>         /* Rudimentary mega menu CSS for demonstration */             /* mega menu list */         .nav-menu {             display: block;             position: relative;             list-style: none;             margin: 0;             padding: 0;             z-index: 15;         }         /* a top level navigation item in the mega menu */         .nav-item {             list-style: none;             display: inline-block;             padding: 0;             margin: 0;         }         /* first descendant link within a top level navigation item */         .nav-item > a {             position: relative;             display: inline-block;             padding: 0.5em 1em;             margin: 0 0 -1px 0;             border: 1px solid transparent;         }         /* focus/open states of first descendant link within a top level             navigation item */         .nav-item > a:focus,         .nav-item > a.open {             border: 1px solid #dedede;         }         /* open state of first descendant link within a top level             navigation item */         .nav-item > a.open {             background-color: #fff;             border-bottom: none;             z-index: 1;         }         /* sub-navigation panel */         .sub-nav {             position: absolute;             display: none;             top: 2.2em;             margin-top: -1px;             padding: 0.5em 1em;             border: 1px solid #dedede;             background-color: #fff;         }         /* sub-navigation panel open state */         .sub-nav.open {             display: block;         }         /* list of items within sub-navigation panel */         .sub-nav ul {             display: inline-block;             vertical-align: top;             margin: 0 1em 0 0;             padding: 0;         }         /* list item within sub-navigation panel */         .sub-nav li {             display: block;             list-style-type: none;             margin: 0;             padding: 0;         }          </style>     </head>     <body>     <nav>         <ul class=""nav-menu"">             <li class=""nav-item"">                 <a href=""?movie"">Movies</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=0"">Action &amp; Adventure</a></li>                         <li><a href=""?movie&genre=2"">Children &amp; Family</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=7"">Dramas</a></li>                         <li><a href=""?movie&genre=9"">Foreign</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=14"">Musicals</a></li>                         <li><a href=""?movie&genre=15"">Romance</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>             <li class=""nav-item"">                 <a href=""?tv"">TV Shows</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=20"">Classic TV</a></li>                         <li><a href=""?tv&genre=21"">Crime TV</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=27"">Reality TV</a></li>                         <li><a href=""?tv&genre=30"">TV Action</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=33"">TV Dramas</a></li>                         <li><a href=""?tv&genre=34"">TV Horror</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>         </ul>     </nav>          <!-- include jquery -->     <script src=""//code.jquery.com/jquery-1.10.1.min.js""></script>     <!-- include the jquery-accessibleMegaMenu plugin script -->     <script src=""js/jquery-accessibleMegaMenu.js""></script>     <!-- initialize a selector as an accessibleMegaMenu -->     <script>         $(""nav:first"").accessibleMegaMenu({             /* prefix for generated unique id attributes, which are required                 to indicate aria-owns, aria-controls and aria-labelledby */             uuidPrefix: ""accessible-megamenu"",                          /* css class used to define the megamenu styling */             menuClass: ""nav-menu"",                          /* css class for a top-level navigation item in the megamenu */             topNavItemClass: ""nav-item"",                          /* css class for a megamenu panel */             panelClass: ""sub-nav"",                          /* css class for a group of items within a megamenu panel */             panelGroupClass: ""sub-nav-group"",                          /* css class for the hover state */             hoverClass: ""hover"",                          /* css class for the focus state */             focusClass: ""focus"",                          /* css class for the open state */             openClass: ""open""         });     </script>     </body>     </html> About A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. Resources Readme License Apache-2.0 License Releases No releases published Packages 0 No packages published Used by 16 + 8 Contributors 7 Languages HTML 71.8% CSS 26.4% JavaScript 1.8% © 2021 GitHub, Inc. Terms Privacy Security Status Docs Contact GitHub Pricing API Training Blog About You can’t perform that action at this time. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."
717946,20210827,github.com,https://github.com/crypto-browserify/crypto-browserify,text/html,text/html,en,"GitHub - crypto-browserify/crypto-browserify: partial implementation of node's `crypto` for the browser Skip to content Sign up Why GitHub? Features → Mobile → Actions → Codespaces → Packages → Security → Code review → Issues → Integrations → GitHub Sponsors → Customer stories→ Team Enterprise Explore Explore GitHub → Learn and contribute Topics → Collections → Trending → Learning Lab → Open source guides → Connect with others The ReadME Project → Events → Community forum → GitHub Education → GitHub Stars program → Marketplace Pricing Plans → Compare plans → Contact Sales → Education → In this repository All GitHub ↵ Jump to ↵ No suggested jump to results In this repository All GitHub ↵ Jump to ↵ In this organization All GitHub ↵ Jump to ↵ In this repository All GitHub ↵ Jump to ↵ Sign in Sign up {{ message }} crypto-browserify / crypto-browserify Notifications Star 492 Fork 158 partial implementation of node's `crypto` for the browser MIT License 492 stars 158 forks Star Notifications Code Issues 21 Pull requests 6 Actions Projects 0 Wiki Security Insights More Code Issues Pull requests Actions Projects Wiki Security Insights master Switch branches/tags Branches Tags Could not load branches Nothing to show {{ refName }} default View all branches Could not load tags Nothing to show {{ refName }} default View all tags 6 branches 31 tags Code Clone HTTPS GitHub CLI Use Git or checkout with SVN using the web URL. Work fast with our official CLI. Learn more. Open with GitHub Desktop Download ZIP Launching GitHub Desktop If nothing happens, download GitHub Desktop and try again. Go back Launching GitHub Desktop If nothing happens, download GitHub Desktop and try again. Go back Launching Xcode If nothing happens, download Xcode and try again. Go back Launching Visual Studio Code Your codespace will open once ready. There was a problem preparing your codespace, please try again. Latest commit calvinmetcalf fix debian issue (maybe) … 460a13b Feb 9, 2018 fix debian issue (maybe) 460a13b Git stats 362 commits Files Permalink Failed to load latest commit information. Type Name Latest commit message Commit time example add standard 5.0.0 Aug 13, 2015 test fix debian issue (maybe) Feb 9, 2018 .gitignore Add .gitignore Aug 5, 2013 .travis.yml saucelabs aparently only goes back to 7 Oct 19, 2017 .zuul.yml add zuul and browser tests Oct 3, 2015 LICENSE Add MIT license Sep 20, 2013 README.md add privateEncrypt/publicDecrypt to README Dec 14, 2015 index.js add rndom fill Oct 18, 2017 package.json 3.12.0 Nov 3, 2017 View code crypto-browserify todo contributions License README.md crypto-browserify A port of node's crypto module to the browser. The goal of this module is to reimplement node's crypto module, in pure javascript so that it can run in the browser. Here is the subset that is currently implemented: createHash (sha1, sha224, sha256, sha384, sha512, md5, rmd160) createHmac (sha1, sha224, sha256, sha384, sha512, md5, rmd160) pbkdf2 pbkdf2Sync randomBytes pseudoRandomBytes createCipher (aes) createDecipher (aes) createDiffieHellman createSign (rsa, ecdsa) createVerify (rsa, ecdsa) createECDH (secp256k1) publicEncrypt/privateDecrypt (rsa) privateEncrypt/publicDecrypt (rsa) todo these features from node's crypto are still unimplemented. createCredentials contributions If you are interested in writing a feature, please implement as a new module, which will be incorporated into crypto-browserify as a dependency. All deps must be compatible with node's crypto (generate example inputs and outputs with node, and save base64 strings inside JSON, so that tests can run in the browser. see sha.js Crypto is extra serious so please do not hesitate to review the code, and post comments if you do. License MIT About partial implementation of node's `crypto` for the browser Resources Readme License MIT License Releases 31 tags Packages 0 No packages published Used by 6.4m + 6,358,439 Contributors 24 + 13 contributors Languages JavaScript 99.1% HTML 0.9% © 2021 GitHub, Inc. Terms Privacy Security Status Docs Contact GitHub Pricing API Training Blog About You can’t perform that action at this time. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."
717948,20210827,github.com,https://github.com/indutny/elliptic/issues,text/html,text/html,en,"Issues · indutny/elliptic · GitHub Skip to content Sign up Why GitHub? Features → Mobile → Actions → Codespaces → Packages → Security → Code review → Issues → Integrations → GitHub Sponsors → Customer stories→ Team Enterprise Explore Explore GitHub → Learn and contribute Topics → Collections → Trending → Learning Lab → Open source guides → Connect with others The ReadME Project → Events → Community forum → GitHub Education → GitHub Stars program → Marketplace Pricing Plans → Compare plans → Contact Sales → Education → In this repository All GitHub ↵ Jump to ↵ No suggested jump to results In this repository All GitHub ↵ Jump to ↵ In this user All GitHub ↵ Jump to ↵ In this repository All GitHub ↵ Jump to ↵ Sign in Sign up {{ message }} indutny / elliptic Notifications Star 1.3k Fork 311 Code Issues 78 Pull requests 21 Actions Projects 0 Wiki Security Insights More Code Issues Pull requests Actions Projects Wiki Security Insights Labels 8 Milestones 0 Labels 8 Milestones 0 New issue Have a question about this project? Sign up for a free GitHub account to open an issue and contact its maintainers and the community. Sign up for GitHub By clicking “Sign up for GitHub”, you agree to our terms of service and privacy statement. We’ll occasionally send you account related emails. Already on GitHub? Sign in to your account 78 Open 97 Closed 78 Open 97 Closed Author Filter by author author: Filter by this user Label Filter by label Use alt + click/return to exclude labels or ⇧ + click/return for logical OR Projects Filter by project Milestones Filter by milestone Assignee Filter by who’s assigned Sort Sort by Newest Oldest Most commented Least commented Recently updated Least recently updated Most reactions 👍 👎 😄 🎉 😕 ❤️ 🚀 👀 invalid y value for curve for new EC('p256') #263 opened Jul 28, 2021 by congminh090800 Invalid hashed data sign with EDDSA #262 opened Jul 6, 2021 by samuel-uniris Point multiplication gives different results based on order of operattions #260 opened Jun 16, 2021 by kot-begemot 3 deriving private key from public key #257 opened Apr 27, 2021 by madhav-madhusoodanan How to use keys with crypto.subtle #255 opened Apr 1, 2021 by DominicTobias-b1 EDDSA.decodeInt should fails or reduce by dafault? #254 opened Mar 18, 2021 by mahnunchik Sad state #251 opened Mar 11, 2021 by berkus 1 EDDSA.decodePoint should fails on ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff #250 opened Mar 3, 2021 by mahnunchik 15 Add endian argument to bn.js toString method #249 opened Mar 2, 2021 by mahnunchik EDDSA decodePoint doesn't support Buffer as argument #248 opened Mar 2, 2021 by mahnunchik How to decipher the encrypted message? #245 opened Jan 27, 2021 by istabraq-iot Montgomery Curve25519 is not openssl compatible #243 opened Dec 28, 2020 by jc-lab 4 Curves p384 and p521 produce incorrect results #239 opened Oct 18, 2020 by guidovranken 1 i want to use this library with c# #238 opened Oct 10, 2020 by medozeus Elliptic.js support following curve types: #236 opened Oct 5, 2020 by medozeus The Elliptic package 6.5.2 for Node.js allows ECDSA signature malleability via variations in encoding, leading '\0' bytes, or integer overflows. #235 opened Oct 1, 2020 by bsomeshwer EdDSA: What is a reason to manipulate with bytes? #233 opened Aug 27, 2020 by mahnunchik why use derive method get ECDH key，i got different length #230 opened Jul 10, 2020 by cqupt-yifanwu 4 Why do I generate my local test path in chunk-vendors when packing with NPM #229 opened Jun 22, 2020 by Anthonychen1994 1 TypedArray support ? #228 opened Jun 20, 2020 by dojyorin Is there way to generate PKCS#8 private key from Pem format ECC Private key #225 opened Apr 28, 2020 by sureshreddygovindu Signature validation in python. Prefix configuration? #224 opened Apr 25, 2020 by amrbz is it possible to do assymetric encryption? #223 opened Apr 7, 2020 by maroodb 1 Missing infinity point encoding #218 opened Feb 21, 2020 by catenacyber 1 ECDH P-521 public key point not on curve according to java (clojure) #216 opened Feb 11, 2020 by slhabity 2 Previous 1 2 3 4 Next Previous Next ProTip! Exclude everything labeled bug with -label:bug. © 2021 GitHub, Inc. Terms Privacy Security Status Docs Contact GitHub Pricing API Training Blog About You can’t perform that action at this time. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."
717952,20210827,github.com,https://github.com/indutny/elliptic,text/html,text/html,en,"GitHub - indutny/elliptic: Fast Elliptic Curve Cryptography in plain javascript Skip to content Sign up Why GitHub? Features → Mobile → Actions → Codespaces → Packages → Security → Code review → Issues → Integrations → GitHub Sponsors → Customer stories→ Team Enterprise Explore Explore GitHub → Learn and contribute Topics → Collections → Trending → Learning Lab → Open source guides → Connect with others The ReadME Project → Events → Community forum → GitHub Education → GitHub Stars program → Marketplace Pricing Plans → Compare plans → Contact Sales → Education → In this repository All GitHub ↵ Jump to ↵ No suggested jump to results In this repository All GitHub ↵ Jump to ↵ In this user All GitHub ↵ Jump to ↵ In this repository All GitHub ↵ Jump to ↵ Sign in Sign up {{ message }} indutny / elliptic Notifications Star 1.3k Fork 311 Fast Elliptic Curve Cryptography in plain javascript 1.3k stars 311 forks Star Notifications Code Issues 78 Pull requests 21 Actions Projects 0 Wiki Security Insights More Code Issues Pull requests Actions Projects Wiki Security Insights master Switch branches/tags Branches Tags Could not load branches Nothing to show {{ refName }} default View all branches Could not load tags Nothing to show {{ refName }} default View all tags 2 branches 85 tags Code Clone HTTPS GitHub CLI Use Git or checkout with SVN using the web URL. Work fast with our official CLI. Learn more. Open with GitHub Desktop Download ZIP Launching GitHub Desktop If nothing happens, download GitHub Desktop and try again. Go back Launching GitHub Desktop If nothing happens, download GitHub Desktop and try again. Go back Launching Xcode If nothing happens, download Xcode and try again. Go back Launching Visual Studio Code Your codespace will open once ready. There was a problem preparing your codespace, please try again. Latest commit indutny 6.5.4 … 43ac7f2 Feb 2, 2021 6.5.4 43ac7f2 Git stats 331 commits Files Permalink Failed to load latest commit information. Type Name Latest commit message Commit time benchmarks dist lib test .codeclimate.yml .eslintignore .eslintrc.js .gitignore .npmignore .travis.yml Gruntfile.js README.md package-lock.json package.json View code Elliptic Incentive Benchmarks API ECDSA EdDSA ECDH Supported curves Implementation details Related projects LICENSE README.md Elliptic Fast elliptic-curve cryptography in a plain javascript implementation. NOTE: Please take a look at http://safecurves.cr.yp.to/ before choosing a curve for your cryptography operations. Incentive ECC is much slower than regular RSA cryptography, the JS implementations are even more slower. Benchmarks $ node benchmarks/index.js Benchmarking: sign elliptic#sign x 262 ops/sec ±0.51% (177 runs sampled) eccjs#sign x 55.91 ops/sec ±0.90% (144 runs sampled) ------------------------ Fastest is elliptic#sign ======================== Benchmarking: verify elliptic#verify x 113 ops/sec ±0.50% (166 runs sampled) eccjs#verify x 48.56 ops/sec ±0.36% (125 runs sampled) ------------------------ Fastest is elliptic#verify ======================== Benchmarking: gen elliptic#gen x 294 ops/sec ±0.43% (176 runs sampled) eccjs#gen x 62.25 ops/sec ±0.63% (129 runs sampled) ------------------------ Fastest is elliptic#gen ======================== Benchmarking: ecdh elliptic#ecdh x 136 ops/sec ±0.85% (156 runs sampled) ------------------------ Fastest is elliptic#ecdh ======================== API ECDSA var EC = require('elliptic').ec; // Create and initialize EC context // (better do it once and reuse it) var ec = new EC('secp256k1'); // Generate keys var key = ec.genKeyPair(); // Sign the message's hash (input must be an array, or a hex-string) var msgHash = [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ]; var signature = key.sign(msgHash); // Export DER encoded signature in Array var derSign = signature.toDER(); // Verify signature console.log(key.verify(msgHash, derSign)); // CHECK WITH NO PRIVATE KEY var pubPoint = key.getPublic(); var x = pubPoint.getX(); var y = pubPoint.getY(); // Public Key MUST be either: // 1) '04' + hex string of x + hex string of y; or // 2) object with two hex string properties (x and y); or // 3) object with two buffer properties (x and y) var pub = pubPoint.encode('hex');                                 // case 1 var pub = { x: x.toString('hex'), y: y.toString('hex') };         // case 2 var pub = { x: x.toBuffer(), y: y.toBuffer() };                   // case 3 var pub = { x: x.toArrayLike(Buffer), y: y.toArrayLike(Buffer) }; // case 3 // Import public key var key = ec.keyFromPublic(pub, 'hex'); // Signature MUST be either: // 1) DER-encoded signature as hex-string; or // 2) DER-encoded signature as buffer; or // 3) object with two hex-string properties (r and s); or // 4) object with two buffer properties (r and s) var signature = '3046022100...'; // case 1 var signature = new Buffer('...'); // case 2 var signature = { r: 'b1fc...', s: '9c42...' }; // case 3 // Verify signature console.log(key.verify(msgHash, signature)); EdDSA var EdDSA = require('elliptic').eddsa; // Create and initialize EdDSA context // (better do it once and reuse it) var ec = new EdDSA('ed25519'); // Create key pair from secret var key = ec.keyFromSecret('693e3c...'); // hex string, array or Buffer // Sign the message's hash (input must be an array, or a hex-string) var msgHash = [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ]; var signature = key.sign(msgHash).toHex(); // Verify signature console.log(key.verify(msgHash, signature)); // CHECK WITH NO PRIVATE KEY // Import public key var pub = '0a1af638...'; var key = ec.keyFromPublic(pub, 'hex'); // Verify signature var signature = '70bed1...'; console.log(key.verify(msgHash, signature)); ECDH var EC = require('elliptic').ec; var ec = new EC('curve25519'); // Generate keys var key1 = ec.genKeyPair(); var key2 = ec.genKeyPair(); var shared1 = key1.derive(key2.getPublic()); var shared2 = key2.derive(key1.getPublic()); console.log('Both shared secrets are BN instances'); console.log(shared1.toString(16)); console.log(shared2.toString(16)); three and more members: var EC = require('elliptic').ec; var ec = new EC('curve25519'); var A = ec.genKeyPair(); var B = ec.genKeyPair(); var C = ec.genKeyPair(); var AB = A.getPublic().mul(B.getPrivate()) var BC = B.getPublic().mul(C.getPrivate()) var CA = C.getPublic().mul(A.getPrivate()) var ABC = AB.mul(C.getPrivate()) var BCA = BC.mul(A.getPrivate()) var CAB = CA.mul(B.getPrivate()) console.log(ABC.getX().toString(16)) console.log(BCA.getX().toString(16)) console.log(CAB.getX().toString(16)) NOTE: .derive() returns a BN instance. Supported curves Elliptic.js support following curve types: Short Weierstrass Montgomery Edwards Twisted Edwards Following curve 'presets' are embedded into the library: secp256k1 p192 p224 p256 p384 p521 curve25519 ed25519 NOTE: That curve25519 could not be used for ECDSA, use ed25519 instead. Implementation details ECDSA is using deterministic k value generation as per RFC6979. Most of the curve operations are performed on non-affine coordinates (either projective or extended), various windowing techniques are used for different cases. All operations are performed in reduction context using bn.js, hashing is provided by hash.js Related projects eccrypto: isomorphic implementation of ECDSA, ECDH and ECIES for both browserify and node (uses elliptic for browser and secp256k1-node for node) LICENSE This software is licensed under the MIT License. Copyright Fedor Indutny, 2014. Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the ""Software""), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. About Fast Elliptic Curve Cryptography in plain javascript Resources Readme Releases 85 tags Packages 0 No packages published Contributors 25 + 14 contributors Languages JavaScript 99.3% HTML 0.7% © 2021 GitHub, Inc. Terms Privacy Security Status Docs Contact GitHub Pricing API Training Blog About You can’t perform that action at this time. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."
721391,20210903,github.com,https://github.com/adobe-accessibility/Accessible-Mega-Menu,text/html,text/html,en,"GitHub - adobe-accessibility/Accessible-Mega-Menu: A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. Skip to content Sign up Why GitHub? Features → Mobile → Actions → Codespaces → Packages → Security → Code review → Issues → Integrations → GitHub Sponsors → Customer stories→ Team Enterprise Explore Explore GitHub → Learn and contribute Topics → Collections → Trending → Learning Lab → Open source guides → Connect with others The ReadME Project → Events → Community forum → GitHub Education → GitHub Stars program → Marketplace Pricing Plans → Compare plans → Contact Sales → Education → In this repository All GitHub ↵ Jump to ↵ No suggested jump to results In this repository All GitHub ↵ Jump to ↵ In this organization All GitHub ↵ Jump to ↵ In this repository All GitHub ↵ Jump to ↵ Sign in Sign up {{ message }} adobe-accessibility / Accessible-Mega-Menu Notifications Star 584 Fork 203 A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. Apache-2.0 License 584 stars 203 forks Star Notifications Code Issues 31 Pull requests 6 Actions Projects 0 Wiki Security Insights More Code Issues Pull requests Actions Projects Wiki Security Insights master Switch branches/tags Branches Tags Could not load branches Nothing to show {{ refName }} default View all branches Could not load tags Nothing to show {{ refName }} default View all tags 2 branches 0 tags Code Clone HTTPS GitHub CLI Use Git or checkout with SVN using the web URL. Work fast with our official CLI. Learn more. Open with GitHub Desktop Download ZIP Launching GitHub Desktop If nothing happens, download GitHub Desktop and try again. Go back Launching GitHub Desktop If nothing happens, download GitHub Desktop and try again. Go back Launching Xcode If nothing happens, download Xcode and try again. Go back Launching Visual Studio Code Your codespace will open once ready. There was a problem preparing your codespace, please try again. Latest commit majornista fix evaluation for ChromeVox object … 5c070bc Dec 7, 2020 fix evaluation for ChromeVox object 5c070bc Git stats 39 commits Files Permalink Failed to load latest commit information. Type Name Latest commit message Commit time css Add openOnMouseover setting, and toggleButtonClass for responsive layout May 11, 2018 js fix evaluation for ChromeVox object Dec 7, 2020 third-party/jquery initial commit Aug 26, 2013 LICENSE initial commit Aug 26, 2013 NOTICE initial commit Aug 26, 2013 README.md initial commit Aug 26, 2013 index.html Updating WCAG 2.0 References to WCAG 2.1 (#67) Dec 4, 2020 package.json Updating repo references Jul 8, 2016 View code Accessible Mega Menu Keyboard Accessibility Screen Reader Accessibility Usage HTML JavaScript CSS README.md Accessible Mega Menu ========================= A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. It is modeled after the mega menu on adobe.com but has been simplified for use by others. An brief explanation of our interaction design choices can be found in a blog post at Mega menu accessibility on adobe.com. Content for the links and text within the mega menu comes from the Web Content Accessibility Guidelines (WCAG) 2.0. Keyboard Accessibility The accessible mega menu supports keyboard interaction modeled after the behavior described in the WAI-ARIA Menu or Menu bar (widget) design pattern, however we also try to respect users' general expectations for the behavior of links in a global navigation. To this end, the accessible mega menu implementation permits tab focus on each of the six top-level menu items. When one of the menu items has focus, pressing the Enter key, Spacebar or Down arrow will open the submenu panel, and pressing the Left or Right arrow key will shift focus to the adjacent menu item. Links within the submenu panels are included in the tab order when the panel is open. They can also be navigated with the arrow keys or by typing the first character in the link name, which speeds up keyboard navigation considerably. Pressing the Escape key closes the submenu and restores focus to the parent menu item. Screen Reader Accessibility The accessible mega menu models its use of WAI-ARIA Roles, States, and Properties after those described in the WAI-ARIA Menu or Menu bar (widget) design pattern with some notable exceptions, so that it behaves better with screen reader user expectations for global navigation. We don't use role=""menu"" for the menu container and role=""menuitem"" for each of the links therein, because if we do, assistive technology will no longer interpret the links as links, but instead, as menu items, and the links in our global navigation will no longer show up when a screen reader user executes a shortcut command to bring up a list of links in the page. We also want to maintain the semantic structure of the submenu panels in our mega menu; our links are organized into lists and separated by headings. Omitting role=""menu"" and role=""menuitem"" for the global navigation seems the safer way to go. Usage HTML The HTML structure for the mega menu is a nav element, or any other container element, containing a list. Each list item contains a link which is followed by a div or any other container element which will serve as the pop up panel. The panel can contain any html content; in the following example, each panel contains three lists of links. You can explicitly define groups within the panel, between which a user can navigate quickly using the left and right arrow keys; in the following example, the CSS class .sub-nav-group identifies a navigable group.     <nav>         <ul class=""nav-menu"">             <li class=""nav-item"">                 <a href=""?movie"">Movies</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=0"">Action &amp; Adventure</a></li>                         <li><a href=""?movie&genre=2"">Children &amp; Family</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=7"">Dramas</a></li>                         <li><a href=""?movie&genre=9"">Foreign</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=14"">Musicals</a></li>                         <li><a href=""?movie&genre=15"">Romance</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>             <li class=""nav-item"">                 <a href=""?tv"">TV Shows</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=20"">Classic TV</a></li>                         <li><a href=""?tv&genre=21"">Crime TV</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=27"">Reality TV</a></li>                         <li><a href=""?tv&genre=30"">TV Action</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=33"">TV Dramas</a></li>                         <li><a href=""?tv&genre=34"">TV Horror</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>         </ul>     </nav> By default, accessibleMegaMenu uses the the following CSS classes to define the top-level navigation items, panels, groups within the panels, and the hover, focus, and open states. It also defines a prefix for unique id strings, which are required to indicate the relationship of a top-level navigation item to the panel it controls.     defaults = {         /* unique ID's are required to indicate aria-owns, aria-controls and aria-labelledby */         uuidPrefix: ""accessible-megamenu"",                  /* default css class used to define the megamenu styling */         menuClass: ""accessible-megamenu"",                  /* default css class for a top-level navigation item in the megamenu */         topNavItemClass: ""accessible-megamenu-top-nav-item"",                  /* default css class for a megamenu panel */         panelClass: ""accessible-megamenu-panel"",                  /* default css class for a group of items within a megamenu panel */         panelGroupClass: ""accessible-megamenu-panel-group"",                  /* default css class for the hover state */         hoverClass: ""hover"",                  /* default css class for the focus state */         focusClass: ""focus"",                  /* default css class for the open state */         openClass: ""open""      } You can optionally override the defaults to use the CSS classes you may have already defined for your mega menu. JavaScript Be sure to include jQuery and the jquery-accessibleMegaMenu.js plugin script.     <script src=""//code.jquery.com/jquery-1.10.1.min.js""></script>     <script src=""js/jquery-accessibleMegaMenu.js""></script> The following initializes the first nav element in the document as an accessibleMegaMenu, with optional CSS class overrides.     $(""nav:first"").accessibleMegaMenu({         /* prefix for generated unique id attributes, which are required             to indicate aria-owns, aria-controls and aria-labelledby */         uuidPrefix: ""accessible-megamenu"",                  /* css class used to define the megamenu styling */         menuClass: ""nav-menu"",                  /* css class for a top-level navigation item in the megamenu */         topNavItemClass: ""nav-item"",                  /* css class for a megamenu panel */         panelClass: ""sub-nav"",                  /* css class for a group of items within a megamenu panel */         panelGroupClass: ""sub-nav-group"",                  /* css class for the hover state */         hoverClass: ""hover"",                  /* css class for the focus state */         focusClass: ""focus"",                  /* css class for the open state */         openClass: ""open""     }); CSS AccessibleMegaMenu handles the showing and hiding of panels by adding or removing a CSS class. No inline styles are added to hide elements or create animation between states. Following is some rudimentary CSS for our example which enables the showing/hiding of and the layout of lists panels in the mega menu.     /* mega menu list */     .nav-menu {         display: block;         position: relative;         list-style: none;         margin: 0;         padding: 0;         z-index: 15;     }     /* a top level navigation item in the mega menu */     .nav-item {         list-style: none;         display: inline-block;         padding: 0;         margin: 0;     }     /* first descendant link within a top level navigation item */     .nav-item > a {         position: relative;         display: inline-block;         padding: 0.5em 1em;         margin: 0 0 -1px 0;         border: 1px solid transparent;     }     /* focus/open states of first descendant link within a top level         navigation item */     .nav-item > a:focus,     .nav-item > a.open {         border: 1px solid #dedede;     }     /* open state of first descendant link within a top level         navigation item */     .nav-item > a.open {         background-color: #fff;         border-bottom: none;         z-index: 1;     }     /* sub-navigation panel */     .sub-nav {         position: absolute;         display: none;         top: 2.2em;         margin-top: -1px;         padding: 0.5em 1em;         border: 1px solid #dedede;         background-color: #fff;     }     /* sub-navigation panel open state */     .sub-nav.open {         display: block;     }     /* list of items within sub-navigation panel */     .sub-nav ul {         display: inline-block;         vertical-align: top;         margin: 0 1em 0 0;         padding: 0;     }     /* list item within sub-navigation panel */     .sub-nav li {         display: block;         list-style-type: none;         margin: 0;         padding: 0;     }   Putting it all together, here is the completed example:     <!doctype html>     <html lang=""en"">     <head>     <meta charset=""UTF-8"">     <title>Simple Accessible Mega Menu Example</title>     <style>         /* Rudimentary mega menu CSS for demonstration */             /* mega menu list */         .nav-menu {             display: block;             position: relative;             list-style: none;             margin: 0;             padding: 0;             z-index: 15;         }         /* a top level navigation item in the mega menu */         .nav-item {             list-style: none;             display: inline-block;             padding: 0;             margin: 0;         }         /* first descendant link within a top level navigation item */         .nav-item > a {             position: relative;             display: inline-block;             padding: 0.5em 1em;             margin: 0 0 -1px 0;             border: 1px solid transparent;         }         /* focus/open states of first descendant link within a top level             navigation item */         .nav-item > a:focus,         .nav-item > a.open {             border: 1px solid #dedede;         }         /* open state of first descendant link within a top level             navigation item */         .nav-item > a.open {             background-color: #fff;             border-bottom: none;             z-index: 1;         }         /* sub-navigation panel */         .sub-nav {             position: absolute;             display: none;             top: 2.2em;             margin-top: -1px;             padding: 0.5em 1em;             border: 1px solid #dedede;             background-color: #fff;         }         /* sub-navigation panel open state */         .sub-nav.open {             display: block;         }         /* list of items within sub-navigation panel */         .sub-nav ul {             display: inline-block;             vertical-align: top;             margin: 0 1em 0 0;             padding: 0;         }         /* list item within sub-navigation panel */         .sub-nav li {             display: block;             list-style-type: none;             margin: 0;             padding: 0;         }          </style>     </head>     <body>     <nav>         <ul class=""nav-menu"">             <li class=""nav-item"">                 <a href=""?movie"">Movies</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=0"">Action &amp; Adventure</a></li>                         <li><a href=""?movie&genre=2"">Children &amp; Family</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=7"">Dramas</a></li>                         <li><a href=""?movie&genre=9"">Foreign</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=14"">Musicals</a></li>                         <li><a href=""?movie&genre=15"">Romance</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>             <li class=""nav-item"">                 <a href=""?tv"">TV Shows</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=20"">Classic TV</a></li>                         <li><a href=""?tv&genre=21"">Crime TV</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=27"">Reality TV</a></li>                         <li><a href=""?tv&genre=30"">TV Action</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=33"">TV Dramas</a></li>                         <li><a href=""?tv&genre=34"">TV Horror</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>         </ul>     </nav>          <!-- include jquery -->     <script src=""//code.jquery.com/jquery-1.10.1.min.js""></script>     <!-- include the jquery-accessibleMegaMenu plugin script -->     <script src=""js/jquery-accessibleMegaMenu.js""></script>     <!-- initialize a selector as an accessibleMegaMenu -->     <script>         $(""nav:first"").accessibleMegaMenu({             /* prefix for generated unique id attributes, which are required                 to indicate aria-owns, aria-controls and aria-labelledby */             uuidPrefix: ""accessible-megamenu"",                          /* css class used to define the megamenu styling */             menuClass: ""nav-menu"",                          /* css class for a top-level navigation item in the megamenu */             topNavItemClass: ""nav-item"",                          /* css class for a megamenu panel */             panelClass: ""sub-nav"",                          /* css class for a group of items within a megamenu panel */             panelGroupClass: ""sub-nav-group"",                          /* css class for the hover state */             hoverClass: ""hover"",                          /* css class for the focus state */             focusClass: ""focus"",                          /* css class for the open state */             openClass: ""open""         });     </script>     </body>     </html> About A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. Resources Readme License Apache-2.0 License Releases No releases published Packages 0 No packages published Used by 16 + 8 Contributors 7 Languages HTML 71.8% CSS 26.4% JavaScript 1.8% © 2021 GitHub, Inc. Terms Privacy Security Status Docs Contact GitHub Pricing API Training Blog About You can’t perform that action at this time. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."
722476,20210903,github.com,https://github.com/crypto-browserify/crypto-browserify,text/html,text/html,en,"GitHub - crypto-browserify/crypto-browserify: partial implementation of node's `crypto` for the browser Skip to content Sign up Why GitHub? Features → Mobile → Actions → Codespaces → Packages → Security → Code review → Issues → Integrations → GitHub Sponsors → Customer stories→ Team Enterprise Explore Explore GitHub → Learn and contribute Topics → Collections → Trending → Learning Lab → Open source guides → Connect with others The ReadME Project → Events → Community forum → GitHub Education → GitHub Stars program → Marketplace Pricing Plans → Compare plans → Contact Sales → Education → In this repository All GitHub ↵ Jump to ↵ No suggested jump to results In this repository All GitHub ↵ Jump to ↵ In this organization All GitHub ↵ Jump to ↵ In this repository All GitHub ↵ Jump to ↵ Sign in Sign up {{ message }} crypto-browserify / crypto-browserify Notifications Star 492 Fork 158 partial implementation of node's `crypto` for the browser MIT License 492 stars 158 forks Star Notifications Code Issues 21 Pull requests 6 Actions Projects 0 Wiki Security Insights More Code Issues Pull requests Actions Projects Wiki Security Insights master Switch branches/tags Branches Tags Could not load branches Nothing to show {{ refName }} default View all branches Could not load tags Nothing to show {{ refName }} default View all tags 6 branches 31 tags Code Clone HTTPS GitHub CLI Use Git or checkout with SVN using the web URL. Work fast with our official CLI. Learn more. Open with GitHub Desktop Download ZIP Launching GitHub Desktop If nothing happens, download GitHub Desktop and try again. Go back Launching GitHub Desktop If nothing happens, download GitHub Desktop and try again. Go back Launching Xcode If nothing happens, download Xcode and try again. Go back Launching Visual Studio Code Your codespace will open once ready. There was a problem preparing your codespace, please try again. Latest commit Git stats 362 commits Files Permalink Failed to load latest commit information. Type Name Latest commit message Commit time example add standard 5.0.0 Aug 13, 2015 test fix debian issue (maybe) Feb 9, 2018 .gitignore Add .gitignore Aug 5, 2013 .travis.yml saucelabs aparently only goes back to 7 Oct 19, 2017 .zuul.yml add zuul and browser tests Oct 3, 2015 LICENSE Add MIT license Sep 20, 2013 README.md add privateEncrypt/publicDecrypt to README Dec 14, 2015 index.js add rndom fill Oct 18, 2017 package.json 3.12.0 Nov 3, 2017 View code crypto-browserify todo contributions License README.md crypto-browserify A port of node's crypto module to the browser. The goal of this module is to reimplement node's crypto module, in pure javascript so that it can run in the browser. Here is the subset that is currently implemented: createHash (sha1, sha224, sha256, sha384, sha512, md5, rmd160) createHmac (sha1, sha224, sha256, sha384, sha512, md5, rmd160) pbkdf2 pbkdf2Sync randomBytes pseudoRandomBytes createCipher (aes) createDecipher (aes) createDiffieHellman createSign (rsa, ecdsa) createVerify (rsa, ecdsa) createECDH (secp256k1) publicEncrypt/privateDecrypt (rsa) privateEncrypt/publicDecrypt (rsa) todo these features from node's crypto are still unimplemented. createCredentials contributions If you are interested in writing a feature, please implement as a new module, which will be incorporated into crypto-browserify as a dependency. All deps must be compatible with node's crypto (generate example inputs and outputs with node, and save base64 strings inside JSON, so that tests can run in the browser. see sha.js Crypto is extra serious so please do not hesitate to review the code, and post comments if you do. License MIT About partial implementation of node's `crypto` for the browser Resources Readme License MIT License Releases 31 tags Packages 0 No packages published Used by 6.4m + 6,379,998 Contributors 24 + 13 contributors Languages JavaScript 99.1% HTML 0.9% © 2021 GitHub, Inc. Terms Privacy Security Status Docs Contact GitHub Pricing API Training Blog About You can’t perform that action at this time. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."
722478,20210903,github.com,https://github.com/indutny/elliptic/issues,text/html,text/html,en,"Issues · indutny/elliptic · GitHub Skip to content Sign up Why GitHub? Features → Mobile → Actions → Codespaces → Packages → Security → Code review → Issues → Integrations → GitHub Sponsors → Customer stories→ Team Enterprise Explore Explore GitHub → Learn and contribute Topics → Collections → Trending → Learning Lab → Open source guides → Connect with others The ReadME Project → Events → Community forum → GitHub Education → GitHub Stars program → Marketplace Pricing Plans → Compare plans → Contact Sales → Education → In this repository All GitHub ↵ Jump to ↵ No suggested jump to results In this repository All GitHub ↵ Jump to ↵ In this user All GitHub ↵ Jump to ↵ In this repository All GitHub ↵ Jump to ↵ Sign in Sign up {{ message }} indutny / elliptic Notifications Star 1.3k Fork 312 Code Issues 78 Pull requests 21 Actions Projects 0 Wiki Security Insights More Code Issues Pull requests Actions Projects Wiki Security Insights Labels 8 Milestones 0 Labels 8 Milestones 0 New issue Have a question about this project? Sign up for a free GitHub account to open an issue and contact its maintainers and the community. Sign up for GitHub By clicking “Sign up for GitHub”, you agree to our terms of service and privacy statement. We’ll occasionally send you account related emails. Already on GitHub? Sign in to your account 78 Open 97 Closed 78 Open 97 Closed Author Filter by author author: Filter by this user Label Filter by label Use alt + click/return to exclude labels or ⇧ + click/return for logical OR Projects Filter by project Milestones Filter by milestone Assignee Filter by who’s assigned Sort Sort by Newest Oldest Most commented Least commented Recently updated Least recently updated Most reactions 👍 👎 😄 🎉 😕 ❤️ 🚀 👀 invalid y value for curve for new EC('p256') #263 opened Jul 28, 2021 by congminh090800 Invalid hashed data sign with EDDSA #262 opened Jul 6, 2021 by samuel-uniris Point multiplication gives different results based on order of operattions #260 opened Jun 16, 2021 by kot-begemot 3 deriving private key from public key #257 opened Apr 27, 2021 by madhav-madhusoodanan How to use keys with crypto.subtle #255 opened Apr 1, 2021 by DominicTobias-b1 EDDSA.decodeInt should fails or reduce by dafault? #254 opened Mar 18, 2021 by mahnunchik Sad state #251 opened Mar 11, 2021 by berkus 1 EDDSA.decodePoint should fails on ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff #250 opened Mar 3, 2021 by mahnunchik 15 Add endian argument to bn.js toString method #249 opened Mar 2, 2021 by mahnunchik EDDSA decodePoint doesn't support Buffer as argument #248 opened Mar 2, 2021 by mahnunchik How to decipher the encrypted message? #245 opened Jan 27, 2021 by istabraq-iot Montgomery Curve25519 is not openssl compatible #243 opened Dec 28, 2020 by jc-lab 4 Curves p384 and p521 produce incorrect results #239 opened Oct 18, 2020 by guidovranken 1 i want to use this library with c# #238 opened Oct 10, 2020 by medozeus Elliptic.js support following curve types: #236 opened Oct 5, 2020 by medozeus The Elliptic package 6.5.2 for Node.js allows ECDSA signature malleability via variations in encoding, leading '\0' bytes, or integer overflows. #235 opened Oct 1, 2020 by bsomeshwer EdDSA: What is a reason to manipulate with bytes? #233 opened Aug 27, 2020 by mahnunchik why use derive method get ECDH key，i got different length #230 opened Jul 10, 2020 by cqupt-yifanwu 4 Why do I generate my local test path in chunk-vendors when packing with NPM #229 opened Jun 22, 2020 by Anthonychen1994 1 TypedArray support ? #228 opened Jun 20, 2020 by dojyorin Is there way to generate PKCS#8 private key from Pem format ECC Private key #225 opened Apr 28, 2020 by sureshreddygovindu Signature validation in python. Prefix configuration? #224 opened Apr 25, 2020 by amrbz is it possible to do assymetric encryption? #223 opened Apr 7, 2020 by maroodb 1 Missing infinity point encoding #218 opened Feb 21, 2020 by catenacyber 1 ECDH P-521 public key point not on curve according to java (clojure) #216 opened Feb 11, 2020 by slhabity 2 Previous 1 2 3 4 Next Previous Next ProTip! Find all open issues with in progress development work with linked:pr. © 2021 GitHub, Inc. Terms Privacy Security Status Docs Contact GitHub Pricing API Training Blog About You can’t perform that action at this time. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."
722479,20210903,github.com,https://github.com/indutny/elliptic,text/html,text/html,en,"GitHub - indutny/elliptic: Fast Elliptic Curve Cryptography in plain javascript Skip to content Sign up Why GitHub? Features → Mobile → Actions → Codespaces → Packages → Security → Code review → Issues → Integrations → GitHub Sponsors → Customer stories→ Team Enterprise Explore Explore GitHub → Learn and contribute Topics → Collections → Trending → Learning Lab → Open source guides → Connect with others The ReadME Project → Events → Community forum → GitHub Education → GitHub Stars program → Marketplace Pricing Plans → Compare plans → Contact Sales → Education → In this repository All GitHub ↵ Jump to ↵ No suggested jump to results In this repository All GitHub ↵ Jump to ↵ In this user All GitHub ↵ Jump to ↵ In this repository All GitHub ↵ Jump to ↵ Sign in Sign up {{ message }} indutny / elliptic Notifications Star 1.3k Fork 312 Fast Elliptic Curve Cryptography in plain javascript 1.3k stars 312 forks Star Notifications Code Issues 78 Pull requests 21 Actions Projects 0 Wiki Security Insights More Code Issues Pull requests Actions Projects Wiki Security Insights master Switch branches/tags Branches Tags Could not load branches Nothing to show {{ refName }} default View all branches Could not load tags Nothing to show {{ refName }} default View all tags 2 branches 85 tags Code Clone HTTPS GitHub CLI Use Git or checkout with SVN using the web URL. Work fast with our official CLI. Learn more. Open with GitHub Desktop Download ZIP Launching GitHub Desktop If nothing happens, download GitHub Desktop and try again. Go back Launching GitHub Desktop If nothing happens, download GitHub Desktop and try again. Go back Launching Xcode If nothing happens, download Xcode and try again. Go back Launching Visual Studio Code Your codespace will open once ready. There was a problem preparing your codespace, please try again. Latest commit indutny 6.5.4 … 43ac7f2 Feb 2, 2021 6.5.4 43ac7f2 Git stats 331 commits Files Permalink Failed to load latest commit information. Type Name Latest commit message Commit time benchmarks package: remove Makefile and dist Jan 29, 2016 dist 6.5.4 Feb 2, 2021 lib ec: validate that a point before deriving keys Feb 2, 2021 test ec: validate that a point before deriving keys Feb 2, 2021 .codeclimate.yml test: improvements with Saucelabs/Codeclimate Mar 31, 2016 .eslintignore lib: relint using eslint Aug 2, 2020 .eslintrc.js lib: relint using eslint Aug 2, 2020 .gitignore test: improvements with Saucelabs/Codeclimate Mar 31, 2016 .npmignore npmignore: dist May 20, 2016 .travis.yml travis: really move on Jun 26, 2019 Gruntfile.js grunt: fix standalone build May 25, 2016 README.md readme: update example Mar 23, 2017 package-lock.json 6.5.4 Feb 2, 2021 package.json 6.5.4 Feb 2, 2021 View code Elliptic Incentive Benchmarks API ECDSA EdDSA ECDH Supported curves Implementation details Related projects LICENSE README.md Elliptic Fast elliptic-curve cryptography in a plain javascript implementation. NOTE: Please take a look at http://safecurves.cr.yp.to/ before choosing a curve for your cryptography operations. Incentive ECC is much slower than regular RSA cryptography, the JS implementations are even more slower. Benchmarks $ node benchmarks/index.js Benchmarking: sign elliptic#sign x 262 ops/sec ±0.51% (177 runs sampled) eccjs#sign x 55.91 ops/sec ±0.90% (144 runs sampled) ------------------------ Fastest is elliptic#sign ======================== Benchmarking: verify elliptic#verify x 113 ops/sec ±0.50% (166 runs sampled) eccjs#verify x 48.56 ops/sec ±0.36% (125 runs sampled) ------------------------ Fastest is elliptic#verify ======================== Benchmarking: gen elliptic#gen x 294 ops/sec ±0.43% (176 runs sampled) eccjs#gen x 62.25 ops/sec ±0.63% (129 runs sampled) ------------------------ Fastest is elliptic#gen ======================== Benchmarking: ecdh elliptic#ecdh x 136 ops/sec ±0.85% (156 runs sampled) ------------------------ Fastest is elliptic#ecdh ======================== API ECDSA var EC = require('elliptic').ec; // Create and initialize EC context // (better do it once and reuse it) var ec = new EC('secp256k1'); // Generate keys var key = ec.genKeyPair(); // Sign the message's hash (input must be an array, or a hex-string) var msgHash = [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ]; var signature = key.sign(msgHash); // Export DER encoded signature in Array var derSign = signature.toDER(); // Verify signature console.log(key.verify(msgHash, derSign)); // CHECK WITH NO PRIVATE KEY var pubPoint = key.getPublic(); var x = pubPoint.getX(); var y = pubPoint.getY(); // Public Key MUST be either: // 1) '04' + hex string of x + hex string of y; or // 2) object with two hex string properties (x and y); or // 3) object with two buffer properties (x and y) var pub = pubPoint.encode('hex');                                 // case 1 var pub = { x: x.toString('hex'), y: y.toString('hex') };         // case 2 var pub = { x: x.toBuffer(), y: y.toBuffer() };                   // case 3 var pub = { x: x.toArrayLike(Buffer), y: y.toArrayLike(Buffer) }; // case 3 // Import public key var key = ec.keyFromPublic(pub, 'hex'); // Signature MUST be either: // 1) DER-encoded signature as hex-string; or // 2) DER-encoded signature as buffer; or // 3) object with two hex-string properties (r and s); or // 4) object with two buffer properties (r and s) var signature = '3046022100...'; // case 1 var signature = new Buffer('...'); // case 2 var signature = { r: 'b1fc...', s: '9c42...' }; // case 3 // Verify signature console.log(key.verify(msgHash, signature)); EdDSA var EdDSA = require('elliptic').eddsa; // Create and initialize EdDSA context // (better do it once and reuse it) var ec = new EdDSA('ed25519'); // Create key pair from secret var key = ec.keyFromSecret('693e3c...'); // hex string, array or Buffer // Sign the message's hash (input must be an array, or a hex-string) var msgHash = [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ]; var signature = key.sign(msgHash).toHex(); // Verify signature console.log(key.verify(msgHash, signature)); // CHECK WITH NO PRIVATE KEY // Import public key var pub = '0a1af638...'; var key = ec.keyFromPublic(pub, 'hex'); // Verify signature var signature = '70bed1...'; console.log(key.verify(msgHash, signature)); ECDH var EC = require('elliptic').ec; var ec = new EC('curve25519'); // Generate keys var key1 = ec.genKeyPair(); var key2 = ec.genKeyPair(); var shared1 = key1.derive(key2.getPublic()); var shared2 = key2.derive(key1.getPublic()); console.log('Both shared secrets are BN instances'); console.log(shared1.toString(16)); console.log(shared2.toString(16)); three and more members: var EC = require('elliptic').ec; var ec = new EC('curve25519'); var A = ec.genKeyPair(); var B = ec.genKeyPair(); var C = ec.genKeyPair(); var AB = A.getPublic().mul(B.getPrivate()) var BC = B.getPublic().mul(C.getPrivate()) var CA = C.getPublic().mul(A.getPrivate()) var ABC = AB.mul(C.getPrivate()) var BCA = BC.mul(A.getPrivate()) var CAB = CA.mul(B.getPrivate()) console.log(ABC.getX().toString(16)) console.log(BCA.getX().toString(16)) console.log(CAB.getX().toString(16)) NOTE: .derive() returns a BN instance. Supported curves Elliptic.js support following curve types: Short Weierstrass Montgomery Edwards Twisted Edwards Following curve 'presets' are embedded into the library: secp256k1 p192 p224 p256 p384 p521 curve25519 ed25519 NOTE: That curve25519 could not be used for ECDSA, use ed25519 instead. Implementation details ECDSA is using deterministic k value generation as per RFC6979. Most of the curve operations are performed on non-affine coordinates (either projective or extended), various windowing techniques are used for different cases. All operations are performed in reduction context using bn.js, hashing is provided by hash.js Related projects eccrypto: isomorphic implementation of ECDSA, ECDH and ECIES for both browserify and node (uses elliptic for browser and secp256k1-node for node) LICENSE This software is licensed under the MIT License. Copyright Fedor Indutny, 2014. Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the ""Software""), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. About Fast Elliptic Curve Cryptography in plain javascript Resources Readme Releases 85 tags Packages 0 No packages published Used by 6.3m + 6,309,314 Contributors 25 + 14 contributors Languages JavaScript 99.3% HTML 0.7% © 2021 GitHub, Inc. Terms Privacy Security Status Docs Contact GitHub Pricing API Training Blog About You can’t perform that action at this time. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."
727149,20210910,github.com,https://github.com/adobe-accessibility/Accessible-Mega-Menu,text/html,text/html,en,"GitHub - adobe-accessibility/Accessible-Mega-Menu: A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. Skip to content Sign up Why GitHub? Features → Mobile → Actions → Codespaces → Packages → Security → Code review → Issues → Integrations → GitHub Sponsors → Customer stories→ Team Enterprise Explore Explore GitHub → Learn and contribute Topics → Collections → Trending → Learning Lab → Open source guides → Connect with others The ReadME Project → Events → Community forum → GitHub Education → GitHub Stars program → Marketplace Pricing Plans → Compare plans → Contact Sales → Education → In this repository All GitHub ↵ Jump to ↵ No suggested jump to results In this repository All GitHub ↵ Jump to ↵ In this organization All GitHub ↵ Jump to ↵ In this repository All GitHub ↵ Jump to ↵ Sign in Sign up {{ message }} adobe-accessibility / Accessible-Mega-Menu Public Notifications Star 584 Fork 203 A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. Apache-2.0 License 584 stars 203 forks Star Notifications Code Issues 31 Pull requests 6 Actions Projects 0 Wiki Security Insights More Code Issues Pull requests Actions Projects Wiki Security Insights master Switch branches/tags Branches Tags Could not load branches Nothing to show {{ refName }} default View all branches Could not load tags Nothing to show {{ refName }} default View all tags 2 branches 0 tags Code Clone HTTPS GitHub CLI Use Git or checkout with SVN using the web URL. Work fast with our official CLI. Learn more. Open with GitHub Desktop Download ZIP Launching GitHub Desktop If nothing happens, download GitHub Desktop and try again. Go back Launching GitHub Desktop If nothing happens, download GitHub Desktop and try again. Go back Launching Xcode If nothing happens, download Xcode and try again. Go back Launching Visual Studio Code Your codespace will open once ready. There was a problem preparing your codespace, please try again. Latest commit majornista fix evaluation for ChromeVox object … 5c070bc Dec 7, 2020 fix evaluation for ChromeVox object 5c070bc Git stats 39 commits Files Permalink Failed to load latest commit information. Type Name Latest commit message Commit time css Add openOnMouseover setting, and toggleButtonClass for responsive layout May 11, 2018 js fix evaluation for ChromeVox object Dec 7, 2020 third-party/jquery initial commit Aug 26, 2013 LICENSE initial commit Aug 26, 2013 NOTICE initial commit Aug 26, 2013 README.md initial commit Aug 26, 2013 index.html Updating WCAG 2.0 References to WCAG 2.1 (#67) Dec 4, 2020 package.json Updating repo references Jul 8, 2016 View code Accessible Mega Menu Keyboard Accessibility Screen Reader Accessibility Usage HTML JavaScript CSS README.md Accessible Mega Menu ========================= A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. It is modeled after the mega menu on adobe.com but has been simplified for use by others. An brief explanation of our interaction design choices can be found in a blog post at Mega menu accessibility on adobe.com. Content for the links and text within the mega menu comes from the Web Content Accessibility Guidelines (WCAG) 2.0. Keyboard Accessibility The accessible mega menu supports keyboard interaction modeled after the behavior described in the WAI-ARIA Menu or Menu bar (widget) design pattern, however we also try to respect users' general expectations for the behavior of links in a global navigation. To this end, the accessible mega menu implementation permits tab focus on each of the six top-level menu items. When one of the menu items has focus, pressing the Enter key, Spacebar or Down arrow will open the submenu panel, and pressing the Left or Right arrow key will shift focus to the adjacent menu item. Links within the submenu panels are included in the tab order when the panel is open. They can also be navigated with the arrow keys or by typing the first character in the link name, which speeds up keyboard navigation considerably. Pressing the Escape key closes the submenu and restores focus to the parent menu item. Screen Reader Accessibility The accessible mega menu models its use of WAI-ARIA Roles, States, and Properties after those described in the WAI-ARIA Menu or Menu bar (widget) design pattern with some notable exceptions, so that it behaves better with screen reader user expectations for global navigation. We don't use role=""menu"" for the menu container and role=""menuitem"" for each of the links therein, because if we do, assistive technology will no longer interpret the links as links, but instead, as menu items, and the links in our global navigation will no longer show up when a screen reader user executes a shortcut command to bring up a list of links in the page. We also want to maintain the semantic structure of the submenu panels in our mega menu; our links are organized into lists and separated by headings. Omitting role=""menu"" and role=""menuitem"" for the global navigation seems the safer way to go. Usage HTML The HTML structure for the mega menu is a nav element, or any other container element, containing a list. Each list item contains a link which is followed by a div or any other container element which will serve as the pop up panel. The panel can contain any html content; in the following example, each panel contains three lists of links. You can explicitly define groups within the panel, between which a user can navigate quickly using the left and right arrow keys; in the following example, the CSS class .sub-nav-group identifies a navigable group.     <nav>         <ul class=""nav-menu"">             <li class=""nav-item"">                 <a href=""?movie"">Movies</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=0"">Action &amp; Adventure</a></li>                         <li><a href=""?movie&genre=2"">Children &amp; Family</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=7"">Dramas</a></li>                         <li><a href=""?movie&genre=9"">Foreign</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=14"">Musicals</a></li>                         <li><a href=""?movie&genre=15"">Romance</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>             <li class=""nav-item"">                 <a href=""?tv"">TV Shows</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=20"">Classic TV</a></li>                         <li><a href=""?tv&genre=21"">Crime TV</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=27"">Reality TV</a></li>                         <li><a href=""?tv&genre=30"">TV Action</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=33"">TV Dramas</a></li>                         <li><a href=""?tv&genre=34"">TV Horror</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>         </ul>     </nav> By default, accessibleMegaMenu uses the the following CSS classes to define the top-level navigation items, panels, groups within the panels, and the hover, focus, and open states. It also defines a prefix for unique id strings, which are required to indicate the relationship of a top-level navigation item to the panel it controls.     defaults = {         /* unique ID's are required to indicate aria-owns, aria-controls and aria-labelledby */         uuidPrefix: ""accessible-megamenu"",                  /* default css class used to define the megamenu styling */         menuClass: ""accessible-megamenu"",                  /* default css class for a top-level navigation item in the megamenu */         topNavItemClass: ""accessible-megamenu-top-nav-item"",                  /* default css class for a megamenu panel */         panelClass: ""accessible-megamenu-panel"",                  /* default css class for a group of items within a megamenu panel */         panelGroupClass: ""accessible-megamenu-panel-group"",                  /* default css class for the hover state */         hoverClass: ""hover"",                  /* default css class for the focus state */         focusClass: ""focus"",                  /* default css class for the open state */         openClass: ""open""      } You can optionally override the defaults to use the CSS classes you may have already defined for your mega menu. JavaScript Be sure to include jQuery and the jquery-accessibleMegaMenu.js plugin script.     <script src=""//code.jquery.com/jquery-1.10.1.min.js""></script>     <script src=""js/jquery-accessibleMegaMenu.js""></script> The following initializes the first nav element in the document as an accessibleMegaMenu, with optional CSS class overrides.     $(""nav:first"").accessibleMegaMenu({         /* prefix for generated unique id attributes, which are required             to indicate aria-owns, aria-controls and aria-labelledby */         uuidPrefix: ""accessible-megamenu"",                  /* css class used to define the megamenu styling */         menuClass: ""nav-menu"",                  /* css class for a top-level navigation item in the megamenu */         topNavItemClass: ""nav-item"",                  /* css class for a megamenu panel */         panelClass: ""sub-nav"",                  /* css class for a group of items within a megamenu panel */         panelGroupClass: ""sub-nav-group"",                  /* css class for the hover state */         hoverClass: ""hover"",                  /* css class for the focus state */         focusClass: ""focus"",                  /* css class for the open state */         openClass: ""open""     }); CSS AccessibleMegaMenu handles the showing and hiding of panels by adding or removing a CSS class. No inline styles are added to hide elements or create animation between states. Following is some rudimentary CSS for our example which enables the showing/hiding of and the layout of lists panels in the mega menu.     /* mega menu list */     .nav-menu {         display: block;         position: relative;         list-style: none;         margin: 0;         padding: 0;         z-index: 15;     }     /* a top level navigation item in the mega menu */     .nav-item {         list-style: none;         display: inline-block;         padding: 0;         margin: 0;     }     /* first descendant link within a top level navigation item */     .nav-item > a {         position: relative;         display: inline-block;         padding: 0.5em 1em;         margin: 0 0 -1px 0;         border: 1px solid transparent;     }     /* focus/open states of first descendant link within a top level         navigation item */     .nav-item > a:focus,     .nav-item > a.open {         border: 1px solid #dedede;     }     /* open state of first descendant link within a top level         navigation item */     .nav-item > a.open {         background-color: #fff;         border-bottom: none;         z-index: 1;     }     /* sub-navigation panel */     .sub-nav {         position: absolute;         display: none;         top: 2.2em;         margin-top: -1px;         padding: 0.5em 1em;         border: 1px solid #dedede;         background-color: #fff;     }     /* sub-navigation panel open state */     .sub-nav.open {         display: block;     }     /* list of items within sub-navigation panel */     .sub-nav ul {         display: inline-block;         vertical-align: top;         margin: 0 1em 0 0;         padding: 0;     }     /* list item within sub-navigation panel */     .sub-nav li {         display: block;         list-style-type: none;         margin: 0;         padding: 0;     }   Putting it all together, here is the completed example:     <!doctype html>     <html lang=""en"">     <head>     <meta charset=""UTF-8"">     <title>Simple Accessible Mega Menu Example</title>     <style>         /* Rudimentary mega menu CSS for demonstration */             /* mega menu list */         .nav-menu {             display: block;             position: relative;             list-style: none;             margin: 0;             padding: 0;             z-index: 15;         }         /* a top level navigation item in the mega menu */         .nav-item {             list-style: none;             display: inline-block;             padding: 0;             margin: 0;         }         /* first descendant link within a top level navigation item */         .nav-item > a {             position: relative;             display: inline-block;             padding: 0.5em 1em;             margin: 0 0 -1px 0;             border: 1px solid transparent;         }         /* focus/open states of first descendant link within a top level             navigation item */         .nav-item > a:focus,         .nav-item > a.open {             border: 1px solid #dedede;         }         /* open state of first descendant link within a top level             navigation item */         .nav-item > a.open {             background-color: #fff;             border-bottom: none;             z-index: 1;         }         /* sub-navigation panel */         .sub-nav {             position: absolute;             display: none;             top: 2.2em;             margin-top: -1px;             padding: 0.5em 1em;             border: 1px solid #dedede;             background-color: #fff;         }         /* sub-navigation panel open state */         .sub-nav.open {             display: block;         }         /* list of items within sub-navigation panel */         .sub-nav ul {             display: inline-block;             vertical-align: top;             margin: 0 1em 0 0;             padding: 0;         }         /* list item within sub-navigation panel */         .sub-nav li {             display: block;             list-style-type: none;             margin: 0;             padding: 0;         }          </style>     </head>     <body>     <nav>         <ul class=""nav-menu"">             <li class=""nav-item"">                 <a href=""?movie"">Movies</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=0"">Action &amp; Adventure</a></li>                         <li><a href=""?movie&genre=2"">Children &amp; Family</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=7"">Dramas</a></li>                         <li><a href=""?movie&genre=9"">Foreign</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=14"">Musicals</a></li>                         <li><a href=""?movie&genre=15"">Romance</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>             <li class=""nav-item"">                 <a href=""?tv"">TV Shows</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=20"">Classic TV</a></li>                         <li><a href=""?tv&genre=21"">Crime TV</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=27"">Reality TV</a></li>                         <li><a href=""?tv&genre=30"">TV Action</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=33"">TV Dramas</a></li>                         <li><a href=""?tv&genre=34"">TV Horror</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>         </ul>     </nav>          <!-- include jquery -->     <script src=""//code.jquery.com/jquery-1.10.1.min.js""></script>     <!-- include the jquery-accessibleMegaMenu plugin script -->     <script src=""js/jquery-accessibleMegaMenu.js""></script>     <!-- initialize a selector as an accessibleMegaMenu -->     <script>         $(""nav:first"").accessibleMegaMenu({             /* prefix for generated unique id attributes, which are required                 to indicate aria-owns, aria-controls and aria-labelledby */             uuidPrefix: ""accessible-megamenu"",                          /* css class used to define the megamenu styling */             menuClass: ""nav-menu"",                          /* css class for a top-level navigation item in the megamenu */             topNavItemClass: ""nav-item"",                          /* css class for a megamenu panel */             panelClass: ""sub-nav"",                          /* css class for a group of items within a megamenu panel */             panelGroupClass: ""sub-nav-group"",                          /* css class for the hover state */             hoverClass: ""hover"",                          /* css class for the focus state */             focusClass: ""focus"",                          /* css class for the open state */             openClass: ""open""         });     </script>     </body>     </html> About A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. Resources Readme License Apache-2.0 License Releases No releases published Packages 0 No packages published Used by 16 + 8 Contributors 7 Languages HTML 71.8% CSS 26.4% JavaScript 1.8% © 2021 GitHub, Inc. Terms Privacy Security Status Docs Contact GitHub Pricing API Training Blog About You can’t perform that action at this time. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."
728187,20210910,github.com,https://github.com/crypto-browserify/crypto-browserify,text/html,text/html,en,"GitHub - crypto-browserify/crypto-browserify: partial implementation of node's `crypto` for the browser Skip to content Sign up Why GitHub? Features → Mobile → Actions → Codespaces → Packages → Security → Code review → Issues → Integrations → GitHub Sponsors → Customer stories→ Team Enterprise Explore Explore GitHub → Learn and contribute Topics → Collections → Trending → Learning Lab → Open source guides → Connect with others The ReadME Project → Events → Community forum → GitHub Education → GitHub Stars program → Marketplace Pricing Plans → Compare plans → Contact Sales → Education → In this repository All GitHub ↵ Jump to ↵ No suggested jump to results In this repository All GitHub ↵ Jump to ↵ In this organization All GitHub ↵ Jump to ↵ In this repository All GitHub ↵ Jump to ↵ Sign in Sign up {{ message }} crypto-browserify / crypto-browserify Public Notifications Star 493 Fork 158 partial implementation of node's `crypto` for the browser MIT License 493 stars 158 forks Star Notifications Code Issues 22 Pull requests 6 Actions Projects 0 Wiki Security Insights More Code Issues Pull requests Actions Projects Wiki Security Insights master Switch branches/tags Branches Tags Could not load branches Nothing to show {{ refName }} default View all branches Could not load tags Nothing to show {{ refName }} default View all tags 6 branches 31 tags Code Clone HTTPS GitHub CLI Use Git or checkout with SVN using the web URL. Work fast with our official CLI. Learn more. Open with GitHub Desktop Download ZIP Launching GitHub Desktop If nothing happens, download GitHub Desktop and try again. Go back Launching GitHub Desktop If nothing happens, download GitHub Desktop and try again. Go back Launching Xcode If nothing happens, download Xcode and try again. Go back Launching Visual Studio Code Your codespace will open once ready. There was a problem preparing your codespace, please try again. Latest commit calvinmetcalf fix debian issue (maybe) … 460a13b Feb 9, 2018 fix debian issue (maybe) 460a13b Git stats 362 commits Files Permalink Failed to load latest commit information. Type Name Latest commit message Commit time example add standard 5.0.0 Aug 13, 2015 test fix debian issue (maybe) Feb 9, 2018 .gitignore Add .gitignore Aug 5, 2013 .travis.yml saucelabs aparently only goes back to 7 Oct 19, 2017 .zuul.yml add zuul and browser tests Oct 3, 2015 LICENSE Add MIT license Sep 20, 2013 README.md add privateEncrypt/publicDecrypt to README Dec 14, 2015 index.js add rndom fill Oct 18, 2017 package.json 3.12.0 Nov 3, 2017 View code crypto-browserify todo contributions License README.md crypto-browserify A port of node's crypto module to the browser. The goal of this module is to reimplement node's crypto module, in pure javascript so that it can run in the browser. Here is the subset that is currently implemented: createHash (sha1, sha224, sha256, sha384, sha512, md5, rmd160) createHmac (sha1, sha224, sha256, sha384, sha512, md5, rmd160) pbkdf2 pbkdf2Sync randomBytes pseudoRandomBytes createCipher (aes) createDecipher (aes) createDiffieHellman createSign (rsa, ecdsa) createVerify (rsa, ecdsa) createECDH (secp256k1) publicEncrypt/privateDecrypt (rsa) privateEncrypt/publicDecrypt (rsa) todo these features from node's crypto are still unimplemented. createCredentials contributions If you are interested in writing a feature, please implement as a new module, which will be incorporated into crypto-browserify as a dependency. All deps must be compatible with node's crypto (generate example inputs and outputs with node, and save base64 strings inside JSON, so that tests can run in the browser. see sha.js Crypto is extra serious so please do not hesitate to review the code, and post comments if you do. License MIT About partial implementation of node's `crypto` for the browser Resources Readme License MIT License Releases 31 tags Packages 0 No packages published Used by 6.4m + 6,402,649 Contributors 24 + 13 contributors Languages JavaScript 99.1% HTML 0.9% © 2021 GitHub, Inc. Terms Privacy Security Status Docs Contact GitHub Pricing API Training Blog About You can’t perform that action at this time. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."
728188,20210910,github.com,https://github.com/indutny/elliptic/issues,text/html,text/html,en,"Issues · indutny/elliptic · GitHub Skip to content Sign up Why GitHub? Features → Mobile → Actions → Codespaces → Packages → Security → Code review → Issues → Integrations → GitHub Sponsors → Customer stories→ Team Enterprise Explore Explore GitHub → Learn and contribute Topics → Collections → Trending → Learning Lab → Open source guides → Connect with others The ReadME Project → Events → Community forum → GitHub Education → GitHub Stars program → Marketplace Pricing Plans → Compare plans → Contact Sales → Education → In this repository All GitHub ↵ Jump to ↵ No suggested jump to results In this repository All GitHub ↵ Jump to ↵ In this user All GitHub ↵ Jump to ↵ In this repository All GitHub ↵ Jump to ↵ Sign in Sign up {{ message }} indutny / elliptic Public Notifications Star 1.3k Fork 312 Code Issues 79 Pull requests 21 Actions Projects 0 Wiki Security Insights More Code Issues Pull requests Actions Projects Wiki Security Insights Labels 8 Milestones 0 Labels 8 Milestones 0 New issue Have a question about this project? Sign up for a free GitHub account to open an issue and contact its maintainers and the community. Sign up for GitHub By clicking “Sign up for GitHub”, you agree to our terms of service and privacy statement. We’ll occasionally send you account related emails. Already on GitHub? Sign in to your account 79 Open 97 Closed 79 Open 97 Closed Author Filter by author author: Filter by this user Label Filter by label Use alt + click/return to exclude labels or ⇧ + click/return for logical OR Projects Filter by project Milestones Filter by milestone Assignee Filter by who’s assigned Sort Sort by Newest Oldest Most commented Least commented Recently updated Least recently updated Most reactions 👍 👎 😄 🎉 😕 ❤️ 🚀 👀 How can i use this library with cdn?? #264 opened Sep 4, 2021 by Mohammed-Khaja invalid y value for curve for new EC('p256') #263 opened Jul 28, 2021 by congminh090800 Invalid hashed data sign with EDDSA #262 opened Jul 6, 2021 by samuel-uniris Point multiplication gives different results based on order of operattions #260 opened Jun 16, 2021 by kot-begemot 3 deriving private key from public key #257 opened Apr 27, 2021 by madhav-madhusoodanan How to use keys with crypto.subtle #255 opened Apr 1, 2021 by DominicTobias-b1 EDDSA.decodeInt should fails or reduce by dafault? #254 opened Mar 18, 2021 by mahnunchik Sad state #251 opened Mar 11, 2021 by berkus 1 EDDSA.decodePoint should fails on ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff #250 opened Mar 3, 2021 by mahnunchik 15 Add endian argument to bn.js toString method #249 opened Mar 2, 2021 by mahnunchik EDDSA decodePoint doesn't support Buffer as argument #248 opened Mar 2, 2021 by mahnunchik How to decipher the encrypted message? #245 opened Jan 27, 2021 by istabraq-iot Montgomery Curve25519 is not openssl compatible #243 opened Dec 28, 2020 by jc-lab 4 Curves p384 and p521 produce incorrect results #239 opened Oct 18, 2020 by guidovranken 1 i want to use this library with c# #238 opened Oct 10, 2020 by medozeus Elliptic.js support following curve types: #236 opened Oct 5, 2020 by medozeus The Elliptic package 6.5.2 for Node.js allows ECDSA signature malleability via variations in encoding, leading '\0' bytes, or integer overflows. #235 opened Oct 1, 2020 by bsomeshwer EdDSA: What is a reason to manipulate with bytes? #233 opened Aug 27, 2020 by mahnunchik why use derive method get ECDH key，i got different length #230 opened Jul 10, 2020 by cqupt-yifanwu 4 Why do I generate my local test path in chunk-vendors when packing with NPM #229 opened Jun 22, 2020 by Anthonychen1994 1 TypedArray support ? #228 opened Jun 20, 2020 by dojyorin Is there way to generate PKCS#8 private key from Pem format ECC Private key #225 opened Apr 28, 2020 by sureshreddygovindu Signature validation in python. Prefix configuration? #224 opened Apr 25, 2020 by amrbz is it possible to do assymetric encryption? #223 opened Apr 7, 2020 by maroodb 1 Missing infinity point encoding #218 opened Feb 21, 2020 by catenacyber 1 Previous 1 2 3 4 Next Previous Next ProTip! Type g p on any issue or pull request to go back to the pull request listing page. © 2021 GitHub, Inc. Terms Privacy Security Status Docs Contact GitHub Pricing API Training Blog About You can’t perform that action at this time. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."
728189,20210910,github.com,https://github.com/indutny/elliptic,text/html,text/html,en,"GitHub - indutny/elliptic: Fast Elliptic Curve Cryptography in plain javascript Skip to content Sign up Why GitHub? Features → Mobile → Actions → Codespaces → Packages → Security → Code review → Issues → Integrations → GitHub Sponsors → Customer stories→ Team Enterprise Explore Explore GitHub → Learn and contribute Topics → Collections → Trending → Learning Lab → Open source guides → Connect with others The ReadME Project → Events → Community forum → GitHub Education → GitHub Stars program → Marketplace Pricing Plans → Compare plans → Contact Sales → Education → In this repository All GitHub ↵ Jump to ↵ No suggested jump to results In this repository All GitHub ↵ Jump to ↵ In this user All GitHub ↵ Jump to ↵ In this repository All GitHub ↵ Jump to ↵ Sign in Sign up {{ message }} indutny / elliptic Public Notifications Star 1.3k Fork 312 Fast Elliptic Curve Cryptography in plain javascript 1.3k stars 312 forks Star Notifications Code Issues 79 Pull requests 21 Actions Projects 0 Wiki Security Insights More Code Issues Pull requests Actions Projects Wiki Security Insights master Switch branches/tags Branches Tags Could not load branches Nothing to show {{ refName }} default View all branches Could not load tags Nothing to show {{ refName }} default View all tags 2 branches 85 tags Code Clone HTTPS GitHub CLI Use Git or checkout with SVN using the web URL. Work fast with our official CLI. Learn more. Open with GitHub Desktop Download ZIP Launching GitHub Desktop If nothing happens, download GitHub Desktop and try again. Go back Launching GitHub Desktop If nothing happens, download GitHub Desktop and try again. Go back Launching Xcode If nothing happens, download Xcode and try again. Go back Launching Visual Studio Code Your codespace will open once ready. There was a problem preparing your codespace, please try again. Latest commit indutny 6.5.4 … 43ac7f2 Feb 2, 2021 6.5.4 43ac7f2 Git stats 331 commits Files Permalink Failed to load latest commit information. Type Name Latest commit message Commit time benchmarks package: remove Makefile and dist Jan 29, 2016 dist 6.5.4 Feb 2, 2021 lib ec: validate that a point before deriving keys Feb 2, 2021 test ec: validate that a point before deriving keys Feb 2, 2021 .codeclimate.yml test: improvements with Saucelabs/Codeclimate Mar 31, 2016 .eslintignore lib: relint using eslint Aug 2, 2020 .eslintrc.js lib: relint using eslint Aug 2, 2020 .gitignore test: improvements with Saucelabs/Codeclimate Mar 31, 2016 .npmignore npmignore: dist May 20, 2016 .travis.yml travis: really move on Jun 26, 2019 Gruntfile.js grunt: fix standalone build May 25, 2016 README.md readme: update example Mar 23, 2017 package-lock.json 6.5.4 Feb 2, 2021 package.json 6.5.4 Feb 2, 2021 View code Elliptic Incentive Benchmarks API ECDSA EdDSA ECDH Supported curves Implementation details Related projects LICENSE README.md Elliptic Fast elliptic-curve cryptography in a plain javascript implementation. NOTE: Please take a look at http://safecurves.cr.yp.to/ before choosing a curve for your cryptography operations. Incentive ECC is much slower than regular RSA cryptography, the JS implementations are even more slower. Benchmarks $ node benchmarks/index.js Benchmarking: sign elliptic#sign x 262 ops/sec ±0.51% (177 runs sampled) eccjs#sign x 55.91 ops/sec ±0.90% (144 runs sampled) ------------------------ Fastest is elliptic#sign ======================== Benchmarking: verify elliptic#verify x 113 ops/sec ±0.50% (166 runs sampled) eccjs#verify x 48.56 ops/sec ±0.36% (125 runs sampled) ------------------------ Fastest is elliptic#verify ======================== Benchmarking: gen elliptic#gen x 294 ops/sec ±0.43% (176 runs sampled) eccjs#gen x 62.25 ops/sec ±0.63% (129 runs sampled) ------------------------ Fastest is elliptic#gen ======================== Benchmarking: ecdh elliptic#ecdh x 136 ops/sec ±0.85% (156 runs sampled) ------------------------ Fastest is elliptic#ecdh ======================== API ECDSA var EC = require('elliptic').ec; // Create and initialize EC context // (better do it once and reuse it) var ec = new EC('secp256k1'); // Generate keys var key = ec.genKeyPair(); // Sign the message's hash (input must be an array, or a hex-string) var msgHash = [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ]; var signature = key.sign(msgHash); // Export DER encoded signature in Array var derSign = signature.toDER(); // Verify signature console.log(key.verify(msgHash, derSign)); // CHECK WITH NO PRIVATE KEY var pubPoint = key.getPublic(); var x = pubPoint.getX(); var y = pubPoint.getY(); // Public Key MUST be either: // 1) '04' + hex string of x + hex string of y; or // 2) object with two hex string properties (x and y); or // 3) object with two buffer properties (x and y) var pub = pubPoint.encode('hex');                                 // case 1 var pub = { x: x.toString('hex'), y: y.toString('hex') };         // case 2 var pub = { x: x.toBuffer(), y: y.toBuffer() };                   // case 3 var pub = { x: x.toArrayLike(Buffer), y: y.toArrayLike(Buffer) }; // case 3 // Import public key var key = ec.keyFromPublic(pub, 'hex'); // Signature MUST be either: // 1) DER-encoded signature as hex-string; or // 2) DER-encoded signature as buffer; or // 3) object with two hex-string properties (r and s); or // 4) object with two buffer properties (r and s) var signature = '3046022100...'; // case 1 var signature = new Buffer('...'); // case 2 var signature = { r: 'b1fc...', s: '9c42...' }; // case 3 // Verify signature console.log(key.verify(msgHash, signature)); EdDSA var EdDSA = require('elliptic').eddsa; // Create and initialize EdDSA context // (better do it once and reuse it) var ec = new EdDSA('ed25519'); // Create key pair from secret var key = ec.keyFromSecret('693e3c...'); // hex string, array or Buffer // Sign the message's hash (input must be an array, or a hex-string) var msgHash = [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ]; var signature = key.sign(msgHash).toHex(); // Verify signature console.log(key.verify(msgHash, signature)); // CHECK WITH NO PRIVATE KEY // Import public key var pub = '0a1af638...'; var key = ec.keyFromPublic(pub, 'hex'); // Verify signature var signature = '70bed1...'; console.log(key.verify(msgHash, signature)); ECDH var EC = require('elliptic').ec; var ec = new EC('curve25519'); // Generate keys var key1 = ec.genKeyPair(); var key2 = ec.genKeyPair(); var shared1 = key1.derive(key2.getPublic()); var shared2 = key2.derive(key1.getPublic()); console.log('Both shared secrets are BN instances'); console.log(shared1.toString(16)); console.log(shared2.toString(16)); three and more members: var EC = require('elliptic').ec; var ec = new EC('curve25519'); var A = ec.genKeyPair(); var B = ec.genKeyPair(); var C = ec.genKeyPair(); var AB = A.getPublic().mul(B.getPrivate()) var BC = B.getPublic().mul(C.getPrivate()) var CA = C.getPublic().mul(A.getPrivate()) var ABC = AB.mul(C.getPrivate()) var BCA = BC.mul(A.getPrivate()) var CAB = CA.mul(B.getPrivate()) console.log(ABC.getX().toString(16)) console.log(BCA.getX().toString(16)) console.log(CAB.getX().toString(16)) NOTE: .derive() returns a BN instance. Supported curves Elliptic.js support following curve types: Short Weierstrass Montgomery Edwards Twisted Edwards Following curve 'presets' are embedded into the library: secp256k1 p192 p224 p256 p384 p521 curve25519 ed25519 NOTE: That curve25519 could not be used for ECDSA, use ed25519 instead. Implementation details ECDSA is using deterministic k value generation as per RFC6979. Most of the curve operations are performed on non-affine coordinates (either projective or extended), various windowing techniques are used for different cases. All operations are performed in reduction context using bn.js, hashing is provided by hash.js Related projects eccrypto: isomorphic implementation of ECDSA, ECDH and ECIES for both browserify and node (uses elliptic for browser and secp256k1-node for node) LICENSE This software is licensed under the MIT License. Copyright Fedor Indutny, 2014. Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the ""Software""), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. About Fast Elliptic Curve Cryptography in plain javascript Resources Readme Releases 85 tags Packages 0 No packages published Used by 6.3m + 6,329,530 Contributors 25 + 14 contributors Languages JavaScript 99.3% HTML 0.7% © 2021 GitHub, Inc. Terms Privacy Security Status Docs Contact GitHub Pricing API Training Blog About You can’t perform that action at this time. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."
732823,20210917,github.com,https://github.com/adobe-accessibility/Accessible-Mega-Menu,text/html,text/html,en,"GitHub - adobe-accessibility/Accessible-Mega-Menu: A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. Skip to content Sign up Why GitHub? Features → Mobile → Actions → Codespaces → Packages → Security → Code review → Issues → Integrations → GitHub Sponsors → Customer stories→ Team Enterprise Explore Explore GitHub → Learn and contribute Topics → Collections → Trending → Learning Lab → Open source guides → Connect with others The ReadME Project → Events → Community forum → GitHub Education → GitHub Stars program → Marketplace Pricing Plans → Compare plans → Contact Sales → Education → In this repository All GitHub ↵ Jump to ↵ No suggested jump to results In this repository All GitHub ↵ Jump to ↵ In this organization All GitHub ↵ Jump to ↵ In this repository All GitHub ↵ Jump to ↵ Sign in Sign up {{ message }} adobe-accessibility / Accessible-Mega-Menu Public Notifications Star 584 Fork 204 A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. Apache-2.0 License 584 stars 204 forks Star Notifications Code Issues 31 Pull requests 6 Actions Projects 0 Wiki Security Insights More Code Issues Pull requests Actions Projects Wiki Security Insights master Switch branches/tags Branches Tags Could not load branches Nothing to show {{ refName }} default View all branches Could not load tags Nothing to show {{ refName }} default View all tags 2 branches 0 tags Code Latest commit Git stats 39 commits Files Permalink Failed to load latest commit information. Type Name Latest commit message Commit time css Add openOnMouseover setting, and toggleButtonClass for responsive layout May 11, 2018 js fix evaluation for ChromeVox object Dec 7, 2020 third-party/jquery initial commit Aug 26, 2013 LICENSE initial commit Aug 26, 2013 NOTICE initial commit Aug 26, 2013 README.md initial commit Aug 26, 2013 index.html Updating WCAG 2.0 References to WCAG 2.1 (#67) Dec 4, 2020 package.json Updating repo references Jul 8, 2016 View code Accessible Mega Menu Keyboard Accessibility Screen Reader Accessibility Usage HTML JavaScript CSS README.md Accessible Mega Menu ========================= A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. It is modeled after the mega menu on adobe.com but has been simplified for use by others. An brief explanation of our interaction design choices can be found in a blog post at Mega menu accessibility on adobe.com. Content for the links and text within the mega menu comes from the Web Content Accessibility Guidelines (WCAG) 2.0. Keyboard Accessibility The accessible mega menu supports keyboard interaction modeled after the behavior described in the WAI-ARIA Menu or Menu bar (widget) design pattern, however we also try to respect users' general expectations for the behavior of links in a global navigation. To this end, the accessible mega menu implementation permits tab focus on each of the six top-level menu items. When one of the menu items has focus, pressing the Enter key, Spacebar or Down arrow will open the submenu panel, and pressing the Left or Right arrow key will shift focus to the adjacent menu item. Links within the submenu panels are included in the tab order when the panel is open. They can also be navigated with the arrow keys or by typing the first character in the link name, which speeds up keyboard navigation considerably. Pressing the Escape key closes the submenu and restores focus to the parent menu item. Screen Reader Accessibility The accessible mega menu models its use of WAI-ARIA Roles, States, and Properties after those described in the WAI-ARIA Menu or Menu bar (widget) design pattern with some notable exceptions, so that it behaves better with screen reader user expectations for global navigation. We don't use role=""menu"" for the menu container and role=""menuitem"" for each of the links therein, because if we do, assistive technology will no longer interpret the links as links, but instead, as menu items, and the links in our global navigation will no longer show up when a screen reader user executes a shortcut command to bring up a list of links in the page. We also want to maintain the semantic structure of the submenu panels in our mega menu; our links are organized into lists and separated by headings. Omitting role=""menu"" and role=""menuitem"" for the global navigation seems the safer way to go. Usage HTML The HTML structure for the mega menu is a nav element, or any other container element, containing a list. Each list item contains a link which is followed by a div or any other container element which will serve as the pop up panel. The panel can contain any html content; in the following example, each panel contains three lists of links. You can explicitly define groups within the panel, between which a user can navigate quickly using the left and right arrow keys; in the following example, the CSS class .sub-nav-group identifies a navigable group.     <nav>         <ul class=""nav-menu"">             <li class=""nav-item"">                 <a href=""?movie"">Movies</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=0"">Action &amp; Adventure</a></li>                         <li><a href=""?movie&genre=2"">Children &amp; Family</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=7"">Dramas</a></li>                         <li><a href=""?movie&genre=9"">Foreign</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=14"">Musicals</a></li>                         <li><a href=""?movie&genre=15"">Romance</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>             <li class=""nav-item"">                 <a href=""?tv"">TV Shows</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=20"">Classic TV</a></li>                         <li><a href=""?tv&genre=21"">Crime TV</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=27"">Reality TV</a></li>                         <li><a href=""?tv&genre=30"">TV Action</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=33"">TV Dramas</a></li>                         <li><a href=""?tv&genre=34"">TV Horror</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>         </ul>     </nav> By default, accessibleMegaMenu uses the the following CSS classes to define the top-level navigation items, panels, groups within the panels, and the hover, focus, and open states. It also defines a prefix for unique id strings, which are required to indicate the relationship of a top-level navigation item to the panel it controls.     defaults = {         /* unique ID's are required to indicate aria-owns, aria-controls and aria-labelledby */         uuidPrefix: ""accessible-megamenu"",                  /* default css class used to define the megamenu styling */         menuClass: ""accessible-megamenu"",                  /* default css class for a top-level navigation item in the megamenu */         topNavItemClass: ""accessible-megamenu-top-nav-item"",                  /* default css class for a megamenu panel */         panelClass: ""accessible-megamenu-panel"",                  /* default css class for a group of items within a megamenu panel */         panelGroupClass: ""accessible-megamenu-panel-group"",                  /* default css class for the hover state */         hoverClass: ""hover"",                  /* default css class for the focus state */         focusClass: ""focus"",                  /* default css class for the open state */         openClass: ""open""      } You can optionally override the defaults to use the CSS classes you may have already defined for your mega menu. JavaScript Be sure to include jQuery and the jquery-accessibleMegaMenu.js plugin script.     <script src=""//code.jquery.com/jquery-1.10.1.min.js""></script>     <script src=""js/jquery-accessibleMegaMenu.js""></script> The following initializes the first nav element in the document as an accessibleMegaMenu, with optional CSS class overrides.     $(""nav:first"").accessibleMegaMenu({         /* prefix for generated unique id attributes, which are required             to indicate aria-owns, aria-controls and aria-labelledby */         uuidPrefix: ""accessible-megamenu"",                  /* css class used to define the megamenu styling */         menuClass: ""nav-menu"",                  /* css class for a top-level navigation item in the megamenu */         topNavItemClass: ""nav-item"",                  /* css class for a megamenu panel */         panelClass: ""sub-nav"",                  /* css class for a group of items within a megamenu panel */         panelGroupClass: ""sub-nav-group"",                  /* css class for the hover state */         hoverClass: ""hover"",                  /* css class for the focus state */         focusClass: ""focus"",                  /* css class for the open state */         openClass: ""open""     }); CSS AccessibleMegaMenu handles the showing and hiding of panels by adding or removing a CSS class. No inline styles are added to hide elements or create animation between states. Following is some rudimentary CSS for our example which enables the showing/hiding of and the layout of lists panels in the mega menu.     /* mega menu list */     .nav-menu {         display: block;         position: relative;         list-style: none;         margin: 0;         padding: 0;         z-index: 15;     }     /* a top level navigation item in the mega menu */     .nav-item {         list-style: none;         display: inline-block;         padding: 0;         margin: 0;     }     /* first descendant link within a top level navigation item */     .nav-item > a {         position: relative;         display: inline-block;         padding: 0.5em 1em;         margin: 0 0 -1px 0;         border: 1px solid transparent;     }     /* focus/open states of first descendant link within a top level         navigation item */     .nav-item > a:focus,     .nav-item > a.open {         border: 1px solid #dedede;     }     /* open state of first descendant link within a top level         navigation item */     .nav-item > a.open {         background-color: #fff;         border-bottom: none;         z-index: 1;     }     /* sub-navigation panel */     .sub-nav {         position: absolute;         display: none;         top: 2.2em;         margin-top: -1px;         padding: 0.5em 1em;         border: 1px solid #dedede;         background-color: #fff;     }     /* sub-navigation panel open state */     .sub-nav.open {         display: block;     }     /* list of items within sub-navigation panel */     .sub-nav ul {         display: inline-block;         vertical-align: top;         margin: 0 1em 0 0;         padding: 0;     }     /* list item within sub-navigation panel */     .sub-nav li {         display: block;         list-style-type: none;         margin: 0;         padding: 0;     }   Putting it all together, here is the completed example:     <!doctype html>     <html lang=""en"">     <head>     <meta charset=""UTF-8"">     <title>Simple Accessible Mega Menu Example</title>     <style>         /* Rudimentary mega menu CSS for demonstration */             /* mega menu list */         .nav-menu {             display: block;             position: relative;             list-style: none;             margin: 0;             padding: 0;             z-index: 15;         }         /* a top level navigation item in the mega menu */         .nav-item {             list-style: none;             display: inline-block;             padding: 0;             margin: 0;         }         /* first descendant link within a top level navigation item */         .nav-item > a {             position: relative;             display: inline-block;             padding: 0.5em 1em;             margin: 0 0 -1px 0;             border: 1px solid transparent;         }         /* focus/open states of first descendant link within a top level             navigation item */         .nav-item > a:focus,         .nav-item > a.open {             border: 1px solid #dedede;         }         /* open state of first descendant link within a top level             navigation item */         .nav-item > a.open {             background-color: #fff;             border-bottom: none;             z-index: 1;         }         /* sub-navigation panel */         .sub-nav {             position: absolute;             display: none;             top: 2.2em;             margin-top: -1px;             padding: 0.5em 1em;             border: 1px solid #dedede;             background-color: #fff;         }         /* sub-navigation panel open state */         .sub-nav.open {             display: block;         }         /* list of items within sub-navigation panel */         .sub-nav ul {             display: inline-block;             vertical-align: top;             margin: 0 1em 0 0;             padding: 0;         }         /* list item within sub-navigation panel */         .sub-nav li {             display: block;             list-style-type: none;             margin: 0;             padding: 0;         }          </style>     </head>     <body>     <nav>         <ul class=""nav-menu"">             <li class=""nav-item"">                 <a href=""?movie"">Movies</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=0"">Action &amp; Adventure</a></li>                         <li><a href=""?movie&genre=2"">Children &amp; Family</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=7"">Dramas</a></li>                         <li><a href=""?movie&genre=9"">Foreign</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=14"">Musicals</a></li>                         <li><a href=""?movie&genre=15"">Romance</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>             <li class=""nav-item"">                 <a href=""?tv"">TV Shows</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=20"">Classic TV</a></li>                         <li><a href=""?tv&genre=21"">Crime TV</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=27"">Reality TV</a></li>                         <li><a href=""?tv&genre=30"">TV Action</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=33"">TV Dramas</a></li>                         <li><a href=""?tv&genre=34"">TV Horror</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>         </ul>     </nav>          <!-- include jquery -->     <script src=""//code.jquery.com/jquery-1.10.1.min.js""></script>     <!-- include the jquery-accessibleMegaMenu plugin script -->     <script src=""js/jquery-accessibleMegaMenu.js""></script>     <!-- initialize a selector as an accessibleMegaMenu -->     <script>         $(""nav:first"").accessibleMegaMenu({             /* prefix for generated unique id attributes, which are required                 to indicate aria-owns, aria-controls and aria-labelledby */             uuidPrefix: ""accessible-megamenu"",                          /* css class used to define the megamenu styling */             menuClass: ""nav-menu"",                          /* css class for a top-level navigation item in the megamenu */             topNavItemClass: ""nav-item"",                          /* css class for a megamenu panel */             panelClass: ""sub-nav"",                          /* css class for a group of items within a megamenu panel */             panelGroupClass: ""sub-nav-group"",                          /* css class for the hover state */             hoverClass: ""hover"",                          /* css class for the focus state */             focusClass: ""focus"",                          /* css class for the open state */             openClass: ""open""         });     </script>     </body>     </html> About A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. Resources Readme License Apache-2.0 License Releases No releases published Packages 0 No packages published Used by 17 + 9 Contributors 7 Languages HTML 71.8% CSS 26.4% JavaScript 1.8% © 2021 GitHub, Inc. Terms Privacy Security Status Docs Contact GitHub Pricing API Training Blog About You can’t perform that action at this time. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."
733882,20210917,github.com,https://github.com/crypto-browserify/crypto-browserify,text/html,text/html,en,"GitHub - crypto-browserify/crypto-browserify: partial implementation of node's `crypto` for the browser Skip to content Sign up Why GitHub? Features → Mobile → Actions → Codespaces → Packages → Security → Code review → Issues → Integrations → GitHub Sponsors → Customer stories→ Team Enterprise Explore Explore GitHub → Learn and contribute Topics → Collections → Trending → Learning Lab → Open source guides → Connect with others The ReadME Project → Events → Community forum → GitHub Education → GitHub Stars program → Marketplace Pricing Plans → Compare plans → Contact Sales → Education → In this repository All GitHub ↵ Jump to ↵ No suggested jump to results In this repository All GitHub ↵ Jump to ↵ In this organization All GitHub ↵ Jump to ↵ In this repository All GitHub ↵ Jump to ↵ Sign in Sign up {{ message }} crypto-browserify / crypto-browserify Public Notifications Star 495 Fork 158 partial implementation of node's `crypto` for the browser MIT License 495 stars 158 forks Star Notifications Code Issues 22 Pull requests 6 Actions Projects 0 Wiki Security Insights More Code Issues Pull requests Actions Projects Wiki Security Insights master Switch branches/tags Branches Tags Could not load branches Nothing to show {{ refName }} default View all branches Could not load tags Nothing to show {{ refName }} default View all tags 6 branches 31 tags Code Latest commit Git stats 362 commits Files Permalink Failed to load latest commit information. Type Name Latest commit message Commit time example add standard 5.0.0 Aug 13, 2015 test fix debian issue (maybe) Feb 9, 2018 .gitignore Add .gitignore Aug 5, 2013 .travis.yml saucelabs aparently only goes back to 7 Oct 19, 2017 .zuul.yml add zuul and browser tests Oct 3, 2015 LICENSE Add MIT license Sep 20, 2013 README.md add privateEncrypt/publicDecrypt to README Dec 14, 2015 index.js add rndom fill Oct 18, 2017 package.json 3.12.0 Nov 3, 2017 View code crypto-browserify todo contributions License README.md crypto-browserify A port of node's crypto module to the browser. The goal of this module is to reimplement node's crypto module, in pure javascript so that it can run in the browser. Here is the subset that is currently implemented: createHash (sha1, sha224, sha256, sha384, sha512, md5, rmd160) createHmac (sha1, sha224, sha256, sha384, sha512, md5, rmd160) pbkdf2 pbkdf2Sync randomBytes pseudoRandomBytes createCipher (aes) createDecipher (aes) createDiffieHellman createSign (rsa, ecdsa) createVerify (rsa, ecdsa) createECDH (secp256k1) publicEncrypt/privateDecrypt (rsa) privateEncrypt/publicDecrypt (rsa) todo these features from node's crypto are still unimplemented. createCredentials contributions If you are interested in writing a feature, please implement as a new module, which will be incorporated into crypto-browserify as a dependency. All deps must be compatible with node's crypto (generate example inputs and outputs with node, and save base64 strings inside JSON, so that tests can run in the browser. see sha.js Crypto is extra serious so please do not hesitate to review the code, and post comments if you do. License MIT About partial implementation of node's `crypto` for the browser Resources Readme License MIT License Releases 31 tags Packages 0 No packages published Used by 6.4m + 6,424,416 Contributors 24 + 13 contributors Languages JavaScript 99.1% HTML 0.9% © 2021 GitHub, Inc. Terms Privacy Security Status Docs Contact GitHub Pricing API Training Blog About You can’t perform that action at this time. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."
733883,20210917,github.com,https://github.com/indutny/elliptic/issues,text/html,text/html,en,"Issues · indutny/elliptic · GitHub Skip to content Sign up Why GitHub? Features → Mobile → Actions → Codespaces → Packages → Security → Code review → Issues → Integrations → GitHub Sponsors → Customer stories→ Team Enterprise Explore Explore GitHub → Learn and contribute Topics → Collections → Trending → Learning Lab → Open source guides → Connect with others The ReadME Project → Events → Community forum → GitHub Education → GitHub Stars program → Marketplace Pricing Plans → Compare plans → Contact Sales → Education → In this repository All GitHub ↵ Jump to ↵ No suggested jump to results In this repository All GitHub ↵ Jump to ↵ In this user All GitHub ↵ Jump to ↵ In this repository All GitHub ↵ Jump to ↵ Sign in Sign up {{ message }} indutny / elliptic Public Notifications Star 1.3k Fork 313 Code Issues 79 Pull requests 21 Actions Projects 0 Wiki Security Insights More Code Issues Pull requests Actions Projects Wiki Security Insights Labels 8 Milestones 0 Labels 8 Milestones 0 New issue Have a question about this project? Sign up for a free GitHub account to open an issue and contact its maintainers and the community. Sign up for GitHub By clicking “Sign up for GitHub”, you agree to our terms of service and privacy statement. We’ll occasionally send you account related emails. Already on GitHub? Sign in to your account 79 Open 97 Closed 79 Open 97 Closed Author Filter by author author: Filter by this user Label Filter by label Use alt + click/return to exclude labels or ⇧ + click/return for logical OR Projects Filter by project Milestones Filter by milestone Assignee Filter by who’s assigned Sort Sort by Newest Oldest Most commented Least commented Recently updated Least recently updated Most reactions 👍 👎 😄 🎉 😕 ❤️ 🚀 👀 How can i use this library with cdn?? #264 opened Sep 4, 2021 by Mohammed-Khaja invalid y value for curve for new EC('p256') #263 opened Jul 28, 2021 by congminh090800 Invalid hashed data sign with EDDSA #262 opened Jul 6, 2021 by samuel-uniris Point multiplication gives different results based on order of operattions #260 opened Jun 16, 2021 by kot-begemot 3 deriving private key from public key #257 opened Apr 27, 2021 by madhav-madhusoodanan How to use keys with crypto.subtle #255 opened Apr 1, 2021 by DominicTobias-b1 EDDSA.decodeInt should fails or reduce by dafault? #254 opened Mar 18, 2021 by mahnunchik Sad state #251 opened Mar 11, 2021 by berkus 1 EDDSA.decodePoint should fails on ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff #250 opened Mar 3, 2021 by mahnunchik 15 Add endian argument to bn.js toString method #249 opened Mar 2, 2021 by mahnunchik EDDSA decodePoint doesn't support Buffer as argument #248 opened Mar 2, 2021 by mahnunchik How to decipher the encrypted message? #245 opened Jan 27, 2021 by istabraq-iot Montgomery Curve25519 is not openssl compatible #243 opened Dec 28, 2020 by jc-lab 4 Curves p384 and p521 produce incorrect results #239 opened Oct 18, 2020 by guidovranken 1 i want to use this library with c# #238 opened Oct 10, 2020 by medozeus Elliptic.js support following curve types: #236 opened Oct 5, 2020 by medozeus The Elliptic package 6.5.2 for Node.js allows ECDSA signature malleability via variations in encoding, leading '\0' bytes, or integer overflows. #235 opened Oct 1, 2020 by bsomeshwer EdDSA: What is a reason to manipulate with bytes? #233 opened Aug 27, 2020 by mahnunchik why use derive method get ECDH key，i got different length #230 opened Jul 10, 2020 by cqupt-yifanwu 4 Why do I generate my local test path in chunk-vendors when packing with NPM #229 opened Jun 22, 2020 by Anthonychen1994 1 TypedArray support ? #228 opened Jun 20, 2020 by dojyorin Is there way to generate PKCS#8 private key from Pem format ECC Private key #225 opened Apr 28, 2020 by sureshreddygovindu Signature validation in python. Prefix configuration? #224 opened Apr 25, 2020 by amrbz is it possible to do assymetric encryption? #223 opened Apr 7, 2020 by maroodb 1 Missing infinity point encoding #218 opened Feb 21, 2020 by catenacyber 1 Previous 1 2 3 4 Next Previous Next ProTip! Mix and match filters to narrow down what you’re looking for. © 2021 GitHub, Inc. Terms Privacy Security Status Docs Contact GitHub Pricing API Training Blog About You can’t perform that action at this time. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."
733884,20210917,github.com,https://github.com/indutny/elliptic,text/html,text/html,en,"GitHub - indutny/elliptic: Fast Elliptic Curve Cryptography in plain javascript Skip to content Sign up Why GitHub? Features → Mobile → Actions → Codespaces → Packages → Security → Code review → Issues → Integrations → GitHub Sponsors → Customer stories→ Team Enterprise Explore Explore GitHub → Learn and contribute Topics → Collections → Trending → Learning Lab → Open source guides → Connect with others The ReadME Project → Events → Community forum → GitHub Education → GitHub Stars program → Marketplace Pricing Plans → Compare plans → Contact Sales → Education → In this repository All GitHub ↵ Jump to ↵ No suggested jump to results In this repository All GitHub ↵ Jump to ↵ In this user All GitHub ↵ Jump to ↵ In this repository All GitHub ↵ Jump to ↵ Sign in Sign up {{ message }} indutny / elliptic Public Notifications Star 1.3k Fork 313 Fast Elliptic Curve Cryptography in plain javascript 1.3k stars 313 forks Star Notifications Code Issues 79 Pull requests 21 Actions Projects 0 Wiki Security Insights More Code Issues Pull requests Actions Projects Wiki Security Insights master Switch branches/tags Branches Tags Could not load branches Nothing to show {{ refName }} default View all branches Could not load tags Nothing to show {{ refName }} default View all tags 2 branches 85 tags Code Latest commit indutny 6.5.4 … 43ac7f2 Feb 2, 2021 6.5.4 43ac7f2 Git stats 331 commits Files Permalink Failed to load latest commit information. Type Name Latest commit message Commit time benchmarks package: remove Makefile and dist Jan 29, 2016 dist 6.5.4 Feb 2, 2021 lib ec: validate that a point before deriving keys Feb 2, 2021 test ec: validate that a point before deriving keys Feb 2, 2021 .codeclimate.yml test: improvements with Saucelabs/Codeclimate Mar 31, 2016 .eslintignore lib: relint using eslint Aug 2, 2020 .eslintrc.js lib: relint using eslint Aug 2, 2020 .gitignore test: improvements with Saucelabs/Codeclimate Mar 31, 2016 .npmignore npmignore: dist May 20, 2016 .travis.yml travis: really move on Jun 26, 2019 Gruntfile.js grunt: fix standalone build May 25, 2016 README.md readme: update example Mar 23, 2017 package-lock.json 6.5.4 Feb 2, 2021 package.json 6.5.4 Feb 2, 2021 View code Elliptic Incentive Benchmarks API ECDSA EdDSA ECDH Supported curves Implementation details Related projects LICENSE README.md Elliptic Fast elliptic-curve cryptography in a plain javascript implementation. NOTE: Please take a look at http://safecurves.cr.yp.to/ before choosing a curve for your cryptography operations. Incentive ECC is much slower than regular RSA cryptography, the JS implementations are even more slower. Benchmarks $ node benchmarks/index.js Benchmarking: sign elliptic#sign x 262 ops/sec ±0.51% (177 runs sampled) eccjs#sign x 55.91 ops/sec ±0.90% (144 runs sampled) ------------------------ Fastest is elliptic#sign ======================== Benchmarking: verify elliptic#verify x 113 ops/sec ±0.50% (166 runs sampled) eccjs#verify x 48.56 ops/sec ±0.36% (125 runs sampled) ------------------------ Fastest is elliptic#verify ======================== Benchmarking: gen elliptic#gen x 294 ops/sec ±0.43% (176 runs sampled) eccjs#gen x 62.25 ops/sec ±0.63% (129 runs sampled) ------------------------ Fastest is elliptic#gen ======================== Benchmarking: ecdh elliptic#ecdh x 136 ops/sec ±0.85% (156 runs sampled) ------------------------ Fastest is elliptic#ecdh ======================== API ECDSA var EC = require('elliptic').ec; // Create and initialize EC context // (better do it once and reuse it) var ec = new EC('secp256k1'); // Generate keys var key = ec.genKeyPair(); // Sign the message's hash (input must be an array, or a hex-string) var msgHash = [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ]; var signature = key.sign(msgHash); // Export DER encoded signature in Array var derSign = signature.toDER(); // Verify signature console.log(key.verify(msgHash, derSign)); // CHECK WITH NO PRIVATE KEY var pubPoint = key.getPublic(); var x = pubPoint.getX(); var y = pubPoint.getY(); // Public Key MUST be either: // 1) '04' + hex string of x + hex string of y; or // 2) object with two hex string properties (x and y); or // 3) object with two buffer properties (x and y) var pub = pubPoint.encode('hex');                                 // case 1 var pub = { x: x.toString('hex'), y: y.toString('hex') };         // case 2 var pub = { x: x.toBuffer(), y: y.toBuffer() };                   // case 3 var pub = { x: x.toArrayLike(Buffer), y: y.toArrayLike(Buffer) }; // case 3 // Import public key var key = ec.keyFromPublic(pub, 'hex'); // Signature MUST be either: // 1) DER-encoded signature as hex-string; or // 2) DER-encoded signature as buffer; or // 3) object with two hex-string properties (r and s); or // 4) object with two buffer properties (r and s) var signature = '3046022100...'; // case 1 var signature = new Buffer('...'); // case 2 var signature = { r: 'b1fc...', s: '9c42...' }; // case 3 // Verify signature console.log(key.verify(msgHash, signature)); EdDSA var EdDSA = require('elliptic').eddsa; // Create and initialize EdDSA context // (better do it once and reuse it) var ec = new EdDSA('ed25519'); // Create key pair from secret var key = ec.keyFromSecret('693e3c...'); // hex string, array or Buffer // Sign the message's hash (input must be an array, or a hex-string) var msgHash = [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ]; var signature = key.sign(msgHash).toHex(); // Verify signature console.log(key.verify(msgHash, signature)); // CHECK WITH NO PRIVATE KEY // Import public key var pub = '0a1af638...'; var key = ec.keyFromPublic(pub, 'hex'); // Verify signature var signature = '70bed1...'; console.log(key.verify(msgHash, signature)); ECDH var EC = require('elliptic').ec; var ec = new EC('curve25519'); // Generate keys var key1 = ec.genKeyPair(); var key2 = ec.genKeyPair(); var shared1 = key1.derive(key2.getPublic()); var shared2 = key2.derive(key1.getPublic()); console.log('Both shared secrets are BN instances'); console.log(shared1.toString(16)); console.log(shared2.toString(16)); three and more members: var EC = require('elliptic').ec; var ec = new EC('curve25519'); var A = ec.genKeyPair(); var B = ec.genKeyPair(); var C = ec.genKeyPair(); var AB = A.getPublic().mul(B.getPrivate()) var BC = B.getPublic().mul(C.getPrivate()) var CA = C.getPublic().mul(A.getPrivate()) var ABC = AB.mul(C.getPrivate()) var BCA = BC.mul(A.getPrivate()) var CAB = CA.mul(B.getPrivate()) console.log(ABC.getX().toString(16)) console.log(BCA.getX().toString(16)) console.log(CAB.getX().toString(16)) NOTE: .derive() returns a BN instance. Supported curves Elliptic.js support following curve types: Short Weierstrass Montgomery Edwards Twisted Edwards Following curve 'presets' are embedded into the library: secp256k1 p192 p224 p256 p384 p521 curve25519 ed25519 NOTE: That curve25519 could not be used for ECDSA, use ed25519 instead. Implementation details ECDSA is using deterministic k value generation as per RFC6979. Most of the curve operations are performed on non-affine coordinates (either projective or extended), various windowing techniques are used for different cases. All operations are performed in reduction context using bn.js, hashing is provided by hash.js Related projects eccrypto: isomorphic implementation of ECDSA, ECDH and ECIES for both browserify and node (uses elliptic for browser and secp256k1-node for node) LICENSE This software is licensed under the MIT License. Copyright Fedor Indutny, 2014. Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the ""Software""), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. About Fast Elliptic Curve Cryptography in plain javascript Resources Readme Releases 85 tags Packages 0 No packages published Used by 6.4m + 6,355,313 Contributors 25 + 14 contributors Languages JavaScript 99.3% HTML 0.7% © 2021 GitHub, Inc. Terms Privacy Security Status Docs Contact GitHub Pricing API Training Blog About You can’t perform that action at this time. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."
738603,20210924,github.com,https://github.com/adobe-accessibility/Accessible-Mega-Menu,text/html,text/html,en,"GitHub - adobe-accessibility/Accessible-Mega-Menu: A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. Skip to content Sign up Why GitHub? Features → Mobile → Actions → Codespaces → Packages → Security → Code review → Issues → Integrations → GitHub Sponsors → Customer stories→ Team Enterprise Explore Explore GitHub → Learn and contribute Topics → Collections → Trending → Learning Lab → Open source guides → Connect with others The ReadME Project → Events → Community forum → GitHub Education → GitHub Stars program → Marketplace Pricing Plans → Compare plans → Contact Sales → Education → In this repository All GitHub ↵ Jump to ↵ No suggested jump to results In this repository All GitHub ↵ Jump to ↵ In this organization All GitHub ↵ Jump to ↵ In this repository All GitHub ↵ Jump to ↵ Sign in Sign up {{ message }} adobe-accessibility / Accessible-Mega-Menu Public Notifications Star 584 Fork 204 A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. Apache-2.0 License 584 stars 204 forks Star Notifications Code Issues 31 Pull requests 6 Actions Projects 0 Wiki Security Insights More Code Issues Pull requests Actions Projects Wiki Security Insights master Switch branches/tags Branches Tags Could not load branches Nothing to show {{ refName }} default View all branches Could not load tags Nothing to show {{ refName }} default View all tags 2 branches 0 tags Code Latest commit majornista fix evaluation for ChromeVox object … 5c070bc Dec 7, 2020 fix evaluation for ChromeVox object 5c070bc Git stats 39 commits Files Permalink Failed to load latest commit information. Type Name Latest commit message Commit time css Add openOnMouseover setting, and toggleButtonClass for responsive layout May 11, 2018 js fix evaluation for ChromeVox object Dec 7, 2020 third-party/jquery initial commit Aug 26, 2013 LICENSE initial commit Aug 26, 2013 NOTICE initial commit Aug 26, 2013 README.md initial commit Aug 26, 2013 index.html Updating WCAG 2.0 References to WCAG 2.1 (#67) Dec 4, 2020 package.json Updating repo references Jul 8, 2016 View code Accessible Mega Menu Keyboard Accessibility Screen Reader Accessibility Usage HTML JavaScript CSS README.md Accessible Mega Menu ========================= A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. It is modeled after the mega menu on adobe.com but has been simplified for use by others. An brief explanation of our interaction design choices can be found in a blog post at Mega menu accessibility on adobe.com. Content for the links and text within the mega menu comes from the Web Content Accessibility Guidelines (WCAG) 2.0. Keyboard Accessibility The accessible mega menu supports keyboard interaction modeled after the behavior described in the WAI-ARIA Menu or Menu bar (widget) design pattern, however we also try to respect users' general expectations for the behavior of links in a global navigation. To this end, the accessible mega menu implementation permits tab focus on each of the six top-level menu items. When one of the menu items has focus, pressing the Enter key, Spacebar or Down arrow will open the submenu panel, and pressing the Left or Right arrow key will shift focus to the adjacent menu item. Links within the submenu panels are included in the tab order when the panel is open. They can also be navigated with the arrow keys or by typing the first character in the link name, which speeds up keyboard navigation considerably. Pressing the Escape key closes the submenu and restores focus to the parent menu item. Screen Reader Accessibility The accessible mega menu models its use of WAI-ARIA Roles, States, and Properties after those described in the WAI-ARIA Menu or Menu bar (widget) design pattern with some notable exceptions, so that it behaves better with screen reader user expectations for global navigation. We don't use role=""menu"" for the menu container and role=""menuitem"" for each of the links therein, because if we do, assistive technology will no longer interpret the links as links, but instead, as menu items, and the links in our global navigation will no longer show up when a screen reader user executes a shortcut command to bring up a list of links in the page. We also want to maintain the semantic structure of the submenu panels in our mega menu; our links are organized into lists and separated by headings. Omitting role=""menu"" and role=""menuitem"" for the global navigation seems the safer way to go. Usage HTML The HTML structure for the mega menu is a nav element, or any other container element, containing a list. Each list item contains a link which is followed by a div or any other container element which will serve as the pop up panel. The panel can contain any html content; in the following example, each panel contains three lists of links. You can explicitly define groups within the panel, between which a user can navigate quickly using the left and right arrow keys; in the following example, the CSS class .sub-nav-group identifies a navigable group.     <nav>         <ul class=""nav-menu"">             <li class=""nav-item"">                 <a href=""?movie"">Movies</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=0"">Action &amp; Adventure</a></li>                         <li><a href=""?movie&genre=2"">Children &amp; Family</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=7"">Dramas</a></li>                         <li><a href=""?movie&genre=9"">Foreign</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=14"">Musicals</a></li>                         <li><a href=""?movie&genre=15"">Romance</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>             <li class=""nav-item"">                 <a href=""?tv"">TV Shows</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=20"">Classic TV</a></li>                         <li><a href=""?tv&genre=21"">Crime TV</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=27"">Reality TV</a></li>                         <li><a href=""?tv&genre=30"">TV Action</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=33"">TV Dramas</a></li>                         <li><a href=""?tv&genre=34"">TV Horror</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>         </ul>     </nav> By default, accessibleMegaMenu uses the the following CSS classes to define the top-level navigation items, panels, groups within the panels, and the hover, focus, and open states. It also defines a prefix for unique id strings, which are required to indicate the relationship of a top-level navigation item to the panel it controls.     defaults = {         /* unique ID's are required to indicate aria-owns, aria-controls and aria-labelledby */         uuidPrefix: ""accessible-megamenu"",                  /* default css class used to define the megamenu styling */         menuClass: ""accessible-megamenu"",                  /* default css class for a top-level navigation item in the megamenu */         topNavItemClass: ""accessible-megamenu-top-nav-item"",                  /* default css class for a megamenu panel */         panelClass: ""accessible-megamenu-panel"",                  /* default css class for a group of items within a megamenu panel */         panelGroupClass: ""accessible-megamenu-panel-group"",                  /* default css class for the hover state */         hoverClass: ""hover"",                  /* default css class for the focus state */         focusClass: ""focus"",                  /* default css class for the open state */         openClass: ""open""      } You can optionally override the defaults to use the CSS classes you may have already defined for your mega menu. JavaScript Be sure to include jQuery and the jquery-accessibleMegaMenu.js plugin script.     <script src=""//code.jquery.com/jquery-1.10.1.min.js""></script>     <script src=""js/jquery-accessibleMegaMenu.js""></script> The following initializes the first nav element in the document as an accessibleMegaMenu, with optional CSS class overrides.     $(""nav:first"").accessibleMegaMenu({         /* prefix for generated unique id attributes, which are required             to indicate aria-owns, aria-controls and aria-labelledby */         uuidPrefix: ""accessible-megamenu"",                  /* css class used to define the megamenu styling */         menuClass: ""nav-menu"",                  /* css class for a top-level navigation item in the megamenu */         topNavItemClass: ""nav-item"",                  /* css class for a megamenu panel */         panelClass: ""sub-nav"",                  /* css class for a group of items within a megamenu panel */         panelGroupClass: ""sub-nav-group"",                  /* css class for the hover state */         hoverClass: ""hover"",                  /* css class for the focus state */         focusClass: ""focus"",                  /* css class for the open state */         openClass: ""open""     }); CSS AccessibleMegaMenu handles the showing and hiding of panels by adding or removing a CSS class. No inline styles are added to hide elements or create animation between states. Following is some rudimentary CSS for our example which enables the showing/hiding of and the layout of lists panels in the mega menu.     /* mega menu list */     .nav-menu {         display: block;         position: relative;         list-style: none;         margin: 0;         padding: 0;         z-index: 15;     }     /* a top level navigation item in the mega menu */     .nav-item {         list-style: none;         display: inline-block;         padding: 0;         margin: 0;     }     /* first descendant link within a top level navigation item */     .nav-item > a {         position: relative;         display: inline-block;         padding: 0.5em 1em;         margin: 0 0 -1px 0;         border: 1px solid transparent;     }     /* focus/open states of first descendant link within a top level         navigation item */     .nav-item > a:focus,     .nav-item > a.open {         border: 1px solid #dedede;     }     /* open state of first descendant link within a top level         navigation item */     .nav-item > a.open {         background-color: #fff;         border-bottom: none;         z-index: 1;     }     /* sub-navigation panel */     .sub-nav {         position: absolute;         display: none;         top: 2.2em;         margin-top: -1px;         padding: 0.5em 1em;         border: 1px solid #dedede;         background-color: #fff;     }     /* sub-navigation panel open state */     .sub-nav.open {         display: block;     }     /* list of items within sub-navigation panel */     .sub-nav ul {         display: inline-block;         vertical-align: top;         margin: 0 1em 0 0;         padding: 0;     }     /* list item within sub-navigation panel */     .sub-nav li {         display: block;         list-style-type: none;         margin: 0;         padding: 0;     }   Putting it all together, here is the completed example:     <!doctype html>     <html lang=""en"">     <head>     <meta charset=""UTF-8"">     <title>Simple Accessible Mega Menu Example</title>     <style>         /* Rudimentary mega menu CSS for demonstration */             /* mega menu list */         .nav-menu {             display: block;             position: relative;             list-style: none;             margin: 0;             padding: 0;             z-index: 15;         }         /* a top level navigation item in the mega menu */         .nav-item {             list-style: none;             display: inline-block;             padding: 0;             margin: 0;         }         /* first descendant link within a top level navigation item */         .nav-item > a {             position: relative;             display: inline-block;             padding: 0.5em 1em;             margin: 0 0 -1px 0;             border: 1px solid transparent;         }         /* focus/open states of first descendant link within a top level             navigation item */         .nav-item > a:focus,         .nav-item > a.open {             border: 1px solid #dedede;         }         /* open state of first descendant link within a top level             navigation item */         .nav-item > a.open {             background-color: #fff;             border-bottom: none;             z-index: 1;         }         /* sub-navigation panel */         .sub-nav {             position: absolute;             display: none;             top: 2.2em;             margin-top: -1px;             padding: 0.5em 1em;             border: 1px solid #dedede;             background-color: #fff;         }         /* sub-navigation panel open state */         .sub-nav.open {             display: block;         }         /* list of items within sub-navigation panel */         .sub-nav ul {             display: inline-block;             vertical-align: top;             margin: 0 1em 0 0;             padding: 0;         }         /* list item within sub-navigation panel */         .sub-nav li {             display: block;             list-style-type: none;             margin: 0;             padding: 0;         }          </style>     </head>     <body>     <nav>         <ul class=""nav-menu"">             <li class=""nav-item"">                 <a href=""?movie"">Movies</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=0"">Action &amp; Adventure</a></li>                         <li><a href=""?movie&genre=2"">Children &amp; Family</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=7"">Dramas</a></li>                         <li><a href=""?movie&genre=9"">Foreign</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=14"">Musicals</a></li>                         <li><a href=""?movie&genre=15"">Romance</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>             <li class=""nav-item"">                 <a href=""?tv"">TV Shows</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=20"">Classic TV</a></li>                         <li><a href=""?tv&genre=21"">Crime TV</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=27"">Reality TV</a></li>                         <li><a href=""?tv&genre=30"">TV Action</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=33"">TV Dramas</a></li>                         <li><a href=""?tv&genre=34"">TV Horror</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>         </ul>     </nav>          <!-- include jquery -->     <script src=""//code.jquery.com/jquery-1.10.1.min.js""></script>     <!-- include the jquery-accessibleMegaMenu plugin script -->     <script src=""js/jquery-accessibleMegaMenu.js""></script>     <!-- initialize a selector as an accessibleMegaMenu -->     <script>         $(""nav:first"").accessibleMegaMenu({             /* prefix for generated unique id attributes, which are required                 to indicate aria-owns, aria-controls and aria-labelledby */             uuidPrefix: ""accessible-megamenu"",                          /* css class used to define the megamenu styling */             menuClass: ""nav-menu"",                          /* css class for a top-level navigation item in the megamenu */             topNavItemClass: ""nav-item"",                          /* css class for a megamenu panel */             panelClass: ""sub-nav"",                          /* css class for a group of items within a megamenu panel */             panelGroupClass: ""sub-nav-group"",                          /* css class for the hover state */             hoverClass: ""hover"",                          /* css class for the focus state */             focusClass: ""focus"",                          /* css class for the open state */             openClass: ""open""         });     </script>     </body>     </html> About A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. Resources Readme License Apache-2.0 License Releases No releases published Packages 0 No packages published Used by 17 + 9 Contributors 7 Languages HTML 71.8% CSS 26.4% JavaScript 1.8% © 2021 GitHub, Inc. Terms Privacy Security Status Docs Contact GitHub Pricing API Training Blog About You can’t perform that action at this time. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."
742196,20210924,github.com,https://github.com/sponsors/jsdelivr/button,text/html,text/html,en,Sponsor
743717,20210924,github.com,https://github.com/crypto-browserify/crypto-browserify,text/html,text/html,en,"GitHub - crypto-browserify/crypto-browserify: partial implementation of node's `crypto` for the browser Skip to content Sign up Why GitHub? Features → Mobile → Actions → Codespaces → Packages → Security → Code review → Issues → Integrations → GitHub Sponsors → Customer stories→ Team Enterprise Explore Explore GitHub → Learn and contribute Topics → Collections → Trending → Learning Lab → Open source guides → Connect with others The ReadME Project → Events → Community forum → GitHub Education → GitHub Stars program → Marketplace Pricing Plans → Compare plans → Contact Sales → Education → In this repository All GitHub ↵ Jump to ↵ No suggested jump to results In this repository All GitHub ↵ Jump to ↵ In this organization All GitHub ↵ Jump to ↵ In this repository All GitHub ↵ Jump to ↵ Sign in Sign up {{ message }} crypto-browserify / crypto-browserify Public Notifications Star 496 Fork 158 partial implementation of node's `crypto` for the browser MIT License 496 stars 158 forks Star Notifications Code Issues 22 Pull requests 6 Actions Projects 0 Wiki Security Insights More Code Issues Pull requests Actions Projects Wiki Security Insights master Switch branches/tags Branches Tags Could not load branches Nothing to show {{ refName }} default View all branches Could not load tags Nothing to show {{ refName }} default View all tags 6 branches 31 tags Code Latest commit calvinmetcalf fix debian issue (maybe) … 460a13b Feb 9, 2018 fix debian issue (maybe) 460a13b Git stats 362 commits Files Permalink Failed to load latest commit information. Type Name Latest commit message Commit time example add standard 5.0.0 Aug 13, 2015 test fix debian issue (maybe) Feb 9, 2018 .gitignore Add .gitignore Aug 5, 2013 .travis.yml saucelabs aparently only goes back to 7 Oct 19, 2017 .zuul.yml add zuul and browser tests Oct 3, 2015 LICENSE Add MIT license Sep 20, 2013 README.md add privateEncrypt/publicDecrypt to README Dec 14, 2015 index.js add rndom fill Oct 18, 2017 package.json 3.12.0 Nov 3, 2017 View code crypto-browserify todo contributions License README.md crypto-browserify A port of node's crypto module to the browser. The goal of this module is to reimplement node's crypto module, in pure javascript so that it can run in the browser. Here is the subset that is currently implemented: createHash (sha1, sha224, sha256, sha384, sha512, md5, rmd160) createHmac (sha1, sha224, sha256, sha384, sha512, md5, rmd160) pbkdf2 pbkdf2Sync randomBytes pseudoRandomBytes createCipher (aes) createDecipher (aes) createDiffieHellman createSign (rsa, ecdsa) createVerify (rsa, ecdsa) createECDH (secp256k1) publicEncrypt/privateDecrypt (rsa) privateEncrypt/publicDecrypt (rsa) todo these features from node's crypto are still unimplemented. createCredentials contributions If you are interested in writing a feature, please implement as a new module, which will be incorporated into crypto-browserify as a dependency. All deps must be compatible with node's crypto (generate example inputs and outputs with node, and save base64 strings inside JSON, so that tests can run in the browser. see sha.js Crypto is extra serious so please do not hesitate to review the code, and post comments if you do. License MIT About partial implementation of node's `crypto` for the browser Resources Readme License MIT License Releases 31 tags Packages 0 No packages published Used by 6.5m + 6,465,289 Contributors 24 + 13 contributors Languages JavaScript 99.1% HTML 0.9% © 2021 GitHub, Inc. Terms Privacy Security Status Docs Contact GitHub Pricing API Training Blog About You can’t perform that action at this time. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."
743719,20210924,github.com,https://github.com/indutny/elliptic/issues,text/html,text/html,en,"Issues · indutny/elliptic · GitHub Skip to content Sign up Why GitHub? Features → Mobile → Actions → Codespaces → Packages → Security → Code review → Issues → Integrations → GitHub Sponsors → Customer stories→ Team Enterprise Explore Explore GitHub → Learn and contribute Topics → Collections → Trending → Learning Lab → Open source guides → Connect with others The ReadME Project → Events → Community forum → GitHub Education → GitHub Stars program → Marketplace Pricing Plans → Compare plans → Contact Sales → Education → In this repository All GitHub ↵ Jump to ↵ No suggested jump to results In this repository All GitHub ↵ Jump to ↵ In this user All GitHub ↵ Jump to ↵ In this repository All GitHub ↵ Jump to ↵ Sign in Sign up {{ message }} indutny / elliptic Public Notifications Star 1.3k Fork 314 Code Issues 79 Pull requests 21 Actions Projects 0 Wiki Security Insights More Code Issues Pull requests Actions Projects Wiki Security Insights Labels 8 Milestones 0 Labels 8 Milestones 0 New issue Have a question about this project? Sign up for a free GitHub account to open an issue and contact its maintainers and the community. Sign up for GitHub By clicking “Sign up for GitHub”, you agree to our terms of service and privacy statement. We’ll occasionally send you account related emails. Already on GitHub? Sign in to your account 79 Open 97 Closed 79 Open 97 Closed Author Filter by author author: Filter by this user Label Filter by label Use alt + click/return to exclude labels or ⇧ + click/return for logical OR Projects Filter by project Milestones Filter by milestone Assignee Filter by who’s assigned Sort Sort by Newest Oldest Most commented Least commented Recently updated Least recently updated Most reactions 👍 👎 😄 🎉 😕 ❤️ 🚀 👀 How can i use this library with cdn?? #264 opened Sep 4, 2021 by ghost invalid y value for curve for new EC('p256') #263 opened Jul 28, 2021 by congminh090800 Invalid hashed data sign with EDDSA #262 opened Jul 6, 2021 by samuel-uniris Point multiplication gives different results based on order of operattions #260 opened Jun 16, 2021 by kot-begemot 3 deriving private key from public key #257 opened Apr 27, 2021 by madhav-madhusoodanan How to use keys with crypto.subtle #255 opened Apr 1, 2021 by DominicTobias-b1 EDDSA.decodeInt should fails or reduce by dafault? #254 opened Mar 18, 2021 by mahnunchik Sad state #251 opened Mar 11, 2021 by berkus 1 EDDSA.decodePoint should fails on ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff #250 opened Mar 3, 2021 by mahnunchik 15 Add endian argument to bn.js toString method #249 opened Mar 2, 2021 by mahnunchik EDDSA decodePoint doesn't support Buffer as argument #248 opened Mar 2, 2021 by mahnunchik How to decipher the encrypted message? #245 opened Jan 27, 2021 by istabraq-iot Montgomery Curve25519 is not openssl compatible #243 opened Dec 28, 2020 by jc-lab 4 Curves p384 and p521 produce incorrect results #239 opened Oct 18, 2020 by guidovranken 1 i want to use this library with c# #238 opened Oct 10, 2020 by medozeus Elliptic.js support following curve types: #236 opened Oct 5, 2020 by medozeus The Elliptic package 6.5.2 for Node.js allows ECDSA signature malleability via variations in encoding, leading '\0' bytes, or integer overflows. #235 opened Oct 1, 2020 by bsomeshwer EdDSA: What is a reason to manipulate with bytes? #233 opened Aug 27, 2020 by mahnunchik why use derive method get ECDH key，i got different length #230 opened Jul 10, 2020 by cqupt-yifanwu 4 Why do I generate my local test path in chunk-vendors when packing with NPM #229 opened Jun 22, 2020 by Anthonychen1994 1 TypedArray support ? #228 opened Jun 20, 2020 by dojyorin Is there way to generate PKCS#8 private key from Pem format ECC Private key #225 opened Apr 28, 2020 by sureshreddygovindu Signature validation in python. Prefix configuration? #224 opened Apr 25, 2020 by amrbz is it possible to do assymetric encryption? #223 opened Apr 7, 2020 by maroodb 1 Missing infinity point encoding #218 opened Feb 21, 2020 by catenacyber 1 Previous 1 2 3 4 Next Previous Next ProTip! Adding no:label will show everything without a label. © 2021 GitHub, Inc. Terms Privacy Security Status Docs Contact GitHub Pricing API Training Blog About You can’t perform that action at this time. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."
743725,20210924,github.com,https://github.com/indutny/elliptic,text/html,text/html,en,"GitHub - indutny/elliptic: Fast Elliptic Curve Cryptography in plain javascript Skip to content Sign up Why GitHub? Features → Mobile → Actions → Codespaces → Packages → Security → Code review → Issues → Integrations → GitHub Sponsors → Customer stories→ Team Enterprise Explore Explore GitHub → Learn and contribute Topics → Collections → Trending → Learning Lab → Open source guides → Connect with others The ReadME Project → Events → Community forum → GitHub Education → GitHub Stars program → Marketplace Pricing Plans → Compare plans → Contact Sales → Education → In this repository All GitHub ↵ Jump to ↵ No suggested jump to results In this repository All GitHub ↵ Jump to ↵ In this user All GitHub ↵ Jump to ↵ In this repository All GitHub ↵ Jump to ↵ Sign in Sign up {{ message }} indutny / elliptic Public Notifications Star 1.3k Fork 314 Fast Elliptic Curve Cryptography in plain javascript 1.3k stars 314 forks Star Notifications Code Issues 79 Pull requests 21 Actions Projects 0 Wiki Security Insights More Code Issues Pull requests Actions Projects Wiki Security Insights master Switch branches/tags Branches Tags Could not load branches Nothing to show {{ refName }} default View all branches Could not load tags Nothing to show {{ refName }} default View all tags 2 branches 85 tags Code Latest commit indutny 6.5.4 … 43ac7f2 Feb 2, 2021 6.5.4 43ac7f2 Git stats 331 commits Files Permalink Failed to load latest commit information. Type Name Latest commit message Commit time benchmarks package: remove Makefile and dist Jan 29, 2016 dist 6.5.4 Feb 2, 2021 lib ec: validate that a point before deriving keys Feb 2, 2021 test ec: validate that a point before deriving keys Feb 2, 2021 .codeclimate.yml test: improvements with Saucelabs/Codeclimate Mar 31, 2016 .eslintignore lib: relint using eslint Aug 2, 2020 .eslintrc.js lib: relint using eslint Aug 2, 2020 .gitignore test: improvements with Saucelabs/Codeclimate Mar 31, 2016 .npmignore npmignore: dist May 20, 2016 .travis.yml travis: really move on Jun 26, 2019 Gruntfile.js grunt: fix standalone build May 25, 2016 README.md readme: update example Mar 23, 2017 package-lock.json 6.5.4 Feb 2, 2021 package.json 6.5.4 Feb 2, 2021 View code Elliptic Incentive Benchmarks API ECDSA EdDSA ECDH Supported curves Implementation details Related projects LICENSE README.md Elliptic Fast elliptic-curve cryptography in a plain javascript implementation. NOTE: Please take a look at http://safecurves.cr.yp.to/ before choosing a curve for your cryptography operations. Incentive ECC is much slower than regular RSA cryptography, the JS implementations are even more slower. Benchmarks $ node benchmarks/index.js Benchmarking: sign elliptic#sign x 262 ops/sec ±0.51% (177 runs sampled) eccjs#sign x 55.91 ops/sec ±0.90% (144 runs sampled) ------------------------ Fastest is elliptic#sign ======================== Benchmarking: verify elliptic#verify x 113 ops/sec ±0.50% (166 runs sampled) eccjs#verify x 48.56 ops/sec ±0.36% (125 runs sampled) ------------------------ Fastest is elliptic#verify ======================== Benchmarking: gen elliptic#gen x 294 ops/sec ±0.43% (176 runs sampled) eccjs#gen x 62.25 ops/sec ±0.63% (129 runs sampled) ------------------------ Fastest is elliptic#gen ======================== Benchmarking: ecdh elliptic#ecdh x 136 ops/sec ±0.85% (156 runs sampled) ------------------------ Fastest is elliptic#ecdh ======================== API ECDSA var EC = require('elliptic').ec; // Create and initialize EC context // (better do it once and reuse it) var ec = new EC('secp256k1'); // Generate keys var key = ec.genKeyPair(); // Sign the message's hash (input must be an array, or a hex-string) var msgHash = [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ]; var signature = key.sign(msgHash); // Export DER encoded signature in Array var derSign = signature.toDER(); // Verify signature console.log(key.verify(msgHash, derSign)); // CHECK WITH NO PRIVATE KEY var pubPoint = key.getPublic(); var x = pubPoint.getX(); var y = pubPoint.getY(); // Public Key MUST be either: // 1) '04' + hex string of x + hex string of y; or // 2) object with two hex string properties (x and y); or // 3) object with two buffer properties (x and y) var pub = pubPoint.encode('hex');                                 // case 1 var pub = { x: x.toString('hex'), y: y.toString('hex') };         // case 2 var pub = { x: x.toBuffer(), y: y.toBuffer() };                   // case 3 var pub = { x: x.toArrayLike(Buffer), y: y.toArrayLike(Buffer) }; // case 3 // Import public key var key = ec.keyFromPublic(pub, 'hex'); // Signature MUST be either: // 1) DER-encoded signature as hex-string; or // 2) DER-encoded signature as buffer; or // 3) object with two hex-string properties (r and s); or // 4) object with two buffer properties (r and s) var signature = '3046022100...'; // case 1 var signature = new Buffer('...'); // case 2 var signature = { r: 'b1fc...', s: '9c42...' }; // case 3 // Verify signature console.log(key.verify(msgHash, signature)); EdDSA var EdDSA = require('elliptic').eddsa; // Create and initialize EdDSA context // (better do it once and reuse it) var ec = new EdDSA('ed25519'); // Create key pair from secret var key = ec.keyFromSecret('693e3c...'); // hex string, array or Buffer // Sign the message's hash (input must be an array, or a hex-string) var msgHash = [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ]; var signature = key.sign(msgHash).toHex(); // Verify signature console.log(key.verify(msgHash, signature)); // CHECK WITH NO PRIVATE KEY // Import public key var pub = '0a1af638...'; var key = ec.keyFromPublic(pub, 'hex'); // Verify signature var signature = '70bed1...'; console.log(key.verify(msgHash, signature)); ECDH var EC = require('elliptic').ec; var ec = new EC('curve25519'); // Generate keys var key1 = ec.genKeyPair(); var key2 = ec.genKeyPair(); var shared1 = key1.derive(key2.getPublic()); var shared2 = key2.derive(key1.getPublic()); console.log('Both shared secrets are BN instances'); console.log(shared1.toString(16)); console.log(shared2.toString(16)); three and more members: var EC = require('elliptic').ec; var ec = new EC('curve25519'); var A = ec.genKeyPair(); var B = ec.genKeyPair(); var C = ec.genKeyPair(); var AB = A.getPublic().mul(B.getPrivate()) var BC = B.getPublic().mul(C.getPrivate()) var CA = C.getPublic().mul(A.getPrivate()) var ABC = AB.mul(C.getPrivate()) var BCA = BC.mul(A.getPrivate()) var CAB = CA.mul(B.getPrivate()) console.log(ABC.getX().toString(16)) console.log(BCA.getX().toString(16)) console.log(CAB.getX().toString(16)) NOTE: .derive() returns a BN instance. Supported curves Elliptic.js support following curve types: Short Weierstrass Montgomery Edwards Twisted Edwards Following curve 'presets' are embedded into the library: secp256k1 p192 p224 p256 p384 p521 curve25519 ed25519 NOTE: That curve25519 could not be used for ECDSA, use ed25519 instead. Implementation details ECDSA is using deterministic k value generation as per RFC6979. Most of the curve operations are performed on non-affine coordinates (either projective or extended), various windowing techniques are used for different cases. All operations are performed in reduction context using bn.js, hashing is provided by hash.js Related projects eccrypto: isomorphic implementation of ECDSA, ECDH and ECIES for both browserify and node (uses elliptic for browser and secp256k1-node for node) LICENSE This software is licensed under the MIT License. Copyright Fedor Indutny, 2014. Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the ""Software""), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. About Fast Elliptic Curve Cryptography in plain javascript Resources Readme Releases 85 tags Packages 0 No packages published Used by 6.4m + 6,421,207 Contributors 25 + 14 contributors Languages JavaScript 99.3% HTML 0.7% © 2021 GitHub, Inc. Terms Privacy Security Status Docs Contact GitHub Pricing API Training Blog About You can’t perform that action at this time. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."
744347,20211001,github.com,https://github.com/adobe-accessibility/Accessible-Mega-Menu,text/html,text/html,en,"GitHub - adobe-accessibility/Accessible-Mega-Menu: A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. Skip to content Sign up Why GitHub? Features → Mobile → Actions → Codespaces → Packages → Security → Code review → Issues → Integrations → GitHub Sponsors → Customer stories→ Team Enterprise Explore Explore GitHub → Learn and contribute Topics → Collections → Trending → Learning Lab → Open source guides → Connect with others The ReadME Project → Events → Community forum → GitHub Education → GitHub Stars program → Marketplace Pricing Plans → Compare plans → Contact Sales → Education → In this repository All GitHub ↵ Jump to ↵ No suggested jump to results In this repository All GitHub ↵ Jump to ↵ In this organization All GitHub ↵ Jump to ↵ In this repository All GitHub ↵ Jump to ↵ Sign in Sign up {{ message }} adobe-accessibility / Accessible-Mega-Menu Public Notifications Star 586 Fork 204 A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. Apache-2.0 License 586 stars 204 forks Star Notifications Code Issues 31 Pull requests 6 Actions Projects 0 Wiki Security Insights More Code Issues Pull requests Actions Projects Wiki Security Insights master Switch branches/tags Branches Tags Could not load branches Nothing to show {{ refName }} default View all branches Could not load tags Nothing to show {{ refName }} default View all tags 2 branches 0 tags Code Latest commit majornista fix evaluation for ChromeVox object … 5c070bc Dec 7, 2020 fix evaluation for ChromeVox object 5c070bc Git stats 39 commits Files Permalink Failed to load latest commit information. Type Name Latest commit message Commit time css Add openOnMouseover setting, and toggleButtonClass for responsive layout May 11, 2018 js fix evaluation for ChromeVox object Dec 7, 2020 third-party/jquery initial commit Aug 26, 2013 LICENSE initial commit Aug 26, 2013 NOTICE initial commit Aug 26, 2013 README.md initial commit Aug 26, 2013 index.html Updating WCAG 2.0 References to WCAG 2.1 (#67) Dec 4, 2020 package.json Updating repo references Jul 8, 2016 View code Accessible Mega Menu Keyboard Accessibility Screen Reader Accessibility Usage HTML JavaScript CSS README.md Accessible Mega Menu ========================= A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. It is modeled after the mega menu on adobe.com but has been simplified for use by others. An brief explanation of our interaction design choices can be found in a blog post at Mega menu accessibility on adobe.com. Content for the links and text within the mega menu comes from the Web Content Accessibility Guidelines (WCAG) 2.0. Keyboard Accessibility The accessible mega menu supports keyboard interaction modeled after the behavior described in the WAI-ARIA Menu or Menu bar (widget) design pattern, however we also try to respect users' general expectations for the behavior of links in a global navigation. To this end, the accessible mega menu implementation permits tab focus on each of the six top-level menu items. When one of the menu items has focus, pressing the Enter key, Spacebar or Down arrow will open the submenu panel, and pressing the Left or Right arrow key will shift focus to the adjacent menu item. Links within the submenu panels are included in the tab order when the panel is open. They can also be navigated with the arrow keys or by typing the first character in the link name, which speeds up keyboard navigation considerably. Pressing the Escape key closes the submenu and restores focus to the parent menu item. Screen Reader Accessibility The accessible mega menu models its use of WAI-ARIA Roles, States, and Properties after those described in the WAI-ARIA Menu or Menu bar (widget) design pattern with some notable exceptions, so that it behaves better with screen reader user expectations for global navigation. We don't use role=""menu"" for the menu container and role=""menuitem"" for each of the links therein, because if we do, assistive technology will no longer interpret the links as links, but instead, as menu items, and the links in our global navigation will no longer show up when a screen reader user executes a shortcut command to bring up a list of links in the page. We also want to maintain the semantic structure of the submenu panels in our mega menu; our links are organized into lists and separated by headings. Omitting role=""menu"" and role=""menuitem"" for the global navigation seems the safer way to go. Usage HTML The HTML structure for the mega menu is a nav element, or any other container element, containing a list. Each list item contains a link which is followed by a div or any other container element which will serve as the pop up panel. The panel can contain any html content; in the following example, each panel contains three lists of links. You can explicitly define groups within the panel, between which a user can navigate quickly using the left and right arrow keys; in the following example, the CSS class .sub-nav-group identifies a navigable group.     <nav>         <ul class=""nav-menu"">             <li class=""nav-item"">                 <a href=""?movie"">Movies</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=0"">Action &amp; Adventure</a></li>                         <li><a href=""?movie&genre=2"">Children &amp; Family</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=7"">Dramas</a></li>                         <li><a href=""?movie&genre=9"">Foreign</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=14"">Musicals</a></li>                         <li><a href=""?movie&genre=15"">Romance</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>             <li class=""nav-item"">                 <a href=""?tv"">TV Shows</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=20"">Classic TV</a></li>                         <li><a href=""?tv&genre=21"">Crime TV</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=27"">Reality TV</a></li>                         <li><a href=""?tv&genre=30"">TV Action</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=33"">TV Dramas</a></li>                         <li><a href=""?tv&genre=34"">TV Horror</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>         </ul>     </nav> By default, accessibleMegaMenu uses the the following CSS classes to define the top-level navigation items, panels, groups within the panels, and the hover, focus, and open states. It also defines a prefix for unique id strings, which are required to indicate the relationship of a top-level navigation item to the panel it controls.     defaults = {         /* unique ID's are required to indicate aria-owns, aria-controls and aria-labelledby */         uuidPrefix: ""accessible-megamenu"",                  /* default css class used to define the megamenu styling */         menuClass: ""accessible-megamenu"",                  /* default css class for a top-level navigation item in the megamenu */         topNavItemClass: ""accessible-megamenu-top-nav-item"",                  /* default css class for a megamenu panel */         panelClass: ""accessible-megamenu-panel"",                  /* default css class for a group of items within a megamenu panel */         panelGroupClass: ""accessible-megamenu-panel-group"",                  /* default css class for the hover state */         hoverClass: ""hover"",                  /* default css class for the focus state */         focusClass: ""focus"",                  /* default css class for the open state */         openClass: ""open""      } You can optionally override the defaults to use the CSS classes you may have already defined for your mega menu. JavaScript Be sure to include jQuery and the jquery-accessibleMegaMenu.js plugin script.     <script src=""//code.jquery.com/jquery-1.10.1.min.js""></script>     <script src=""js/jquery-accessibleMegaMenu.js""></script> The following initializes the first nav element in the document as an accessibleMegaMenu, with optional CSS class overrides.     $(""nav:first"").accessibleMegaMenu({         /* prefix for generated unique id attributes, which are required             to indicate aria-owns, aria-controls and aria-labelledby */         uuidPrefix: ""accessible-megamenu"",                  /* css class used to define the megamenu styling */         menuClass: ""nav-menu"",                  /* css class for a top-level navigation item in the megamenu */         topNavItemClass: ""nav-item"",                  /* css class for a megamenu panel */         panelClass: ""sub-nav"",                  /* css class for a group of items within a megamenu panel */         panelGroupClass: ""sub-nav-group"",                  /* css class for the hover state */         hoverClass: ""hover"",                  /* css class for the focus state */         focusClass: ""focus"",                  /* css class for the open state */         openClass: ""open""     }); CSS AccessibleMegaMenu handles the showing and hiding of panels by adding or removing a CSS class. No inline styles are added to hide elements or create animation between states. Following is some rudimentary CSS for our example which enables the showing/hiding of and the layout of lists panels in the mega menu.     /* mega menu list */     .nav-menu {         display: block;         position: relative;         list-style: none;         margin: 0;         padding: 0;         z-index: 15;     }     /* a top level navigation item in the mega menu */     .nav-item {         list-style: none;         display: inline-block;         padding: 0;         margin: 0;     }     /* first descendant link within a top level navigation item */     .nav-item > a {         position: relative;         display: inline-block;         padding: 0.5em 1em;         margin: 0 0 -1px 0;         border: 1px solid transparent;     }     /* focus/open states of first descendant link within a top level         navigation item */     .nav-item > a:focus,     .nav-item > a.open {         border: 1px solid #dedede;     }     /* open state of first descendant link within a top level         navigation item */     .nav-item > a.open {         background-color: #fff;         border-bottom: none;         z-index: 1;     }     /* sub-navigation panel */     .sub-nav {         position: absolute;         display: none;         top: 2.2em;         margin-top: -1px;         padding: 0.5em 1em;         border: 1px solid #dedede;         background-color: #fff;     }     /* sub-navigation panel open state */     .sub-nav.open {         display: block;     }     /* list of items within sub-navigation panel */     .sub-nav ul {         display: inline-block;         vertical-align: top;         margin: 0 1em 0 0;         padding: 0;     }     /* list item within sub-navigation panel */     .sub-nav li {         display: block;         list-style-type: none;         margin: 0;         padding: 0;     }   Putting it all together, here is the completed example:     <!doctype html>     <html lang=""en"">     <head>     <meta charset=""UTF-8"">     <title>Simple Accessible Mega Menu Example</title>     <style>         /* Rudimentary mega menu CSS for demonstration */             /* mega menu list */         .nav-menu {             display: block;             position: relative;             list-style: none;             margin: 0;             padding: 0;             z-index: 15;         }         /* a top level navigation item in the mega menu */         .nav-item {             list-style: none;             display: inline-block;             padding: 0;             margin: 0;         }         /* first descendant link within a top level navigation item */         .nav-item > a {             position: relative;             display: inline-block;             padding: 0.5em 1em;             margin: 0 0 -1px 0;             border: 1px solid transparent;         }         /* focus/open states of first descendant link within a top level             navigation item */         .nav-item > a:focus,         .nav-item > a.open {             border: 1px solid #dedede;         }         /* open state of first descendant link within a top level             navigation item */         .nav-item > a.open {             background-color: #fff;             border-bottom: none;             z-index: 1;         }         /* sub-navigation panel */         .sub-nav {             position: absolute;             display: none;             top: 2.2em;             margin-top: -1px;             padding: 0.5em 1em;             border: 1px solid #dedede;             background-color: #fff;         }         /* sub-navigation panel open state */         .sub-nav.open {             display: block;         }         /* list of items within sub-navigation panel */         .sub-nav ul {             display: inline-block;             vertical-align: top;             margin: 0 1em 0 0;             padding: 0;         }         /* list item within sub-navigation panel */         .sub-nav li {             display: block;             list-style-type: none;             margin: 0;             padding: 0;         }          </style>     </head>     <body>     <nav>         <ul class=""nav-menu"">             <li class=""nav-item"">                 <a href=""?movie"">Movies</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=0"">Action &amp; Adventure</a></li>                         <li><a href=""?movie&genre=2"">Children &amp; Family</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=7"">Dramas</a></li>                         <li><a href=""?movie&genre=9"">Foreign</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=14"">Musicals</a></li>                         <li><a href=""?movie&genre=15"">Romance</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>             <li class=""nav-item"">                 <a href=""?tv"">TV Shows</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=20"">Classic TV</a></li>                         <li><a href=""?tv&genre=21"">Crime TV</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=27"">Reality TV</a></li>                         <li><a href=""?tv&genre=30"">TV Action</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=33"">TV Dramas</a></li>                         <li><a href=""?tv&genre=34"">TV Horror</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>         </ul>     </nav>          <!-- include jquery -->     <script src=""//code.jquery.com/jquery-1.10.1.min.js""></script>     <!-- include the jquery-accessibleMegaMenu plugin script -->     <script src=""js/jquery-accessibleMegaMenu.js""></script>     <!-- initialize a selector as an accessibleMegaMenu -->     <script>         $(""nav:first"").accessibleMegaMenu({             /* prefix for generated unique id attributes, which are required                 to indicate aria-owns, aria-controls and aria-labelledby */             uuidPrefix: ""accessible-megamenu"",                          /* css class used to define the megamenu styling */             menuClass: ""nav-menu"",                          /* css class for a top-level navigation item in the megamenu */             topNavItemClass: ""nav-item"",                          /* css class for a megamenu panel */             panelClass: ""sub-nav"",                          /* css class for a group of items within a megamenu panel */             panelGroupClass: ""sub-nav-group"",                          /* css class for the hover state */             hoverClass: ""hover"",                          /* css class for the focus state */             focusClass: ""focus"",                          /* css class for the open state */             openClass: ""open""         });     </script>     </body>     </html> About A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. Resources Readme License Apache-2.0 License Releases No releases published Packages 0 No packages published Used by 17 + 9 Contributors 7 Languages HTML 71.8% CSS 26.4% JavaScript 1.8% © 2021 GitHub, Inc. Terms Privacy Security Status Docs Contact GitHub Pricing API Training Blog About You can’t perform that action at this time. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."
748076,20211001,github.com,https://github.com/sponsors/jsdelivr/button,text/html,,,
749690,20211001,github.com,https://github.com/crypto-browserify/crypto-browserify,text/html,text/html,en,"GitHub - crypto-browserify/crypto-browserify: partial implementation of node's `crypto` for the browser Skip to content Sign up Why GitHub? Features → Mobile → Actions → Codespaces → Packages → Security → Code review → Issues → Integrations → GitHub Sponsors → Customer stories→ Team Enterprise Explore Explore GitHub → Learn and contribute Topics → Collections → Trending → Learning Lab → Open source guides → Connect with others The ReadME Project → Events → Community forum → GitHub Education → GitHub Stars program → Marketplace Pricing Plans → Compare plans → Contact Sales → Education → In this repository All GitHub ↵ Jump to ↵ No suggested jump to results In this repository All GitHub ↵ Jump to ↵ In this organization All GitHub ↵ Jump to ↵ In this repository All GitHub ↵ Jump to ↵ Sign in Sign up {{ message }} crypto-browserify / crypto-browserify Public Notifications Star 498 Fork 159 partial implementation of node's `crypto` for the browser MIT License 498 stars 159 forks Star Notifications Code Issues 24 Pull requests 6 Actions Projects 0 Wiki Security Insights More Code Issues Pull requests Actions Projects Wiki Security Insights master Switch branches/tags Branches Tags Could not load branches Nothing to show {{ refName }} default View all branches Could not load tags Nothing to show {{ refName }} default View all tags 6 branches 31 tags Code Latest commit calvinmetcalf fix debian issue (maybe) … 460a13b Feb 9, 2018 fix debian issue (maybe) 460a13b Git stats 362 commits Files Permalink Failed to load latest commit information. Type Name Latest commit message Commit time example add standard 5.0.0 Aug 13, 2015 test fix debian issue (maybe) Feb 9, 2018 .gitignore Add .gitignore Aug 5, 2013 .travis.yml saucelabs aparently only goes back to 7 Oct 19, 2017 .zuul.yml add zuul and browser tests Oct 3, 2015 LICENSE Add MIT license Sep 20, 2013 README.md add privateEncrypt/publicDecrypt to README Dec 14, 2015 index.js add rndom fill Oct 18, 2017 package.json 3.12.0 Nov 3, 2017 View code crypto-browserify todo contributions License README.md crypto-browserify A port of node's crypto module to the browser. The goal of this module is to reimplement node's crypto module, in pure javascript so that it can run in the browser. Here is the subset that is currently implemented: createHash (sha1, sha224, sha256, sha384, sha512, md5, rmd160) createHmac (sha1, sha224, sha256, sha384, sha512, md5, rmd160) pbkdf2 pbkdf2Sync randomBytes pseudoRandomBytes createCipher (aes) createDecipher (aes) createDiffieHellman createSign (rsa, ecdsa) createVerify (rsa, ecdsa) createECDH (secp256k1) publicEncrypt/privateDecrypt (rsa) privateEncrypt/publicDecrypt (rsa) todo these features from node's crypto are still unimplemented. createCredentials contributions If you are interested in writing a feature, please implement as a new module, which will be incorporated into crypto-browserify as a dependency. All deps must be compatible with node's crypto (generate example inputs and outputs with node, and save base64 strings inside JSON, so that tests can run in the browser. see sha.js Crypto is extra serious so please do not hesitate to review the code, and post comments if you do. License MIT About partial implementation of node's `crypto` for the browser Resources Readme License MIT License Releases 31 tags Packages 0 No packages published Used by 6.5m + 6,507,388 Contributors 24 + 13 contributors Languages JavaScript 99.1% HTML 0.9% © 2021 GitHub, Inc. Terms Privacy Security Status Docs Contact GitHub Pricing API Training Blog About You can’t perform that action at this time. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."
749691,20211001,github.com,https://github.com/indutny/elliptic/issues,text/html,text/html,en,"Issues · indutny/elliptic · GitHub Skip to content Sign up Why GitHub? Features → Mobile → Actions → Codespaces → Packages → Security → Code review → Issues → Integrations → GitHub Sponsors → Customer stories→ Team Enterprise Explore Explore GitHub → Learn and contribute Topics → Collections → Trending → Learning Lab → Open source guides → Connect with others The ReadME Project → Events → Community forum → GitHub Education → GitHub Stars program → Marketplace Pricing Plans → Compare plans → Contact Sales → Education → In this repository All GitHub ↵ Jump to ↵ No suggested jump to results In this repository All GitHub ↵ Jump to ↵ In this user All GitHub ↵ Jump to ↵ In this repository All GitHub ↵ Jump to ↵ Sign in Sign up {{ message }} indutny / elliptic Public Notifications Star 1.3k Fork 315 Code Issues 79 Pull requests 21 Actions Projects 0 Wiki Security Insights More Code Issues Pull requests Actions Projects Wiki Security Insights Labels 8 Milestones 0 Labels 8 Milestones 0 New issue Have a question about this project? Sign up for a free GitHub account to open an issue and contact its maintainers and the community. Sign up for GitHub By clicking “Sign up for GitHub”, you agree to our terms of service and privacy statement. We’ll occasionally send you account related emails. Already on GitHub? Sign in to your account 79 Open 97 Closed 79 Open 97 Closed Author Filter by author author: Filter by this user Label Filter by label Use alt + click/return to exclude labels or ⇧ + click/return for logical OR Projects Filter by project Milestones Filter by milestone Assignee Filter by who’s assigned Sort Sort by Newest Oldest Most commented Least commented Recently updated Least recently updated Most reactions 👍 👎 😄 🎉 😕 ❤️ 🚀 👀 How can i use this library with cdn?? #264 opened Sep 4, 2021 by ghost invalid y value for curve for new EC('p256') #263 opened Jul 28, 2021 by congminh090800 Invalid hashed data sign with EDDSA #262 opened Jul 6, 2021 by samuel-uniris Point multiplication gives different results based on order of operattions #260 opened Jun 16, 2021 by kot-begemot 3 deriving private key from public key #257 opened Apr 27, 2021 by madhav-madhusoodanan How to use keys with crypto.subtle #255 opened Apr 1, 2021 by DominicTobias-b1 EDDSA.decodeInt should fails or reduce by dafault? #254 opened Mar 18, 2021 by mahnunchik Sad state #251 opened Mar 11, 2021 by berkus 1 EDDSA.decodePoint should fails on ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff #250 opened Mar 3, 2021 by mahnunchik 15 Add endian argument to bn.js toString method #249 opened Mar 2, 2021 by mahnunchik EDDSA decodePoint doesn't support Buffer as argument #248 opened Mar 2, 2021 by mahnunchik How to decipher the encrypted message? #245 opened Jan 27, 2021 by istabraq-iot Montgomery Curve25519 is not openssl compatible #243 opened Dec 28, 2020 by jc-lab 4 Curves p384 and p521 produce incorrect results #239 opened Oct 18, 2020 by guidovranken 1 i want to use this library with c# #238 opened Oct 10, 2020 by medozeus Elliptic.js support following curve types: #236 opened Oct 5, 2020 by medozeus The Elliptic package 6.5.2 for Node.js allows ECDSA signature malleability via variations in encoding, leading '\0' bytes, or integer overflows. #235 opened Oct 1, 2020 by bsomeshwer EdDSA: What is a reason to manipulate with bytes? #233 opened Aug 27, 2020 by mahnunchik why use derive method get ECDH key，i got different length #230 opened Jul 10, 2020 by cqupt-yifanwu 4 Why do I generate my local test path in chunk-vendors when packing with NPM #229 opened Jun 22, 2020 by Anthonychen1994 1 TypedArray support ? #228 opened Jun 20, 2020 by dojyorin Is there way to generate PKCS#8 private key from Pem format ECC Private key #225 opened Apr 28, 2020 by sureshreddygovindu Signature validation in python. Prefix configuration? #224 opened Apr 25, 2020 by amrbz is it possible to do assymetric encryption? #223 opened Apr 7, 2020 by maroodb 1 Missing infinity point encoding #218 opened Feb 21, 2020 by catenacyber 1 Previous 1 2 3 4 Next Previous Next ProTip! Exclude everything labeled bug with -label:bug. © 2021 GitHub, Inc. Terms Privacy Security Status Docs Contact GitHub Pricing API Training Blog About You can’t perform that action at this time. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."
749692,20211001,github.com,https://github.com/indutny/elliptic,text/html,text/html,en,"GitHub - indutny/elliptic: Fast Elliptic Curve Cryptography in plain javascript Skip to content Sign up Why GitHub? Features → Mobile → Actions → Codespaces → Packages → Security → Code review → Issues → Integrations → GitHub Sponsors → Customer stories→ Team Enterprise Explore Explore GitHub → Learn and contribute Topics → Collections → Trending → Learning Lab → Open source guides → Connect with others The ReadME Project → Events → Community forum → GitHub Education → GitHub Stars program → Marketplace Pricing Plans → Compare plans → Contact Sales → Education → In this repository All GitHub ↵ Jump to ↵ No suggested jump to results In this repository All GitHub ↵ Jump to ↵ In this user All GitHub ↵ Jump to ↵ In this repository All GitHub ↵ Jump to ↵ Sign in Sign up {{ message }} indutny / elliptic Public Notifications Star 1.3k Fork 315 Fast Elliptic Curve Cryptography in plain javascript 1.3k stars 315 forks Star Notifications Code Issues 79 Pull requests 21 Actions Projects 0 Wiki Security Insights More Code Issues Pull requests Actions Projects Wiki Security Insights master Switch branches/tags Branches Tags Could not load branches Nothing to show {{ refName }} default View all branches Could not load tags Nothing to show {{ refName }} default View all tags 2 branches 85 tags Code Latest commit indutny 6.5.4 … 43ac7f2 Feb 2, 2021 6.5.4 43ac7f2 Git stats 331 commits Files Permalink Failed to load latest commit information. Type Name Latest commit message Commit time benchmarks dist lib test .codeclimate.yml .eslintignore .eslintrc.js .gitignore .npmignore .travis.yml Gruntfile.js README.md package-lock.json package.json View code Elliptic Incentive Benchmarks API ECDSA EdDSA ECDH Supported curves Implementation details Related projects LICENSE README.md Elliptic Fast elliptic-curve cryptography in a plain javascript implementation. NOTE: Please take a look at http://safecurves.cr.yp.to/ before choosing a curve for your cryptography operations. Incentive ECC is much slower than regular RSA cryptography, the JS implementations are even more slower. Benchmarks $ node benchmarks/index.js Benchmarking: sign elliptic#sign x 262 ops/sec ±0.51% (177 runs sampled) eccjs#sign x 55.91 ops/sec ±0.90% (144 runs sampled) ------------------------ Fastest is elliptic#sign ======================== Benchmarking: verify elliptic#verify x 113 ops/sec ±0.50% (166 runs sampled) eccjs#verify x 48.56 ops/sec ±0.36% (125 runs sampled) ------------------------ Fastest is elliptic#verify ======================== Benchmarking: gen elliptic#gen x 294 ops/sec ±0.43% (176 runs sampled) eccjs#gen x 62.25 ops/sec ±0.63% (129 runs sampled) ------------------------ Fastest is elliptic#gen ======================== Benchmarking: ecdh elliptic#ecdh x 136 ops/sec ±0.85% (156 runs sampled) ------------------------ Fastest is elliptic#ecdh ======================== API ECDSA var EC = require('elliptic').ec; // Create and initialize EC context // (better do it once and reuse it) var ec = new EC('secp256k1'); // Generate keys var key = ec.genKeyPair(); // Sign the message's hash (input must be an array, or a hex-string) var msgHash = [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ]; var signature = key.sign(msgHash); // Export DER encoded signature in Array var derSign = signature.toDER(); // Verify signature console.log(key.verify(msgHash, derSign)); // CHECK WITH NO PRIVATE KEY var pubPoint = key.getPublic(); var x = pubPoint.getX(); var y = pubPoint.getY(); // Public Key MUST be either: // 1) '04' + hex string of x + hex string of y; or // 2) object with two hex string properties (x and y); or // 3) object with two buffer properties (x and y) var pub = pubPoint.encode('hex');                                 // case 1 var pub = { x: x.toString('hex'), y: y.toString('hex') };         // case 2 var pub = { x: x.toBuffer(), y: y.toBuffer() };                   // case 3 var pub = { x: x.toArrayLike(Buffer), y: y.toArrayLike(Buffer) }; // case 3 // Import public key var key = ec.keyFromPublic(pub, 'hex'); // Signature MUST be either: // 1) DER-encoded signature as hex-string; or // 2) DER-encoded signature as buffer; or // 3) object with two hex-string properties (r and s); or // 4) object with two buffer properties (r and s) var signature = '3046022100...'; // case 1 var signature = new Buffer('...'); // case 2 var signature = { r: 'b1fc...', s: '9c42...' }; // case 3 // Verify signature console.log(key.verify(msgHash, signature)); EdDSA var EdDSA = require('elliptic').eddsa; // Create and initialize EdDSA context // (better do it once and reuse it) var ec = new EdDSA('ed25519'); // Create key pair from secret var key = ec.keyFromSecret('693e3c...'); // hex string, array or Buffer // Sign the message's hash (input must be an array, or a hex-string) var msgHash = [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ]; var signature = key.sign(msgHash).toHex(); // Verify signature console.log(key.verify(msgHash, signature)); // CHECK WITH NO PRIVATE KEY // Import public key var pub = '0a1af638...'; var key = ec.keyFromPublic(pub, 'hex'); // Verify signature var signature = '70bed1...'; console.log(key.verify(msgHash, signature)); ECDH var EC = require('elliptic').ec; var ec = new EC('curve25519'); // Generate keys var key1 = ec.genKeyPair(); var key2 = ec.genKeyPair(); var shared1 = key1.derive(key2.getPublic()); var shared2 = key2.derive(key1.getPublic()); console.log('Both shared secrets are BN instances'); console.log(shared1.toString(16)); console.log(shared2.toString(16)); three and more members: var EC = require('elliptic').ec; var ec = new EC('curve25519'); var A = ec.genKeyPair(); var B = ec.genKeyPair(); var C = ec.genKeyPair(); var AB = A.getPublic().mul(B.getPrivate()) var BC = B.getPublic().mul(C.getPrivate()) var CA = C.getPublic().mul(A.getPrivate()) var ABC = AB.mul(C.getPrivate()) var BCA = BC.mul(A.getPrivate()) var CAB = CA.mul(B.getPrivate()) console.log(ABC.getX().toString(16)) console.log(BCA.getX().toString(16)) console.log(CAB.getX().toString(16)) NOTE: .derive() returns a BN instance. Supported curves Elliptic.js support following curve types: Short Weierstrass Montgomery Edwards Twisted Edwards Following curve 'presets' are embedded into the library: secp256k1 p192 p224 p256 p384 p521 curve25519 ed25519 NOTE: That curve25519 could not be used for ECDSA, use ed25519 instead. Implementation details ECDSA is using deterministic k value generation as per RFC6979. Most of the curve operations are performed on non-affine coordinates (either projective or extended), various windowing techniques are used for different cases. All operations are performed in reduction context using bn.js, hashing is provided by hash.js Related projects eccrypto: isomorphic implementation of ECDSA, ECDH and ECIES for both browserify and node (uses elliptic for browser and secp256k1-node for node) LICENSE This software is licensed under the MIT License. Copyright Fedor Indutny, 2014. Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the ""Software""), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. About Fast Elliptic Curve Cryptography in plain javascript Resources Readme Releases 85 tags Packages 0 No packages published Used by 6.5m + 6,451,268 Contributors 25 + 14 contributors Languages JavaScript 99.3% HTML 0.7% © 2021 GitHub, Inc. Terms Privacy Security Status Docs Contact GitHub Pricing API Training Blog About You can’t perform that action at this time. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."
750334,20211008,github.com,https://github.com/adobe-accessibility/Accessible-Mega-Menu,text/html,text/html,en,"GitHub - adobe-accessibility/Accessible-Mega-Menu: A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. Skip to content Sign up Why GitHub? Features → Mobile → Actions → Codespaces → Packages → Security → Code review → Issues → Integrations → GitHub Sponsors → Customer stories→ Team Enterprise Explore Explore GitHub → Learn and contribute Topics → Collections → Trending → Learning Lab → Open source guides → Connect with others The ReadME Project → Events → Community forum → GitHub Education → GitHub Stars program → Marketplace Pricing Plans → Compare plans → Contact Sales → Education → In this repository All GitHub ↵ Jump to ↵ No suggested jump to results In this repository All GitHub ↵ Jump to ↵ In this organization All GitHub ↵ Jump to ↵ In this repository All GitHub ↵ Jump to ↵ Sign in Sign up {{ message }} adobe-accessibility / Accessible-Mega-Menu Public Notifications Star 585 Fork 204 A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. Apache-2.0 License 585 stars 204 forks Star Notifications Code Issues 31 Pull requests 6 Actions Projects 0 Wiki Security Insights More Code Issues Pull requests Actions Projects Wiki Security Insights master Switch branches/tags Branches Tags Could not load branches Nothing to show {{ refName }} default View all branches Could not load tags Nothing to show {{ refName }} default View all tags 2 branches 0 tags Code Latest commit Git stats 39 commits Files Permalink Failed to load latest commit information. Type Name Latest commit message Commit time css js third-party/jquery LICENSE NOTICE README.md index.html package.json View code Accessible Mega Menu Keyboard Accessibility Screen Reader Accessibility Usage HTML JavaScript CSS README.md Accessible Mega Menu ========================= A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. It is modeled after the mega menu on adobe.com but has been simplified for use by others. An brief explanation of our interaction design choices can be found in a blog post at Mega menu accessibility on adobe.com. Content for the links and text within the mega menu comes from the Web Content Accessibility Guidelines (WCAG) 2.0. Keyboard Accessibility The accessible mega menu supports keyboard interaction modeled after the behavior described in the WAI-ARIA Menu or Menu bar (widget) design pattern, however we also try to respect users' general expectations for the behavior of links in a global navigation. To this end, the accessible mega menu implementation permits tab focus on each of the six top-level menu items. When one of the menu items has focus, pressing the Enter key, Spacebar or Down arrow will open the submenu panel, and pressing the Left or Right arrow key will shift focus to the adjacent menu item. Links within the submenu panels are included in the tab order when the panel is open. They can also be navigated with the arrow keys or by typing the first character in the link name, which speeds up keyboard navigation considerably. Pressing the Escape key closes the submenu and restores focus to the parent menu item. Screen Reader Accessibility The accessible mega menu models its use of WAI-ARIA Roles, States, and Properties after those described in the WAI-ARIA Menu or Menu bar (widget) design pattern with some notable exceptions, so that it behaves better with screen reader user expectations for global navigation. We don't use role=""menu"" for the menu container and role=""menuitem"" for each of the links therein, because if we do, assistive technology will no longer interpret the links as links, but instead, as menu items, and the links in our global navigation will no longer show up when a screen reader user executes a shortcut command to bring up a list of links in the page. We also want to maintain the semantic structure of the submenu panels in our mega menu; our links are organized into lists and separated by headings. Omitting role=""menu"" and role=""menuitem"" for the global navigation seems the safer way to go. Usage HTML The HTML structure for the mega menu is a nav element, or any other container element, containing a list. Each list item contains a link which is followed by a div or any other container element which will serve as the pop up panel. The panel can contain any html content; in the following example, each panel contains three lists of links. You can explicitly define groups within the panel, between which a user can navigate quickly using the left and right arrow keys; in the following example, the CSS class .sub-nav-group identifies a navigable group.     <nav>         <ul class=""nav-menu"">             <li class=""nav-item"">                 <a href=""?movie"">Movies</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=0"">Action &amp; Adventure</a></li>                         <li><a href=""?movie&genre=2"">Children &amp; Family</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=7"">Dramas</a></li>                         <li><a href=""?movie&genre=9"">Foreign</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=14"">Musicals</a></li>                         <li><a href=""?movie&genre=15"">Romance</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>             <li class=""nav-item"">                 <a href=""?tv"">TV Shows</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=20"">Classic TV</a></li>                         <li><a href=""?tv&genre=21"">Crime TV</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=27"">Reality TV</a></li>                         <li><a href=""?tv&genre=30"">TV Action</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=33"">TV Dramas</a></li>                         <li><a href=""?tv&genre=34"">TV Horror</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>         </ul>     </nav> By default, accessibleMegaMenu uses the the following CSS classes to define the top-level navigation items, panels, groups within the panels, and the hover, focus, and open states. It also defines a prefix for unique id strings, which are required to indicate the relationship of a top-level navigation item to the panel it controls.     defaults = {         /* unique ID's are required to indicate aria-owns, aria-controls and aria-labelledby */         uuidPrefix: ""accessible-megamenu"",                  /* default css class used to define the megamenu styling */         menuClass: ""accessible-megamenu"",                  /* default css class for a top-level navigation item in the megamenu */         topNavItemClass: ""accessible-megamenu-top-nav-item"",                  /* default css class for a megamenu panel */         panelClass: ""accessible-megamenu-panel"",                  /* default css class for a group of items within a megamenu panel */         panelGroupClass: ""accessible-megamenu-panel-group"",                  /* default css class for the hover state */         hoverClass: ""hover"",                  /* default css class for the focus state */         focusClass: ""focus"",                  /* default css class for the open state */         openClass: ""open""      } You can optionally override the defaults to use the CSS classes you may have already defined for your mega menu. JavaScript Be sure to include jQuery and the jquery-accessibleMegaMenu.js plugin script.     <script src=""//code.jquery.com/jquery-1.10.1.min.js""></script>     <script src=""js/jquery-accessibleMegaMenu.js""></script> The following initializes the first nav element in the document as an accessibleMegaMenu, with optional CSS class overrides.     $(""nav:first"").accessibleMegaMenu({         /* prefix for generated unique id attributes, which are required             to indicate aria-owns, aria-controls and aria-labelledby */         uuidPrefix: ""accessible-megamenu"",                  /* css class used to define the megamenu styling */         menuClass: ""nav-menu"",                  /* css class for a top-level navigation item in the megamenu */         topNavItemClass: ""nav-item"",                  /* css class for a megamenu panel */         panelClass: ""sub-nav"",                  /* css class for a group of items within a megamenu panel */         panelGroupClass: ""sub-nav-group"",                  /* css class for the hover state */         hoverClass: ""hover"",                  /* css class for the focus state */         focusClass: ""focus"",                  /* css class for the open state */         openClass: ""open""     }); CSS AccessibleMegaMenu handles the showing and hiding of panels by adding or removing a CSS class. No inline styles are added to hide elements or create animation between states. Following is some rudimentary CSS for our example which enables the showing/hiding of and the layout of lists panels in the mega menu.     /* mega menu list */     .nav-menu {         display: block;         position: relative;         list-style: none;         margin: 0;         padding: 0;         z-index: 15;     }     /* a top level navigation item in the mega menu */     .nav-item {         list-style: none;         display: inline-block;         padding: 0;         margin: 0;     }     /* first descendant link within a top level navigation item */     .nav-item > a {         position: relative;         display: inline-block;         padding: 0.5em 1em;         margin: 0 0 -1px 0;         border: 1px solid transparent;     }     /* focus/open states of first descendant link within a top level         navigation item */     .nav-item > a:focus,     .nav-item > a.open {         border: 1px solid #dedede;     }     /* open state of first descendant link within a top level         navigation item */     .nav-item > a.open {         background-color: #fff;         border-bottom: none;         z-index: 1;     }     /* sub-navigation panel */     .sub-nav {         position: absolute;         display: none;         top: 2.2em;         margin-top: -1px;         padding: 0.5em 1em;         border: 1px solid #dedede;         background-color: #fff;     }     /* sub-navigation panel open state */     .sub-nav.open {         display: block;     }     /* list of items within sub-navigation panel */     .sub-nav ul {         display: inline-block;         vertical-align: top;         margin: 0 1em 0 0;         padding: 0;     }     /* list item within sub-navigation panel */     .sub-nav li {         display: block;         list-style-type: none;         margin: 0;         padding: 0;     }   Putting it all together, here is the completed example:     <!doctype html>     <html lang=""en"">     <head>     <meta charset=""UTF-8"">     <title>Simple Accessible Mega Menu Example</title>     <style>         /* Rudimentary mega menu CSS for demonstration */             /* mega menu list */         .nav-menu {             display: block;             position: relative;             list-style: none;             margin: 0;             padding: 0;             z-index: 15;         }         /* a top level navigation item in the mega menu */         .nav-item {             list-style: none;             display: inline-block;             padding: 0;             margin: 0;         }         /* first descendant link within a top level navigation item */         .nav-item > a {             position: relative;             display: inline-block;             padding: 0.5em 1em;             margin: 0 0 -1px 0;             border: 1px solid transparent;         }         /* focus/open states of first descendant link within a top level             navigation item */         .nav-item > a:focus,         .nav-item > a.open {             border: 1px solid #dedede;         }         /* open state of first descendant link within a top level             navigation item */         .nav-item > a.open {             background-color: #fff;             border-bottom: none;             z-index: 1;         }         /* sub-navigation panel */         .sub-nav {             position: absolute;             display: none;             top: 2.2em;             margin-top: -1px;             padding: 0.5em 1em;             border: 1px solid #dedede;             background-color: #fff;         }         /* sub-navigation panel open state */         .sub-nav.open {             display: block;         }         /* list of items within sub-navigation panel */         .sub-nav ul {             display: inline-block;             vertical-align: top;             margin: 0 1em 0 0;             padding: 0;         }         /* list item within sub-navigation panel */         .sub-nav li {             display: block;             list-style-type: none;             margin: 0;             padding: 0;         }          </style>     </head>     <body>     <nav>         <ul class=""nav-menu"">             <li class=""nav-item"">                 <a href=""?movie"">Movies</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=0"">Action &amp; Adventure</a></li>                         <li><a href=""?movie&genre=2"">Children &amp; Family</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=7"">Dramas</a></li>                         <li><a href=""?movie&genre=9"">Foreign</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?movie&genre=14"">Musicals</a></li>                         <li><a href=""?movie&genre=15"">Romance</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>             <li class=""nav-item"">                 <a href=""?tv"">TV Shows</a>                 <div class=""sub-nav"">                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=20"">Classic TV</a></li>                         <li><a href=""?tv&genre=21"">Crime TV</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=27"">Reality TV</a></li>                         <li><a href=""?tv&genre=30"">TV Action</a></li>                         <li>&#8230;</li>                     </ul>                     <ul class=""sub-nav-group"">                         <li><a href=""?tv&genre=33"">TV Dramas</a></li>                         <li><a href=""?tv&genre=34"">TV Horror</a></li>                         <li>&#8230;</li>                     </ul>                 </div>             </li>         </ul>     </nav>          <!-- include jquery -->     <script src=""//code.jquery.com/jquery-1.10.1.min.js""></script>     <!-- include the jquery-accessibleMegaMenu plugin script -->     <script src=""js/jquery-accessibleMegaMenu.js""></script>     <!-- initialize a selector as an accessibleMegaMenu -->     <script>         $(""nav:first"").accessibleMegaMenu({             /* prefix for generated unique id attributes, which are required                 to indicate aria-owns, aria-controls and aria-labelledby */             uuidPrefix: ""accessible-megamenu"",                          /* css class used to define the megamenu styling */             menuClass: ""nav-menu"",                          /* css class for a top-level navigation item in the megamenu */             topNavItemClass: ""nav-item"",                          /* css class for a megamenu panel */             panelClass: ""sub-nav"",                          /* css class for a group of items within a megamenu panel */             panelGroupClass: ""sub-nav-group"",                          /* css class for the hover state */             hoverClass: ""hover"",                          /* css class for the focus state */             focusClass: ""focus"",                          /* css class for the open state */             openClass: ""open""         });     </script>     </body>     </html> About A demonstration of how to implement a keyboard and screen reader accessible mega menu as a jQuery plugin. Resources Readme License Apache-2.0 License Releases No releases published Packages 0 No packages published Contributors 7 Languages HTML 71.8% CSS 26.4% JavaScript 1.8% © 2021 GitHub, Inc. Terms Privacy Security Status Docs Contact GitHub Pricing API Training Blog About You can’t perform that action at this time. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."
755527,20211008,github.com,https://github.com/crypto-browserify/crypto-browserify,text/html,text/html,en,"GitHub - crypto-browserify/crypto-browserify: partial implementation of node's `crypto` for the browser Skip to content Sign up Why GitHub? Features → Mobile → Actions → Codespaces → Packages → Security → Code review → Issues → Integrations → GitHub Sponsors → Customer stories→ Team Enterprise Explore Explore GitHub → Learn and contribute Topics → Collections → Trending → Learning Lab → Open source guides → Connect with others The ReadME Project → Events → Community forum → GitHub Education → GitHub Stars program → Marketplace Pricing Plans → Compare plans → Contact Sales → Education → In this repository All GitHub ↵ Jump to ↵ No suggested jump to results In this repository All GitHub ↵ Jump to ↵ In this organization All GitHub ↵ Jump to ↵ In this repository All GitHub ↵ Jump to ↵ Sign in Sign up {{ message }} crypto-browserify / crypto-browserify Public Notifications Star 500 Fork 159 partial implementation of node's `crypto` for the browser MIT License 500 stars 159 forks Star Notifications Code Issues 24 Pull requests 6 Actions Projects 0 Wiki Security Insights More Code Issues Pull requests Actions Projects Wiki Security Insights master Switch branches/tags Branches Tags Could not load branches Nothing to show {{ refName }} default View all branches Could not load tags Nothing to show {{ refName }} default View all tags 6 branches 31 tags Code Latest commit calvinmetcalf fix debian issue (maybe) … 460a13b Feb 9, 2018 fix debian issue (maybe) 460a13b Git stats 362 commits Files Permalink Failed to load latest commit information. Type Name Latest commit message Commit time example add standard 5.0.0 Aug 13, 2015 test fix debian issue (maybe) Feb 9, 2018 .gitignore Add .gitignore Aug 5, 2013 .travis.yml saucelabs aparently only goes back to 7 Oct 19, 2017 .zuul.yml add zuul and browser tests Oct 3, 2015 LICENSE Add MIT license Sep 20, 2013 README.md add privateEncrypt/publicDecrypt to README Dec 14, 2015 index.js add rndom fill Oct 18, 2017 package.json 3.12.0 Nov 3, 2017 View code crypto-browserify todo contributions License README.md crypto-browserify A port of node's crypto module to the browser. The goal of this module is to reimplement node's crypto module, in pure javascript so that it can run in the browser. Here is the subset that is currently implemented: createHash (sha1, sha224, sha256, sha384, sha512, md5, rmd160) createHmac (sha1, sha224, sha256, sha384, sha512, md5, rmd160) pbkdf2 pbkdf2Sync randomBytes pseudoRandomBytes createCipher (aes) createDecipher (aes) createDiffieHellman createSign (rsa, ecdsa) createVerify (rsa, ecdsa) createECDH (secp256k1) publicEncrypt/privateDecrypt (rsa) privateEncrypt/publicDecrypt (rsa) todo these features from node's crypto are still unimplemented. createCredentials contributions If you are interested in writing a feature, please implement as a new module, which will be incorporated into crypto-browserify as a dependency. All deps must be compatible with node's crypto (generate example inputs and outputs with node, and save base64 strings inside JSON, so that tests can run in the browser. see sha.js Crypto is extra serious so please do not hesitate to review the code, and post comments if you do. License MIT About partial implementation of node's `crypto` for the browser Resources Readme License MIT License Releases 31 tags Packages 0 No packages published Used by 6.6m + 6,557,342 Contributors 24 + 13 contributors Languages JavaScript 99.1% HTML 0.9% © 2021 GitHub, Inc. Terms Privacy Security Status Docs Contact GitHub Pricing API Training Blog About You can’t perform that action at this time. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."
755558,20211008,github.com,https://github.com/indutny/elliptic/issues,text/html,text/html,en,"Issues · indutny/elliptic · GitHub Skip to content Sign up Why GitHub? Features → Mobile → Actions → Codespaces → Packages → Security → Code review → Issues → Integrations → GitHub Sponsors → Customer stories→ Team Enterprise Explore Explore GitHub → Learn and contribute Topics → Collections → Trending → Learning Lab → Open source guides → Connect with others The ReadME Project → Events → Community forum → GitHub Education → GitHub Stars program → Marketplace Pricing Plans → Compare plans → Contact Sales → Education → In this repository All GitHub ↵ Jump to ↵ No suggested jump to results In this repository All GitHub ↵ Jump to ↵ In this user All GitHub ↵ Jump to ↵ In this repository All GitHub ↵ Jump to ↵ Sign in Sign up {{ message }} indutny / elliptic Public Notifications Star 1.3k Fork 315 Code Issues 79 Pull requests 21 Actions Projects 0 Wiki Security Insights More Code Issues Pull requests Actions Projects Wiki Security Insights Labels 8 Milestones 0 Labels 8 Milestones 0 New issue Have a question about this project? Sign up for a free GitHub account to open an issue and contact its maintainers and the community. Sign up for GitHub By clicking “Sign up for GitHub”, you agree to our terms of service and privacy statement. We’ll occasionally send you account related emails. Already on GitHub? Sign in to your account 79 Open 97 Closed 79 Open 97 Closed Author Filter by author author: Filter by this user Label Filter by label Use alt + click/return to exclude labels or ⇧ + click/return for logical OR Projects Filter by project Milestones Filter by milestone Assignee Filter by who’s assigned Sort Sort by Newest Oldest Most commented Least commented Recently updated Least recently updated Most reactions 👍 👎 😄 🎉 😕 ❤️ 🚀 👀 How can i use this library with cdn?? #264 opened Sep 4, 2021 by ghost invalid y value for curve for new EC('p256') #263 opened Jul 28, 2021 by congminh090800 Invalid hashed data sign with EDDSA #262 opened Jul 6, 2021 by samuel-uniris Point multiplication gives different results based on order of operattions #260 opened Jun 16, 2021 by kot-begemot 3 deriving private key from public key #257 opened Apr 27, 2021 by madhav-madhusoodanan How to use keys with crypto.subtle #255 opened Apr 1, 2021 by DominicTobias-b1 EDDSA.decodeInt should fails or reduce by dafault? #254 opened Mar 18, 2021 by mahnunchik Sad state #251 opened Mar 11, 2021 by berkus 1 EDDSA.decodePoint should fails on ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff #250 opened Mar 3, 2021 by mahnunchik 15 Add endian argument to bn.js toString method #249 opened Mar 2, 2021 by mahnunchik EDDSA decodePoint doesn't support Buffer as argument #248 opened Mar 2, 2021 by mahnunchik How to decipher the encrypted message? #245 opened Jan 27, 2021 by istabraq-iot Montgomery Curve25519 is not openssl compatible #243 opened Dec 28, 2020 by jc-lab 4 Curves p384 and p521 produce incorrect results #239 opened Oct 18, 2020 by guidovranken 1 i want to use this library with c# #238 opened Oct 10, 2020 by medozeus Elliptic.js support following curve types: #236 opened Oct 5, 2020 by medozeus The Elliptic package 6.5.2 for Node.js allows ECDSA signature malleability via variations in encoding, leading '\0' bytes, or integer overflows. #235 opened Oct 1, 2020 by bsomeshwer EdDSA: What is a reason to manipulate with bytes? #233 opened Aug 27, 2020 by mahnunchik why use derive method get ECDH key，i got different length #230 opened Jul 10, 2020 by cqupt-yifanwu 4 Why do I generate my local test path in chunk-vendors when packing with NPM #229 opened Jun 22, 2020 by Anthonychen1994 1 TypedArray support ? #228 opened Jun 20, 2020 by dojyorin Is there way to generate PKCS#8 private key from Pem format ECC Private key #225 opened Apr 28, 2020 by sureshreddygovindu Signature validation in python. Prefix configuration? #224 opened Apr 25, 2020 by amrbz is it possible to do assymetric encryption? #223 opened Apr 7, 2020 by maroodb 1 Missing infinity point encoding #218 opened Feb 21, 2020 by catenacyber 1 Previous 1 2 3 4 Next Previous Next ProTip! Updated in the last three days: updated:>2021-10-05. © 2021 GitHub, Inc. Terms Privacy Security Status Docs Contact GitHub Pricing API Training Blog About You can’t perform that action at this time. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."
755606,20211008,github.com,https://github.com/indutny/elliptic,text/html,text/html,en,"GitHub - indutny/elliptic: Fast Elliptic Curve Cryptography in plain javascript Skip to content Sign up Why GitHub? Features → Mobile → Actions → Codespaces → Packages → Security → Code review → Issues → Integrations → GitHub Sponsors → Customer stories→ Team Enterprise Explore Explore GitHub → Learn and contribute Topics → Collections → Trending → Learning Lab → Open source guides → Connect with others The ReadME Project → Events → Community forum → GitHub Education → GitHub Stars program → Marketplace Pricing Plans → Compare plans → Contact Sales → Education → In this repository All GitHub ↵ Jump to ↵ No suggested jump to results In this repository All GitHub ↵ Jump to ↵ In this user All GitHub ↵ Jump to ↵ In this repository All GitHub ↵ Jump to ↵ Sign in Sign up {{ message }} indutny / elliptic Public Notifications Star 1.3k Fork 315 Fast Elliptic Curve Cryptography in plain javascript 1.3k stars 315 forks Star Notifications Code Issues 79 Pull requests 21 Actions Projects 0 Wiki Security Insights More Code Issues Pull requests Actions Projects Wiki Security Insights master Switch branches/tags Branches Tags Could not load branches Nothing to show {{ refName }} default View all branches Could not load tags Nothing to show {{ refName }} default View all tags 2 branches 85 tags Code Latest commit indutny 6.5.4 … 43ac7f2 Feb 2, 2021 6.5.4 43ac7f2 Git stats 331 commits Files Permalink Failed to load latest commit information. Type Name Latest commit message Commit time benchmarks dist lib test .codeclimate.yml .eslintignore .eslintrc.js .gitignore .npmignore .travis.yml Gruntfile.js README.md package-lock.json package.json View code Elliptic Incentive Benchmarks API ECDSA EdDSA ECDH Supported curves Implementation details Related projects LICENSE README.md Elliptic Fast elliptic-curve cryptography in a plain javascript implementation. NOTE: Please take a look at http://safecurves.cr.yp.to/ before choosing a curve for your cryptography operations. Incentive ECC is much slower than regular RSA cryptography, the JS implementations are even more slower. Benchmarks $ node benchmarks/index.js Benchmarking: sign elliptic#sign x 262 ops/sec ±0.51% (177 runs sampled) eccjs#sign x 55.91 ops/sec ±0.90% (144 runs sampled) ------------------------ Fastest is elliptic#sign ======================== Benchmarking: verify elliptic#verify x 113 ops/sec ±0.50% (166 runs sampled) eccjs#verify x 48.56 ops/sec ±0.36% (125 runs sampled) ------------------------ Fastest is elliptic#verify ======================== Benchmarking: gen elliptic#gen x 294 ops/sec ±0.43% (176 runs sampled) eccjs#gen x 62.25 ops/sec ±0.63% (129 runs sampled) ------------------------ Fastest is elliptic#gen ======================== Benchmarking: ecdh elliptic#ecdh x 136 ops/sec ±0.85% (156 runs sampled) ------------------------ Fastest is elliptic#ecdh ======================== API ECDSA var EC = require('elliptic').ec; // Create and initialize EC context // (better do it once and reuse it) var ec = new EC('secp256k1'); // Generate keys var key = ec.genKeyPair(); // Sign the message's hash (input must be an array, or a hex-string) var msgHash = [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ]; var signature = key.sign(msgHash); // Export DER encoded signature in Array var derSign = signature.toDER(); // Verify signature console.log(key.verify(msgHash, derSign)); // CHECK WITH NO PRIVATE KEY var pubPoint = key.getPublic(); var x = pubPoint.getX(); var y = pubPoint.getY(); // Public Key MUST be either: // 1) '04' + hex string of x + hex string of y; or // 2) object with two hex string properties (x and y); or // 3) object with two buffer properties (x and y) var pub = pubPoint.encode('hex');                                 // case 1 var pub = { x: x.toString('hex'), y: y.toString('hex') };         // case 2 var pub = { x: x.toBuffer(), y: y.toBuffer() };                   // case 3 var pub = { x: x.toArrayLike(Buffer), y: y.toArrayLike(Buffer) }; // case 3 // Import public key var key = ec.keyFromPublic(pub, 'hex'); // Signature MUST be either: // 1) DER-encoded signature as hex-string; or // 2) DER-encoded signature as buffer; or // 3) object with two hex-string properties (r and s); or // 4) object with two buffer properties (r and s) var signature = '3046022100...'; // case 1 var signature = new Buffer('...'); // case 2 var signature = { r: 'b1fc...', s: '9c42...' }; // case 3 // Verify signature console.log(key.verify(msgHash, signature)); EdDSA var EdDSA = require('elliptic').eddsa; // Create and initialize EdDSA context // (better do it once and reuse it) var ec = new EdDSA('ed25519'); // Create key pair from secret var key = ec.keyFromSecret('693e3c...'); // hex string, array or Buffer // Sign the message's hash (input must be an array, or a hex-string) var msgHash = [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ]; var signature = key.sign(msgHash).toHex(); // Verify signature console.log(key.verify(msgHash, signature)); // CHECK WITH NO PRIVATE KEY // Import public key var pub = '0a1af638...'; var key = ec.keyFromPublic(pub, 'hex'); // Verify signature var signature = '70bed1...'; console.log(key.verify(msgHash, signature)); ECDH var EC = require('elliptic').ec; var ec = new EC('curve25519'); // Generate keys var key1 = ec.genKeyPair(); var key2 = ec.genKeyPair(); var shared1 = key1.derive(key2.getPublic()); var shared2 = key2.derive(key1.getPublic()); console.log('Both shared secrets are BN instances'); console.log(shared1.toString(16)); console.log(shared2.toString(16)); three and more members: var EC = require('elliptic').ec; var ec = new EC('curve25519'); var A = ec.genKeyPair(); var B = ec.genKeyPair(); var C = ec.genKeyPair(); var AB = A.getPublic().mul(B.getPrivate()) var BC = B.getPublic().mul(C.getPrivate()) var CA = C.getPublic().mul(A.getPrivate()) var ABC = AB.mul(C.getPrivate()) var BCA = BC.mul(A.getPrivate()) var CAB = CA.mul(B.getPrivate()) console.log(ABC.getX().toString(16)) console.log(BCA.getX().toString(16)) console.log(CAB.getX().toString(16)) NOTE: .derive() returns a BN instance. Supported curves Elliptic.js support following curve types: Short Weierstrass Montgomery Edwards Twisted Edwards Following curve 'presets' are embedded into the library: secp256k1 p192 p224 p256 p384 p521 curve25519 ed25519 NOTE: That curve25519 could not be used for ECDSA, use ed25519 instead. Implementation details ECDSA is using deterministic k value generation as per RFC6979. Most of the curve operations are performed on non-affine coordinates (either projective or extended), various windowing techniques are used for different cases. All operations are performed in reduction context using bn.js, hashing is provided by hash.js Related projects eccrypto: isomorphic implementation of ECDSA, ECDH and ECIES for both browserify and node (uses elliptic for browser and secp256k1-node for node) LICENSE This software is licensed under the MIT License. Copyright Fedor Indutny, 2014. Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the ""Software""), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. About Fast Elliptic Curve Cryptography in plain javascript Resources Readme Releases 85 tags Packages 0 No packages published Used by 6.5m + 6,482,192 Contributors 25 + 14 contributors Languages JavaScript 99.3% HTML 0.7% © 2021 GitHub, Inc. Terms Privacy Security Status Docs Contact GitHub Pricing API Training Blog About You can’t perform that action at this time. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."
